//
//      Class for symbols for built-in meta-level operations.
//
#ifndef _metaLevelOpSymbol_hh_
#define _metaLevelOpSymbol_hh_
#ifdef __GNUG__
#pragma interface
#endif
#include "freeSymbol.hh"

class MetaLevelOpSymbol : public FreeSymbol
{
  NO_COPYING(MetaLevelOpSymbol);

public:
  MetaLevelOpSymbol(int id, int nrArgs);
  ~MetaLevelOpSymbol();

  bool attachData(const Vector<Sort*>& opDeclaration,
		  const char* purpose,
		  const Vector<const char*>& data);
  bool attachSymbol(const char* purpose, Symbol* symbol);
  bool attachTerm(const char* purpose, Term* term);
  void copyAttachments(Symbol* original, SymbolMap* map);

  void postInterSymbolPass();
  void reset();
  bool eqRewrite(DagNode* subject, RewritingContext& context);

private:
  typedef bool (MetaLevelOpSymbol::*DescentFunctionPtr)
    (FreeDagNode* subject, RewritingContext& context);

  static DagNode* term2Dag(Term* t);
  static RewritingContext* term2RewritingContext(Term* term, RewritingContext& context);
  static bool getCachedRewriteSearchState(MetaModule* m,
					  FreeDagNode* subject,
					  RewritingContext& context,
					  Int64 solutionNr,
					  RewriteSearchState*& state,
					  Int64& lastSolutionNr);
  static bool getCachedMatchSearchState(MetaModule* m,
					FreeDagNode* subject,
					RewritingContext& context,
					Int64 solutionNr,
					MatchSearchState*& state,
					Int64& lastSolutionNr);
  static bool getCachedRewriteSequenceSearch(MetaModule* m,
					     FreeDagNode* subject,
					     RewritingContext& context,
					     Int64 solutionNr,
					     RewriteSequenceSearch*& search,
					     Int64& lastSolutionNr);

  MatchSearchState* makeMatchSearchState(MetaModule* m,
					 FreeDagNode* subject,
					 RewritingContext& context) const;
  MatchSearchState* makeMatchSearchState2(MetaModule* m,
					  FreeDagNode* subject,
					  RewritingContext& context) const;
  RewriteSequenceSearch* makeRewriteSequenceSearch(MetaModule* m,
						   FreeDagNode* subject,
						   RewritingContext& context) const;

  bool okToBind();
  bool downSearchType(DagNode* arg, RewriteSequenceSearch::SearchType& searchType) const;

  //
  //	Descent signature (generated by macro expansion).
  //
#define MACRO(SymbolName, NrArgs) \
  bool SymbolName(FreeDagNode* subject, RewritingContext& context);
#include "descentSignature.cc"
#undef MACRO

  bool noDuplicates(const Vector<Term*>& terms);
  bool dagifySubstitution(const Vector<Term*>& variables,
			  Vector<Term*>& values,
			  Vector<DagRoot*>& dags,
			  RewritingContext& context);
  void initializeSubstitution(Vector<Symbol*>& variables,
			      Vector<Term*>& values,
			      VariableInfo& rule,
			      Substitution& substitution);

  DescentFunctionPtr descentFunction;
  MetaLevel* metaLevel;
  MetaLevelOpSymbol* shareWith;
};

#endif
