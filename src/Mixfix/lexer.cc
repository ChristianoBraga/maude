/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 161
#define YY_END_OF_BUFFER 162
static yyconst short int yy_accept[849] =
    {   0,
      158,  158,  158,  158,  158,  158,  147,  147,  149,  149,
        0,    0,  162,  160,  158,  159,  159,   94,  160,   92,
       94,   94,   94,   92,   93,   93,   94,  160,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   14,   94,   94,   94,   94,   94,   94,   94,
      146,  160,  144,  144,  144,  146,  144,  146,  160,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,   98,  160,
       96,   98,   96,   98,   98,   97,   96,   98,  160,   98,
       98,  148,  147,  161,  149,  150,  157,  151,  156,  156,

      152,  153,  151,  154,  155,  158,   94,    0,   94,    0,
        0,    0,   94,   94,   93,    0,   94,   94,   94,   94,
       10,   94,   94,   94,   94,   94,   39,   94,   94,   69,
       94,   94,   94,   94,   94,   94,   94,   57,   94,    5,
       94,   94,   94,   13,   94,   68,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   34,   66,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   70,   94,   94,   94,
       94,   94,   94,    6,   94,   94,   94,   94,   94,   94,
       94,   94,   94,  146,    0,  145,  146,    0,    0,    0,
      146,  146,  141,  142,    0,  146,  146,  146,  146,  146,

      137,  146,  146,  146,  146,  136,  125,  146,  146,  146,
      146,  124,  146,  123,  146,  146,  146,  146,  134,  146,
      146,  146,  130,  146,  125,  146,  138,  146,  146,  146,
      146,  146,   99,  125,  146,  143,   98,    0,   98,    0,
        0,    0,   98,   98,    0,   95,   97,    0,    5,  148,
      147,  149,  151,  151,   94,    0,    2,    2,   94,   94,
       94,   62,   94,   94,   61,   94,   94,   94,   94,   94,
       94,   94,   94,   15,   69,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   68,
       94,   94,    6,   26,   94,   94,   35,   94,   66,   94,

       94,   94,   94,   94,   94,   94,    9,   94,   91,   18,
       94,   94,   20,   70,   94,   94,   94,   32,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   67,   94,   94,
       94,   94,   94,   94,  146,    0,    2,    2,  146,  146,
      135,  146,  146,  139,  146,  146,  146,  146,  146,  146,
      146,  146,  103,  146,  125,  146,  140,  146,  146,  146,
      146,  146,  118,  117,  146,  131,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  133,   98,    0,    2,
        2,    0,    0,    0,    0,    2,    2,    2,    1,    2,
        2,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       47,   25,   94,   19,   94,   94,   84,   21,   94,   94,
       53,   94,   22,   94,   94,   94,   94,    8,   24,   94,
        3,   94,   94,   94,   17,   94,    7,   23,   94,   94,
       87,   12,   94,   94,   94,   94,   14,   94,   94,   94,
       94,   94,   70,   94,   94,   33,   65,   94,   82,   94,
       94,   58,   94,   94,   94,   67,   94,   94,   94,   54,
       94,   94,    0,    0,    2,    2,    2,    1,    2,    2,
      146,  146,  102,  146,  146,  113,  146,  146,  140,  146,
      146,  146,  146,  146,  146,  104,  146,  146,  105,  146,
      146,  106,    3,  146,  132,  146,  146,  112,  108,  146,

      146,  126,  146,  146,  146,  146,  146,  146,  133,    0,
        0,    2,    2,    1,    2,    2,    0,    0,    2,    2,
        1,    1,    1,    1,    1,    2,    2,    2,   81,   94,
       56,   85,   40,   50,   94,   94,   94,   94,   94,   94,
       94,   74,   94,   79,   94,   94,   94,   94,   94,   94,
       94,   51,   94,   72,   88,   27,   94,   94,   94,   94,
       94,   94,   55,   16,   49,   94,   94,   11,   94,   94,
       94,   94,   94,   94,   94,   65,   59,   48,   94,   94,
       36,   30,   94,   83,   42,   94,   94,    2,    2,    1,
        1,    1,    1,    1,    2,    2,    2,  101,  128,  146,

      146,  146,  119,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  100,  114,  146,  146,  146,  146,  146,
      146,  107,  126,  146,  110,  146,  146,  146,  125,    2,
        2,    1,    1,    1,    1,    2,    2,    2,    1,    1,
        1,    1,    1,    2,    2,   37,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       76,   94,    4,   94,   94,   88,   52,   64,   26,   94,
       90,   94,   55,   94,   94,   94,   94,   18,   80,   46,
       94,   29,   43,   94,   94,   60,   94,   28,   31,    1,
        1,    1,    1,    1,    2,    2,  146,  146,  116,  146,

      146,    4,  111,  109,  146,  146,  146,  146,  146,  146,
      117,  146,  146,  146,  146,  146,  146,  146,  146,  146,
        1,    1,    1,    1,    1,    2,    2,    1,    1,   94,
       56,   94,   73,   94,   45,   94,   41,   94,   19,   94,
       94,   78,   94,   94,   77,   63,   94,   94,   94,   89,
       75,   94,   20,   94,   71,   38,    1,    1,  146,  146,
      146,  146,  146,  120,  146,  146,  146,  146,  118,  121,
      146,  146,  146,  115,  146,  146,  127,  146,    1,    1,
       94,   94,   73,   94,   94,   25,   44,   21,   94,   22,
       94,   23,   94,   91,   94,  146,  146,  146,  146,  146,

      146,  146,  146,  105,  146,  146,  146,  110,  129,  127,
      146,   94,   86,   94,   47,   53,   17,   94,   94,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  122,   94,
       94,  146,  146,  146,  146,  104,  146,  108,  129,   94,
      101,  102,  146,  112,   48,  146,  116,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   22,    8,   24,   25,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   13,   53,   54,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    6,    9,    9,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    5,    6
    } ;

static yyconst short int yy_base[894] =
    {   0,
        0,    0,   55,    0,  110,  163,  134,  140,  145,  149,
      216,  271,  333, 5093,  151, 5093, 5093,  167,  171, 5093,
      174, 5093,  180,  184,  187,  219,  205,  196,  226,  222,
      261,  282,  278,  305,  236,  286,  232,  291,  327,  338,
      376,  346,  335,  386,  396,  400,  349,  421,  428,  430,
      366,  215, 5093,  447,  441,  458,  468,  471,  327,  481,
      517,  485,  504,  491,  514,  554,  540,  564,  586,  596,
      608,  610,  629,  552,  633,  647, 5093,  643,  264,  231,
     5093,  284, 5093,  493,  676,  527,  374,  461,  676,  562,
     5093,    0,  116, 5093,    0, 5093, 5093,    0, 5093, 5093,

     5093, 5093,  149, 5093, 5093,  442,  479,  269,  572,  682,
      274,  310,  616,  688,  690,  695,  582,  637,  686,  707,
      641,  715,  717,  727,  729,  747,  751,  754,  758,  760,
      771,  778,  784,  788,  790,  796,  807,  810,  813,  818,
      820,  827,  832,  838,  840,  844,  846,  851,  857,  865,
      868,  871,  878,  874,  882,  892,  895,  901,  903,  909,
      920,  912,  933,  940,  942,  944,  946,  952,  969,  972,
      974,  977,  991,  995,  999, 1001, 1019, 1021, 1023, 1025,
     1027, 1032, 1045, 1051,  296, 1062, 1064, 1081,  323,  281,
     1084, 1089, 1101, 1103, 1110, 1106, 1127, 1129, 1132, 1149,

     1151, 1155, 1161, 1173, 1175, 1186, 1196, 1199, 1210, 1213,
     1224, 1235, 1237, 1247, 1257, 1259, 1261, 1280, 1284, 1294,
     1298, 1304, 1318, 1328, 1331, 1342, 1348, 1354, 1359, 1371,
     1376, 1382, 1393, 1395, 1399, 1412, 1169,  395, 1207, 1421,
      399,  264, 1255, 1424, 1448, 5093, 1447, 1447, 1267,    0,
      131,    0,    0, 5093, 1292,  404, 1500, 1553, 1453, 1457,
     1459, 1470, 1481, 1493, 1488, 1506, 1517, 1511, 1520, 1541,
     1523, 1559, 1562, 1567, 1570, 1572, 1576, 1584, 1593, 1598,
     1601, 1606, 1610, 1612, 1619, 1631, 1633, 1641, 1643, 1650,
     1654, 1660, 1663, 1668, 1672, 1674, 1680, 1691, 1693, 1697,

     1699, 1703, 1710, 1716, 1722, 1724, 1735, 1741, 1745, 1747,
     1749, 1752, 1759, 1766, 1776, 1772, 1779, 1783, 1789, 1796,
     1801, 1803, 1807, 1809, 1815, 1829, 1834, 1839, 1843, 1847,
     1851, 1853, 1857, 1860, 1871,  455, 1902, 1955, 1905, 1884,
     1916, 1922, 1860, 1926, 1958, 1928, 1955, 1972, 1989, 1994,
     2000, 2006, 2012, 2025, 2031, 2035, 2037, 2049, 2060, 2071,
     2073, 2077, 2083, 2094, 2106, 2116, 2119, 2129, 2139, 2142,
     2152, 2162, 2156, 2176, 2186, 2182, 2203, 1924,  489, 2247,
     2300,  247,  237,  512,  239,    0,  213, 2222, 2353,  106,
     2406, 1966, 2164, 2190, 2208, 2216, 2230, 2240, 2251, 2213,

     2125, 2253, 2270, 2272, 2281, 2283, 2303, 2307, 2310, 2320,
     2324, 2314, 2317, 2346, 2349, 2356, 2359, 2363, 2367, 2388,
     2377, 2384, 2402, 2410, 2416, 2413, 2420, 2423, 2437, 2427,
     2440, 2444, 2446, 2454, 2465, 2458, 2468, 2472, 2475, 2477,
     2485, 2489, 2495, 2497, 2507, 2509, 2517, 2519, 2521, 2527,
     2529, 2540, 2549, 2551, 2553, 2558, 2560, 2562, 2571, 2580,
     2582, 2584,  549,  230,  211, 2610,  202, 2633,  237, 2686,
     2604, 2615, 2629, 2647, 2653, 2658, 2664, 2690, 2693, 2696,
     2716, 2718, 2721, 2738, 2740, 2750, 2760, 2762, 2772, 2785,
     2790, 2795, 2807, 2809, 2812, 2829, 2831, 2834, 2851, 2853,

     2864, 2870, 2876, 2881, 2887, 2904, 2906, 2909, 2923,  591,
      210,  182, 2936, 2959,  344, 3012,  188,  175, 2948,  718,
        0, 3065, 2949,  159, 3118, 2965,  150, 2973, 2626, 2969,
     2840, 2748, 2667, 2698, 2976, 2758, 2980, 2982, 3005, 2817,
     3015, 2937, 3018, 2942, 3023, 3036, 3043, 3053, 3071, 3075,
     3079, 3032, 3082, 3084, 3101, 3106, 3112, 3114, 3124, 3126,
     3132, 3143, 3149, 3155, 3157, 3160, 3167, 3174, 3177, 3179,
     3181, 3198, 3201, 3203, 3205, 3208, 3215, 3228, 3232, 3234,
     3236, 3239, 3245, 3256, 3258, 3262, 3267, 3289,  754, 3317,
     3293,    0,  136, 3370, 3293,  135, 3328, 3331, 3334, 3348,

     3351, 3373, 3387, 3393, 3390, 3404, 3415, 3418, 3428, 3432,
     3442, 3446, 3464, 3468, 3470, 3474, 3487, 3491, 3501, 3504,
     3514, 3527, 3531, 3537, 3541, 3551, 3563, 3565, 3569, 3595,
     1078, 3618, 3607,  124, 3671, 3300,  109, 3608, 3632, 1409,
     3624,    0, 3643, 3644, 1437, 3299, 3421, 3510, 3649, 3376,
     3596, 3654, 3353, 3674, 3677, 3679, 3681, 3640, 3685, 3688,
     3559, 3707, 3710, 3712, 3717, 3719, 3724, 3729, 3731, 3736,
     3741, 3743, 3750, 3753, 3755, 3767, 3772, 3775, 3778, 3780,
     3784, 3786, 3792, 3797, 3804, 3806, 3809, 3811, 3816, 3842,
     1485, 3834,    0, 3846, 3857, 3501, 3851, 3865, 3854, 3879,

     3883, 3885, 3889, 3902, 3906, 3912, 3923, 3925, 3936, 3946,
     3949, 3963, 3966, 3968, 3980, 3986, 3992, 3997, 4003, 4020,
     4030, 3653, 4004,    0, 4031, 4042, 4060, 4065, 4072, 4046,
     3848, 4053, 3859, 4059, 3929, 4078, 4080, 4082, 4084, 4086,
     4090, 4104, 4108, 4110, 4112, 4117, 4121, 4130, 4134, 4138,
     4141, 4143, 4152, 4160, 4162, 4164, 4174, 4189, 4185, 4189,
     4195, 4199, 4212, 4216, 4230, 4233, 4243, 4247, 4253, 4264,
     4270, 4275, 4281, 4292, 4294, 4304, 4314, 4316, 4342, 4330,
     4220, 4336, 4193, 4338, 4343, 4345, 4348, 4355, 4362, 4365,
     4368, 4372, 4375, 4379, 4385, 4392, 4397, 4409, 4420, 4423,

     4433, 4437, 4443, 4454, 4457, 4460, 4471, 4477, 4482, 4495,
     4499, 4504, 4403, 4507, 4509, 4512, 4516, 4529, 4518, 4540,
     4546, 4551, 4557, 4570, 4574, 4576, 4593, 4595, 4598, 4603,
     4521, 4620, 4624, 4637, 4642, 4648, 4654, 4659, 4665, 4617,
     4671, 4677, 4682, 4688, 4607, 4694, 4699, 5093, 4733, 4742,
     4751, 4760, 4765, 4771, 4776, 4782, 4787, 4793, 4802, 4811,
     4819, 4824, 4828, 4832, 4837, 4846, 4852, 4861, 4867, 4876,
     4885, 4894, 4903, 4912, 4921, 4930, 4939, 4948, 4957, 4966,
     4975, 4984, 4993, 5002, 5011, 5020, 5029, 5038, 5047, 5056,
     5065, 5074, 5083

    } ;

static yyconst short int yy_def[894] =
    {   0,
      848,    1,  848,    3,  849,  849,  850,  850,  851,  851,
      852,  852,  848,  848,  848,  848,  848,  853,  854,  848,
      853,  848,  853,  853,  853,  853,  853,  848,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      855,  856,  848,  855,  855,  855,  855,  855,  848,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  848,  855,  857,  858,
      848,  857,  848,  857,  857,  857,  857,  857,  848,  857,
      848,  859,  848,  848,  860,  848,  848,  861,  848,  848,

      848,  848,  848,  848,  848,  848,  853,  854,  853,  862,
      854,  854,  853,  853,  853,  848,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  855,  856,  855,  855,  863,  856,  856,
      855,  855,  855,  855,  848,  855,  855,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  857,  858,  857,  864,
      858,  858,  857,  857,  848,  848,  857,  848,  857,  859,
      848,  860,  861,  848,  853,  865,  866,  866,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,

      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  855,  867,  868,  868,  855,  855,
      855,  855,   66,  855,  855,  855,   66,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  857,  869,  870,
      870,  848,  848,  865,  865,  871,  258,  872,  873,  258,
      874,  853,  853,  853,  853,  853,  853,  853,  853,  853,

      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  867,  867,  338,  875,  338,  876,  338,  877,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  869,
      869,  381,  878,  879,  381,  880,  848,  848,  872,  872,
      881,  873,  882,  522,  883,  871,  258,  884,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  875,  875,  876,
      885,  590,  590,  886,  871,  338,  887,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  878,
      878,  879,  888,  632,  889,  871,  381,  890,  882,  882,
      881,  522,  891,  884,  884,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  885,
      885,  881,  590,  892,  887,  887,  855,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      888,  888,  881,  632,  893,  890,  890,  891,  891,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  892,  892,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  893,  893,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  855,  855,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  853,  853,  853,  853,  853,  853,  853,  853,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  853,
      853,  855,  855,  855,  855,  855,  855,  855,  855,  853,
      855,  855,  855,  855,  853,  855,  855,    0,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848

    } ;

static yyconst short int yy_nxt[5149] =
    {   0,
       14,   15,   16,   14,   17,   15,   15,   18,   19,   20,
       20,   21,   18,   22,   23,   24,   25,   26,   18,   18,
       18,   20,   18,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   18,   36,   18,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   18,
       18,   22,   22,   18,   18,   14,   15,   16,   14,   17,
       15,   15,   51,   52,   53,   53,   54,   55,   53,   56,
       55,   51,   51,   55,   57,   51,   53,   51,   58,   59,
       60,   51,   61,   62,   63,   64,   65,   51,   66,   67,
       51,   68,   69,   51,   70,   71,   51,   72,   73,   74,

       75,   76,   51,   51,   51,   51,   77,   77,   78,   51,
       14,   15,   16,   14,   17,   15,   15,  251,   80,   81,
       81,   82,  251,   83,   84,   85,  387,   86,   87,  512,
      526,   81,  251,   88,   89,   93,   94,  251,   94,   94,
       93,   93,   94,   90,   94,   94,   93,   96,  723,   96,
       96,   96,  106,   96,   96,  465,  106,  106,  254,  254,
      692,   91,   91,   14,   15,   16,   14,   17,   15,   15,
      387,   80,   81,   81,   82,  108,   83,   84,   85,  107,
       86,   87,  108,  641,   81,  113,   88,   89,  108,  246,
      109,  110,  108,  112,  114,  108,   90,  109,  110,  246,

      254,  254,  512,  109,  110,  109,  109,  109,  110,  109,
      109,  110,  510,  108,   91,   91,   97,  109,   99,   97,
      100,   97,  465,  184,   97,  101,  102,  108,  109,  116,
      108,  465,  463,  387,  108,  115,  115,  190,  103,  237,
      108,  384,  109,  110,  108,  109,  110,  109,  109,  109,
      110,  518,  117,  242,  118,  109,  110,  465,  517,  109,
      110,  595,  119,  138,  120,  141,  241,  104,  105,  108,
       97,   97,  238,   99,   97,  100,   97,  107,  139,   97,
      101,  102,  107,  189,  109,  110,  108,  239,  240,  121,
      108,  112,  238,  103,  108,  243,  112,  122,  123,  108,

      124,  109,  110,  125,  184,  109,  110,  239,  240,  109,
      110,  126,  111,  108,  109,  110,  142,  129,  190,  130,
      131,  127,  104,  105,  140,   97,  132,  128,  109,  110,
      143,  184,  848,  848,  144,  108,  187,  187,  848,  848,
      187,  133,  134,  108,  135,  190,  108,  136,  187,  137,
      109,  110,  145,  146,  108,  848,  147,  108,  109,  110,
      148,  109,  110,  150,  512,  848,  149,  848,  636,  109,
      110,  159,  109,  110,  185,  848,  848,  151,  187,  187,
      164,  186,  238,  152,  108,  160,  848,  177,  161,  187,
      188,  162,  848,  163,  108,  848,  848,  239,  240,  109,

      110,  848,  153,  237,  108,  848,  154,  237,  108,  109,
      110,  165,  255,  155,  156,  166,  157,  242,  158,  109,
      110,  242,  167,  109,  110,  169,  385,  848,  170,  108,
      848,  168,  174,  175,  848,  171,  108,  848,  108,  848,
      172,  173,  176,  106,  109,  110,  178,  106,  106,  185,
      179,  109,  110,  109,  110,  185,  186,  848,  191,  848,
      180,  181,  186,  335,  187,  188,  185,  182,  848,  238,
      187,  188,  192,  186,  848,  183,  185,  464,  193,  185,
      848,  187,  188,  186,  239,  248,  186,  108,  194,  185,
      848,  187,  188,  185,  187,  195,  186,  378,  848,  185,

      186,  238,  109,  110,  187,  188,  186,  244,  187,  188,
      848,  511,  185,  848,  187,  188,  239,  240,  204,  186,
      255,  848,  185,  848,  196,  185,  848,  187,  188,  186,
      208,  848,  186,  209,  385,  238,  848,  187,  188,  210,
      187,  188,  205,  247,  247,  206,  197,  848,  185,  848,
      239,  240,  207,  198,  199,  186,  200,  335,  201,  202,
      185,  203,  185,  187,  188,  848,  216,  186,  848,  186,
      238,  464,  185,  848,  848,  187,  188,  187,  188,  186,
      108,  232,  211,  848,  212,  239,  240,  187,  188,  217,
      108,  233,  213,  218,  185,  109,  116,  214,  215,  378,

      249,  186,  848,  848,  185,  109,  110,  848,  848,  187,
      188,  186,  219,  511,  848,  220,  185,  848,  185,  187,
      188,  259,  222,  186,  108,  186,  848,  257,  848,  221,
      848,  187,  188,  187,  188,  848,  223,  185,  848,  109,
      110,  185,  848,  226,  186,  108,  227,  224,  186,  108,
      225,  185,  187,  188,  848,  185,  187,  188,  186,  848,
      109,  110,  186,  236,  109,  110,  187,  188,  228,  229,
      187,  188,  235,  230,  231,  848,  234,  245,  246,  245,
      245,  245,  245,  260,  238,  239,  239,  848,  848,  239,
      256,  109,  109,  848,  108,  109,  108,  239,  108,  239,

      240,  848,  258,  109,  109,  109,  115,  115,  109,  109,
      110,  109,  110,  109,  110,  108,  109,  848,  386,  261,
      111,  386,  262,  108,  111,  108,  848,  239,  239,  848,
      109,  110,  848,  109,  109,  108,  263,  108,  109,  110,
      109,  110,  848,  848,  264,  265,  109,  109,  848,  848,
      109,  110,  109,  110,  386,  108,  189,  386,  270,  108,
      189,  848,  108,  266,  267,  268,  108,  848,  108,  848,
      109,  110,  269,  271,  109,  110,  848,  109,  110,  108,
      848,  109,  110,  109,  110,  848,  108,  848,  274,  848,
      272,  273,  108,  848,  109,  110,  108,  848,  108,  848,

      276,  109,  110,  275,  108,  277,  848,  109,  110,  279,
      848,  109,  110,  109,  110,  108,  848,  848,  108,  109,
      110,  108,  278,  848,  848,  282,  108,  280,  108,  848,
      109,  110,  281,  109,  110,  108,  109,  110,  283,  174,
      108,  109,  110,  109,  110,  284,  108,  848,  108,  848,
      109,  110,  108,  286,  108,  109,  110,  287,  285,  108,
      848,  109,  110,  109,  110,  108,  848,  109,  110,  109,
      110,  288,  848,  108,  109,  110,  108,  848,  848,  108,
      109,  110,  108,  291,  289,  293,  108,  290,  109,  110,
      108,  109,  110,  848,  109,  110,  848,  109,  110,  292,

      108,  109,  110,  108,  297,  109,  110,  294,  296,  108,
      295,  108,  174,  848,  848,  109,  110,  108,  109,  110,
      108,  298,  848,  848,  109,  110,  109,  110,  108,  848,
      300,  848,  109,  110,  848,  109,  110,  848,  299,  848,
      848,  108,  848,  109,  110,  301,  848,  302,  108,  303,
      108,  848,  108,  304,  108,  306,  109,  110,  848,  305,
      108,  307,  848,  109,  110,  109,  110,  109,  110,  109,
      110,  848,  310,  308,  848,  109,  110,  108,  848,  848,
      108,  848,  108,  848,  848,  108,  309,  311,  315,  314,
      312,  313,  109,  110,  316,  109,  110,  109,  110,  108,

      109,  110,  321,  108,  848,  317,  322,  108,  848,  108,
      848,  319,  848,  318,  109,  110,  320,  323,  109,  110,
      848,  848,  109,  110,  109,  110,  326,  108,  324,  108,
      848,  108,  848,  108,  848,  108,  325,  848,  848,  848,
      108,  848,  109,  110,  109,  110,  109,  110,  109,  110,
      109,  110,  327,  108,  330,  109,  110,  333,  848,  185,
      848,  848,  848,  328,  331,  329,  186,  848,  109,  110,
      185,  332,  185,  848,  187,  188,  848,  186,  386,  186,
      241,  386,  848,  334,  241,  187,  188,  187,  195,  336,
      187,  187,  185,  848,  187,  337,  848,  185,  848,  186,

      848,  848,  187,  338,  186,  848,  848,  187,  188,  185,
      848,  185,  187,  188,  185,  848,  186,  848,  186,  187,
      187,  186,  848,  187,  187,  188,  187,  188,  848,  187,
      188,  187,  187,  187,  848,  185,  848,  185,  848,  848,
      185,  848,  186,  848,  186,  848,  848,  186,  848,  339,
      187,  188,  187,  188,  340,  187,  188,  185,  341,  185,
      848,  187,  187,  185,  186,  848,  186,  848,  201,  185,
      186,  848,  187,  188,  187,  188,  186,  238,  187,  188,
      848,  185,  848,  185,  187,  188,  342,  343,  186,  848,
      186,  344,  239,  240,  185,  848,  187,  188,  187,  188,

      345,  186,  848,  347,  185,  848,  848,  185,  848,  187,
      188,  186,  848,  848,  186,  238,  848,  346,  185,  187,
      188,  185,  187,  188,  848,  186,  848,  848,  186,  848,
      239,  248,  185,  187,  188,  848,  187,  188,  352,  186,
      348,  349,  353,  185,  848,  185,  848,  187,  188,  350,
      186,  848,  186,  354,  848,  185,  848,  351,  187,  188,
      187,  188,  186,  238,  355,  185,  380,  185,  848,  185,
      187,  188,  186,  848,  186,  238,  186,  848,  239,  240,
      187,  188,  187,  188,  187,  188,  356,  358,  185,  848,
      239,  240,  185,  848,  848,  186,  848,  848,  357,  186,

      108,  848,  185,  187,  188,  359,  185,  187,  188,  186,
      360,  848,  185,  186,  848,  109,  110,  187,  188,  186,
      848,  187,  188,  848,  848,  848,  185,  187,  188,  363,
      848,  361,  365,  186,  848,  848,  185,  362,  364,  185,
      848,  187,  188,  186,  848,  848,  186,  848,  848,  848,
      185,  187,  188,  848,  187,  188,  185,  186,  848,  848,
      368,  366,  185,  186,  367,  187,  188,  185,  848,  186,
      369,  187,  188,  370,  186,  848,  848,  187,  188,  185,
      848,  848,  187,  188,  185,  848,  186,  848,  372,  848,
      185,  186,  848,  848,  187,  188,  371,  186,  848,  187,

      188,  185,  374,  185,  848,  187,  188,  185,  186,  521,
      186,  111,  521,  373,  186,  111,  187,  188,  187,  188,
      185,  848,  187,  188,  375,  848,  848,  186,  376,  379,
      239,  239,  238,  848,  239,  187,  188,  386,  381,  384,
      386,  377,  239,  384,  848,  848,  848,  239,  240,  245,
      246,  245,  245,  245,  245,  238,  239,  239,  848,  382,
      239,  108,  383,  247,  247,  108,  848,  108,  239,  848,
      239,  240,  239,  239,  848,  848,  109,  110,  108,  848,
      109,  110,  109,  110,  394,  521,  848,  189,  521,  108,
      393,  189,  848,  109,  110,  392,  108,  848,  239,  239,

      386,  108,  848,  386,  109,  110,  395,  848,  388,  386,
      386,  109,  110,  386,  108,  848,  109,  110,  396,  108,
      389,  386,  848,  390,  391,  108,  848,  848,  108,  109,
      110,  108,  848,  848,  109,  110,  848,  848,  400,  401,
      109,  110,  848,  109,  110,  397,  109,  110,  848,  108,
      848,  386,  386,  386,  398,  402,  386,  399,  403,  848,
      848,  388,  386,  386,  109,  110,  386,  108,  405,  404,
      108,  848,  848,  389,  386,  108,  390,  391,  108,  848,
      108,  848,  109,  110,  108,  109,  110,  848,  406,  848,
      109,  110,  108,  109,  110,  109,  110,  848,  848,  109,

      110,  108,  407,  848,  386,  386,  108,  109,  110,  108,
      848,  848,  409,  410,  108,  848,  109,  110,  108,  408,
      108,  109,  110,  848,  109,  110,  174,  108,  848,  109,
      110,  848,  848,  109,  110,  109,  110,  411,  412,  108,
      848,  108,  109,  110,  848,  848,  848,  416,  415,  108,
      414,  108,  848,  413,  109,  110,  109,  110,  108,  848,
      417,  418,  108,  848,  109,  110,  109,  110,  108,  848,
      420,  108,  848,  109,  110,  848,  108,  109,  110,  848,
      108,  419,  108,  109,  110,  848,  109,  110,  108,  848,
      422,  109,  110,  421,  848,  109,  110,  109,  110,  108,

      426,  108,  848,  109,  110,  108,  848,  108,  423,  425,
      424,  108,  848,  848,  109,  110,  109,  110,  108,  427,
      109,  110,  109,  110,  108,  848,  109,  110,  429,  848,
      108,  848,  108,  109,  110,  431,  848,  848,  432,  109,
      110,  848,  430,  108,  428,  109,  110,  109,  110,  108,
      848,  848,  434,  108,  433,  108,  436,  108,  109,  110,
      108,  848,  848,  848,  109,  110,  435,  108,  109,  110,
      109,  110,  109,  110,  108,  109,  110,  848,  438,  848,
      108,  441,  109,  110,  108,  437,  848,  108,  848,  109,
      110,  108,  439,  848,  440,  109,  110,  108,  848,  109,

      110,  442,  109,  110,  108,  443,  109,  110,  445,  108,
      848,  108,  109,  110,  444,  108,  848,  108,  848,  109,
      110,  848,  848,  108,  109,  110,  109,  110,  848,  848,
      109,  110,  109,  110,  848,  848,  446,  108,  109,  110,
      447,  848,  108,  449,  452,  448,  451,  108,  453,  848,
      450,  108,  109,  110,  848,  108,  454,  109,  110,  108,
      848,  108,  109,  110,  455,  108,  109,  110,  108,  457,
      109,  110,  848,  848,  109,  110,  109,  110,  848,  185,
      109,  110,  456,  109,  110,  460,  186,  459,  184,  458,
      474,  848,  185,  462,  187,  188,  848,  848,  184,  186,

      848,  461,  386,  475,  184,  386,  848,  187,  188,  848,
      466,  386,  386,  185,  848,  386,  848,  467,  848,  848,
      186,  848,  468,  386,  185,  469,  470,  472,  187,  188,
      185,  186,  238,  848,  185,  848,  185,  186,  848,  187,
      188,  186,  848,  186,  471,  187,  188,  239,  240,  187,
      188,  187,  188,  386,  386,  386,  848,  848,  386,  473,
      848,  848,  848,  466,  386,  386,  185,  848,  386,  848,
      467,  848,  477,  186,  108,  468,  386,  848,  469,  470,
      185,  187,  188,  184,  848,  478,  848,  186,  848,  109,
      110,  848,  357,  184,  479,  187,  188,  185,  184,  480,

      476,  481,  185,  848,  186,  848,  386,  386,  185,  186,
      529,  848,  187,  188,  185,  186,  848,  187,  188,  848,
      185,  186,  848,  187,  188,  848,  482,  186,  848,  187,
      188,  848,  484,  185,  848,  187,  188,  848,  485,  185,
      186,  848,  848,  185,  483,  185,  186,  848,  187,  188,
      186,  848,  186,  848,  187,  188,  848,  185,  187,  188,
      187,  188,  486,  487,  186,  848,  848,  488,  185,  848,
      848,  848,  187,  188,  848,  186,  848,  489,  490,  185,
      848,  185,  848,  187,  188,  185,  186,  848,  186,  491,
      848,  185,  186,  848,  187,  188,  187,  188,  186,  848,

      187,  188,  185,  848,  848,  848,  187,  188,  848,  186,
      848,  848,  493,  848,  185,  492,  848,  187,  188,  848,
      494,  186,  848,  496,  185,  848,  495,  185,  848,  187,
      188,  186,  848,  108,  186,  848,  848,  185,  497,  187,
      188,  848,  187,  188,  186,  848,  848,  185,  109,  110,
      185,  848,  187,  188,  186,  848,  499,  186,  539,  848,
      185,  848,  187,  188,  185,  187,  188,  186,  498,  848,
      185,  186,  108,  848,  501,  187,  188,  186,  848,  187,
      188,  504,  848,  500,  185,  187,  188,  109,  110,  503,
      185,  186,  848,  848,  185,  848,  502,  186,  108,  187,

      188,  186,  848,  505,  848,  187,  188,  530,  848,  187,
      188,  185,  848,  109,  110,  848,  108,  848,  186,  506,
      508,  108,  386,  507,  108,  386,  187,  188,  111,  848,
      387,  109,  110,  531,  848,  848,  109,  110,  108,  109,
      110,  848,  538,  532,  520,  848,  509,  386,  108,  848,
      386,  848,  848,  109,  110,  513,  386,  386,  533,  108,
      386,  108,  848,  109,  110,  535,  848,  514,  386,  848,
      515,  516,  534,  848,  109,  110,  109,  110,  108,  848,
      108,  848,  540,  848,  536,  848,  541,  848,  848,  108,
      537,  108,  848,  109,  110,  109,  110,  848,  386,  386,

      386,  848,  848,  386,  109,  110,  109,  110,  513,  386,
      386,  108,  544,  386,  542,  108,  848,  543,  108,  545,
      514,  386,  108,  515,  516,  108,  109,  110,  108,  848,
      109,  110,  108,  109,  110,  848,  848,  109,  110,  550,
      109,  110,  848,  109,  110,  848,  848,  109,  110,  546,
      848,  386,  386,  521,  108,  547,  521,  108,  548,  551,
      848,  523,  521,  521,  108,  848,  521,  108,  549,  109,
      110,  108,  109,  110,  521,  108,  524,  525,  552,  109,
      110,  848,  109,  110,  848,  108,  109,  110,  848,  848,
      109,  110,  108,  848,  553,  555,  108,  848,  848,  554,

      109,  110,  848,  848,  521,  521,  386,  109,  110,  386,
      108,  109,  110,  848,  528,  390,  390,  557,  108,  390,
      556,  108,  848,  848,  108,  109,  110,  390,  108,  386,
      386,  108,  848,  109,  110,  108,  109,  110,  558,  109,
      110,  560,  561,  109,  110,  108,  109,  110,  108,  559,
      109,  110,  108,  848,  108,  848,  564,  390,  390,  848,
      109,  110,  108,  109,  110,  562,  108,  109,  110,  109,
      110,  848,  848,  108,  848,  563,  108,  109,  110,  848,
      108,  109,  110,  108,  848,  108,  568,  566,  109,  110,
      565,  109,  110,  108,  567,  109,  110,  108,  109,  110,

      109,  110,  570,  108,  848,  108,  848,  848,  109,  110,
      572,  569,  109,  110,  571,  108,  848,  108,  109,  110,
      109,  110,  573,  848,  574,  108,  848,  108,  848,  108,
      109,  110,  109,  110,  575,  108,  848,  108,  314,  848,
      109,  110,  109,  110,  109,  110,  848,  848,  108,  848,
      109,  110,  109,  110,  579,  848,  848,  108,  848,  108,
      576,  108,  577,  109,  110,  848,  108,  848,  108,  848,
      108,  578,  109,  110,  109,  110,  109,  110,  848,  108,
      581,  109,  110,  109,  110,  109,  110,  580,  108,  848,
      108,  584,  108,  848,  109,  110,  848,  848,  848,  583,

      585,  848,  582,  109,  110,  109,  110,  109,  110,  586,
      386,  848,  185,  386,  587,  848,  189,  848,  465,  186,
      848,  848,  848,  185,  848,  848,  848,  187,  188,  848,
      186,  598,  589,  521,  108,  848,  521,  185,  187,  188,
      848,  591,  521,  521,  186,  848,  521,  848,  592,  109,
      110,  848,  187,  188,  521,  185,  593,  594,  599,  848,
      848,  185,  186,  848,  848,  848,  185,  848,  186,  848,
      187,  188,  185,  186,  600,  108,  187,  188,  848,  186,
      601,  187,  188,  848,  521,  521,  386,  187,  188,  386,
      109,  110,  848,  848,  597,  469,  469,  602,  185,  469,

      848,  185,  848,  603,  185,  186,  108,  469,  186,  386,
      386,  186,  848,  187,  188,  848,  187,  188,  848,  187,
      188,  109,  110,  848,  185,  848,  185,  357,  357,  185,
      357,  186,  848,  186,  604,  848,  186,  469,  469,  187,
      188,  187,  188,  606,  187,  188,  185,  848,  185,  848,
      607,  848,  848,  186,  605,  186,  108,  848,  185,  848,
      848,  187,  188,  187,  188,  186,  108,  608,  185,  848,
      185,  109,  110,  187,  188,  186,  649,  186,  848,  609,
      185,  109,  110,  187,  188,  187,  188,  186,  848,  848,
      610,  848,  848,  185,  651,  187,  188,  613,  185,  848,

      186,  848,  848,  185,  611,  186,  848,  612,  187,  188,
      186,  848,  848,  187,  188,  185,  848,  185,  187,  188,
      185,  614,  186,  848,  186,  108,  848,  186,  848,  848,
      187,  188,  187,  188,  616,  187,  188,  185,  615,  185,
      109,  110,  185,  848,  186,  848,  186,  848,  108,  186,
      848,  848,  187,  188,  187,  188,  617,  187,  188,  185,
      848,  185,  848,  109,  110,  655,  186,  848,  186,  648,
      618,  619,  185,  848,  187,  188,  187,  188,  185,  186,
      620,  848,  621,  848,  185,  186,  848,  187,  188,  185,
      848,  186,  848,  187,  188,  185,  186,  848,  848,  187,

      188,  848,  186,  848,  187,  188,  848,  848,  622,  624,
      187,  188,  185,  623,  185,  848,  848,  185,  848,  186,
      628,  186,  848,  626,  186,  625,  848,  187,  188,  187,
      188,  185,  187,  188,  848,  848,  386,  848,  186,  386,
      629,  848,  241,  627,  512,  108,  187,  188,  386,  521,
      108,  386,  521,  848,  111,  111,  387,  522,  631,  521,
      109,  110,  521,  848,  848,  109,  110,  633,  521,  521,
      520,  640,  521,  386,  390,  390,  386,  108,  390,  384,
      521,  527,  634,  635,  108,  848,  390,  848,  108,  848,
      108,  848,  109,  110,  848,  645,  848,  848,  646,  109,

      110,  848,  848,  109,  110,  109,  110,  653,  647,  848,
      521,  521,  386,  108,  650,  386,  390,  390,  652,  848,
      638,  515,  515,  108,  848,  515,  108,  848,  109,  110,
      848,  108,  848,  515,  848,  386,  386,  848,  109,  110,
      108,  109,  110,  848,  108,  657,  109,  110,  848,  654,
      848,  108,  658,  656,  848,  109,  110,  848,  848,  109,
      110,  108,  848,  515,  515,  521,  109,  110,  521,  659,
      848,  660,  848,  523,  521,  521,  109,  110,  521,  108,
      848,  661,  848,  108,  848,  848,  521,  108,  524,  525,
      108,  848,  108,  848,  109,  110,  848,  848,  109,  110,

      662,  848,  109,  110,  848,  109,  110,  109,  110,  108,
      665,  848,  664,  848,  108,  848,  521,  521,  521,  663,
      108,  521,  108,  848,  109,  110,  643,  524,  524,  109,
      110,  524,  108,  848,  108,  109,  110,  109,  110,  524,
      108,  521,  521,  668,  666,  848,  848,  109,  110,  109,
      110,  108,  848,  848,  848,  109,  110,  108,  848,  848,
      667,  848,  670,  108,  848,  108,  109,  110,  108,  524,
      524,  669,  109,  110,  671,  108,  672,  848,  109,  110,
      109,  110,  108,  109,  110,  108,  848,  108,  848,  108,
      109,  110,  673,  674,  676,  848,  675,  109,  110,  848,

      109,  110,  109,  110,  109,  110,  108,  848,  678,  108,
      679,  108,  848,  108,  848,  677,  108,  848,  848,  848,
      848,  109,  110,  108,  109,  110,  109,  110,  109,  110,
      848,  109,  110,  848,  680,  682,  108,  848,  109,  110,
      108,  848,  108,  848,  108,  681,  848,  108,  848,  683,
      848,  109,  110,  108,  848,  109,  110,  109,  110,  109,
      110,  684,  109,  110,  108,  686,  108,  848,  109,  110,
      108,  848,  848,  848,  685,  108,  848,  848,  848,  109,
      110,  109,  110,  848,  848,  109,  110,  848,  687,  386,
      109,  110,  386,  521,  688,  189,  521,  465,  848,  189,

      848,  590,  469,  469,  848,  848,  469,  108,  848,  515,
      515,  589,  848,  515,  469,  691,  689,  521,  848,  848,
      521,  515,  109,  110,  848,  591,  521,  521,  386,  848,
      521,  386,  592,  848,  463,  848,  596,  848,  521,  185,
      593,  594,  185,  848,  469,  469,  186,  848,  848,  186,
      696,  515,  515,  848,  187,  188,  185,  187,  188,  185,
      848,  108,  848,  186,  697,  848,  186,  848,  521,  521,
      521,  187,  188,  521,  187,  188,  109,  110,  694,  593,
      593,  185,  699,  593,  108,  848,  848,  848,  186,  735,
      848,  593,  698,  521,  521,  185,  187,  188,  185,  109,

      110,  185,  186,  848,  265,  186,  848,  848,  186,  848,
      187,  188,  185,  187,  188,  700,  187,  188,  701,  186,
      848,  593,  593,  185,  848,  357,  185,  187,  188,  108,
      186,  848,  848,  186,  848,  848,  185,  848,  187,  188,
      185,  187,  188,  186,  109,  110,  848,  186,  702,  848,
      185,  187,  188,  703,  185,  187,  188,  186,  848,  848,
      704,  186,  848,  730,  848,  187,  188,  705,  848,  187,
      188,  706,  185,  848,  708,  707,  185,  848,  185,  186,
      848,  848,  185,  186,  848,  186,  848,  187,  188,  186,
      848,  187,  188,  187,  188,  185,  848,  187,  188,  185,

      848,  386,  186,  463,  386,  710,  186,  463,  709,  185,
      187,  188,  185,  848,  187,  188,  186,  848,  108,  186,
      848,  848,  185,  848,  187,  188,  848,  187,  188,  186,
      712,  711,  714,  109,  110,  185,  848,  187,  188,  185,
      713,  715,  186,  848,  848,  185,  186,  848,  848,  185,
      187,  188,  186,  731,  187,  188,  186,  848,  848,  185,
      187,  188,  716,  848,  187,  188,  186,  108,  848,  848,
      717,  185,  848,  185,  187,  188,  718,  185,  186,  848,
      186,  848,  109,  110,  186,  848,  187,  188,  187,  188,
      848,  848,  187,  188,  848,  386,  848,  720,  386,  848,

      848,  241,  848,  512,  108,  719,  848,  521,  386,  848,
      521,  386,  848,  241,  510,  632,  637,  631,  521,  109,
      110,  521,  848,  848,  848,  733,  633,  521,  521,  722,
      727,  521,  521,  524,  524,  521,  848,  524,  111,  521,
      522,  634,  635,  521,  386,  524,  521,  386,  108,  384,
      384,  642,  527,  521,  640,  241,  521,  108,  848,  241,
      848,  848,  108,  109,  110,  729,  645,  740,  848,  521,
      521,  521,  109,  110,  521,  524,  524,  109,  110,  725,
      634,  634,  108,  734,  634,  108,  848,  108,  732,  108,
      848,  848,  634,  108,  521,  521,  108,  109,  110,  848,

      109,  110,  109,  110,  109,  110,  848,  736,  109,  110,
      739,  109,  110,  848,  848,  108,  848,  742,  108,  848,
      108,  737,  634,  634,  738,  108,  848,  108,  848,  741,
      109,  110,  108,  109,  110,  109,  110,  108,  848,  108,
      109,  110,  109,  110,  108,  743,  745,  109,  110,  108,
      848,  108,  109,  110,  109,  110,  744,  848,  108,  109,
      110,  108,  848,  108,  109,  110,  109,  110,  848,  747,
      848,  848,  746,  109,  110,  108,  109,  110,  109,  110,
      108,  848,  848,  108,  750,  749,  108,  748,  108,  848,
      109,  110,  108,  848,  108,  109,  110,  752,  109,  110,

      108,  109,  110,  109,  110,  108,  848,  109,  110,  109,
      110,  751,  108,  753,  108,  109,  110,  108,  848,  108,
      109,  110,  848,  848,  108,  848,  848,  109,  110,  109,
      110,  848,  109,  110,  109,  110,  848,  848,  756,  109,
      110,  754,  521,  593,  593,  521,  521,  593,  189,  521,
      590,  848,  463,  755,  693,  593,  108,  386,  848,  185,
      386,  848,  185,  463,  691,  596,  186,  108,  758,  186,
      848,  109,  110,  185,  187,  188,  759,  187,  188,  696,
      186,  848,  109,  110,  848,  593,  593,  185,  187,  188,
      760,  185,  848,  185,  186,  848,  848,  185,  186,  761,

      186,  783,  187,  188,  186,  848,  187,  188,  187,  188,
      185,  848,  187,  188,  185,  848,  763,  186,  848,  848,
      185,  186,  848,  848,  762,  187,  188,  186,  848,  187,
      188,  185,  848,  185,  848,  187,  188,  108,  186,  848,
      186,  764,  848,  848,  185,  848,  187,  188,  187,  188,
      848,  186,  109,  110,  185,  848,  765,  185,  767,  187,
      188,  186,  848,  848,  186,  768,  848,  766,  848,  187,
      188,  185,  187,  188,  185,  769,  185,  848,  186,  848,
      848,  186,  848,  186,  848,  848,  187,  188,  185,  187,
      188,  187,  188,  848,  185,  186,  848,  772,  770,  848,

      185,  186,  848,  187,  188,  185,  848,  186,  771,  187,
      188,  185,  186,  634,  634,  187,  188,  634,  186,  848,
      187,  188,  774,  775,  773,  634,  187,  188,  185,  848,
      521,  521,  848,  521,  521,  186,  241,  510,  632,  724,
      776,  848,  386,  187,  188,  386,  848,  777,  510,  848,
      637,  848,  722,  780,  108,  634,  634,  848,  848,  778,
      386,  108,  510,  386,  727,  521,  510,  108,  521,  109,
      110,  384,  521,  642,  384,  521,  109,  110,  384,  781,
      848,  848,  109,  110,  848,  848,  108,  729,  108,  848,
      108,  848,  108,  848,  108,  646,  848,  784,  108,  848,

      782,  109,  110,  109,  110,  109,  110,  109,  110,  109,
      110,  786,  108,  109,  110,  848,  108,  785,  108,  788,
      108,  848,  848,  848,  848,  108,  848,  109,  110,  108,
      787,  109,  110,  109,  110,  109,  110,  789,  108,  790,
      109,  110,  108,  848,  109,  110,  108,  848,  848,  108,
      848,  108,  848,  109,  110,  848,  848,  109,  110,  792,
      108,  109,  110,  793,  109,  110,  109,  110,  108,  848,
      108,  791,  108,  848,  521,  109,  110,  521,  848,  794,
      463,  848,  693,  109,  110,  109,  110,  109,  110,  521,
      848,  463,  521,  185,  848,  463,  758,  185,  848,  848,

      186,  108,  848,  185,  186,  795,  848,  185,  187,  188,
      186,  848,  187,  188,  186,  848,  109,  110,  187,  188,
      185,  848,  187,  188,  185,  848,  799,  186,  108,  796,
      848,  186,  848,  797,  848,  187,  188,  798,  185,  187,
      188,  185,  848,  109,  110,  186,  848,  848,  186,  812,
      800,  185,  848,  187,  188,  185,  187,  188,  186,  801,
      848,  185,  186,  848,  848,  848,  187,  188,  186,  848,
      187,  188,  185,  848,  848,  804,  187,  188,  185,  186,
      848,  803,  802,  185,  848,  186,  848,  187,  188,  185,
      186,  848,  848,  187,  188,  848,  186,  848,  187,  188,

      185,  848,  185,  848,  187,  188,  848,  186,  848,  186,
      805,  848,  185,  806,  807,  187,  188,  187,  188,  186,
      848,  848,  185,  848,  185,  848,  848,  187,  188,  186,
      521,  186,  510,  521,  848,  848,  510,  187,  188,  187,
      188,  848,  521,  808,  108,  521,  108,  809,  510,  848,
      724,  108,  848,  108,  848,  811,  108,  810,  848,  109,
      110,  109,  110,  108,  780,  848,  109,  110,  109,  110,
      108,  109,  110,  108,  813,  848,  108,  848,  109,  110,
      108,  815,  814,  108,  848,  109,  110,  108,  109,  110,
      816,  109,  110,  108,  848,  109,  110,  817,  109,  110,

      185,  848,  109,  110,  848,  185,  848,  186,  109,  110,
      848,  108,  186,  848,  848,  187,  188,  185,  818,  848,
      187,  188,  848,  848,  186,  820,  109,  110,  185,  819,
      821,  185,  187,  188,  822,  186,  848,  848,  186,  848,
      848,  185,  848,  187,  188,  185,  187,  188,  186,  848,
      848,  185,  186,  848,  629,  353,  187,  188,  186,  848,
      187,  188,  185,  848,  823,  185,  187,  188,  185,  186,
      848,  824,  186,  848,  629,  186,  848,  187,  188,  185,
      187,  188,  848,  187,  188,  185,  186,  826,  848,  825,
      185,  848,  186,  848,  187,  188,  848,  186,  848,  848,

      187,  188,  848,  185,  848,  187,  188,  185,  848,  827,
      186,  828,  108,  848,  186,  108,  848,  108,  187,  188,
      108,  848,  187,  188,  108,  848,  108,  109,  110,  108,
      109,  110,  109,  110,  829,  109,  110,  108,  848,  109,
      110,  109,  110,  848,  109,  110,  848,  646,  185,  848,
      554,  831,  109,  110,  185,  186,  848,  848,  830,  185,
      840,  186,  848,  187,  188,  185,  186,  848,  848,  187,
      188,  848,  186,  848,  187,  188,  848,  848,  185,  848,
      187,  188,  185,  848,  185,  186,  832,  848,  848,  186,
      848,  186,  833,  187,  188,  834,  835,  187,  188,  187,

      188,  185,  848,  185,  848,  838,  185,  837,  186,  848,
      186,  108,  848,  186,  836,  108,  187,  188,  187,  188,
      848,  187,  188,  848,  629,  108,  109,  110,  185,  848,
      109,  110,  185,  848,  848,  186,  848,  848,  839,  186,
      109,  110,  848,  187,  188,  185,  673,  187,  188,  841,
      185,  848,  186,  842,  848,  845,  185,  186,  848,  848,
      187,  188,  185,  186,  848,  187,  188,  185,  848,  186,
      843,  187,  188,  185,  186,  848,  848,  187,  188,  185,
      186,  844,  187,  188,  476,  185,  186,  848,  187,  188,
      185,  848,  186,  848,  187,  188,  185,  186,  848,  848,

      187,  188,  185,  186,  848,  187,  188,  185,  848,  186,
      848,  187,  188,  848,  186,  848,  848,  187,  188,  848,
      848,  846,  187,  188,  848,  848,  848,  848,  848,  848,
      848,  848,  847,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  107,
      107,  848,  848,  107,  111,  111,  111,  111,  111,  111,
      184,  184,  848,  848,  184,  189,  189,  189,  189,  189,
      189,  237,  237,  848,  848,  237,  241,  241,  241,  241,

      241,  241,  250,  848,  848,  848,  250,  250,  250,  250,
      250,  252,  252,  848,  252,  252,  252,  252,  252,  252,
      253,  848,  253,  253,  848,  848,  253,  253,  255,  255,
      255,  255,  335,  335,  335,  335,  378,  378,  378,  378,
      384,  384,  384,  384,  384,  384,  387,  848,  848,  848,
      387,  387,  387,  387,  387,  463,  463,  463,  463,  463,
      463,  465,  848,  848,  848,  465,  465,  465,  465,  465,
      510,  510,  510,  510,  510,  510,  512,  848,  848,  848,
      512,  512,  512,  512,  512,  386,  848,  848,  848,  386,
      386,  386,  386,  386,  519,  848,  848,  519,  519,  519,

      519,  519,  519,  522,  848,  848,  848,  522,  522,  522,
      522,  522,  527,  848,  848,  848,  527,  527,  527,  527,
      527,  588,  848,  848,  588,  588,  588,  588,  588,  588,
      590,  848,  848,  848,  590,  590,  590,  590,  590,  596,
      848,  848,  848,  596,  596,  596,  596,  596,  630,  848,
      848,  630,  630,  630,  630,  630,  630,  632,  848,  848,
      848,  632,  632,  632,  632,  632,  637,  848,  848,  848,
      637,  637,  637,  637,  637,  521,  848,  848,  848,  521,
      521,  521,  521,  521,  639,  848,  848,  639,  639,  639,
      639,  639,  639,  642,  848,  848,  848,  642,  642,  642,

      642,  642,  644,  848,  848,  644,  644,  644,  644,  644,
      644,  690,  848,  848,  690,  690,  690,  690,  690,  690,
      693,  848,  848,  848,  693,  693,  693,  693,  693,  695,
      848,  848,  695,  695,  695,  695,  695,  695,  721,  848,
      848,  721,  721,  721,  721,  721,  721,  724,  848,  848,
      848,  724,  724,  724,  724,  724,  726,  848,  848,  726,
      726,  726,  726,  726,  726,  728,  848,  848,  728,  728,
      728,  728,  728,  728,  757,  848,  848,  757,  757,  757,
      757,  757,  757,  779,  848,  848,  779,  779,  779,  779,
      779,  779,   13,  848,  848,  848,  848,  848,  848,  848,

      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848
    } ;

static yyconst short int yy_chk[5149] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,   93,    5,    5,
        5,    5,   93,    5,    5,    5,  390,    5,    5,  637,
      390,    5,  251,    5,    5,    7,    7,  251,    7,    7,
        7,    8,    8,    5,    8,    8,    8,    9,  634,    9,
        9,   10,   15,   10,   10,  596,   15,   15,  103,  103,
      593,    5,    5,    6,    6,    6,    6,    6,    6,    6,
      527,    6,    6,    6,    6,   18,    6,    6,    6,   19,
        6,    6,   21,  524,    6,   21,    6,    6,   23,  518,
       18,   18,   24,   19,   23,   25,    6,   21,   21,  517,

      103,  103,  512,   23,   23,   28,   28,   24,   24,   28,
       25,   25,  511,   27,    6,    6,   11,   28,   11,   11,
       11,   11,  467,   52,   11,   11,   11,   26,   27,   27,
       30,  465,  464,  387,   29,   26,   26,   52,   11,   80,
       37,  385,   26,   26,   35,   30,   30,   28,   28,   29,
       29,  383,   29,   80,   29,   37,   37,  469,  382,   35,
       35,  469,   29,   35,   30,   37,  242,   11,   11,   31,
       11,   12,   79,   12,   12,   12,   12,  108,   35,   12,
       12,   12,  111,  190,   31,   31,   33,   79,   79,   31,
       32,  108,   82,   12,   36,   82,  111,   31,   31,   38,

       31,   33,   33,   31,  185,   32,   32,   82,   82,   36,
       36,   32,  112,   34,   38,   38,   38,   33,  185,   33,
       33,   32,   12,   12,   36,   12,   33,   32,   34,   34,
       38,  189,   13,    0,   38,   39,   59,   59,    0,    0,
       59,   34,   34,   43,   34,  189,   40,   34,   59,   34,
       39,   39,   39,   39,   42,    0,   39,   47,   43,   43,
       39,   40,   40,   40,  515,    0,   39,    0,  515,   42,
       42,   42,   47,   47,   51,    0,    0,   40,   59,   59,
       43,   51,   87,   40,   41,   42,    0,   47,   42,   51,
       51,   42,    0,   42,   44,    0,    0,   87,   87,   41,

       41,    0,   41,  238,   45,    0,   41,  241,   46,   44,
       44,   44,  256,   41,   41,   44,   41,  238,   41,   45,
       45,  241,   44,   46,   46,   45,  256,    0,   45,   48,
        0,   44,   46,   46,    0,   45,   49,    0,   50,    0,
       45,   45,   46,  106,   48,   48,   48,  106,  106,   55,
       48,   49,   49,   50,   50,   54,   55,    0,   54,    0,
       49,   49,   54,  336,   55,   55,   56,   50,    0,   88,
       54,   54,   56,   56,    0,   50,   57,  336,   56,   58,
        0,   56,   56,   57,   88,   88,   58,  107,   57,   60,
        0,   57,   57,   62,   58,   58,   60,  379,    0,   64,

       62,   84,  107,  107,   60,   60,   64,   84,   62,   62,
        0,  379,   63,    0,   64,   64,   84,   84,   62,   63,
      384,    0,   65,    0,   60,   61,    0,   63,   63,   65,
       64,    0,   61,   64,  384,   86,    0,   65,   65,   65,
       61,   61,   63,   86,   86,   63,   61,    0,   67,    0,
       86,   86,   63,   61,   61,   67,   61,  463,   61,   61,
       74,   61,   66,   67,   67,    0,   67,   74,    0,   66,
       90,  463,   68,    0,    0,   74,   74,   66,   66,   68,
      109,   74,   66,    0,   66,   90,   90,   68,   68,   68,
      117,   74,   66,   68,   69,  109,  109,   66,   66,  510,

       90,   69,    0,    0,   70,  117,  117,    0,    0,   69,
       69,   70,   69,  510,    0,   69,   71,    0,   72,   70,
       70,  117,   70,   71,  113,   72,    0,  113,    0,   69,
        0,   71,   71,   72,   72,    0,   70,   73,    0,  113,
      113,   75,    0,   72,   73,  118,   72,   71,   75,  121,
       71,   78,   73,   73,    0,   76,   75,   75,   78,    0,
      118,  118,   76,   78,  121,  121,   78,   78,   73,   73,
       76,   76,   76,   73,   73,    0,   75,   85,   85,   85,
       85,   85,   85,  118,   85,   89,   89,    0,    0,   89,
      110,  110,  110,    0,  119,  110,  114,   89,  115,   85,

       85,    0,  114,  110,  116,  116,  115,  115,  116,  119,
      119,  114,  114,  115,  115,  120,  116,    0,  520,  119,
      520,  520,  119,  122,  520,  123,    0,   89,   89,    0,
      120,  120,    0,  110,  110,  124,  120,  125,  122,  122,
      123,  123,    0,    0,  122,  123,  116,  116,    0,    0,
      124,  124,  125,  125,  589,  126,  589,  589,  125,  127,
      589,    0,  128,  124,  124,  124,  129,    0,  130,    0,
      126,  126,  124,  126,  127,  127,    0,  128,  128,  131,
        0,  129,  129,  130,  130,    0,  132,    0,  129,    0,
      126,  128,  133,    0,  131,  131,  134,    0,  135,    0,

      131,  132,  132,  130,  136,  132,    0,  133,  133,  133,
        0,  134,  134,  135,  135,  137,    0,    0,  138,  136,
      136,  139,  132,    0,    0,  136,  140,  134,  141,    0,
      137,  137,  135,  138,  138,  142,  139,  139,  139,  137,
      143,  140,  140,  141,  141,  140,  144,    0,  145,    0,
      142,  142,  146,  142,  147,  143,  143,  143,  141,  148,
        0,  144,  144,  145,  145,  149,    0,  146,  146,  147,
      147,  143,    0,  150,  148,  148,  151,    0,    0,  152,
      149,  149,  154,  147,  145,  149,  153,  146,  150,  150,
      155,  151,  151,    0,  152,  152,    0,  154,  154,  148,

      156,  153,  153,  157,  154,  155,  155,  150,  152,  158,
      151,  159,  153,    0,    0,  156,  156,  160,  157,  157,
      162,  155,    0,    0,  158,  158,  159,  159,  161,    0,
      158,    0,  160,  160,    0,  162,  162,    0,  157,    0,
        0,  163,    0,  161,  161,  159,    0,  159,  164,  160,
      165,    0,  166,  161,  167,  162,  163,  163,    0,  161,
      168,  163,    0,  164,  164,  165,  165,  166,  166,  167,
      167,    0,  166,  164,    0,  168,  168,  169,    0,    0,
      170,    0,  171,    0,    0,  172,  165,  166,  168,  167,
      166,  166,  169,  169,  169,  170,  170,  171,  171,  173,

      172,  172,  172,  174,    0,  169,  172,  175,    0,  176,
        0,  170,    0,  169,  173,  173,  171,  173,  174,  174,
        0,    0,  175,  175,  176,  176,  176,  177,  173,  178,
        0,  179,    0,  180,    0,  181,  175,    0,    0,    0,
      182,    0,  177,  177,  178,  178,  179,  179,  180,  180,
      181,  181,  177,  183,  180,  182,  182,  182,    0,  184,
        0,    0,    0,  178,  180,  179,  184,    0,  183,  183,
      186,  181,  187,    0,  184,  184,    0,  186,  631,  187,
      631,  631,    0,  183,  631,  186,  186,  187,  187,  188,
      188,  188,  191,    0,  188,  191,    0,  192,    0,  191,

        0,    0,  188,  192,  192,    0,    0,  191,  191,  193,
        0,  194,  192,  192,  196,    0,  193,    0,  194,  195,
      195,  196,    0,  195,  193,  193,  194,  194,    0,  196,
      196,  195,  188,  188,    0,  197,    0,  198,    0,    0,
      199,    0,  197,    0,  198,    0,    0,  199,    0,  196,
      197,  197,  198,  198,  198,  199,  199,  200,  199,  201,
        0,  195,  195,  202,  200,    0,  201,    0,  197,  203,
      202,    0,  200,  200,  201,  201,  203,  237,  202,  202,
        0,  204,    0,  205,  203,  203,  200,  200,  204,    0,
      205,  202,  237,  237,  206,    0,  204,  204,  205,  205,

      203,  206,    0,  205,  207,    0,    0,  208,    0,  206,
      206,  207,    0,    0,  208,  239,    0,  204,  209,  207,
      207,  210,  208,  208,    0,  209,    0,    0,  210,    0,
      239,  239,  211,  209,  209,    0,  210,  210,  211,  211,
      207,  208,  211,  212,    0,  213,    0,  211,  211,  209,
      212,    0,  213,  211,    0,  214,    0,  210,  212,  212,
      213,  213,  214,  243,  213,  215,  243,  216,    0,  217,
      214,  214,  215,    0,  216,  249,  217,    0,  243,  243,
      215,  215,  216,  216,  217,  217,  215,  217,  218,    0,
      249,  249,  219,    0,    0,  218,    0,    0,  216,  219,

      255,    0,  220,  218,  218,  217,  221,  219,  219,  220,
      218,    0,  222,  221,    0,  255,  255,  220,  220,  222,
        0,  221,  221,    0,    0,    0,  223,  222,  222,  221,
        0,  220,  223,  223,    0,    0,  224,  220,  222,  225,
        0,  223,  223,  224,    0,    0,  225,    0,    0,    0,
      226,  224,  224,    0,  225,  225,  227,  226,    0,    0,
      225,  223,  228,  227,  224,  226,  226,  229,    0,  228,
      225,  227,  227,  226,  229,    0,    0,  228,  228,  230,
        0,    0,  229,  229,  231,    0,  230,    0,  229,    0,
      232,  231,    0,    0,  230,  230,  228,  232,    0,  231,

      231,  233,  231,  234,    0,  232,  232,  235,  233,  640,
      234,  640,  640,  230,  235,  640,  233,  233,  234,  234,
      236,    0,  235,  235,  232,    0,    0,  236,  234,  240,
      240,  240,  244,    0,  240,  236,  236,  645,  244,  645,
      645,  235,  240,  645,    0,    0,    0,  244,  244,  245,
      245,  245,  245,  245,  245,  247,  248,  248,    0,  245,
      248,  259,  245,  247,  247,  260,    0,  261,  248,    0,
      247,  247,  240,  240,    0,    0,  259,  259,  262,    0,
      260,  260,  261,  261,  261,  691,    0,  691,  691,  263,
      260,  691,    0,  262,  262,  259,  265,    0,  248,  248,

      257,  264,    0,  257,  263,  263,  263,    0,  257,  257,
      257,  265,  265,  257,  266,    0,  264,  264,  264,  268,
      257,  257,    0,  257,  257,  267,    0,    0,  269,  266,
      266,  271,    0,    0,  268,  268,    0,    0,  268,  268,
      267,  267,    0,  269,  269,  266,  271,  271,    0,  270,
        0,  257,  257,  258,  267,  268,  258,  267,  269,    0,
        0,  258,  258,  258,  270,  270,  258,  272,  271,  270,
      273,    0,    0,  258,  258,  274,  258,  258,  275,    0,
      276,    0,  272,  272,  277,  273,  273,    0,  272,    0,
      274,  274,  278,  275,  275,  276,  276,    0,    0,  277,

      277,  279,  273,    0,  258,  258,  280,  278,  278,  281,
        0,    0,  277,  278,  282,    0,  279,  279,  283,  276,
      284,  280,  280,    0,  281,  281,  280,  285,    0,  282,
      282,    0,    0,  283,  283,  284,  284,  279,  281,  286,
        0,  287,  285,  285,    0,    0,    0,  285,  284,  288,
      283,  289,    0,  282,  286,  286,  287,  287,  290,    0,
      286,  287,  291,    0,  288,  288,  289,  289,  292,    0,
      289,  293,    0,  290,  290,    0,  294,  291,  291,    0,
      295,  288,  296,  292,  292,    0,  293,  293,  297,    0,
      292,  294,  294,  291,    0,  295,  295,  296,  296,  298,

      296,  299,    0,  297,  297,  300,    0,  301,  293,  295,
      294,  302,    0,    0,  298,  298,  299,  299,  303,  298,
      300,  300,  301,  301,  304,    0,  302,  302,  301,    0,
      305,    0,  306,  303,  303,  302,    0,    0,  303,  304,
      304,    0,  301,  307,  300,  305,  305,  306,  306,  308,
        0,    0,  305,  309,  304,  310,  306,  311,  307,  307,
      312,    0,    0,    0,  308,  308,  305,  313,  309,  309,
      310,  310,  311,  311,  314,  312,  312,    0,  309,    0,
      316,  312,  313,  313,  315,  308,    0,  317,    0,  314,
      314,  318,  310,    0,  311,  316,  316,  319,    0,  315,

      315,  313,  317,  317,  320,  315,  318,  318,  317,  321,
        0,  322,  319,  319,  316,  323,    0,  324,    0,  320,
      320,    0,    0,  325,  321,  321,  322,  322,    0,    0,
      323,  323,  324,  324,    0,    0,  319,  326,  325,  325,
      320,    0,  327,  322,  325,  321,  324,  328,  325,    0,
      323,  329,  326,  326,    0,  330,  326,  327,  327,  331,
        0,  332,  328,  328,  327,  333,  329,  329,  334,  329,
      330,  330,    0,    0,  331,  331,  332,  332,    0,  335,
      333,  333,  328,  334,  334,  332,  335,  331,  343,  330,
      343,    0,  340,  334,  335,  335,    0,    0,  343,  340,

        0,  333,  337,  343,  343,  337,    0,  340,  340,    0,
      337,  337,  337,  339,    0,  337,    0,  337,    0,    0,
      339,    0,  337,  337,  341,  337,  337,  340,  339,  339,
      342,  341,  378,    0,  344,    0,  346,  342,    0,  341,
      341,  344,    0,  346,  339,  342,  342,  378,  378,  344,
      344,  346,  346,  337,  337,  338,    0,    0,  338,  342,
        0,    0,    0,  338,  338,  338,  345,    0,  338,    0,
      338,    0,  346,  345,  392,  338,  338,    0,  338,  338,
      348,  345,  345,  347,    0,  347,    0,  348,    0,  392,
      392,    0,  347,  347,  347,  348,  348,  349,  347,  347,

      345,  348,  350,    0,  349,    0,  338,  338,  351,  350,
      392,    0,  349,  349,  352,  351,    0,  350,  350,    0,
      353,  352,    0,  351,  351,    0,  349,  353,    0,  352,
      352,    0,  351,  354,    0,  353,  353,    0,  352,  355,
      354,    0,    0,  356,  350,  357,  355,    0,  354,  354,
      356,    0,  357,    0,  355,  355,    0,  358,  356,  356,
      357,  357,  354,  354,  358,    0,    0,  355,  359,    0,
        0,    0,  358,  358,    0,  359,    0,  356,  358,  360,
        0,  361,    0,  359,  359,  362,  360,    0,  361,  359,
        0,  363,  362,    0,  360,  360,  361,  361,  363,    0,

      362,  362,  364,    0,    0,    0,  363,  363,    0,  364,
        0,    0,  361,    0,  365,  360,    0,  364,  364,    0,
      362,  365,    0,  364,  366,    0,  363,  367,    0,  365,
      365,  366,    0,  401,  367,    0,    0,  368,  365,  366,
      366,    0,  367,  367,  368,    0,    0,  369,  401,  401,
      370,    0,  368,  368,  369,    0,  368,  370,  401,    0,
      371,    0,  369,  369,  373,  370,  370,  371,  367,    0,
      372,  373,  393,    0,  370,  371,  371,  372,    0,  373,
      373,  373,    0,  369,  374,  372,  372,  393,  393,  372,
      376,  374,    0,    0,  375,    0,  371,  376,  394,  374,

      374,  375,    0,  374,    0,  376,  376,  393,    0,  375,
      375,  377,    0,  394,  394,    0,  395,    0,  377,  374,
      376,  400,  388,  375,  396,  388,  377,  377,  388,    0,
      388,  395,  395,  394,    0,    0,  400,  400,  397,  396,
      396,    0,  400,  395,  388,    0,  377,  380,  398,    0,
      380,    0,    0,  397,  397,  380,  380,  380,  396,  399,
      380,  402,    0,  398,  398,  398,    0,  380,  380,    0,
      380,  380,  397,    0,  399,  399,  402,  402,  403,    0,
      404,    0,  402,    0,  399,    0,  402,    0,    0,  405,
      399,  406,    0,  403,  403,  404,  404,    0,  380,  380,

      381,    0,    0,  381,  405,  405,  406,  406,  381,  381,
      381,  407,  405,  381,  403,  408,    0,  404,  409,  406,
      381,  381,  412,  381,  381,  413,  407,  407,  410,    0,
      408,  408,  411,  409,  409,    0,    0,  412,  412,  412,
      413,  413,    0,  410,  410,    0,    0,  411,  411,  408,
        0,  381,  381,  389,  414,  409,  389,  415,  410,  413,
        0,  389,  389,  389,  416,    0,  389,  417,  411,  414,
      414,  418,  415,  415,  389,  419,  389,  389,  414,  416,
      416,    0,  417,  417,    0,  421,  418,  418,    0,    0,
      419,  419,  422,    0,  415,  417,  420,    0,    0,  416,

      421,  421,    0,    0,  389,  389,  391,  422,  422,  391,
      423,  420,  420,    0,  391,  391,  391,  422,  424,  391,
      420,  426,    0,    0,  425,  423,  423,  391,  427,  391,
      391,  428,    0,  424,  424,  430,  426,  426,  423,  425,
      425,  425,  426,  427,  427,  429,  428,  428,  431,  424,
      430,  430,  432,    0,  433,    0,  430,  391,  391,    0,
      429,  429,  434,  431,  431,  428,  436,  432,  432,  433,
      433,    0,    0,  435,    0,  429,  437,  434,  434,    0,
      438,  436,  436,  439,    0,  440,  436,  434,  435,  435,
      433,  437,  437,  441,  435,  438,  438,  442,  439,  439,

      440,  440,  439,  443,    0,  444,    0,    0,  441,  441,
      441,  438,  442,  442,  440,  445,    0,  446,  443,  443,
      444,  444,  442,    0,  444,  447,    0,  448,    0,  449,
      445,  445,  446,  446,  445,  450,    0,  451,  443,    0,
      447,  447,  448,  448,  449,  449,    0,    0,  452,    0,
      450,  450,  451,  451,  451,    0,    0,  453,    0,  454,
      447,  455,  448,  452,  452,    0,  456,    0,  457,    0,
      458,  450,  453,  453,  454,  454,  455,  455,    0,  459,
      454,  456,  456,  457,  457,  458,  458,  453,  460,    0,
      461,  458,  462,    0,  459,  459,    0,    0,    0,  457,

      459,    0,  455,  460,  460,  461,  461,  462,  462,  461,
      466,    0,  471,  466,  462,    0,  466,    0,  466,  471,
        0,    0,    0,  472,    0,    0,    0,  471,  471,    0,
      472,  471,  466,  468,  529,    0,  468,  473,  472,  472,
        0,  468,  468,  468,  473,    0,  468,    0,  468,  529,
      529,    0,  473,  473,  468,  474,  468,  468,  472,    0,
        0,  475,  474,    0,    0,    0,  476,    0,  475,    0,
      474,  474,  477,  476,  473,  533,  475,  475,    0,  477,
      474,  476,  476,    0,  468,  468,  470,  477,  477,  470,
      533,  533,    0,    0,  470,  470,  470,  475,  478,  470,

        0,  479,    0,  477,  480,  478,  534,  470,  479,  470,
      470,  480,    0,  478,  478,    0,  479,  479,    0,  480,
      480,  534,  534,    0,  481,    0,  482,  478,  480,  483,
      479,  481,    0,  482,  478,    0,  483,  470,  470,  481,
      481,  482,  482,  482,  483,  483,  484,    0,  485,    0,
      483,    0,    0,  484,  481,  485,  532,    0,  486,    0,
        0,  484,  484,  485,  485,  486,  536,  484,  487,    0,
      488,  532,  532,  486,  486,  487,  532,  488,    0,  485,
      489,  536,  536,  487,  487,  488,  488,  489,    0,    0,
      486,    0,    0,  490,  536,  489,  489,  489,  491,    0,

      490,    0,    0,  492,  487,  491,    0,  488,  490,  490,
      492,    0,    0,  491,  491,  493,    0,  494,  492,  492,
      495,  490,  493,    0,  494,  540,    0,  495,    0,    0,
      493,  493,  494,  494,  494,  495,  495,  496,  491,  497,
      540,  540,  498,    0,  496,    0,  497,    0,  531,  498,
        0,    0,  496,  496,  497,  497,  496,  498,  498,  499,
        0,  500,    0,  531,  531,  540,  499,    0,  500,  531,
      497,  498,  501,    0,  499,  499,  500,  500,  502,  501,
      499,    0,  500,    0,  503,  502,    0,  501,  501,  504,
        0,  503,    0,  502,  502,  505,  504,    0,    0,  503,

      503,    0,  505,    0,  504,  504,    0,    0,  501,  503,
      505,  505,  506,  502,  507,    0,    0,  508,    0,  506,
      507,  507,    0,  505,  508,  504,    0,  506,  506,  507,
      507,  509,  508,  508,    0,    0,  513,    0,  509,  513,
      508,    0,  513,  506,  513,  542,  509,  509,  519,  523,
      544,  519,  523,    0,  519,  523,  519,  523,  513,  514,
      542,  542,  514,    0,    0,  544,  544,  514,  514,  514,
      519,  523,  514,  528,  526,  526,  528,  530,  526,  528,
      514,  528,  514,  514,  535,    0,  526,    0,  537,    0,
      538,    0,  530,  530,    0,  528,    0,    0,  530,  535,

      535,    0,    0,  537,  537,  538,  538,  538,  530,    0,
      514,  514,  516,  539,  535,  516,  526,  526,  537,    0,
      516,  516,  516,  541,    0,  516,  543,    0,  539,  539,
        0,  545,    0,  516,    0,  516,  516,    0,  541,  541,
      552,  543,  543,    0,  546,  543,  545,  545,    0,  539,
        0,  547,  545,  541,    0,  552,  552,    0,    0,  546,
      546,  548,    0,  516,  516,  522,  547,  547,  522,  546,
        0,  547,    0,  522,  522,  522,  548,  548,  522,  549,
        0,  548,    0,  550,    0,    0,  522,  551,  522,  522,
      553,    0,  554,    0,  549,  549,    0,    0,  550,  550,

      549,    0,  551,  551,    0,  553,  553,  554,  554,  555,
      553,    0,  551,    0,  556,    0,  522,  522,  525,  550,
      557,  525,  558,    0,  555,  555,  525,  525,  525,  556,
      556,  525,  559,    0,  560,  557,  557,  558,  558,  525,
      561,  525,  525,  558,  555,    0,    0,  559,  559,  560,
      560,  562,    0,    0,    0,  561,  561,  563,    0,    0,
      557,    0,  560,  564,    0,  565,  562,  562,  566,  525,
      525,  559,  563,  563,  561,  567,  562,    0,  564,  564,
      565,  565,  568,  566,  566,  569,    0,  570,    0,  571,
      567,  567,  563,  563,  567,    0,  566,  568,  568,    0,

      569,  569,  570,  570,  571,  571,  572,    0,  570,  573,
      571,  574,    0,  575,    0,  569,  576,    0,    0,    0,
        0,  572,  572,  577,  573,  573,  574,  574,  575,  575,
        0,  576,  576,    0,  572,  574,  578,    0,  577,  577,
      579,    0,  580,    0,  581,  573,    0,  582,    0,  575,
        0,  578,  578,  583,    0,  579,  579,  580,  580,  581,
      581,  578,  582,  582,  584,  580,  585,    0,  583,  583,
      586,    0,    0,    0,  579,  587,    0,    0,    0,  584,
      584,  585,  585,    0,    0,  586,  586,    0,  583,  588,
      587,  587,  588,  591,  586,  588,  591,  588,    0,  591,

        0,  591,  595,  595,    0,    0,  595,  646,    0,  636,
      636,  588,    0,  636,  595,  591,  587,  590,    0,    0,
      590,  636,  646,  646,    0,  590,  590,  590,  597,    0,
      590,  597,  590,    0,  597,    0,  597,    0,  590,  598,
      590,  590,  599,    0,  595,  595,  598,    0,    0,  599,
      597,  636,  636,    0,  598,  598,  600,  599,  599,  601,
        0,  653,    0,  600,  598,    0,  601,    0,  590,  590,
      594,  600,  600,  594,  601,  601,  653,  653,  594,  594,
      594,  602,  601,  594,  650,    0,    0,    0,  602,  653,
        0,  594,  600,  594,  594,  603,  602,  602,  605,  650,

      650,  604,  603,    0,  650,  605,    0,    0,  604,    0,
      603,  603,  606,  605,  605,  602,  604,  604,  605,  606,
        0,  594,  594,  607,    0,  604,  608,  606,  606,  647,
      607,    0,    0,  608,    0,    0,  609,    0,  607,  607,
      610,  608,  608,  609,  647,  647,    0,  610,  606,    0,
      611,  609,  609,  607,  612,  610,  610,  611,    0,    0,
      608,  612,    0,  647,    0,  611,  611,  609,    0,  612,
      612,  610,  613,    0,  612,  611,  614,    0,  615,  613,
        0,    0,  616,  614,    0,  615,    0,  613,  613,  616,
        0,  614,  614,  615,  615,  617,    0,  616,  616,  618,

        0,  696,  617,  696,  696,  616,  618,  696,  613,  619,
      617,  617,  620,    0,  618,  618,  619,    0,  648,  620,
        0,    0,  621,    0,  619,  619,    0,  620,  620,  621,
      618,  617,  620,  648,  648,  622,    0,  621,  621,  623,
      619,  621,  622,    0,    0,  624,  623,    0,    0,  625,
      622,  622,  624,  648,  623,  623,  625,    0,    0,  626,
      624,  624,  624,    0,  625,  625,  626,  661,    0,    0,
      625,  627,    0,  628,  626,  626,  626,  629,  627,    0,
      628,    0,  661,  661,  629,    0,  627,  627,  628,  628,
        0,    0,  629,  629,    0,  630,    0,  628,  630,    0,

        0,  630,    0,  630,  651,  627,    0,  633,  638,    0,
      633,  638,    0,  633,  638,  633,  638,  630,  632,  651,
      651,  632,    0,    0,    0,  651,  632,  632,  632,  633,
      638,  632,  639,  641,  641,  639,    0,  641,  639,  632,
      639,  632,  632,  643,  644,  641,  643,  644,  658,  643,
      644,  643,  644,  722,  639,  722,  722,  649,    0,  722,
        0,    0,  652,  658,  658,  643,  644,  658,    0,  632,
      632,  635,  649,  649,  635,  641,  641,  652,  652,  635,
      635,  635,  654,  652,  635,  655,    0,  656,  649,  657,
        0,    0,  635,  659,  635,  635,  660,  654,  654,    0,

      655,  655,  656,  656,  657,  657,    0,  654,  659,  659,
      657,  660,  660,    0,    0,  662,    0,  660,  663,    0,
      664,  655,  635,  635,  656,  665,    0,  666,    0,  659,
      662,  662,  667,  663,  663,  664,  664,  668,    0,  669,
      665,  665,  666,  666,  670,  662,  665,  667,  667,  671,
        0,  672,  668,  668,  669,  669,  664,    0,  673,  670,
      670,  674,    0,  675,  671,  671,  672,  672,    0,  670,
        0,    0,  668,  673,  673,  676,  674,  674,  675,  675,
      677,    0,    0,  678,  675,  674,  679,  672,  680,    0,
      676,  676,  681,    0,  682,  677,  677,  677,  678,  678,

      683,  679,  679,  680,  680,  684,    0,  681,  681,  682,
      682,  676,  685,  681,  686,  683,  683,  687,    0,  688,
      684,  684,    0,    0,  689,    0,    0,  685,  685,  686,
      686,    0,  687,  687,  688,  688,    0,    0,  687,  689,
      689,  684,  690,  692,  692,  690,  694,  692,  690,  694,
      690,    0,  694,  685,  694,  692,  731,  695,    0,  697,
      695,    0,  699,  695,  690,  695,  697,  733,  694,  699,
        0,  731,  731,  698,  697,  697,  697,  699,  699,  695,
      698,    0,  733,  733,    0,  692,  692,  700,  698,  698,
      698,  701,    0,  702,  700,    0,    0,  703,  701,  699,

      702,  733,  700,  700,  703,    0,  701,  701,  702,  702,
      704,    0,  703,  703,  705,    0,  701,  704,    0,    0,
      706,  705,    0,    0,  700,  704,  704,  706,    0,  705,
      705,  707,    0,  708,    0,  706,  706,  735,  707,    0,
      708,  705,    0,    0,  709,    0,  707,  707,  708,  708,
        0,  709,  735,  735,  710,    0,  706,  711,  708,  709,
      709,  710,    0,    0,  711,  709,    0,  707,    0,  710,
      710,  712,  711,  711,  713,  710,  714,    0,  712,    0,
        0,  713,    0,  714,    0,    0,  712,  712,  715,  713,
      713,  714,  714,    0,  716,  715,    0,  714,  712,    0,

      717,  716,    0,  715,  715,  718,    0,  717,  713,  716,
      716,  719,  718,  723,  723,  717,  717,  723,  719,    0,
      718,  718,  716,  717,  715,  723,  719,  719,  720,    0,
      721,  725,    0,  721,  725,  720,  721,  725,  721,  725,
      718,    0,  726,  720,  720,  726,    0,  719,  726,    0,
      726,    0,  721,  725,  730,  723,  723,    0,    0,  720,
      727,  732,  727,  727,  726,  728,  727,  734,  728,  730,
      730,  728,  729,  728,  729,  729,  732,  732,  729,  730,
        0,    0,  734,  734,    0,    0,  736,  728,  737,    0,
      738,    0,  739,    0,  740,  730,    0,  734,  741,    0,

      732,  736,  736,  737,  737,  738,  738,  739,  739,  740,
      740,  738,  742,  741,  741,    0,  743,  736,  744,  741,
      745,    0,    0,    0,    0,  746,    0,  742,  742,  747,
      740,  743,  743,  744,  744,  745,  745,  743,  748,  744,
      746,  746,  749,    0,  747,  747,  750,    0,    0,  751,
        0,  752,    0,  748,  748,    0,    0,  749,  749,  748,
      753,  750,  750,  749,  751,  751,  752,  752,  754,    0,
      755,  747,  756,    0,  757,  753,  753,  757,    0,  752,
      757,    0,  757,  754,  754,  755,  755,  756,  756,  758,
        0,  758,  758,  759,    0,  758,  757,  760,    0,    0,

      759,  783,    0,  761,  760,  754,    0,  762,  759,  759,
      761,    0,  760,  760,  762,    0,  783,  783,  761,  761,
      763,    0,  762,  762,  764,    0,  762,  763,  781,  759,
        0,  764,    0,  760,    0,  763,  763,  761,  765,  764,
      764,  766,    0,  781,  781,  765,    0,    0,  766,  781,
      763,  767,    0,  765,  765,  768,  766,  766,  767,  765,
        0,  769,  768,    0,    0,    0,  767,  767,  769,    0,
      768,  768,  770,    0,    0,  768,  769,  769,  771,  770,
        0,  767,  766,  772,    0,  771,    0,  770,  770,  773,
      772,    0,    0,  771,  771,    0,  773,    0,  772,  772,

      774,    0,  775,    0,  773,  773,    0,  774,    0,  775,
      771,    0,  776,  772,  773,  774,  774,  775,  775,  776,
        0,    0,  777,    0,  778,    0,    0,  776,  776,  777,
      780,  778,  780,  780,    0,    0,  780,  777,  777,  778,
      778,    0,  779,  775,  782,  779,  784,  776,  779,    0,
      779,  785,    0,  786,    0,  778,  787,  777,    0,  782,
      782,  784,  784,  788,  779,    0,  785,  785,  786,  786,
      789,  787,  787,  790,  782,    0,  791,    0,  788,  788,
      792,  785,  784,  793,    0,  789,  789,  794,  790,  790,
      789,  791,  791,  795,    0,  792,  792,  791,  793,  793,

      796,    0,  794,  794,    0,  797,    0,  796,  795,  795,
        0,  813,  797,    0,    0,  796,  796,  798,  793,    0,
      797,  797,    0,    0,  798,  796,  813,  813,  799,  795,
      797,  800,  798,  798,  798,  799,    0,    0,  800,    0,
        0,  801,    0,  799,  799,  802,  800,  800,  801,    0,
        0,  803,  802,    0,  800,  802,  801,  801,  803,    0,
      802,  802,  804,    0,  799,  805,  803,  803,  806,  804,
        0,  801,  805,    0,  803,  806,    0,  804,  804,  807,
      805,  805,    0,  806,  806,  808,  807,  806,    0,  805,
      809,    0,  808,    0,  807,  807,    0,  809,    0,    0,

      808,  808,    0,  810,    0,  809,  809,  811,    0,  807,
      810,  809,  812,    0,  811,  814,    0,  815,  810,  810,
      816,    0,  811,  811,  817,    0,  819,  812,  812,  831,
      814,  814,  815,  815,  811,  816,  816,  818,    0,  817,
      817,  819,  819,    0,  831,  831,    0,  812,  820,    0,
      814,  819,  818,  818,  821,  820,    0,    0,  818,  822,
      831,  821,    0,  820,  820,  823,  822,    0,    0,  821,
      821,    0,  823,    0,  822,  822,    0,    0,  824,    0,
      823,  823,  825,    0,  826,  824,  820,    0,    0,  825,
        0,  826,  821,  824,  824,  822,  823,  825,  825,  826,

      826,  827,    0,  828,    0,  826,  829,  825,  827,    0,
      828,  830,    0,  829,  824,  845,  827,  827,  828,  828,
        0,  829,  829,    0,  827,  840,  830,  830,  832,    0,
      845,  845,  833,    0,    0,  832,    0,    0,  828,  833,
      840,  840,    0,  832,  832,  834,  830,  833,  833,  832,
      835,    0,  834,  833,    0,  840,  836,  835,    0,    0,
      834,  834,  837,  836,    0,  835,  835,  838,    0,  837,
      834,  836,  836,  839,  838,    0,    0,  837,  837,  841,
      839,  837,  838,  838,  835,  842,  841,    0,  839,  839,
      843,    0,  842,    0,  841,  841,  844,  843,    0,    0,

      842,  842,  846,  844,    0,  843,  843,  847,    0,  846,
        0,  844,  844,    0,  847,    0,    0,  846,  846,    0,
        0,  843,  847,  847,    0,    0,    0,    0,    0,    0,
        0,    0,  846,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  853,
      853,    0,    0,  853,  854,  854,  854,  854,  854,  854,
      855,  855,    0,    0,  855,  856,  856,  856,  856,  856,
      856,  857,  857,    0,    0,  857,  858,  858,  858,  858,

      858,  858,  859,    0,    0,    0,  859,  859,  859,  859,
      859,  860,  860,    0,  860,  860,  860,  860,  860,  860,
      861,    0,  861,  861,    0,    0,  861,  861,  862,  862,
      862,  862,  863,  863,  863,  863,  864,  864,  864,  864,
      865,  865,  865,  865,  865,  865,  866,    0,    0,    0,
      866,  866,  866,  866,  866,  867,  867,  867,  867,  867,
      867,  868,    0,    0,    0,  868,  868,  868,  868,  868,
      869,  869,  869,  869,  869,  869,  870,    0,    0,    0,
      870,  870,  870,  870,  870,  871,    0,    0,    0,  871,
      871,  871,  871,  871,  872,    0,    0,  872,  872,  872,

      872,  872,  872,  873,    0,    0,    0,  873,  873,  873,
      873,  873,  874,    0,    0,    0,  874,  874,  874,  874,
      874,  875,    0,    0,  875,  875,  875,  875,  875,  875,
      876,    0,    0,    0,  876,  876,  876,  876,  876,  877,
        0,    0,    0,  877,  877,  877,  877,  877,  878,    0,
        0,  878,  878,  878,  878,  878,  878,  879,    0,    0,
        0,  879,  879,  879,  879,  879,  880,    0,    0,    0,
      880,  880,  880,  880,  880,  881,    0,    0,    0,  881,
      881,  881,  881,  881,  882,    0,    0,  882,  882,  882,
      882,  882,  882,  883,    0,    0,    0,  883,  883,  883,

      883,  883,  884,    0,    0,  884,  884,  884,  884,  884,
      884,  885,    0,    0,  885,  885,  885,  885,  885,  885,
      886,    0,    0,    0,  886,  886,  886,  886,  886,  887,
        0,    0,  887,  887,  887,  887,  887,  887,  888,    0,
        0,  888,  888,  888,  888,  888,  888,  889,    0,    0,
        0,  889,  889,  889,  889,  889,  890,    0,    0,  890,
      890,  890,  890,  890,  890,  891,    0,    0,  891,  891,
      891,  891,  891,  891,  892,    0,    0,  892,  892,  892,
      892,  892,  892,  893,    0,    0,  893,  893,  893,  893,
      893,  893,  848,  848,  848,  848,  848,  848,  848,  848,

      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
#define INITIAL 0
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "main.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

int braceCount;
int parenCount;
string latexCode;
#define ID_MODE 1

#define CMD_MODE 2

#define FILE_NAME_MODE 3

#define STRING_MODE 4

#define LATEX_MODE 5

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 83 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 849 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5093 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 87 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 91 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 97 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 98 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 102 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 106 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 107 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 108 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 109 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 110 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 111 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 112 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 113 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 114 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 115 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 116 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 117 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 119 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 120 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 121 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
return KW_OREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 124 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 126 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 130 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 131 "../../../src/Mixfix/lexer.ll"
return KW_XUNIFY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 132 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_CONTEXT;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_OPS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 95:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 99:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 255 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 256 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 260 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 270 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 271 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 272 "../../../src/Mixfix/lexer.ll"
FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 273 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK


case 147:
YY_RULE_SETUP
#line 277 "../../../src/Mixfix/lexer.ll"
// eat white space
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 278 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 149:
YY_RULE_SETUP
#line 286 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 291 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 151:
YY_RULE_SETUP
#line 300 "../../../src/Mixfix/lexer.ll"
latexCode += yytext;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 301 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = latexCode.c_str();
						  return LATEX_STRING;
						}
					    }
					  latexCode += yytext;
					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  latexCode += yytext;
					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 335 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 341 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 342 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 343 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 348 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 849 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 849 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 848);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 348 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"
