/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 167
#define YY_END_OF_BUFFER 168
static yyconst short int yy_accept[865] =
    {   0,
      164,  164,  164,  164,  164,  164,  153,  153,  155,  155,
        0,    0,  168,  166,  164,  165,  165,   96,  166,   94,
       96,   96,   96,   94,   95,   95,   96,  166,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   15,   96,   96,   96,   96,   96,   96,   96,
      152,  166,  150,  150,  150,  152,  150,  150,  152,  166,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  100,  166,
       98,  100,   98,  100,  100,   99,   98,  100,  166,  100,
      100,  154,  153,  167,  155,  156,  163,  157,  162,  162,

      158,  159,  157,  160,  161,  164,   96,    0,   96,    0,
        0,    0,   96,   96,   95,    0,   96,   96,   96,   96,
       96,   11,   96,   96,   96,   96,   96,   40,   96,   96,
       71,   96,   96,   96,   96,   96,   96,   96,   58,   96,
        5,   96,   96,   96,   14,   96,   70,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   35,   68,   96,   96,
       96,   96,   96,   96,   96,   96,   72,   96,   96,   96,
       96,   96,   96,   96,   96,    6,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,  152,    0,  151,  152,
        0,    0,    0,  152,  152,  146,  149,  147,    0,  152,

      152,  152,  152,  152,  141,  152,  152,  152,  152,  140,
      129,  152,  152,  152,  152,  128,  152,  127,  152,  152,
      152,  152,  138,  152,  152,  152,  134,  152,  129,  152,
      142,  152,  152,  152,  152,  152,  101,  129,  152,  148,
      100,    0,  100,    0,    0,    0,  100,  100,    0,   97,
       99,    0,    5,  154,  153,  155,  157,  157,   96,    0,
        2,    2,   96,   96,   96,   63,   96,   96,   96,   62,
       96,   96,   96,   96,   96,   96,   96,   96,   16,   71,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   70,   96,   96,    6,   27,   96,

       96,   36,   96,   68,   96,   96,   96,   96,   96,   96,
       10,   96,   93,   19,   96,   96,   21,   72,   96,   96,
       96,   33,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   69,   96,   96,   96,   96,   96,   96,
       96,  152,    0,    2,    2,  152,  152,  139,  152,  152,
      143,  152,  152,  152,  152,  152,  152,  152,  152,  106,
      152,  129,  152,  144,  152,  152,  152,  152,  152,  152,
      122,  121,  152,  135,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  137,  100,    0,    2,    2,    0,
        0,    0,    0,    2,    2,    2,    1,    2,    2,   96,

       96,   96,   42,   96,   96,   96,   96,   96,   96,   48,
       26,   96,   20,   96,   96,   86,   22,   96,   96,   54,
       96,   23,   96,   96,   96,   96,    9,   25,   96,    3,
       96,   96,   96,   18,   96,    7,   96,   96,   89,   13,
       96,   96,   96,   96,   15,   96,   96,   96,   96,   96,
       72,   96,   96,   34,   67,   24,   96,   84,   96,   96,
       59,   96,   96,   96,   69,   96,    8,   96,   96,   55,
       96,   96,    0,    0,    2,    2,    2,    1,    2,    2,
      152,  152,  105,  152,  152,  117,  152,  152,  144,  152,
      152,  145,  152,  152,  102,  152,  152,  152,  107,  152,

      152,  108,  152,  152,  109,    3,  152,  152,  136,  152,
      152,  116,  111,  152,  152,  130,  152,  152,  152,  152,
      152,  152,  137,    0,    0,    2,    2,    1,    2,    2,
        0,    0,    2,    2,    1,    1,    1,    1,    1,    2,
        2,    2,   83,   96,   57,   87,   41,   51,   96,   96,
       96,   96,   96,   96,   76,   96,   81,   96,   96,   96,
       96,   96,   96,   96,   52,   96,   74,   90,   28,   96,
       96,   96,   96,   96,   56,   17,   50,   96,   96,   12,
       96,   96,   96,   96,   96,   96,   96,   67,   96,   60,
       49,   96,   96,   37,   31,   96,   66,   85,   43,   96,

       96,    2,    2,    1,    1,    1,    1,    1,    2,    2,
        2,  104,  132,  152,  152,  152,  123,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  103,  118,  152,
      152,  152,  152,  152,  152,  152,  110,  130,  152,  114,
      152,  152,  152,  129,    2,    2,    1,    1,    1,    1,
        2,    2,    2,    1,    1,    1,    1,    1,    2,    2,
       38,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   78,   96,    4,   96,   96,   90,
       53,   65,   27,   96,   92,   56,   96,   96,   96,   96,
       19,   82,   47,   96,   30,   44,   96,   96,   96,   61,

       96,   29,   32,    1,    1,    1,    1,    1,    2,    2,
      152,  152,  120,  152,  152,    4,  115,  112,  152,  152,
      152,  152,  152,  152,  152,  121,  152,  152,  152,  152,
      152,  152,  152,  152,  152,    1,    1,    1,    1,    1,
        2,    2,    1,    1,   96,   57,   96,   75,   96,   46,
       96,   96,   20,   96,   96,   80,   96,   96,   79,   64,
       96,   96,   91,   77,   96,   21,   96,   96,   73,   39,
        1,    1,  152,  152,  152,  152,  152,  124,  152,  152,
      152,  152,  122,  152,  125,  152,  152,  152,  119,  152,
      152,  131,  152,    1,    1,   96,   96,   75,   96,   96,

       26,   45,   22,   96,   23,   96,   96,   93,   24,   96,
      152,  152,  152,  152,  152,  152,  152,  152,  108,  113,
      152,  152,  152,  114,  133,  131,  152,   96,   88,   96,
       48,   54,   18,   96,   96,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  126,   96,   96,  152,  152,  152,
      152,  107,  152,  111,  133,   96,  104,  105,  152,  116,
       49,  152,  120,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   22,    8,   24,   25,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   13,   53,   54,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    6,    9,    9,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    5,    6
    } ;

static yyconst short int yy_base[910] =
    {   0,
        0,    0,   55,    0,  110,  163,  134,  140,  145,  149,
      216,  271,  313, 5174,  151, 5174, 5174,  167,  171, 5174,
      174, 5174,  180,  184,  187,  219,  205,  196,  226,  222,
      261,  282,  278,  305,  236,  286,  232,  291,  327,  338,
      349,  346,  335,  373,  411,  382,  384,  387,  405,  409,
      434,  215, 5174,  436,  453,  455,  465,  476,  478,  485,
      489,  530,  495,  501,  540,  506,  575,  562,  572,  585,
      607,  602,  612,  631,  634,  644,  654,  666,  264,  231,
     5174,  284, 5174,  458,  690,  527,  376,  484,  651,  503,
     5174,    0,  116, 5174,    0, 5174, 5174,    0, 5174, 5174,

     5174, 5174,  149, 5174, 5174,  331,  538,  269,  552,  691,
      274,  281,  583,  642,  699,  696,  702,  710,  713,  716,
      730,  727,  737,  744,  747,  750,  754,  767,  778,  780,
      785,  788,  797,  806,  799,  810,  819,  827,  831,  837,
      841,  848,  850,  855,  858,  861,  867,  869,  875,  879,
      888,  892,  896,  901,  913,  905,  918,  923,  930,  937,
      932,  940,  961,  967,  944,  970,  972,  978,  984,  995,
      998, 1002, 1016, 1023, 1027, 1019, 1033, 1050, 1053, 1055,
     1057, 1059, 1061, 1079, 1081, 1084, 1086,  296, 1103, 1105,
     1122,  323,  264, 1125, 1130, 1142, 1144, 1147,  785, 1161,

     1164, 1167, 1185, 1191, 1195, 1208, 1212, 1218, 1222, 1232,
     1244, 1249, 1246, 1263, 1266, 1285, 1288, 1290, 1302, 1312,
     1314, 1324, 1326, 1325, 1349, 1337, 1351, 1362, 1368, 1380,
     1385, 1391, 1397, 1408, 1414, 1419, 1431, 1433, 1436, 1450,
     1172,  356, 1178, 1454,  360,  256, 1252, 1462, 1478, 5174,
     1479, 1488, 1189,    0,  131,    0,    0, 5174, 1320,  417,
     1541, 1594, 1394, 1491, 1496, 1445, 1499, 1502, 1505, 1508,
     1529, 1534, 1552, 1561, 1510, 1564, 1582, 1558, 1600, 1602,
     1604, 1608, 1611, 1613, 1625, 1631, 1635, 1639, 1642, 1648,
     1661, 1665, 1672, 1675, 1683, 1686, 1692, 1695, 1697, 1700,

     1703, 1709, 1720, 1722, 1726, 1728, 1730, 1733, 1751, 1753,
     1739, 1756, 1759, 1764, 1770, 1778, 1781, 1788, 1790, 1798,
     1802, 1809, 1812, 1819, 1821, 1826, 1830, 1838, 1833, 1840,
     1858, 1844, 1862, 1871, 1875, 1880, 1882, 1885, 1888, 1892,
     1899, 1902,  419, 1937, 1990, 1920, 1940, 1954, 1957, 1974,
     2000, 2011, 2013, 2001, 2035, 2046, 2048, 2052, 2058, 2071,
     2081, 2084, 2098, 2101, 2115, 2118, 2128, 2138, 2140, 2142,
     2161, 2163, 2165, 2167, 2185, 2187, 2197, 2207, 2209, 2220,
     2234, 2237, 2247, 2258, 2264, 1910,  423, 2308, 2361,  246,
      237,  463,  239,    0,  213, 1979, 2414,  106, 2467, 1930,

     1943, 2025, 1968, 2079, 2195, 2267, 2104, 2281, 2269, 2277,
     2289, 2311, 2317, 2315, 2329, 2054, 2325, 2334, 2364, 2367,
     2369, 2392, 2372, 2375, 2402, 2395, 2420, 2424, 2428, 2431,
     2438, 2433, 2450, 2460, 2470, 2473, 2478, 2484, 2487, 2497,
     2501, 2504, 2506, 2515, 2509, 2518, 2523, 2528, 2536, 2540,
     2532, 2545, 2554, 2559, 2562, 2566, 2568, 2571, 2576, 2579,
     2589, 2593, 2598, 2601, 2606, 2610, 2615, 2618, 2628, 2620,
     2632, 2637,  512,  230,  211, 2662,  202, 2685,  406, 2738,
     2656, 2658, 2681, 2695, 2699, 2709, 2734, 2748, 2745, 2771,
     2773, 2776, 2794, 2796, 2799, 2816, 2818, 2820, 2838, 2840,

     2842, 2852, 2865, 2871, 2875, 2885, 2888, 2899, 2902, 2913,
     2923, 2926, 2936, 2946, 2949, 2959, 2963, 2976, 2980, 2982,
     2999, 2986, 3003,  525,  210,  182, 2669, 3028,  532, 3081,
      188,  175, 3039,  682,    0, 3134, 3040,  159, 3187, 3044,
      150, 3060, 2689, 3047, 2721, 2707, 2731, 2828, 3050, 2846,
     3069, 3075, 2848, 3089, 3011, 3093, 3095, 3100, 3098, 3102,
     3128, 3130, 3137, 3140, 3142, 3154, 3160, 3180, 3168, 3193,
     3190, 3197, 3201, 3204, 3207, 3210, 3224, 3232, 3234, 3241,
     3246, 3251, 3254, 3258, 3263, 3265, 3268, 3277, 3282, 3285,
     3287, 3290, 3294, 3311, 3313, 3315, 3318, 3320, 3322, 3325,

     3332, 3360, 1030, 3383, 3367,    0,  136, 3436, 3367,  135,
     3394, 3397, 3400, 3414, 3402, 3432, 3446, 3457, 3467, 3469,
     3486, 3488, 3492, 3510, 3512, 3514, 3524, 3535, 3538, 3548,
     3552, 3558, 3570, 3572, 3575, 3589, 3599, 3602, 3612, 3616,
     3626, 3638, 3640, 3644, 3670, 1158, 3693, 3682,  124, 3746,
     3656,  109, 3683, 3712, 1488, 3700,    0, 3719, 3757, 2223,
     3361, 3443, 3419, 3440, 3546, 3475, 3671, 3620, 3715, 3750,
     3753, 3760, 3767, 3770, 3634, 3777, 3780, 3784, 3794, 3797,
     3801, 3806, 3808, 3811, 3814, 3818, 3828, 3832, 3835, 3839,
     3842, 3845, 3849, 3859, 3862, 3866, 3868, 3870, 3872, 3876,

     3879, 3893, 3896, 3907, 2248, 3913,    0, 3924, 3925, 2324,
     3927, 3930, 3933, 3951, 3953, 3964, 3974, 3976, 3986, 3996,
     3999, 4009, 4021, 4023, 4033, 4043, 4045, 4047, 4064, 4067,
     4077, 4091, 4094, 4097, 4108, 4127, 2764, 4115,    0, 4140,
     4150, 2774, 4151, 2810, 4137, 3982, 4155, 4041, 4157, 4004,
     4160, 4167, 4073, 4169, 4174, 4177, 4181, 4198, 4200, 4206,
     4208, 4210, 4212, 4217, 4220, 4229, 4237, 4239, 4241, 4246,
     4268, 3169, 4264, 4270, 4274, 4288, 4294, 4298, 4311, 4315,
     4321, 4333, 4339, 4343, 4357, 4361, 4367, 4363, 4380, 4384,
     4394, 4398, 4404, 4423, 3359, 4424, 4392, 4319, 4329, 4412,

     4416, 4434, 4436, 4438, 4441, 4444, 4446, 4448, 4455, 4467,
     4469, 4472, 4489, 4486, 4492, 4509, 4511, 4513, 4530, 4533,
     4535, 4547, 4553, 4557, 4570, 4574, 4580, 4475, 4578, 4582,
     4584, 4588, 4605, 4608, 4610, 4612, 4615, 4632, 4636, 4642,
     4654, 4656, 4659, 4673, 4676, 4681, 4684, 4686, 4698, 4710,
     4721, 4723, 4727, 4733, 4744, 4741, 4747, 4758, 4761, 4772,
     4618, 4775, 4778, 5174, 4814, 4823, 4832, 4841, 4846, 4852,
     4857, 4863, 4868, 4874, 4883, 4892, 4900, 4905, 4909, 4913,
     4918, 4927, 4933, 4942, 4948, 4957, 4966, 4975, 4984, 4993,
     5002, 5011, 5020, 5029, 5038, 5047, 5056, 5065, 5074, 5083,

     5092, 5101, 5110, 5119, 5128, 5137, 5146, 5155, 5164
    } ;

static yyconst short int yy_def[910] =
    {   0,
      864,    1,  864,    3,  865,  865,  866,  866,  867,  867,
      868,  868,  864,  864,  864,  864,  864,  869,  870,  864,
      869,  864,  869,  869,  869,  869,  869,  864,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      871,  872,  864,  871,  871,  871,  871,  871,  871,  864,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  873,  874,
      864,  873,  864,  873,  873,  873,  873,  873,  864,  873,
      864,  875,  864,  864,  876,  864,  864,  877,  864,  864,

      864,  864,  864,  864,  864,  864,  869,  870,  869,  878,
      870,  870,  869,  869,  869,  864,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  871,  872,  871,  871,
      879,  872,  872,  871,  871,  871,  871,  871,  864,  871,

      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,   67,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      873,  874,  873,  880,  874,  874,  873,  873,  864,  864,
      873,  864,  873,  875,  864,  876,  877,  864,  869,  881,
      882,  882,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,

      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  871,  883,  884,  884,  871,  871,  871,  871,   67,
      871,  871,  871,   67,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  873,  885,  886,  886,  864,
      864,  881,  881,  887,  262,  888,  889,  262,  890,  869,

      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  883,  883,  345,  891,  345,  892,  345,  893,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,

      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  885,  885,  389,  894,  895,  389,  896,
      864,  864,  888,  888,  897,  889,  898,  536,  899,  887,
      262,  900,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,

      869,  891,  891,  892,  901,  604,  604,  902,  887,  345,
      903,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  894,  894,  895,  904,  647,  905,
      887,  389,  906,  898,  898,  897,  536,  907,  900,  900,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,

      869,  869,  869,  901,  901,  897,  604,  908,  903,  903,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  904,  904,  897,  647,  909,
      906,  906,  907,  907,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      908,  908,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  909,  909,  869,  869,  869,  869,  869,

      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  869,  869,  869,
      869,  869,  869,  869,  869,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  869,  869,  871,  871,  871,
      871,  871,  871,  871,  871,  869,  871,  871,  871,  871,
      869,  871,  871,    0,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,

      864,  864,  864,  864,  864,  864,  864,  864,  864
    } ;

static yyconst short int yy_nxt[5230] =
    {   0,
       14,   15,   16,   14,   17,   15,   15,   18,   19,   20,
       20,   21,   18,   22,   23,   24,   25,   26,   18,   18,
       18,   20,   18,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   18,   36,   18,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   18,
       18,   22,   22,   18,   18,   14,   15,   16,   14,   17,
       15,   15,   51,   52,   53,   53,   54,   55,   53,   56,
       55,   51,   51,   57,   58,   51,   53,   51,   59,   60,
       61,   51,   62,   63,   64,   65,   66,   51,   67,   68,
       51,   69,   70,   51,   71,   72,   51,   73,   74,   75,

       76,   77,   51,   51,   51,   51,   53,   53,   78,   51,
       14,   15,   16,   14,   17,   15,   15,  255,   80,   81,
       81,   82,  255,   83,   84,   85,  395,   86,   87,  526,
      540,   81,  255,   88,   89,   93,   94,  255,   94,   94,
       93,   93,   94,   90,   94,   94,   93,   96,  738,   96,
       96,   96,  106,   96,   96,  475,  106,  106,  258,  258,
      706,   91,   91,   14,   15,   16,   14,   17,   15,   15,
      395,   80,   81,   81,   82,  108,   83,   84,   85,  107,
       86,   87,  108,  656,   81,  113,   88,   89,  108,  250,
      109,  110,  108,  112,  114,  108,   90,  109,  110,  250,

      258,  258,  526,  109,  110,  109,  109,  109,  110,  109,
      109,  110,  524,  108,   91,   91,   97,  109,   99,   97,
      100,   97,  475,  187,   97,  101,  102,  108,  109,  116,
      108,  475,  473,  395,  108,  115,  115,  193,  103,  241,
      108,  392,  109,  110,  108,  109,  110,  109,  109,  109,
      110,  532,  117,  246,  118,  109,  110,  531,  245,  109,
      110,  120,  119,  139,  121,  142,  192,  104,  105,  108,
       97,   97,  242,   99,   97,  100,   97,  107,  140,   97,
      101,  102,  107,  111,  109,  110,  108,  243,  244,  122,
      108,  112,  242,  103,  108,  247,  112,  123,  124,  108,

      125,  109,  110,  126,  187,  109,  110,  243,  244,  109,
      110,  127,  864,  108,  109,  110,  143,  130,  193,  131,
      132,  128,  104,  105,  141,   97,  133,  129,  109,  110,
      144,  187,  106,  864,  145,  108,  106,  106,  864,  864,
      864,  134,  135,  108,  136,  193,  108,  137,  864,  138,
      109,  110,  146,  147,  108,  864,  148,  108,  109,  110,
      149,  109,  110,  151,  241,  864,  150,  864,  241,  109,
      110,  159,  109,  110,  864,  154,  864,  152,  246,  155,
      164,  108,  246,  153,  242,  160,  156,  157,  161,  158,
      108,  162,  108,  163,  864,  108,  109,  110,  165,  243,

      244,  864,  166,  864,  864,  109,  110,  109,  110,  167,
      109,  110,  180,  108,  176,  177,  181,  108,  168,  108,
      182,  864,  179,  864,  178,  259,  475,  342,  109,  110,
      609,  386,  109,  110,  109,  110,  864,  183,  184,  393,
      169,  474,  188,  170,  188,  525,  185,  194,  171,  189,
      172,  189,  864,  173,  186,  174,  175,  190,  191,  190,
      191,  188,  864,  188,  864,  864,  242,  864,  189,  195,
      189,  259,  248,  188,  864,  196,  190,  191,  190,  191,
      189,  243,  244,  197,  188,  393,  188,  864,  190,  191,
      864,  189,  242,  189,  190,  190,  198,  188,  190,  190,

      191,  190,  199,  188,  189,  864,  190,  243,  252,  188,
      189,  242,  190,  191,  188,  864,  189,  864,  190,  191,
      342,  189,  864,  864,  190,  191,  243,  244,  208,  190,
      191,  214,  200,  386,  474,  242,  190,  190,  188,  209,
      864,  253,  210,  251,  251,  189,  108,  525,  188,  211,
      243,  244,  526,  190,  191,  189,  651,  864,  864,  201,
      108,  109,  110,  190,  191,  864,  202,  203,  864,  204,
      188,  205,  206,  864,  207,  109,  116,  189,  864,  212,
      188,  864,  213,  188,  864,  190,  191,  189,  220,  864,
      189,  108,  864,  188,  261,  190,  191,  221,  190,  191,

      189,  222,  864,  215,  864,  216,  109,  110,  190,  191,
      188,  223,  864,  217,  224,  188,  864,  189,  218,  219,
      188,  864,  189,  864,  864,  190,  191,  189,  225,  864,
      190,  191,  864,  226,  864,  190,  191,  864,  864,  188,
      864,  228,  188,  864,  229,  230,  189,  227,  231,  189,
      108,  864,  188,  864,  190,  191,  262,  190,  191,  189,
      243,  243,  188,  236,  243,  109,  110,  190,  191,  189,
      232,  233,  243,  237,  188,  234,  235,  190,  191,  239,
      864,  189,  394,  864,  111,  394,  240,  238,  111,  190,
      191,  249,  250,  249,  249,  249,  249,  864,  242,  260,

      109,  109,  243,  243,  109,  109,  109,  108,  864,  109,
      108,  864,  109,  243,  244,  115,  115,  109,  108,  864,
      864,  108,  109,  110,  108,  109,  110,  864,  864,  864,
      864,  864,  864,  109,  110,  108,  109,  110,  108,  109,
      110,  263,  109,  109,  267,  108,  265,  109,  109,  266,
      109,  110,  108,  109,  110,  108,  264,  864,  108,  268,
      109,  110,  108,  864,  864,  864,  269,  109,  110,  864,
      109,  110,  270,  109,  110,  108,  864,  109,  110,  275,
      276,  864,  864,  271,  272,  273,  108,  864,  108,  864,
      109,  110,  274,  108,  190,  190,  108,  277,  190,  864,

      864,  109,  110,  109,  110,  108,  190,  108,  109,  110,
      279,  109,  110,  864,  108,  278,  864,  281,  108,  864,
      109,  110,  109,  110,  282,  864,  864,  108,  280,  109,
      110,  284,  864,  109,  110,  108,  190,  190,  285,  108,
      864,  283,  109,  110,  864,  108,  864,  864,  287,  108,
      109,  110,  286,  864,  109,  110,  108,  864,  108,  176,
      109,  110,  288,  108,  109,  110,  108,  864,  289,  108,
      864,  109,  110,  109,  110,  108,  291,  108,  109,  110,
      292,  109,  110,  108,  109,  110,  290,  108,  864,  864,
      109,  110,  109,  110,  293,  864,  108,  864,  109,  110,

      108,  864,  109,  110,  108,  294,  296,  298,  864,  108,
      295,  109,  110,  108,  864,  109,  110,  864,  864,  109,
      110,  108,  864,  297,  109,  110,  108,  864,  109,  110,
      299,  108,  864,  301,  300,  176,  109,  110,  108,  864,
      108,  109,  110,  302,  303,  108,  109,  110,  108,  864,
      864,  864,  108,  109,  110,  109,  110,  864,  864,  864,
      109,  110,  864,  109,  110,  308,  304,  109,  110,  108,
      864,  309,  305,  864,  306,  108,  864,  307,  108,  864,
      108,  864,  864,  310,  109,  110,  108,  864,  313,  311,
      109,  110,  108,  109,  110,  109,  110,  864,  314,  864,

      312,  109,  110,  108,  864,  864,  108,  109,  110,  320,
      108,  864,  864,  315,  319,  318,  316,  317,  109,  110,
      321,  109,  110,  864,  108,  109,  110,  108,  322,  864,
      394,  108,  192,  394,  323,  108,  192,  324,  864,  109,
      110,  108,  109,  110,  325,  326,  109,  110,  327,  864,
      109,  110,  328,  329,  864,  864,  109,  110,  108,  864,
      864,  108,  864,  108,  330,  108,  864,  108,  864,  108,
      331,  864,  864,  109,  110,  332,  109,  110,  109,  110,
      109,  110,  109,  110,  109,  110,  333,  108,  336,  108,
      337,  864,  108,  864,  188,  864,  864,  334,  864,  335,

      338,  189,  109,  110,  109,  110,  340,  109,  110,  190,
      191,  188,  864,  188,  864,  864,  864,  864,  189,  864,
      189,  864,  341,  339,  864,  864,  190,  191,  190,  199,
      343,  190,  190,  188,  864,  190,  344,  864,  188,  864,
      189,  864,  864,  190,  345,  189,  864,  864,  190,  191,
      188,  864,  188,  190,  191,  188,  864,  189,  394,  189,
      245,  394,  189,  864,  245,  190,  191,  190,  191,  188,
      190,  191,  188,  190,  190,  188,  189,  864,  864,  189,
      242,  864,  189,  864,  190,  191,  242,  190,  191,  864,
      190,  191,  347,  188,  864,  243,  244,  242,  864,  188,

      189,  243,  252,  188,  346,  205,  189,  864,  190,  191,
      189,  348,  243,  244,  190,  191,  188,  864,  190,  191,
      188,  864,  864,  189,  864,  864,  188,  189,  349,  350,
      188,  190,  191,  189,  864,  190,  191,  189,  864,  864,
      188,  190,  191,  864,  351,  190,  191,  189,  864,  864,
      354,  352,  188,  864,  188,  190,  191,  188,  864,  189,
      242,  189,  353,  388,  189,  864,  864,  190,  191,  190,
      191,  188,  190,  191,  188,  243,  244,  864,  189,  864,
      359,  189,  864,  864,  360,  357,  190,  191,  355,  190,
      191,  356,  864,  188,  864,  361,  188,  864,  188,  864,

      189,  864,  864,  189,  864,  189,  864,  358,  190,  191,
      188,  190,  191,  190,  191,  362,  864,  189,  864,  864,
      188,  864,  188,  864,  864,  190,  191,  189,  108,  189,
      864,  363,  188,  864,  188,  190,  191,  190,  191,  189,
      365,  189,  864,  109,  110,  188,  864,  190,  191,  190,
      191,  364,  189,  187,  367,  187,  864,  188,  366,  188,
      190,  191,  368,  187,  189,  373,  189,  864,  369,  370,
      188,  372,  190,  191,  190,  191,  188,  189,  864,  864,
      371,  864,  864,  189,  864,  190,  191,  864,  188,  864,
      864,  190,  191,  188,  374,  189,  864,  376,  375,  188,

      189,  864,  108,  190,  191,  188,  189,  377,  190,  191,
      864,  378,  189,  864,  190,  191,  188,  109,  110,  864,
      190,  191,  188,  189,  864,  864,  380,  188,  864,  189,
      864,  190,  191,  379,  189,  864,  400,  190,  191,  188,
      382,  188,  190,  191,  188,  864,  189,  864,  189,  864,
      381,  189,  864,  108,  190,  191,  190,  191,  188,  190,
      191,  383,  387,  243,  243,  189,  384,  243,  109,  110,
      242,  864,  864,  190,  191,  243,  389,  864,  385,  249,
      250,  249,  249,  249,  249,  243,  244,  242,  535,  390,
      111,  535,  391,  864,  111,  251,  251,  243,  243,  108,

      864,  243,  243,  244,  108,  243,  243,  108,  864,  243,
      108,  864,  864,  108,  109,  110,  108,  864,  108,  109,
      110,  402,  109,  110,  401,  109,  110,  404,  109,  110,
      405,  109,  110,  109,  110,  864,  864,  108,  413,  243,
      243,  394,  108,  864,  394,  864,  864,  864,  403,  396,
      394,  394,  109,  110,  394,  864,  864,  109,  110,  864,
      108,  397,  394,  864,  398,  399,  108,  864,  406,  108,
      864,  407,  108,  864,  408,  109,  110,  864,  864,  409,
      410,  109,  110,  864,  109,  110,  864,  109,  110,  864,
      108,  864,  394,  394,  394,  864,  411,  394,  416,  412,

      864,  864,  396,  394,  394,  109,  110,  394,  108,  414,
      108,  415,  108,  864,  397,  394,  108,  398,  399,  108,
      864,  108,  864,  109,  110,  109,  110,  109,  110,  864,
      864,  109,  110,  108,  109,  110,  109,  110,  864,  108,
      419,  864,  864,  108,  418,  394,  394,  108,  109,  110,
      108,  417,  864,  176,  109,  110,  108,  420,  109,  110,
      864,  864,  109,  110,  864,  109,  110,  864,  421,  108,
      864,  109,  110,  108,  864,  864,  425,  864,  424,  423,
      108,  864,  422,  108,  109,  110,  864,  864,  109,  110,
      426,  108,  864,  427,  108,  109,  110,  864,  109,  110,

      108,  864,  429,  108,  864,  108,  109,  110,  108,  109,
      110,  108,  428,  864,  864,  109,  110,  108,  109,  110,
      109,  110,  431,  109,  110,  430,  109,  110,  108,  435,
      108,  864,  109,  110,  108,  864,  108,  434,  108,  433,
      432,  108,  864,  109,  110,  109,  110,  108,  436,  109,
      110,  109,  110,  109,  110,  437,  109,  110,  440,  108,
      439,  108,  109,  110,  108,  864,  864,  108,  864,  438,
      864,  441,  108,  864,  109,  110,  109,  110,  108,  109,
      110,  442,  109,  110,  864,  444,  108,  109,  110,  108,
      864,  864,  446,  109,  110,  443,  108,  864,  108,  864,

      445,  109,  110,  864,  109,  110,  108,  449,  864,  447,
      108,  109,  110,  109,  110,  448,  864,  108,  864,  451,
      108,  109,  110,  450,  864,  109,  110,  108,  864,  108,
      864,  453,  109,  110,  108,  109,  110,  864,  108,  864,
      452,  108,  109,  110,  109,  110,  108,  176,  108,  109,
      110,  864,  108,  109,  110,  864,  109,  110,  864,  454,
      864,  109,  110,  109,  110,  455,  108,  109,  110,  864,
      108,  463,  864,  456,  457,  864,  459,  460,  458,  108,
      864,  109,  110,  108,  864,  109,  110,  461,  108,  864,
      108,  462,  464,  108,  109,  110,  108,  864,  109,  110,

      108,  466,  864,  109,  110,  109,  110,  108,  109,  110,
      188,  109,  110,  864,  465,  109,  110,  189,  242,  864,
      470,  469,  109,  110,  468,  190,  191,  467,  188,  864,
      864,  864,  472,  243,  244,  189,  471,  394,  108,  864,
      394,  864,  864,  190,  191,  476,  394,  394,  188,  864,
      394,  108,  477,  109,  110,  189,  864,  478,  394,  481,
      479,  480,  188,  190,  191,  188,  109,  110,  864,  189,
      864,  864,  189,  864,  543,  864,  108,  190,  191,  394,
      190,  191,  394,  482,  864,  111,  544,  395,  394,  394,
      394,  109,  110,  394,  483,  864,  864,  864,  476,  394,

      394,  534,  187,  394,  484,  477,  864,  864,  188,  864,
      478,  394,  187,  479,  480,  189,  864,  485,  187,  188,
      864,  188,  864,  190,  191,  864,  189,  864,  189,  187,
      864,  488,  864,  108,  190,  191,  190,  191,  364,  187,
      489,  394,  394,  188,  490,  491,  864,  492,  109,  110,
      189,  864,  864,  486,  188,  864,  188,  487,  190,  191,
      188,  189,  108,  189,  493,  864,  188,  189,  545,  190,
      191,  190,  191,  189,  864,  190,  191,  109,  110,  188,
      864,  190,  191,  494,  497,  495,  189,  108,  864,  188,
      498,  864,  188,  864,  190,  191,  189,  864,  496,  189,

      864,  864,  109,  110,  190,  191,  188,  190,  191,  188,
      864,  864,  108,  189,  546,  864,  189,  864,  499,  500,
      501,  190,  191,  188,  190,  191,  188,  109,  110,  549,
      189,  864,  864,  189,  864,  864,  188,  864,  190,  191,
      502,  190,  191,  189,  503,  864,  188,  504,  188,  864,
      188,  190,  191,  189,  864,  189,  864,  189,  864,  864,
      864,  190,  191,  190,  191,  190,  191,  508,  864,  188,
      864,  188,  505,  188,  864,  188,  189,  506,  189,  864,
      189,  864,  189,  507,  190,  191,  190,  191,  190,  191,
      190,  191,  510,  188,  864,  188,  864,  511,  864,  864,

      189,  864,  189,  108,  509,  188,  864,  864,  190,  191,
      190,  191,  189,  864,  513,  188,  864,  188,  109,  110,
      190,  191,  189,  394,  189,  392,  394,  864,  188,  392,
      190,  191,  190,  191,  512,  189,  864,  547,  864,  515,
      864,  514,  188,  190,  191,  188,  864,  517,  535,  189,
      192,  535,  189,  516,  192,  188,  864,  190,  191,  518,
      190,  191,  189,  864,  519,  864,  188,  864,  864,  864,
      190,  191,  188,  189,  864,  108,  864,  108,  864,  189,
      520,  190,  191,  864,  521,  108,  864,  190,  191,  108,
      109,  110,  109,  110,  864,  864,  522,  108,  552,  864,

      109,  110,  864,  864,  109,  110,  864,  523,  394,  548,
      553,  394,  109,  110,  550,  864,  527,  394,  394,  108,
      551,  394,  554,  108,  394,  108,  473,  394,  528,  394,
      473,  529,  530,  108,  109,  110,  864,  108,  109,  110,
      109,  110,  108,  864,  864,  864,  557,  864,  109,  110,
      864,  864,  109,  110,  864,  555,  864,  109,  110,  394,
      394,  394,  556,  864,  394,  558,  864,  559,  864,  527,
      394,  394,  108,  864,  394,  108,  864,  108,  864,  560,
      108,  528,  394,  108,  529,  530,  864,  109,  110,  864,
      109,  110,  109,  110,  563,  109,  110,  864,  109,  110,

      108,  864,  561,  108,  565,  864,  864,  864,  864,  864,
      108,  562,  394,  394,  535,  109,  110,  535,  109,  110,
      566,  864,  537,  535,  535,  109,  110,  535,  108,  864,
      864,  568,  108,  864,  564,  535,  108,  538,  539,  108,
      864,  108,  864,  109,  110,  567,  108,  109,  110,  864,
      864,  109,  110,  864,  109,  110,  109,  110,  108,  864,
      569,  109,  110,  864,  864,  535,  535,  394,  108,  571,
      394,  570,  864,  109,  110,  542,  398,  398,  108,  864,
      398,  108,  864,  109,  110,  573,  108,  864,  398,  572,
      394,  394,  108,  109,  110,  108,  109,  110,  864,  574,

      864,  109,  110,  864,  864,  108,  864,  109,  110,  108,
      109,  110,  108,  576,  108,  864,  575,  108,  398,  398,
      109,  110,  864,  108,  109,  110,  108,  109,  110,  109,
      110,  108,  109,  110,  864,  579,  108,  578,  109,  110,
      108,  109,  110,  580,  108,  577,  109,  110,  108,  864,
      582,  109,  110,  108,  864,  109,  110,  581,  864,  109,
      110,  584,  108,  109,  110,  583,  864,  108,  109,  110,
      108,  864,  586,  585,  108,  318,  108,  109,  110,  108,
      864,  587,  109,  110,  108,  109,  110,  108,  864,  109,
      110,  109,  110,  864,  109,  110,  864,  108,  864,  109,

      110,  108,  109,  110,  592,  588,  108,  864,  589,  108,
      864,  590,  109,  110,  108,  864,  109,  110,  108,  864,
      591,  109,  110,  108,  109,  110,  108,  594,  108,  109,
      110,  593,  864,  109,  110,  864,  108,  864,  109,  110,
      108,  109,  110,  109,  110,  108,  864,  598,  864,  596,
      595,  109,  110,  864,  864,  109,  110,  599,  597,  600,
      109,  110,  394,  864,  188,  394,  188,  601,  192,  394,
      475,  189,  394,  189,  864,  245,  864,  526,  864,  190,
      191,  190,  191,  612,  603,  535,  864,  864,  535,  188,
      864,  646,  864,  605,  535,  535,  189,  108,  535,  864,

      606,  613,  864,  188,  190,  191,  535,  188,  607,  608,
      189,  864,  109,  110,  189,  108,  864,  188,  190,  191,
      864,  864,  190,  191,  189,  864,  614,  864,  615,  108,
      109,  110,  190,  191,  864,  664,  535,  535,  394,  108,
      864,  394,  188,  616,  109,  110,  611,  479,  479,  189,
      663,  479,  864,  188,  109,  110,  188,  190,  191,  479,
      189,  394,  394,  189,  535,  864,  245,  535,  190,  191,
      245,  190,  191,  617,  394,  864,  524,  394,  864,  188,
      524,  188,  364,  864,  188,  364,  189,  864,  189,  479,
      479,  189,  618,  864,  190,  191,  190,  191,  864,  190,

      191,  864,  188,  864,  188,  364,  864,  188,  364,  189,
      535,  189,  392,  535,  189,  864,  392,  190,  191,  190,
      191,  620,  190,  191,  188,  864,  188,  864,  188,  864,
      864,  189,  619,  189,  864,  189,  108,  864,  864,  190,
      191,  190,  191,  190,  191,  621,  188,  622,  188,  864,
      188,  109,  110,  189,  108,  189,  108,  189,  864,  623,
      188,  190,  191,  190,  191,  190,  191,  189,  864,  109,
      110,  109,  110,  188,  864,  190,  191,  627,  624,  188,
      189,  864,  666,  188,  625,  864,  189,  626,  190,  191,
      189,  864,  669,  188,  190,  191,  188,  864,  190,  191,

      189,  628,  864,  189,  864,  864,  864,  188,  190,  191,
      188,  190,  191,  630,  189,  864,  864,  189,  864,  629,
      864,  188,  190,  191,  864,  190,  191,  631,  189,  864,
      864,  188,  864,  864,  188,  864,  190,  191,  189,  864,
      632,  189,  864,  864,  188,  864,  190,  191,  864,  190,
      191,  189,  864,  864,  188,  864,  864,  188,  864,  190,
      191,  189,  633,  634,  189,  635,  864,  188,  864,  190,
      191,  188,  190,  191,  189,  636,  864,  864,  189,  864,
      864,  864,  190,  191,  188,  864,  190,  191,  188,  864,
      188,  189,  864,  637,  188,  189,  639,  189,  864,  190,

      191,  189,  638,  190,  191,  190,  191,  188,  864,  190,
      191,  188,  864,  643,  189,  864,  641,  644,  189,  108,
      640,  642,  190,  191,  864,  864,  190,  191,  535,  864,
      864,  535,  864,  864,  109,  110,  648,  535,  535,  394,
      535,  535,  394,  535,  864,  111,  111,  395,  536,  535,
      864,  649,  650,  398,  398,  108,  864,  398,  108,  864,
      394,  534,  655,  394,  864,  398,  392,  864,  541,  864,
      109,  110,  864,  109,  110,  864,  661,  108,  864,  535,
      535,  394,  660,  108,  394,  864,  662,  864,  665,  653,
      529,  529,  109,  110,  529,  398,  398,  108,  109,  110,

      668,  108,  529,  108,  394,  394,  108,  667,  108,  864,
      108,  864,  109,  110,  864,  864,  109,  110,  109,  110,
      671,  109,  110,  109,  110,  109,  110,  670,  864,  672,
      674,  673,  529,  529,  535,  864,  108,  535,  108,  864,
      864,  864,  537,  535,  535,  108,  864,  535,  108,  864,
      108,  109,  110,  109,  110,  535,  675,  538,  539,  676,
      109,  110,  108,  109,  110,  109,  110,  864,  108,  535,
      864,  473,  535,  678,  864,  473,  108,  109,  110,  864,
      864,  677,  679,  109,  110,  535,  535,  535,  108,  864,
      535,  109,  110,  864,  864,  658,  538,  538,  108,  864,

      538,  108,  864,  109,  110,  108,  864,  864,  538,  108,
      535,  535,  108,  109,  110,  108,  109,  110,  108,  682,
      109,  110,  864,  680,  109,  110,  864,  109,  110,  864,
      109,  110,  108,  109,  110,  864,  864,  684,  538,  538,
      108,  681,  108,  864,  683,  864,  685,  109,  110,  108,
      686,  687,  864,  864,  108,  109,  110,  109,  110,  108,
      864,  689,  108,  864,  109,  110,  108,  864,  688,  109,
      110,  108,  864,  108,  109,  110,  108,  109,  110,  864,
      691,  109,  110,  692,  690,  108,  109,  110,  109,  110,
      108,  109,  110,  108,  693,  108,  864,  695,  108,  864,

      109,  110,  108,  864,  864,  109,  110,  694,  109,  110,
      109,  110,  696,  109,  110,  697,  864,  109,  110,  108,
      698,  108,  864,  108,  864,  700,  108,  864,  108,  864,
      108,  864,  699,  108,  109,  110,  109,  110,  109,  110,
      108,  109,  110,  109,  110,  109,  110,  864,  109,  110,
      864,  864,  864,  864,  864,  109,  110,  702,  701,  535,
      394,  524,  535,  394,  864,  524,  192,  535,  475,  108,
      535,  864,  864,  192,  864,  604,  479,  479,  864,  864,
      479,  703,  603,  535,  109,  110,  535,  864,  479,  705,
      864,  605,  535,  535,  394,  864,  535,  394,  606,  864,

      473,  864,  610,  864,  535,  188,  607,  608,  188,  864,
      188,  864,  189,  864,  864,  189,  710,  189,  479,  479,
      190,  191,  188,  190,  191,  190,  191,  108,  864,  189,
      711,  864,  864,  713,  535,  535,  535,  190,  191,  535,
      188,  864,  109,  110,  708,  607,  607,  189,  108,  607,
      864,  108,  864,  864,  188,  190,  191,  607,  712,  535,
      535,  189,  746,  109,  110,  188,  109,  110,  864,  190,
      191,  864,  189,  864,  714,  188,  864,  188,  864,  747,
      190,  191,  189,  108,  189,  745,  864,  607,  607,  364,
      190,  191,  190,  191,  188,  715,  188,  864,  109,  110,

      188,  189,  864,  189,  748,  864,  864,  189,  864,  190,
      191,  190,  191,  716,  864,  190,  191,  864,  188,  864,
      188,  864,  188,  864,  717,  189,  864,  189,  864,  189,
      718,  719,  188,  190,  191,  190,  191,  190,  191,  189,
      864,  864,  722,  188,  864,  721,  188,  190,  191,  720,
      189,  864,  864,  189,  108,  864,  188,  864,  190,  191,
      188,  190,  191,  189,  864,  864,  188,  189,  723,  109,
      110,  190,  191,  189,  270,  190,  191,  725,  188,  724,
      188,  190,  191,  188,  864,  189,  864,  189,  864,  864,
      189,  864,  864,  190,  191,  190,  191,  188,  190,  191,

      864,  864,  726,  729,  189,  864,  864,  188,  864,  727,
      188,  728,  190,  191,  189,  864,  730,  189,  864,  864,
      188,  864,  190,  191,  188,  190,  191,  189,  108,  864,
      864,  189,  864,  864,  188,  190,  191,  731,  864,  190,
      191,  189,  108,  109,  110,  732,  188,  864,  188,  190,
      191,  733,  188,  189,  864,  189,  750,  109,  110,  189,
      864,  190,  191,  190,  191,  529,  529,  190,  191,  529,
      394,  864,  735,  394,  864,  864,  245,  529,  526,  108,
      734,  864,  535,  394,  864,  535,  394,  864,  245,  524,
      647,  652,  646,  535,  109,  110,  535,  864,  864,  864,

      749,  648,  535,  535,  737,  742,  535,  529,  529,  538,
      538,  864,  535,  538,  535,  535,  649,  650,  111,  535,
      536,  538,  535,  108,  864,  392,  864,  657,  864,  864,
      864,  864,  864,  864,  655,  864,  864,  864,  109,  110,
      864,  744,  864,  864,  535,  535,  535,  864,  751,  535,
      864,  538,  538,  864,  740,  649,  649,  394,  108,  649,
      394,  108,  864,  392,  864,  541,  864,  649,  108,  535,
      535,  864,  864,  109,  110,  108,  109,  110,  108,  660,
      864,  864,  753,  109,  110,  108,  864,  754,  108,  864,
      109,  110,  108,  109,  110,  752,  864,  649,  649,  756,

      109,  110,  108,  109,  110,  108,  864,  109,  110,  108,
      864,  755,  864,  864,  108,  757,  108,  109,  110,  108,
      109,  110,  108,  759,  109,  110,  108,  864,  758,  109,
      110,  109,  110,  864,  109,  110,  108,  109,  110,  864,
      108,  109,  110,  108,  761,  864,  864,  108,  864,  760,
      108,  109,  110,  108,  864,  109,  110,  108,  109,  110,
      762,  763,  109,  110,  765,  109,  110,  108,  109,  110,
      108,  864,  109,  110,  108,  864,  108,  864,  108,  764,
      108,  864,  109,  110,  108,  109,  110,  108,  766,  109,
      110,  109,  110,  109,  110,  109,  110,  864,  864,  109,

      110,  108,  109,  110,  108,  864,  864,  535,  770,  864,
      535,  864,  767,  192,  768,  604,  109,  110,  864,  109,
      110,  769,  607,  607,  535,  394,  607,  535,  394,  705,
      473,  473,  707,  610,  607,  188,  864,  864,  188,  864,
      864,  188,  189,  864,  864,  189,  772,  710,  189,  864,
      190,  191,  773,  190,  191,  774,  190,  191,  864,  188,
      864,  188,  864,  864,  607,  607,  189,  864,  189,  864,
      864,  864,  188,  864,  190,  191,  190,  191,  775,  189,
      864,  864,  188,  864,  188,  864,  777,  190,  191,  189,
      108,  189,  864,  864,  188,  864,  776,  190,  191,  190,

      191,  189,  864,  864,  188,  109,  110,  188,  864,  190,
      191,  189,  108,  864,  189,  864,  864,  188,  864,  190,
      191,  778,  190,  191,  189,  864,  864,  109,  110,  188,
      864,  188,  190,  191,  864,  864,  189,  864,  189,  864,
      779,  188,  781,  780,  190,  191,  190,  191,  189,  108,
      782,  188,  783,  188,  864,  188,  190,  191,  189,  864,
      189,  864,  189,  864,  109,  110,  190,  191,  190,  191,
      190,  191,  188,  864,  864,  188,  864,  784,  864,  189,
      785,  108,  189,  798,  864,  188,  864,  190,  191,  786,
      190,  191,  189,  787,  864,  864,  109,  110,  864,  188,

      190,  191,  188,  864,  864,  188,  189,  864,  864,  189,
      864,  788,  189,  789,  190,  191,  188,  190,  191,  864,
      190,  191,  790,  189,  649,  649,  864,  535,  649,  864,
      535,  190,  191,  245,  864,  647,  649,  791,  864,  864,
      535,  792,  864,  535,  864,  108,  524,  793,  739,  737,
      394,  535,  864,  394,  535,  864,  524,  392,  652,  657,
      109,  110,  795,  108,  864,  108,  649,  649,  108,  864,
      796,  864,  742,  744,  864,  108,  864,  108,  109,  110,
      109,  110,  108,  109,  110,  108,  661,  864,  864,  108,
      109,  110,  109,  110,  864,  799,  801,  109,  110,  800,

      109,  110,  797,  803,  109,  110,  108,  864,  108,  864,
      804,  864,  864,  802,  108,  864,  108,  864,  108,  864,
      108,  109,  110,  109,  110,  108,  864,  805,  108,  109,
      110,  109,  110,  109,  110,  109,  110,  108,  864,  807,
      109,  110,  864,  109,  110,  108,  864,  108,  864,  108,
      864,  864,  109,  110,  108,  864,  808,  864,  806,  864,
      109,  110,  109,  110,  109,  110,  809,  864,  535,  109,
      110,  535,  188,  864,  473,  864,  707,  864,  188,  189,
      864,  864,  188,  864,  810,  189,  864,  190,  191,  189,
      772,  864,  864,  190,  191,  864,  188,  190,  191,  864,

      864,  864,  188,  189,  864,  864,  188,  864,  811,  189,
      864,  190,  191,  189,  812,  814,  813,  190,  191,  188,
      864,  190,  191,  188,  864,  864,  189,  108,  864,  188,
      189,  864,  815,  864,  190,  191,  189,  108,  190,  191,
      816,  188,  109,  110,  190,  191,  864,  188,  189,  864,
      864,  188,  109,  110,  189,  864,  190,  191,  189,  818,
      864,  819,  190,  191,  817,  188,  190,  191,  820,  188,
      864,  188,  189,  830,  864,  188,  189,  864,  189,  864,
      190,  191,  189,  864,  190,  191,  190,  191,  188,  864,
      190,  191,  188,  864,  864,  189,  823,  864,  864,  189,

      108,  821,  188,  190,  191,  822,  188,  190,  191,  189,
      864,  864,  188,  189,  864,  109,  110,  190,  191,  189,
      108,  190,  191,  535,  108,  864,  535,  190,  191,  524,
      829,  739,  108,  824,  864,  109,  110,  825,  864,  109,
      110,  826,  108,  827,  108,  795,  108,  109,  110,  108,
      831,  864,  108,  828,  108,  864,  108,  109,  110,  109,
      110,  109,  110,  108,  109,  110,  832,  109,  110,  109,
      110,  109,  110,  833,  864,  108,  864,  188,  109,  110,
      188,  864,  864,  108,  189,  864,  864,  189,  864,  834,
      109,  110,  190,  191,  188,  190,  191,  188,  109,  110,

      188,  189,  836,  864,  189,  837,  864,  189,  864,  190,
      191,  835,  190,  191,  838,  190,  191,  188,  661,  188,
      864,  188,  864,  644,  189,  864,  189,  864,  189,  360,
      839,  864,  190,  191,  190,  191,  190,  191,  188,  864,
      864,  188,  864,  188,  644,  189,  864,  840,  189,  864,
      189,  864,  864,  190,  191,  188,  190,  191,  190,  191,
      864,  188,  189,  864,  864,  188,  864,  841,  189,  864,
      190,  191,  189,  864,  842,  864,  190,  191,  188,  864,
      190,  191,  188,  864,  864,  189,  108,  864,  188,  189,
      108,  843,  108,  190,  191,  189,  108,  190,  191,  844,

      864,  109,  110,  190,  191,  109,  110,  109,  110,  864,
      864,  109,  110,  108,  864,  845,  108,  864,  108,  864,
      188,  864,  864,  188,  864,  567,  108,  189,  109,  110,
      189,  109,  110,  109,  110,  190,  191,  846,  190,  191,
      188,  109,  110,  847,  188,  864,  864,  189,  864,  864,
      188,  189,  864,  864,  864,  190,  191,  189,  848,  190,
      191,  849,  188,  864,  188,  190,  191,  188,  864,  189,
      864,  189,  864,  864,  189,  851,  850,  190,  191,  190,
      191,  188,  190,  191,  188,  854,  852,  853,  189,  108,
      644,  189,  108,  864,  188,  864,  190,  191,  864,  190,

      191,  189,  864,  864,  109,  110,  188,  109,  110,  190,
      191,  864,  864,  189,  864,  857,  855,  864,  188,  864,
      864,  190,  191,  856,  686,  189,  864,  858,  864,  188,
      864,  188,  864,  190,  191,  188,  189,  864,  189,  864,
      864,  188,  189,  859,  190,  191,  190,  191,  189,  108,
      190,  191,  188,  864,  860,  188,  190,  191,  864,  189,
      864,  864,  189,  486,  109,  110,  188,  190,  191,  188,
      190,  191,  864,  189,  864,  864,  189,  864,  864,  861,
      188,  190,  191,  188,  190,  191,  188,  189,  864,  864,
      189,  864,  864,  189,  864,  190,  191,  864,  190,  191,

      862,  190,  191,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  863,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      107,  107,  864,  864,  107,  111,  111,  111,  111,  111,
      111,  187,  187,  864,  864,  187,  192,  192,  192,  192,
      192,  192,  241,  241,  864,  864,  241,  245,  245,  245,
      245,  245,  245,  254,  864,  864,  864,  254,  254,  254,
      254,  254,  256,  256,  864,  256,  256,  256,  256,  256,

      256,  257,  864,  257,  257,  864,  864,  257,  257,  259,
      259,  259,  259,  342,  342,  342,  342,  386,  386,  386,
      386,  392,  392,  392,  392,  392,  392,  395,  864,  864,
      864,  395,  395,  395,  395,  395,  473,  473,  473,  473,
      473,  473,  475,  864,  864,  864,  475,  475,  475,  475,
      475,  524,  524,  524,  524,  524,  524,  526,  864,  864,
      864,  526,  526,  526,  526,  526,  394,  864,  864,  864,
      394,  394,  394,  394,  394,  533,  864,  864,  533,  533,
      533,  533,  533,  533,  536,  864,  864,  864,  536,  536,
      536,  536,  536,  541,  864,  864,  864,  541,  541,  541,

      541,  541,  602,  864,  864,  602,  602,  602,  602,  602,
      602,  604,  864,  864,  864,  604,  604,  604,  604,  604,
      610,  864,  864,  864,  610,  610,  610,  610,  610,  645,
      864,  864,  645,  645,  645,  645,  645,  645,  647,  864,
      864,  864,  647,  647,  647,  647,  647,  652,  864,  864,
      864,  652,  652,  652,  652,  652,  535,  864,  864,  864,
      535,  535,  535,  535,  535,  654,  864,  864,  654,  654,
      654,  654,  654,  654,  657,  864,  864,  864,  657,  657,
      657,  657,  657,  659,  864,  864,  659,  659,  659,  659,
      659,  659,  704,  864,  864,  704,  704,  704,  704,  704,

      704,  707,  864,  864,  864,  707,  707,  707,  707,  707,
      709,  864,  864,  709,  709,  709,  709,  709,  709,  736,
      864,  864,  736,  736,  736,  736,  736,  736,  739,  864,
      864,  864,  739,  739,  739,  739,  739,  741,  864,  864,
      741,  741,  741,  741,  741,  741,  743,  864,  864,  743,
      743,  743,  743,  743,  743,  771,  864,  864,  771,  771,
      771,  771,  771,  771,  794,  864,  864,  794,  794,  794,
      794,  794,  794,   13,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,

      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864
    } ;

static yyconst short int yy_chk[5230] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,   93,    5,    5,
        5,    5,   93,    5,    5,    5,  398,    5,    5,  652,
      398,    5,  255,    5,    5,    7,    7,  255,    7,    7,
        7,    8,    8,    5,    8,    8,    8,    9,  649,    9,
        9,   10,   15,   10,   10,  610,   15,   15,  103,  103,
      607,    5,    5,    6,    6,    6,    6,    6,    6,    6,
      541,    6,    6,    6,    6,   18,    6,    6,    6,   19,
        6,    6,   21,  538,    6,   21,    6,    6,   23,  532,
       18,   18,   24,   19,   23,   25,    6,   21,   21,  531,

      103,  103,  526,   23,   23,   28,   28,   24,   24,   28,
       25,   25,  525,   27,    6,    6,   11,   28,   11,   11,
       11,   11,  477,   52,   11,   11,   11,   26,   27,   27,
       30,  475,  474,  395,   29,   26,   26,   52,   11,   80,
       37,  393,   26,   26,   35,   30,   30,   28,   28,   29,
       29,  391,   29,   80,   29,   37,   37,  390,  246,   35,
       35,   30,   29,   35,   30,   37,  193,   11,   11,   31,
       11,   12,   79,   12,   12,   12,   12,  108,   35,   12,
       12,   12,  111,  112,   31,   31,   33,   79,   79,   31,
       32,  108,   82,   12,   36,   82,  111,   31,   31,   38,

       31,   33,   33,   31,  188,   32,   32,   82,   82,   36,
       36,   32,   13,   34,   38,   38,   38,   33,  188,   33,
       33,   32,   12,   12,   36,   12,   33,   32,   34,   34,
       38,  192,  106,    0,   38,   39,  106,  106,    0,    0,
        0,   34,   34,   43,   34,  192,   40,   34,    0,   34,
       39,   39,   39,   39,   42,    0,   39,   41,   43,   43,
       39,   40,   40,   40,  242,    0,   39,    0,  245,   42,
       42,   42,   41,   41,    0,   41,    0,   40,  242,   41,
       43,   44,  245,   40,   87,   42,   41,   41,   42,   41,
       46,   42,   47,   42,    0,   48,   44,   44,   44,   87,

       87,    0,   44,    0,    0,   46,   46,   47,   47,   44,
       48,   48,   48,   49,   46,   46,   48,   50,   44,   45,
       48,    0,   47,    0,   46,  260,  479,  343,   49,   49,
      479,  387,   50,   50,   45,   45,    0,   49,   49,  260,
       45,  343,   51,   45,   54,  387,   50,   54,   45,   51,
       45,   54,    0,   45,   50,   45,   45,   51,   51,   54,
       54,   55,    0,   56,    0,    0,   84,    0,   55,   56,
       56,  392,   84,   57,    0,   56,   55,   55,   56,   56,
       57,   84,   84,   57,   58,  392,   59,    0,   57,   57,
        0,   58,   88,   59,   60,   60,   58,   61,   60,   58,

       58,   59,   59,   63,   61,    0,   60,   88,   88,   64,
       63,   90,   61,   61,   66,    0,   64,    0,   63,   63,
      473,   66,    0,    0,   64,   64,   90,   90,   63,   66,
       66,   66,   61,  524,  473,   86,   60,   60,   62,   64,
        0,   90,   64,   86,   86,   62,  107,  524,   65,   64,
       86,   86,  529,   62,   62,   65,  529,    0,    0,   62,
      109,  107,  107,   65,   65,    0,   62,   62,    0,   62,
       68,   62,   62,    0,   62,  109,  109,   68,    0,   65,
       69,    0,   65,   67,    0,   68,   68,   69,   68,    0,
       67,  113,    0,   70,  113,   69,   69,   69,   67,   67,

       70,   69,    0,   67,    0,   67,  113,  113,   70,   70,
       72,   70,    0,   67,   70,   71,    0,   72,   67,   67,
       73,    0,   71,    0,    0,   72,   72,   73,   70,    0,
       71,   71,    0,   71,    0,   73,   73,    0,    0,   74,
        0,   72,   75,    0,   72,   73,   74,   71,   73,   75,
      114,    0,   76,    0,   74,   74,  114,   75,   75,   76,
       89,   89,   77,   75,   89,  114,  114,   76,   76,   77,
       74,   74,   89,   75,   78,   74,   74,   77,   77,   77,
        0,   78,  534,    0,  534,  534,   78,   76,  534,   78,
       78,   85,   85,   85,   85,   85,   85,    0,   85,  110,

      110,  110,   89,   89,  110,  116,  116,  115,    0,  116,
      117,    0,  110,   85,   85,  115,  115,  116,  118,    0,
        0,  119,  115,  115,  120,  117,  117,    0,    0,    0,
        0,    0,    0,  118,  118,  122,  119,  119,  121,  120,
      120,  117,  110,  110,  120,  123,  119,  116,  116,  119,
      122,  122,  124,  121,  121,  125,  118,    0,  126,  121,
      123,  123,  127,    0,    0,    0,  123,  124,  124,    0,
      125,  125,  124,  126,  126,  128,    0,  127,  127,  126,
      127,    0,    0,  125,  125,  125,  129,    0,  130,    0,
      128,  128,  125,  131,  199,  199,  132,  127,  199,    0,

        0,  129,  129,  130,  130,  133,  199,  135,  131,  131,
      130,  132,  132,    0,  134,  129,    0,  132,  136,    0,
      133,  133,  135,  135,  133,    0,    0,  137,  131,  134,
      134,  134,    0,  136,  136,  138,  199,  199,  135,  139,
        0,  133,  137,  137,    0,  140,    0,    0,  137,  141,
      138,  138,  136,    0,  139,  139,  142,    0,  143,  138,
      140,  140,  140,  144,  141,  141,  145,    0,  141,  146,
        0,  142,  142,  143,  143,  147,  143,  148,  144,  144,
      144,  145,  145,  149,  146,  146,  142,  150,    0,    0,
      147,  147,  148,  148,  144,    0,  151,    0,  149,  149,

      152,    0,  150,  150,  153,  146,  148,  150,    0,  154,
      147,  151,  151,  156,    0,  152,  152,    0,    0,  153,
      153,  155,    0,  149,  154,  154,  157,    0,  156,  156,
      151,  158,    0,  153,  152,  154,  155,  155,  159,    0,
      161,  157,  157,  155,  156,  160,  158,  158,  162,    0,
        0,    0,  165,  159,  159,  161,  161,    0,    0,    0,
      160,  160,    0,  162,  162,  161,  158,  165,  165,  163,
        0,  161,  159,    0,  159,  164,    0,  160,  166,    0,
      167,    0,    0,  162,  163,  163,  168,    0,  165,  163,
      164,  164,  169,  166,  166,  167,  167,    0,  166,    0,

      164,  168,  168,  170,    0,    0,  171,  169,  169,  169,
      172,    0,    0,  166,  168,  167,  166,  166,  170,  170,
      169,  171,  171,    0,  173,  172,  172,  176,  169,    0,
      603,  174,  603,  603,  170,  175,  603,  171,    0,  173,
      173,  177,  176,  176,  172,  173,  174,  174,  174,    0,
      175,  175,  174,  175,    0,    0,  177,  177,  178,    0,
        0,  179,    0,  180,  175,  181,    0,  182,    0,  183,
      177,    0,    0,  178,  178,  178,  179,  179,  180,  180,
      181,  181,  182,  182,  183,  183,  179,  184,  182,  185,
      183,    0,  186,    0,  187,    0,    0,  180,    0,  181,

      183,  187,  184,  184,  185,  185,  185,  186,  186,  187,
      187,  189,    0,  190,    0,    0,    0,    0,  189,    0,
      190,    0,  186,  184,    0,    0,  189,  189,  190,  190,
      191,  191,  191,  194,    0,  191,  194,    0,  195,    0,
      194,    0,    0,  191,  195,  195,    0,    0,  194,  194,
      196,    0,  197,  195,  195,  198,    0,  196,  646,  197,
      646,  646,  198,    0,  646,  196,  196,  197,  197,  200,
      198,  198,  201,  191,  191,  202,  200,    0,    0,  201,
      241,    0,  202,    0,  200,  200,  243,  201,  201,    0,
      202,  202,  202,  203,    0,  241,  241,  253,    0,  204,

      203,  243,  243,  205,  200,  201,  204,    0,  203,  203,
      205,  203,  253,  253,  204,  204,  206,    0,  205,  205,
      207,    0,    0,  206,    0,    0,  208,  207,  204,  204,
      209,  206,  206,  208,    0,  207,  207,  209,    0,    0,
      210,  208,  208,    0,  206,  209,  209,  210,    0,    0,
      209,  207,  211,    0,  213,  210,  210,  212,    0,  211,
      247,  213,  208,  247,  212,    0,    0,  211,  211,  213,
      213,  214,  212,  212,  215,  247,  247,    0,  214,    0,
      215,  215,    0,    0,  215,  213,  214,  214,  211,  215,
      215,  212,    0,  216,    0,  215,  217,    0,  218,    0,

      216,    0,    0,  217,    0,  218,    0,  214,  216,  216,
      219,  217,  217,  218,  218,  217,    0,  219,    0,    0,
      220,    0,  221,    0,    0,  219,  219,  220,  259,  221,
        0,  219,  222,    0,  223,  220,  220,  221,  221,  222,
      221,  223,    0,  259,  259,  226,    0,  222,  222,  223,
      223,  220,  226,  224,  222,  224,    0,  225,  221,  227,
      226,  226,  224,  224,  225,  227,  227,    0,  224,  224,
      228,  226,  225,  225,  227,  227,  229,  228,    0,    0,
      225,    0,    0,  229,    0,  228,  228,    0,  230,    0,
        0,  229,  229,  231,  227,  230,    0,  229,  228,  232,

      231,    0,  263,  230,  230,  233,  232,  229,  231,  231,
        0,  230,  233,    0,  232,  232,  234,  263,  263,    0,
      233,  233,  235,  234,    0,    0,  233,  236,    0,  235,
        0,  234,  234,  232,  236,    0,  263,  235,  235,  237,
      235,  238,  236,  236,  239,    0,  237,    0,  238,    0,
      234,  239,    0,  266,  237,  237,  238,  238,  240,  239,
      239,  236,  244,  244,  244,  240,  238,  244,  266,  266,
      248,    0,    0,  240,  240,  244,  248,    0,  239,  249,
      249,  249,  249,  249,  249,  248,  248,  251,  655,  249,
      655,  655,  249,    0,  655,  251,  251,  252,  252,  264,

        0,  252,  251,  251,  265,  244,  244,  267,    0,  252,
      268,    0,    0,  269,  264,  264,  270,    0,  275,  265,
      265,  265,  267,  267,  264,  268,  268,  268,  269,  269,
      269,  270,  270,  275,  275,    0,    0,  271,  275,  252,
      252,  261,  272,    0,  261,    0,    0,    0,  267,  261,
      261,  261,  271,  271,  261,    0,    0,  272,  272,    0,
      273,  261,  261,    0,  261,  261,  278,    0,  271,  274,
        0,  272,  276,    0,  272,  273,  273,    0,    0,  273,
      273,  278,  278,    0,  274,  274,    0,  276,  276,    0,
      277,    0,  261,  261,  262,    0,  273,  262,  278,  274,

        0,    0,  262,  262,  262,  277,  277,  262,  279,  276,
      280,  277,  281,    0,  262,  262,  282,  262,  262,  283,
        0,  284,    0,  279,  279,  280,  280,  281,  281,    0,
        0,  282,  282,  285,  283,  283,  284,  284,    0,  286,
      283,    0,    0,  287,  282,  262,  262,  288,  285,  285,
      289,  281,    0,  285,  286,  286,  290,  284,  287,  287,
        0,    0,  288,  288,    0,  289,  289,    0,  286,  291,
        0,  290,  290,  292,    0,    0,  290,    0,  289,  288,
      293,    0,  287,  294,  291,  291,    0,    0,  292,  292,
      291,  295,    0,  292,  296,  293,  293,    0,  294,  294,

      297,    0,  294,  298,    0,  299,  295,  295,  300,  296,
      296,  301,  293,    0,    0,  297,  297,  302,  298,  298,
      299,  299,  297,  300,  300,  296,  301,  301,  303,  301,
      304,    0,  302,  302,  305,    0,  306,  300,  307,  299,
      298,  308,    0,  303,  303,  304,  304,  311,  303,  305,
      305,  306,  306,  307,  307,  305,  308,  308,  307,  309,
      306,  310,  311,  311,  312,    0,    0,  313,    0,  305,
        0,  308,  314,    0,  309,  309,  310,  310,  315,  312,
      312,  309,  313,  313,    0,  310,  316,  314,  314,  317,
        0,    0,  313,  315,  315,  309,  318,    0,  319,    0,

      312,  316,  316,    0,  317,  317,  320,  316,    0,  314,
      321,  318,  318,  319,  319,  315,    0,  322,    0,  319,
      323,  320,  320,  317,    0,  321,  321,  324,    0,  325,
        0,  321,  322,  322,  326,  323,  323,    0,  327,    0,
      320,  329,  324,  324,  325,  325,  328,  324,  330,  326,
      326,    0,  332,  327,  327,    0,  329,  329,    0,  323,
        0,  328,  328,  330,  330,  325,  331,  332,  332,    0,
      333,  332,    0,  326,  327,    0,  329,  330,  328,  334,
        0,  331,  331,  335,    0,  333,  333,  331,  336,    0,
      337,  331,  333,  338,  334,  334,  339,    0,  335,  335,

      340,  335,    0,  336,  336,  337,  337,  341,  338,  338,
      342,  339,  339,    0,  334,  340,  340,  342,  386,    0,
      339,  338,  341,  341,  337,  342,  342,  336,  346,    0,
        0,    0,  341,  386,  386,  346,  340,  344,  400,    0,
      344,    0,    0,  346,  346,  344,  344,  344,  347,    0,
      344,  401,  344,  400,  400,  347,    0,  344,  344,  346,
      344,  344,  348,  347,  347,  349,  401,  401,    0,  348,
        0,    0,  349,    0,  400,    0,  403,  348,  348,  396,
      349,  349,  396,  347,    0,  396,  401,  396,  344,  344,
      345,  403,  403,  345,  349,    0,    0,    0,  345,  345,

      345,  396,  350,  345,  350,  345,    0,    0,  351,    0,
      345,  345,  350,  345,  345,  351,    0,  350,  350,  352,
        0,  353,    0,  351,  351,    0,  352,    0,  353,  354,
        0,  354,    0,  402,  352,  352,  353,  353,  354,  354,
      354,  345,  345,  355,  354,  354,    0,  354,  402,  402,
      355,    0,    0,  352,  356,    0,  357,  353,  355,  355,
      358,  356,  416,  357,  355,    0,  359,  358,  402,  356,
      356,  357,  357,  359,    0,  358,  358,  416,  416,  360,
        0,  359,  359,  356,  358,  357,  360,  404,    0,  361,
      359,    0,  362,    0,  360,  360,  361,    0,  357,  362,

        0,    0,  404,  404,  361,  361,  363,  362,  362,  364,
        0,    0,  407,  363,  404,    0,  364,    0,  361,  361,
      362,  363,  363,  365,  364,  364,  366,  407,  407,  407,
      365,    0,    0,  366,    0,    0,  367,    0,  365,  365,
      363,  366,  366,  367,  365,    0,  368,  366,  369,    0,
      370,  367,  367,  368,    0,  369,    0,  370,    0,    0,
        0,  368,  368,  369,  369,  370,  370,  370,    0,  371,
        0,  372,  367,  373,    0,  374,  371,  368,  372,    0,
      373,    0,  374,  369,  371,  371,  372,  372,  373,  373,
      374,  374,  372,  375,    0,  376,    0,  373,    0,    0,

      375,    0,  376,  405,  371,  377,    0,    0,  375,  375,
      376,  376,  377,    0,  376,  378,    0,  379,  405,  405,
      377,  377,  378,  660,  379,  660,  660,    0,  380,  660,
      378,  378,  379,  379,  375,  380,    0,  405,    0,  378,
        0,  377,  381,  380,  380,  382,    0,  380,  705,  381,
      705,  705,  382,  379,  705,  383,    0,  381,  381,  381,
      382,  382,  383,    0,  382,    0,  384,    0,    0,    0,
      383,  383,  385,  384,    0,  406,    0,  409,    0,  385,
      382,  384,  384,    0,  383,  410,    0,  385,  385,  408,
      406,  406,  409,  409,    0,    0,  384,  411,  409,    0,

      410,  410,    0,    0,  408,  408,    0,  385,  388,  406,
      410,  388,  411,  411,  408,    0,  388,  388,  388,  412,
      408,  388,  411,  414,  710,  413,  710,  710,  388,  388,
      710,  388,  388,  417,  412,  412,    0,  415,  414,  414,
      413,  413,  418,    0,    0,    0,  414,    0,  417,  417,
        0,    0,  415,  415,    0,  412,    0,  418,  418,  388,
      388,  389,  413,    0,  389,  415,    0,  417,    0,  389,
      389,  389,  419,    0,  389,  420,    0,  421,    0,  418,
      423,  389,  389,  424,  389,  389,    0,  419,  419,    0,
      420,  420,  421,  421,  421,  423,  423,    0,  424,  424,

      422,    0,  419,  426,  423,    0,    0,    0,    0,    0,
      425,  420,  389,  389,  397,  422,  422,  397,  426,  426,
      424,    0,  397,  397,  397,  425,  425,  397,  427,    0,
        0,  426,  428,    0,  422,  397,  429,  397,  397,  430,
        0,  432,    0,  427,  427,  425,  431,  428,  428,    0,
        0,  429,  429,    0,  430,  430,  432,  432,  433,    0,
      429,  431,  431,    0,    0,  397,  397,  399,  434,  432,
      399,  431,    0,  433,  433,  399,  399,  399,  435,    0,
      399,  436,    0,  434,  434,  434,  437,    0,  399,  433,
      399,  399,  438,  435,  435,  439,  436,  436,    0,  435,

        0,  437,  437,    0,    0,  440,    0,  438,  438,  441,
      439,  439,  442,  438,  443,    0,  437,  445,  399,  399,
      440,  440,    0,  444,  441,  441,  446,  442,  442,  443,
      443,  447,  445,  445,    0,  443,  448,  442,  444,  444,
      451,  446,  446,  444,  449,  441,  447,  447,  450,    0,
      447,  448,  448,  452,    0,  451,  451,  446,    0,  449,
      449,  449,  453,  450,  450,  448,    0,  454,  452,  452,
      455,    0,  452,  450,  456,  451,  457,  453,  453,  458,
        0,  453,  454,  454,  459,  455,  455,  460,    0,  456,
      456,  457,  457,    0,  458,  458,    0,  461,    0,  459,

      459,  462,  460,  460,  460,  455,  463,    0,  456,  464,
        0,  457,  461,  461,  465,    0,  462,  462,  466,    0,
      459,  463,  463,  467,  464,  464,  468,  463,  470,  465,
      465,  462,    0,  466,  466,    0,  469,    0,  467,  467,
      471,  468,  468,  470,  470,  472,    0,  468,    0,  466,
      464,  469,  469,    0,    0,  471,  471,  469,  467,  471,
      472,  472,  476,    0,  481,  476,  482,  472,  476,  527,
      476,  481,  527,  482,    0,  527,    0,  527,    0,  481,
      481,  482,  482,  481,  476,  478,    0,    0,  478,  483,
        0,  527,    0,  478,  478,  478,  483,  543,  478,    0,

      478,  482,    0,  484,  483,  483,  478,  485,  478,  478,
      484,    0,  543,  543,  485,  546,    0,  486,  484,  484,
        0,    0,  485,  485,  486,    0,  483,    0,  484,  545,
      546,  546,  486,  486,    0,  546,  478,  478,  480,  547,
        0,  480,  487,  485,  545,  545,  480,  480,  480,  487,
      545,  480,    0,  489,  547,  547,  488,  487,  487,  480,
      489,  480,  480,  488,  737,    0,  737,  737,  489,  489,
      737,  488,  488,  487,  742,    0,  742,  742,    0,  490,
      742,  491,  489,    0,  492,  488,  490,    0,  491,  480,
      480,  492,  488,    0,  490,  490,  491,  491,    0,  492,

      492,    0,  493,    0,  494,  491,    0,  495,  490,  493,
      744,  494,  744,  744,  495,    0,  744,  493,  493,  494,
      494,  494,  495,  495,  496,    0,  497,    0,  498,    0,
        0,  496,  493,  497,    0,  498,  548,    0,    0,  496,
      496,  497,  497,  498,  498,  496,  499,  497,  500,    0,
      501,  548,  548,  499,  550,  500,  553,  501,    0,  498,
      502,  499,  499,  500,  500,  501,  501,  502,    0,  550,
      550,  553,  553,  503,    0,  502,  502,  502,  499,  504,
      503,    0,  550,  505,  500,    0,  504,  501,  503,  503,
      505,    0,  553,  506,  504,  504,  507,    0,  505,  505,

      506,  503,    0,  507,    0,    0,    0,  508,  506,  506,
      509,  507,  507,  507,  508,    0,    0,  509,    0,  504,
        0,  510,  508,  508,    0,  509,  509,  508,  510,    0,
        0,  511,    0,    0,  512,    0,  510,  510,  511,    0,
      510,  512,    0,    0,  513,    0,  511,  511,    0,  512,
      512,  513,    0,    0,  514,    0,    0,  515,    0,  513,
      513,  514,  511,  512,  515,  513,    0,  516,    0,  514,
      514,  517,  515,  515,  516,  514,    0,    0,  517,    0,
        0,    0,  516,  516,  518,    0,  517,  517,  519,    0,
      520,  518,    0,  515,  522,  519,  517,  520,    0,  518,

      518,  522,  516,  519,  519,  520,  520,  521,    0,  522,
      522,  523,    0,  521,  521,    0,  519,  522,  523,  555,
      518,  520,  521,  521,    0,    0,  523,  523,  528,    0,
        0,  528,    0,    0,  555,  555,  528,  528,  528,  533,
      537,  528,  533,  537,    0,  533,  537,  533,  537,  528,
        0,  528,  528,  540,  540,  544,    0,  540,  549,    0,
      542,  533,  537,  542,    0,  540,  542,    0,  542,    0,
      544,  544,    0,  549,  549,    0,  544,  551,    0,  528,
      528,  530,  542,  552,  530,    0,  544,    0,  549,  530,
      530,  530,  551,  551,  530,  540,  540,  554,  552,  552,

      552,  556,  530,  557,  530,  530,  559,  551,  558,    0,
      560,    0,  554,  554,    0,    0,  556,  556,  557,  557,
      556,  559,  559,  558,  558,  560,  560,  554,    0,  558,
      560,  559,  530,  530,  536,    0,  561,  536,  562,    0,
        0,    0,  536,  536,  536,  563,    0,  536,  564,    0,
      565,  561,  561,  562,  562,  536,  561,  536,  536,  562,
      563,  563,  566,  564,  564,  565,  565,    0,  567,  772,
        0,  772,  772,  564,    0,  772,  569,  566,  566,    0,
        0,  563,  566,  567,  567,  536,  536,  539,  568,    0,
      539,  569,  569,    0,    0,  539,  539,  539,  571,    0,

      539,  570,    0,  568,  568,  572,    0,    0,  539,  573,
      539,  539,  574,  571,  571,  575,  570,  570,  576,  571,
      572,  572,    0,  568,  573,  573,    0,  574,  574,    0,
      575,  575,  577,  576,  576,    0,    0,  573,  539,  539,
      578,  570,  579,    0,  572,    0,  574,  577,  577,  580,
      575,  575,    0,    0,  581,  578,  578,  579,  579,  582,
        0,  579,  583,    0,  580,  580,  584,    0,  578,  581,
      581,  585,    0,  586,  582,  582,  587,  583,  583,    0,
      582,  584,  584,  583,  581,  588,  585,  585,  586,  586,
      589,  587,  587,  590,  584,  591,    0,  586,  592,    0,

      588,  588,  593,    0,    0,  589,  589,  585,  590,  590,
      591,  591,  587,  592,  592,  589,    0,  593,  593,  594,
      591,  595,    0,  596,    0,  593,  597,    0,  598,    0,
      599,    0,  592,  600,  594,  594,  595,  595,  596,  596,
      601,  597,  597,  598,  598,  599,  599,    0,  600,  600,
        0,    0,    0,    0,    0,  601,  601,  600,  596,  795,
      602,  795,  795,  602,    0,  795,  602,  605,  602,  661,
      605,    0,    0,  605,    0,  605,  609,  609,    0,    0,
      609,  601,  602,  604,  661,  661,  604,    0,  609,  605,
        0,  604,  604,  604,  611,    0,  604,  611,  604,    0,

      611,    0,  611,    0,  604,  612,  604,  604,  613,    0,
      615,    0,  612,    0,    0,  613,  611,  615,  609,  609,
      612,  612,  614,  613,  613,  615,  615,  663,    0,  614,
      612,    0,    0,  615,  604,  604,  608,  614,  614,  608,
      616,    0,  663,  663,  608,  608,  608,  616,  664,  608,
        0,  662,    0,    0,  617,  616,  616,  608,  614,  608,
      608,  617,  663,  664,  664,  618,  662,  662,    0,  617,
      617,    0,  618,    0,  616,  619,    0,  620,    0,  664,
      618,  618,  619,  666,  620,  662,    0,  608,  608,  618,
      619,  619,  620,  620,  621,  619,  622,    0,  666,  666,

      623,  621,    0,  622,  666,    0,    0,  623,    0,  621,
      621,  622,  622,  620,    0,  623,  623,    0,  624,    0,
      625,    0,  626,    0,  621,  624,    0,  625,    0,  626,
      622,  623,  627,  624,  624,  625,  625,  626,  626,  627,
        0,    0,  626,  628,    0,  625,  629,  627,  627,  624,
      628,    0,    0,  629,  665,    0,  630,    0,  628,  628,
      631,  629,  629,  630,    0,    0,  632,  631,  627,  665,
      665,  630,  630,  632,  665,  631,  631,  631,  633,  630,
      634,  632,  632,  635,    0,  633,    0,  634,    0,    0,
      635,    0,    0,  633,  633,  634,  634,  636,  635,  635,

        0,    0,  632,  635,  636,    0,    0,  637,    0,  633,
      638,  634,  636,  636,  637,    0,  636,  638,    0,    0,
      639,    0,  637,  637,  640,  638,  638,  639,  668,    0,
        0,  640,    0,    0,  641,  639,  639,  639,    0,  640,
      640,  641,  675,  668,  668,  640,  642,    0,  643,  641,
      641,  641,  644,  642,    0,  643,  668,  675,  675,  644,
        0,  642,  642,  643,  643,  651,  651,  644,  644,  651,
      645,    0,  643,  645,    0,    0,  645,  651,  645,  667,
      642,    0,  648,  653,    0,  648,  653,    0,  648,  653,
      648,  653,  645,  647,  667,  667,  647,    0,    0,    0,

      667,  647,  647,  647,  648,  653,  647,  651,  651,  656,
      656,    0,  654,  656,  647,  654,  647,  647,  654,  658,
      654,  656,  658,  669,    0,  658,    0,  658,    0,    0,
        0,    0,    0,    0,  654,    0,    0,    0,  669,  669,
        0,  658,    0,    0,  647,  647,  650,    0,  669,  650,
        0,  656,  656,    0,  650,  650,  650,  659,  670,  650,
      659,  671,    0,  659,    0,  659,    0,  650,  672,  650,
      650,    0,    0,  670,  670,  673,  671,  671,  674,  659,
        0,    0,  671,  672,  672,  676,    0,  672,  677,    0,
      673,  673,  678,  674,  674,  670,    0,  650,  650,  674,

      676,  676,  679,  677,  677,  680,    0,  678,  678,  681,
        0,  673,    0,    0,  682,  676,  683,  679,  679,  684,
      680,  680,  685,  679,  681,  681,  686,    0,  678,  682,
      682,  683,  683,    0,  684,  684,  687,  685,  685,    0,
      688,  686,  686,  689,  684,    0,    0,  690,    0,  682,
      691,  687,  687,  692,    0,  688,  688,  693,  689,  689,
      687,  688,  690,  690,  690,  691,  691,  694,  692,  692,
      695,    0,  693,  693,  696,    0,  697,    0,  698,  689,
      699,    0,  694,  694,  700,  695,  695,  701,  694,  696,
      696,  697,  697,  698,  698,  699,  699,    0,    0,  700,

      700,  702,  701,  701,  703,    0,    0,  704,  701,    0,
      704,    0,  697,  704,  698,  704,  702,  702,    0,  703,
      703,  699,  706,  706,  708,  709,  706,  708,  709,  704,
      708,  709,  708,  709,  706,  711,    0,    0,  712,    0,
        0,  713,  711,    0,    0,  712,  708,  709,  713,    0,
      711,  711,  711,  712,  712,  712,  713,  713,    0,  714,
        0,  715,    0,    0,  706,  706,  714,    0,  715,    0,
        0,    0,  716,    0,  714,  714,  715,  715,  713,  716,
        0,    0,  717,    0,  718,    0,  715,  716,  716,  717,
      746,  718,    0,    0,  719,    0,  714,  717,  717,  718,

      718,  719,    0,    0,  720,  746,  746,  721,    0,  719,
      719,  720,  750,    0,  721,    0,    0,  722,    0,  720,
      720,  719,  721,  721,  722,    0,    0,  750,  750,  723,
        0,  724,  722,  722,    0,    0,  723,    0,  724,    0,
      720,  725,  722,  721,  723,  723,  724,  724,  725,  748,
      723,  726,  724,  727,    0,  728,  725,  725,  726,    0,
      727,    0,  728,    0,  748,  748,  726,  726,  727,  727,
      728,  728,  729,    0,    0,  730,    0,  725,    0,  729,
      727,  753,  730,  748,    0,  731,    0,  729,  729,  728,
      730,  730,  731,  729,    0,    0,  753,  753,    0,  732,

      731,  731,  733,    0,    0,  734,  732,    0,    0,  733,
        0,  730,  734,  731,  732,  732,  735,  733,  733,    0,
      734,  734,  732,  735,  738,  738,    0,  736,  738,    0,
      736,  735,  735,  736,    0,  736,  738,  733,    0,    0,
      740,  734,    0,  740,    0,  745,  740,  735,  740,  736,
      741,  743,    0,  741,  743,    0,  741,  743,  741,  743,
      745,  745,  740,  747,    0,  749,  738,  738,  751,    0,
      745,    0,  741,  743,    0,  752,    0,  754,  747,  747,
      749,  749,  755,  751,  751,  756,  745,    0,    0,  757,
      752,  752,  754,  754,    0,  749,  752,  755,  755,  751,

      756,  756,  747,  755,  757,  757,  758,    0,  759,    0,
      757,    0,    0,  754,  760,    0,  761,    0,  762,    0,
      763,  758,  758,  759,  759,  764,    0,  758,  765,  760,
      760,  761,  761,  762,  762,  763,  763,  766,    0,  762,
      764,  764,    0,  765,  765,  767,    0,  768,    0,  769,
        0,    0,  766,  766,  770,    0,  765,    0,  761,    0,
      767,  767,  768,  768,  769,  769,  767,    0,  771,  770,
      770,  771,  773,    0,  771,    0,  771,    0,  774,  773,
        0,    0,  775,    0,  768,  774,    0,  773,  773,  775,
      771,    0,    0,  774,  774,    0,  776,  775,  775,    0,

        0,    0,  777,  776,    0,    0,  778,    0,  773,  777,
        0,  776,  776,  778,  774,  776,  775,  777,  777,  779,
        0,  778,  778,  780,    0,    0,  779,  798,    0,  781,
      780,    0,  777,    0,  779,  779,  781,  799,  780,  780,
      779,  782,  798,  798,  781,  781,    0,  783,  782,    0,
        0,  784,  799,  799,  783,    0,  782,  782,  784,  781,
        0,  782,  783,  783,  780,  785,  784,  784,  784,  786,
        0,  788,  785,  799,    0,  787,  786,    0,  788,    0,
      785,  785,  787,    0,  786,  786,  788,  788,  789,    0,
      787,  787,  790,    0,    0,  789,  788,    0,    0,  790,

      797,  786,  791,  789,  789,  787,  792,  790,  790,  791,
        0,    0,  793,  792,    0,  797,  797,  791,  791,  793,
      800,  792,  792,  794,  801,    0,  794,  793,  793,  794,
      797,  794,  796,  790,    0,  800,  800,  791,    0,  801,
      801,  792,  802,  793,  803,  794,  804,  796,  796,  805,
      800,    0,  806,  796,  807,    0,  808,  802,  802,  803,
      803,  804,  804,  809,  805,  805,  804,  806,  806,  807,
      807,  808,  808,  806,    0,  810,    0,  811,  809,  809,
      812,    0,    0,  828,  811,    0,    0,  812,    0,  807,
      810,  810,  811,  811,  814,  812,  812,  813,  828,  828,

      815,  814,  811,    0,  813,  812,    0,  815,    0,  814,
      814,  810,  813,  813,  813,  815,  815,  816,  828,  817,
        0,  818,    0,  815,  816,    0,  817,    0,  818,  817,
      814,    0,  816,  816,  817,  817,  818,  818,  819,    0,
        0,  820,    0,  821,  818,  819,    0,  816,  820,    0,
      821,    0,    0,  819,  819,  822,  820,  820,  821,  821,
        0,  823,  822,    0,    0,  824,    0,  821,  823,    0,
      822,  822,  824,    0,  822,    0,  823,  823,  825,    0,
      824,  824,  826,    0,    0,  825,  829,    0,  827,  826,
      830,  823,  831,  825,  825,  827,  832,  826,  826,  825,

        0,  829,  829,  827,  827,  830,  830,  831,  831,    0,
        0,  832,  832,  833,    0,  827,  834,    0,  835,    0,
      836,    0,    0,  837,    0,  830,  861,  836,  833,  833,
      837,  834,  834,  835,  835,  836,  836,  834,  837,  837,
      838,  861,  861,  835,  839,    0,    0,  838,    0,    0,
      840,  839,    0,    0,    0,  838,  838,  840,  836,  839,
      839,  837,  841,    0,  842,  840,  840,  843,    0,  841,
        0,  842,    0,    0,  843,  839,  838,  841,  841,  842,
      842,  844,  843,  843,  845,  842,  840,  841,  844,  846,
      843,  845,  847,    0,  848,    0,  844,  844,    0,  845,

      845,  848,    0,    0,  846,  846,  849,  847,  847,  848,
      848,    0,    0,  849,    0,  848,  844,    0,  850,    0,
        0,  849,  849,  847,  846,  850,    0,  849,    0,  851,
        0,  852,    0,  850,  850,  853,  851,    0,  852,    0,
        0,  854,  853,  850,  851,  851,  852,  852,  854,  856,
      853,  853,  855,    0,  853,  857,  854,  854,    0,  855,
        0,    0,  857,  851,  856,  856,  858,  855,  855,  859,
      857,  857,    0,  858,    0,    0,  859,    0,    0,  856,
      860,  858,  858,  862,  859,  859,  863,  860,    0,    0,
      862,    0,    0,  863,    0,  860,  860,    0,  862,  862,

      859,  863,  863,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  862,  865,  865,  865,  865,  865,  865,
      865,  865,  865,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      869,  869,    0,    0,  869,  870,  870,  870,  870,  870,
      870,  871,  871,    0,    0,  871,  872,  872,  872,  872,
      872,  872,  873,  873,    0,    0,  873,  874,  874,  874,
      874,  874,  874,  875,    0,    0,    0,  875,  875,  875,
      875,  875,  876,  876,    0,  876,  876,  876,  876,  876,

      876,  877,    0,  877,  877,    0,    0,  877,  877,  878,
      878,  878,  878,  879,  879,  879,  879,  880,  880,  880,
      880,  881,  881,  881,  881,  881,  881,  882,    0,    0,
        0,  882,  882,  882,  882,  882,  883,  883,  883,  883,
      883,  883,  884,    0,    0,    0,  884,  884,  884,  884,
      884,  885,  885,  885,  885,  885,  885,  886,    0,    0,
        0,  886,  886,  886,  886,  886,  887,    0,    0,    0,
      887,  887,  887,  887,  887,  888,    0,    0,  888,  888,
      888,  888,  888,  888,  889,    0,    0,    0,  889,  889,
      889,  889,  889,  890,    0,    0,    0,  890,  890,  890,

      890,  890,  891,    0,    0,  891,  891,  891,  891,  891,
      891,  892,    0,    0,    0,  892,  892,  892,  892,  892,
      893,    0,    0,    0,  893,  893,  893,  893,  893,  894,
        0,    0,  894,  894,  894,  894,  894,  894,  895,    0,
        0,    0,  895,  895,  895,  895,  895,  896,    0,    0,
        0,  896,  896,  896,  896,  896,  897,    0,    0,    0,
      897,  897,  897,  897,  897,  898,    0,    0,  898,  898,
      898,  898,  898,  898,  899,    0,    0,    0,  899,  899,
      899,  899,  899,  900,    0,    0,  900,  900,  900,  900,
      900,  900,  901,    0,    0,  901,  901,  901,  901,  901,

      901,  902,    0,    0,    0,  902,  902,  902,  902,  902,
      903,    0,    0,  903,  903,  903,  903,  903,  903,  904,
        0,    0,  904,  904,  904,  904,  904,  904,  905,    0,
        0,    0,  905,  905,  905,  905,  905,  906,    0,    0,
      906,  906,  906,  906,  906,  906,  907,    0,    0,  907,
      907,  907,  907,  907,  907,  908,    0,    0,  908,  908,
      908,  908,  908,  908,  909,    0,    0,  909,  909,  909,
      909,  909,  909,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,

      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
#define INITIAL 0
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

int braceCount;
int parenCount;
string latexCode;
#define ID_MODE 1

#define CMD_MODE 2

#define FILE_NAME_MODE 3

#define STRING_MODE 4

#define LATEX_MODE 5

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 84 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 865 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5174 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 88 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 92 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 98 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 103 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 107 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 108 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 109 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 111 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 112 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 113 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 114 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 115 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 117 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 119 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 120 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 121 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 124 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 126 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 130 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 131 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 132 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
return KW_XUNIFY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_OPS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 97:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 101:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 255 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 256 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 260 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 270 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 271 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 272 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 273 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 274 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 275 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 276 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 277 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 278 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 279 "../../../src/Mixfix/lexer.ll"
FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 280 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK


case 153:
YY_RULE_SETUP
#line 284 "../../../src/Mixfix/lexer.ll"
// eat white space
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 285 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 155:
YY_RULE_SETUP
#line 293 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 157:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
latexCode += yytext;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = latexCode.c_str();
						  return LATEX_STRING;
						}
					    }
					  latexCode += yytext;
					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 335 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  latexCode += yytext;
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 342 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 348 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 349 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 350 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 355 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 865 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 865 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 864);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 355 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"
