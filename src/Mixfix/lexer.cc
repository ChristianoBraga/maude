
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 212
#define YY_END_OF_BUFFER 213
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1301] =
    {   0,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,    0,    0,    0,    0,  200,  200,
        0,    0,  213,  211,  209,  210,  210,  108,  211,  106,
      108,  108,  108,  106,  107,  107,  108,  211,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,   15,  108,  108,  108,  108,  108,  108,  108,
      168,  211,  166,  166,  166,  168,  166,  166,  168,  211,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  114,  211,
      110,  114,  114,  112,  111,  110,  114,  211,  114,  112,

      116,  116,  115,  116,  116,  116,  116,  183,  211,  178,
      179,  183,  170,  183,  181,  169,  173,  171,  172,  183,
      211,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  180,  188,  188,  188,  188,  188,
      186,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  209,  185,  211,  210,  194,  195,
      196,  189,  193,  198,  197,  199,  200,  201,  208,  202,
      207,  207,  203,  204,  202,  205,  206,  209,  108,    0,
      108,    0,    0,    0,  108,  108,  107,    0,  108,  108,
      108,  108,  108,  108,  108,   11,  108,  108,  108,  108,

      108,  108,   45,  108,  108,   79,  108,  108,  108,  108,
      108,  108,  108,   66,  108,  108,    5,  108,  108,  108,
      108,   14,  108,   78,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,   40,   76,  108,  108,  108,  108,
      108,  108,  108,  108,   80,  108,  108,  108,  108,  108,
      108,  108,  108,  108,    6,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  168,    0,  167,  168,
        0,    0,    0,  168,  168,  162,  165,  163,    0,  168,
      168,  168,  168,  168,  157,  168,  168,  168,  168,  156,
      145,  168,  168,  168,  168,  144,  168,  143,  168,  168,

      168,  168,  154,  168,  168,  168,  150,  168,  145,  168,
      158,  168,  168,  168,  168,  168,  117,  145,  168,  164,
      114,    0,  113,  114,    0,    0,    0,  114,  114,    0,
      109,  111,    0,    5,  209,  115,    0,    0,    0,    0,
        0,  183,    0,  182,  183,    0,    0,    0,  183,  183,
      174,    0,  183,  183,  183,  183,  183,  183,  183,  183,
      176,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  175,  188,    0,  187,  188,    0,    0,    0,
      188,  188,    0,  188,  188,  188,  184,  188,  188,  184,
      188,  188,  188,  184,  184,  188,  188,  184,  188,  209,

      185,    0,    0,    0,  194,  190,  191,  192,  198,  200,
      202,  202,  108,    0,    2,    2,  108,  108,  108,   71,
      108,  108,  108,  108,  108,  108,   70,  108,  108,  108,
      108,  108,  108,  108,  108,   16,   79,  108,  108,  108,
      108,  108,  108,  108,   31,  108,  108,  108,  108,  108,
      108,  108,  108,   78,  108,  108,    6,   29,  108,  108,
      108,   41,  108,   76,  108,  108,  108,  108,  108,  108,
       10,  108,  102,   19,  108,  108,   22,   80,  108,  108,
      108,   38,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   77,  108,  108,  108,  108,

      108,  108,  108,  108,  168,    0,    2,    2,  168,  168,
      155,  168,  168,  159,  168,  168,  168,  168,  168,  168,
      168,  168,  122,  168,  145,  168,  160,  168,  168,  168,
      168,  168,  168,  138,  137,  168,  151,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  153,  114,    0,
        2,    2,    0,    0,    0,    0,    2,    2,  183,    0,
        2,    2,  183,  183,  183,  183,  183,  183,  183,  183,
      177,  183,  183,  183,  183,  183,  183,  183,  177,  183,
      183,  183,  183,  183,  188,    0,    2,    2,  188,  188,
      188,  184,  184,  188,  188,  188,  188,  184,    0,    0,

        0,    0,    2,    2,    2,    1,    2,    2,  108,  108,
      108,   57,   47,  108,  108,  108,  108,  108,  108,  108,
      108,   54,   28,  108,   20,  108,  108,   95,   23,  108,
      108,   62,  108,   24,  108,  108,  108,  108,  108,    9,
       27,  108,    3,  108,  108,  108,  108,   18,  108,    7,
      108,  108,   98,   13,  108,  108,  108,  108,   15,  108,
      108,  108,  108,  108,   80,  108,  108,   39,  108,   75,
       21,   25,  108,   93,  108,  108,  103,   67,  108,  108,
      108,  108,   77,  108,    8,  108,  108,  108,   63,  108,
      108,    0,    0,    2,    2,    2,    1,    2,    2,  168,

      168,  121,  168,  168,  133,  168,  168,  160,  168,  168,
      161,  168,  168,  118,  168,  168,  168,  123,  168,  168,
      124,  168,  168,  125,    3,  168,  168,  152,  168,  168,
      132,  127,  168,  168,  146,  168,  168,  168,  168,  168,
      168,  153,    0,    0,    2,    2,    2,    1,    2,    2,
        0,    0,    1,    0,    0,    2,    2,    2,    1,    2,
        2,  183,  177,  183,  183,  183,  183,  183,  183,  177,
      183,  177,  183,  183,  183,  183,  177,  177,  183,  183,
      183,    0,    0,    2,    2,    2,    1,    2,    2,  188,
      188,  184,  184,  188,  188,  188,  188,  188,  184,  188,

      188,  188,    2,    2,    1,    1,    1,    1,    1,    2,
        2,    2,   92,  108,   65,  108,   96,  108,   26,   46,
       59,  108,  108,  108,  108,  108,  108,   84,  108,   89,
      108,  108,  108,  108,  108,  108,  108,   60,  108,  108,
       82,   99,   34,  108,  108,  108,  108,  108,  108,   64,
       17,   56,  108,  108,   12,  108,  108,  108,  108,  108,
      108,  108,  108,   75,  108,  108,   68,   55,  108,  108,
       42,   37,  108,  108,   74,  108,   94,   49,  108,  108,
        2,    2,    1,    1,    1,    1,    1,    2,    2,    2,
      120,  148,  168,  168,  168,  139,  168,  168,  168,  168,

      168,  168,  168,  168,  168,  168,  119,  134,  168,  168,
      168,  168,  168,  168,  168,  126,  146,  168,  130,  168,
      168,  168,  145,    2,    2,    1,    1,    1,    1,    1,
        2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
        2,    2,    2,  177,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  177,
        2,    2,    1,    1,    1,    1,    1,    2,    2,    2,
      184,  188,  188,  188,  188,  188,  188,    1,    1,    1,
        1,    1,    2,    2,   43,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,

       86,  108,    4,  108,  108,  108,   99,   61,   73,   29,
      108,  108,  101,   64,  108,  108,  108,  108,   19,   91,
       53,  108,   36,   50,  108,  108,  108,  108,  108,   69,
      108,  108,  108,  108,   35,    1,    1,    1,    1,    1,
        2,    2,  168,  168,  136,  168,  168,    4,  131,  128,
      168,  168,  168,  168,  168,  168,  168,  137,  168,  168,
      168,  168,  168,  168,  168,  168,  168,    1,    1,    1,
        1,    1,    2,    2,    1,    1,    1,    1,    1,    2,
        2,  183,  183,  177,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,    1,    1,    1,    1,    1,    2,

        2,  188,  188,  188,  188,  188,  188,    1,    1,  108,
       65,  108,  108,   48,   83,  108,   52,  108,  108,   20,
      108,  108,   88,  108,  108,   87,  108,   72,   58,  108,
      108,  100,   85,  108,   22,  108,   21,  108,  108,   81,
       33,   44,  108,  108,    1,    1,  168,  168,  168,  168,
      168,  140,  168,  168,  168,  168,  138,  168,  141,  168,
      168,  168,  135,  168,  168,  147,  168,    1,    1,    1,
        1,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,    1,    1,  188,  188,  188,  188,  184,  108,
      108,  108,   83,  108,  108,   28,   51,   23,  108,   24,

      108,  108,  108,  102,  108,   25,  108,   32,  108,  108,
      168,  168,  168,  168,  168,  168,  168,  168,  124,  129,
      168,  168,  168,  130,  149,  147,  168,  183,  183,  183,
      183,  183,  183,  183,  183,  188,  188,  188,  184,  108,
       57,   97,  108,   54,   62,  108,   18,  108,  108,  108,
      105,   30,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  142,  183,  183,  183,  183,  183,  183,  183,  188,
      188,  108,  108,  104,  108,  168,  168,  168,  168,  123,
      168,  127,  149,  183,  183,  183,  183,  183,   90,  108,
      120,  121,  168,  132,  183,   55,  168,  183,  136,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static yyconst flex_int16_t yy_base[1388] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  662, 8569,  174, 8569, 8569,  309,  317, 8569,
      341, 8569,  361,  371,  373,  375,  379,  392,  385,  411,
      472,  423,  441,  449,  431,  483,  494,  505,  508,  528,
      532,  536,  542,  561,  579,  570,  572,  602,  581,  613,
      496,  321, 8569,  631,  625,  639,  650,  652,  654,  671,
      658,  717,  680,  688,  691,  683,  755,  711,  741,  766,
      777,  790,  798,  801,  804,  753,  812,  835,  837,  324,
     8569,  843,  849,  874,  876,  841,  879,  730,  882, 8569,

     8569,  908, 8569,  922,  936,  641,  627,  936,  366, 8569,
     8569,  938, 8569,  940,  944,  958,  964, 8569, 8569,  962,
      922,  970,  982,  984,  988, 1008, 1011, 1022, 1030, 1042,
     1053, 1055, 1057, 1075, 8569, 8569,  996,  372, 1080, 1093,
     1095, 1098, 1115, 1161, 1096, 1122, 1133, 1148, 1156, 1169,
     1181, 1192, 1200, 1205, 1148, 8569, 1244, 1258,    0, 8569,
     8569, 8569,  492,    0, 8569, 8569,    0, 8569, 8569,    0,
     8569, 8569, 8569, 8569,  634, 8569, 8569,  188,  417,  430,
      610, 1213,  442,  405,  764, 1227, 1259, 1264,  693,  861,
     1203, 1246,  721, 1158, 1051, 1119, 1270, 1272, 1274, 1281,

     1284, 1299, 1304, 1307, 1313, 1317, 1322, 1325, 1331, 1340,
     1343, 1351, 1354, 1358, 1364, 1366, 1369, 1376, 1387, 1390,
     1396, 1399, 1405, 1408, 1410, 1417, 1420, 1429, 1431, 1435,
     1438, 1449, 1456, 1443, 1461, 1467, 1469, 1474, 1482, 1480,
     1494, 1501, 1505, 1509, 1519, 1512, 1534, 1537, 1540, 1543,
     1558, 1565, 1573, 1568, 1579, 1591, 1593, 1597, 1599, 1601,
     1622, 1624, 1626, 1612, 1645, 1637, 1650,  450, 1652, 1656,
     1487,  463,  415, 1671, 1675, 1677, 1679, 1683, 1696, 1703,
     1708, 1705, 1727, 1731, 1749, 1751, 1753, 1757, 1771, 1779,
     1782, 1790, 1784, 1804, 1817, 1815, 1828, 1830, 1836, 1849,

     1854, 1860, 1862, 1859, 1868, 1886, 1894, 1898, 1909, 1912,
     1917, 1932, 1935, 1937, 1943, 1958, 1961, 1963, 1966, 1969,
     1981,  495, 1987, 1992, 2005,  515,  466, 2012, 2016, 2041,
     8569, 2045, 2012, 2024, 2070, 8569, 2084,  620,  609,  609,
      585, 2084,  517, 2086, 2088, 2070,  519,  545, 2106, 2110,
     2112, 2119, 2130, 2138, 2133, 2135, 2141, 2167, 2170, 2175,
     2173, 2188, 2196, 2201, 2209, 2214, 2220, 2234, 2242, 2253,
     2265, 2267, 2273, 2278,  543, 2291, 2293, 2311,  649,  591,
     2314, 2322, 2331, 1783, 2334, 2342, 2347, 2353, 2367, 2373,
     2378, 2386, 2392, 2397, 2405, 2419, 2423, 2427, 2431, 2462,

     8569, 2476,  579,  569,    0, 8569, 8569, 8569,    0,    0,
        0, 8569, 1713,  689, 2491, 2545, 2143, 2043, 1759, 1716,
     2240, 1904, 2288, 2206, 2303, 2445, 1793, 1906, 2464, 2495,
     2502, 2484, 2510, 2522, 2549, 2513, 2525, 2551, 2554, 2556,
     2559, 2563, 2569, 2577, 2581, 2587, 2592, 2602, 2595, 2606,
     2610, 2613, 2625, 2632, 2634, 2636, 2638, 2640, 2644, 2647,
     2662, 2667, 2669, 2671, 2680, 2682, 2689, 2692, 2695, 2703,
     2713, 2717, 2721, 2724, 2726, 2735, 2739, 2744, 2749, 2753,
     2759, 2763, 2767, 2773, 2785, 2782, 2787, 2793, 2795, 2797,
     2805, 2800, 2823, 2826, 2815, 2834, 2836, 2841, 2847, 2856,

     2859, 2867, 2869, 2877, 2880,  736, 2923, 2977, 2895, 2926,
     2882, 2934, 2885, 2903, 2980, 2937, 2977, 2949, 2988, 3003,
     3023, 3025, 3027, 3038, 3049, 3057, 3060, 3063, 3081, 3083,
     3089, 3094, 3107, 3102, 3115, 3126, 3128, 3139, 3141, 3147,
     3152, 3166, 3171, 3179, 3185, 3193, 3199, 3211, 3217,  765,
     3256, 3310,  570,  561,  553,  541,  523,  504, 3219,  795,
     3364, 3418, 3222, 3225, 3243, 3274, 3270, 3276, 3278, 3313,
     3282, 3332, 3335, 3324, 3367, 3375, 3378, 3399, 3405, 3386,
     3429, 3440, 3444, 3452, 3466,  799, 3492, 3546, 3474, 3592,
     3479, 3506, 3514, 3512, 3517, 3557, 3565, 3568,  495,  485,

      831,  600,    0,  475, 3602, 3640,  364, 3694, 3035, 3280,
     3570, 2929, 2931, 3344, 3438, 3373, 3012, 3601, 3526, 2959,
     3426, 3472, 3621, 3539, 3610, 3634, 3643, 3603, 3646, 3649,
     3652, 3654, 3661, 3688, 3676, 3697, 3700, 3708, 3702, 3712,
     3720, 3726, 3730, 3732, 3740, 3745, 3750, 3754, 3763, 3765,
     3773, 3775, 3778, 3783, 3786, 3793, 3796, 3805, 3798, 3808,
     3811, 3816, 3820, 3834, 3839, 3841, 3847, 3849, 3852, 3854,
     3862, 3876, 3880, 3882, 3885, 3887, 3891, 3909, 3912, 3914,
     3917, 3921, 3924, 3932, 3935, 3944, 3950, 3953, 3957, 3963,
     3968,  873,  628,  453, 3994,  442, 4017,  450, 4071, 3983,

     4004, 3998, 4028, 4031, 4039, 4042, 4053, 4075, 4078, 4093,
     4096, 4104, 4107, 4122, 4126, 4130, 4134, 4153, 4155, 4157,
     4161, 4180, 4182, 4184, 4203, 4208, 4211, 4205, 4229, 4231,
     4234, 4237, 4255, 4258, 4266, 4280, 4284, 4269, 4292, 4310,
     4312, 4315,  880,  688,  440, 4342,  423, 4365,  468, 4419,
      429,  423,    0,  907,  719,  398, 4354,  391, 4473,  552,
     4527, 4369, 4377, 4390, 4388, 4396, 4422, 4401, 4426, 4437,
     4445, 4476, 4450, 4495, 4499, 4514, 4538, 4541, 4549, 4553,
     4567,  908,  869,  388, 4595,  362, 4618,  744, 4672, 4575,
     3479, 4589, 4600, 4621, 4629, 4640, 4632, 4643, 4675, 4679,

     4683, 4697, 4727, 3850,    0, 4750, 4739,  332, 4804, 4756,
      320, 4783, 4010, 4455, 4159, 4288, 4081, 4128, 4190, 4240,
     4345, 4508, 4358, 4581, 4585, 4693, 4707, 4383, 4481, 4430,
     4768, 4535, 4712, 4743, 4770, 4756, 4652, 4791, 4810, 4798,
     4812, 4816, 4818, 4822, 4824, 4837, 4842, 4845, 4850, 4855,
     4864, 4870, 4878, 4882, 4884, 4888, 4893, 4896, 4906, 4908,
     4911, 4914, 4916, 4926, 4937, 4939, 4944, 4946, 4950, 4952,
     4958, 4964, 4970, 4973, 4977, 4979, 4982, 4988, 4991, 5000,
     5020, 5029, 5043, 5054,    0,  313, 5097, 5027, 5151, 5069,
     5074, 5063, 5078, 5101, 5104, 5116, 5119, 5138, 5162, 5170,

     5165, 5173, 5176, 5197, 5203, 5209, 5211, 5215, 5233, 5235,
     5238, 5256, 5260, 5262, 5264, 5282, 5286, 5290, 5294, 5305,
     5313, 5317, 5319, 5345, 5136, 5368, 5357,    0,  306, 5422,
     5375, 5476, 5394, 5404, 5436, 5530, 5448, 5584,  296, 5638,
     5450, 5692, 5461, 5480, 5501, 5409, 5498, 5512, 5457, 5534,
     5548, 5556, 5561, 5587, 5602, 5605, 5641, 5610, 5607, 5645,
     5671, 5682, 5746, 5703, 5800,  289, 5854, 5710, 5908, 5721,
     5727, 5750, 5764, 5772, 5803, 5672, 5818, 5829, 5838, 5837,
     5962, 5865, 5880, 5891, 5315, 5469, 5362, 5554, 5507, 5536,
     5752, 5760, 5874, 5770, 5876, 5888, 5895, 5542, 5914, 5916,

     5510, 5918, 5920, 5928, 5939, 5942, 5966, 5968, 5972, 5970,
     5974, 5976, 5981, 5994, 5999, 6001, 6003, 6009, 6005, 6012,
     6014, 6032, 6034, 6036, 6039, 6042, 6044, 6046, 6068, 6070,
     6072, 6074, 6076, 6078, 6082, 6108, 6122, 6122,    0, 6133,
     6146, 6156, 6145, 6157, 6165, 6169, 6171, 6177, 6183, 6189,
     6195, 6201, 6209, 6213, 6215, 6227, 6235, 6240, 6248, 6253,
     6261, 6273, 6275, 6279, 6298, 6300, 6306, 6326, 6335, 6330,
        0, 6349, 6358, 6367, 6378, 6387, 6382,    0, 6396, 6406,
     6419, 6415, 6418, 6386, 6421, 6423, 6441, 6445, 6447, 6449,
     6468, 6472, 6476, 6474, 6504, 6514, 6509,    0, 6528, 6537,

     6546, 6543, 6545, 6548, 6556, 6568, 6570, 6596, 6605, 6566,
     6102, 6142, 6285, 6250, 6595, 6500, 6352, 6601, 6605, 6609,
     6615, 6619, 6623, 6628, 6637, 6646, 6648, 6651, 6655, 6657,
     6660, 6670, 6675, 6678, 6680, 6685, 6688, 6693, 6706, 6708,
     6711, 6713, 6716, 6718, 6745, 6759, 6739, 6758, 6761, 6763,
     6781, 6784, 6786, 6799, 6804, 6807, 6810, 6822, 6830, 6836,
     6842, 6844, 6848, 6850, 6868, 6871, 6874, 6901, 6916, 6905,
     6928, 6917, 6925, 6928, 6930, 6936, 6948, 6959, 6961, 6967,
     6981, 6985, 7011, 7001, 7007, 7013, 7015, 7019, 7033, 7037,
     7045, 6940, 6773, 7047, 7056, 6863, 6970, 7058, 7060, 7066,

     7078, 7085, 7088, 7092, 7097, 7099, 7103, 7106, 7110, 7112,
     7118, 7130, 7141, 7138, 7153, 7164, 7166, 7172, 7184, 7186,
     7190, 7192, 7204, 7210, 7216, 7224, 7229, 7237, 7242, 7248,
     7260, 7262, 7273, 7275, 7287, 7295, 7298, 7301, 7309, 7151,
     7234, 7313, 7320, 7323, 7327, 7333, 7335, 7338, 7341, 7345,
     7353, 7359, 7365, 7367, 7373, 7379, 7385, 7391, 7409, 7412,
     7423, 7427, 7435, 7438, 7441, 7449, 7446, 7468, 7473, 7486,
     7491, 7377, 7488, 7496, 7499, 7518, 7521, 7529, 7532, 7544,
     7552, 7547, 7558, 7566, 7570, 7578, 7584, 7589, 7506, 7581,
     7607, 7610, 7613, 7615, 7618, 7621, 7636, 7639, 7641, 8569,

     7679, 7690, 7701, 7712, 7723, 7730, 7740, 7747, 7757, 7764,
     7774, 7781, 7791, 7798, 7808, 7819, 7830, 7841, 7851, 7857,
     7864, 7871, 7878, 7885, 7895, 7906, 7916, 7927, 7937, 7948,
     7959, 7969, 7980, 7990, 8001, 8012, 8023, 8034, 8045, 8056,
     8067, 8078, 8089, 8100, 8111, 8122, 8133, 8144, 8155, 8166,
     8177, 8188, 8199, 8210, 8221, 8232, 8243, 8254, 8261, 8272,
     8283, 8294, 8305, 8316, 8327, 8338, 8349, 8360, 8371, 8378,
     8389, 8400, 8411, 8422, 8433, 8444, 8451, 8462, 8473, 8484,
     8495, 8506, 8513, 8524, 8535, 8546, 8557
    } ;

static yyconst flex_int16_t yy_def[1388] =
    {   0,
     1300,    1, 1300,    3, 1300,    5, 1301, 1301, 1300,    9,
     1300,   11,   11,   13, 1302, 1302, 1303, 1303, 1304, 1304,
     1305, 1305, 1300, 1300, 1300, 1300, 1300, 1306, 1307, 1300,
     1306, 1300, 1306, 1306, 1306, 1306, 1306, 1300, 1306, 1306,
     1306, 1306, 1306,   41, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306,   41, 1306, 1306, 1306, 1306, 1306,
     1308, 1309, 1300, 1308, 1308, 1308, 1308, 1308, 1308, 1300,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1310, 1311,
     1300, 1310, 1310, 1310, 1310, 1310, 1310, 1300, 1310, 1300,

     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1312, 1313, 1300,
     1300, 1312, 1300, 1312, 1312, 1312, 1312, 1300, 1300, 1312,
     1300, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1300, 1300, 1314, 1315, 1314, 1314,
     1314, 1314, 1300, 1314,  144, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1300, 1300, 1300, 1300, 1316, 1300,
     1300, 1300, 1300, 1317, 1300, 1300, 1318, 1300, 1300, 1319,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1306, 1307,
     1306, 1320, 1307, 1307, 1306, 1306, 1306, 1300, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,

     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1308, 1309, 1308, 1308,
     1321, 1309, 1309, 1308, 1308, 1308, 1308, 1308, 1300, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,

     1308, 1308, 1308,   77, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1310, 1311, 1310, 1310, 1322, 1311, 1311, 1310, 1310, 1300,
     1300, 1310, 1300, 1310, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1312, 1313, 1312, 1312, 1323, 1313, 1313, 1312, 1312,
     1312, 1300, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1314, 1315, 1314, 1314, 1324, 1315, 1315,
     1314, 1314, 1300,  144, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1300,

     1300, 1300, 1300, 1300, 1316, 1300, 1300, 1300, 1317, 1318,
     1319, 1300, 1306, 1325, 1326, 1326, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,

     1306, 1306, 1306, 1306, 1308, 1327, 1328, 1328, 1308, 1308,
     1308, 1308,   77, 1308, 1308, 1308,   77, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1310, 1329,
     1330, 1330, 1300, 1300, 1300, 1300, 1331, 1331, 1312, 1332,
     1333, 1333, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1314, 1334, 1335, 1335, 1314, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1300, 1300,

     1325, 1325, 1331,  416, 1336, 1337,  416, 1338, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1327, 1327,  508, 1339,  508, 1340,  508, 1341, 1308,

     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1329, 1329,  552, 1342,  552, 1343,  552, 1344,
     1300, 1300, 1345, 1332, 1332,  562, 1346,  562, 1347,  562,
     1348, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1334, 1334,  588, 1349,  588, 1350,  588, 1351, 1314,
      590, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,

     1314, 1314, 1336, 1336, 1345, 1337, 1352,  806, 1353, 1331,
      416, 1354, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1339, 1339, 1340, 1355,  883,  883, 1356, 1331, 1357, 1358,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,

     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1342, 1342, 1343, 1360,  926,  926, 1361,
     1331, 1362, 1363, 1364, 1364, 1365, 1366, 1365,  938, 1367,
     1331, 1368, 1369, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1371, 1371, 1372, 1373, 1372,  965, 1374, 1331, 1375, 1376,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1378, 1378, 1379,
     1380, 1381, 1382, 1382, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,

     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1355, 1355, 1379,  883, 1384,
     1358, 1358, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360, 1379,
      926, 1385, 1363, 1363, 1366, 1366, 1379,  938, 1386, 1369,
     1369, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1373, 1373, 1379,  965, 1387, 1376,

     1376, 1377, 1377, 1377, 1377, 1377, 1377, 1381, 1381, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1384, 1384, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1385, 1385, 1386,
     1386, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1387, 1387, 1377, 1377, 1377, 1377, 1377, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,

     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1377, 1377, 1377, 1377, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1377,
     1377, 1383, 1383, 1383, 1383, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1370, 1370, 1370, 1370, 1370, 1383, 1383,
     1359, 1359, 1359, 1359, 1370, 1383, 1359, 1370, 1359,    0,

     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300
    } ;

static yyconst flex_int16_t yy_nxt[8626] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1097,  160,  161,  180,  161,  160,
      160, 1077,  162,  160,  161,  179,  161,  160,  160,  267,
      162, 1070,  321,  181,  182,  137,  163,  137, 1038,  184,
      604,  137,  137,  273,  163,  137,  327,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166,  980,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  342,  186,  169,  173,  174,  180,
      374,  180,  784,  180,  604,  181,  182,  180,  348,  810,
      175,  187,  187,  180,  380,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181, 1300,  183,  784,  181,
      182,  756,  189,  181,  190,  181, 1300,  272,  756,  180,
      176,  177,  191,  169,  169,  180,  171,  169,  172,  169,
      192,  180,  169,  173,  174,  181,  182,  331,  179,  180,
      331,  181,  182,  745,  181,  181,  175,  181,  182,  180,
      179,  193,  184,  202,  194,  181,  182,  195,  267,  214,
      745,  215,  694,  203,  184,  181,  182, 1300,  326,  204,
      694,  267,  273,  694,  216,  888,  176,  177,  179,  169,
      180,  205,  179,  206,  207,  273,  209,  210,  745,  211,
      208,  180,  212,  931,  213,  604,  181,  182,  406,  401,

      407,  196,  180,  321,  268,  197,  401,  181,  182,  198,
      199,  269,  200,  180,  408,  201,  180,  327,  181,  182,
      270,  271,  217,  321,  753,  342,  218,  342,  219,  181,
      182,  220,  181,  182,  223,  224,  180,  327,  225,  348,
      180,  348,  226,  753,  180,  221, 1300,  347,  227,  222,
      180,  374,  181,  182,  228,  336,  181,  182,  229,  232,
      181,  182,  237,  233,  336,  380,  181,  182,  230,  180,
      234,  235,  756,  236,  231,  752,  238,  941,  180,  239,
      180,  751,  240,  600,  241,  181,  182,  243,  242,  180,
      599,  244, 1300,  379,  181,  182,  181,  182,  245,  558,

      254, 1300,  601,  255,  256,  181,  182,  246,  179,  247,
      180,  258,  248,  257,  263,  264,  179,  249,  180,  250,
      557,  180,  251,  556,  252,  253,  181,  182,  259, 1300,
      692,  555,  260,  268,  181,  188,  261,  181,  182,  268,
      269,  341,  274,  412,  412,  265,  269,  268,  262,  270,
      271,  266,  340,  275,  269,  270,  271,  374,  268,  276,
      268, 1300,  268,  270,  271,  269,  268,  269,  277,  269,
     1300,  380,  278,  269,  270,  271,  270,  271,  270,  279,
      270,  270,  270,  271,  270, 1300,  412,  412,  268, 1300,
      743,  268,  270, 1300,  270,  269,  268,  413,  269,  268,

     1300,  180,  280,  269,  270,  271,  269,  270,  271,  294,
     1300,  602,  270,  271,  288,  270,  271,  181,  182,  268,
     1300,  754, 1300,  270,  270,  268,  269,  289, 1300,  180,
      290,  292,  269,  417,  293,  270,  271,  291,  300,  324,
      324,  270,  271,  324,  505,  181,  182,  281, 1300,  268,
      422,  324, 1300,  324,  282,  283,  269,  284,  693,  285,
      286,  268,  287,  268,  784,  270,  271,  301,  269,  968,
      269,  302,  180,  549,  268,  415, 1300,  270,  271,  270,
      271,  269,  324,  324,  295,  268,  296,  744,  181,  182,
      270,  271,  269,  303,  297, 1300,  304,  318,  268,  298,

      299,  270,  271,  559,  306,  269,  268,  585, 1300,  268,
      305, 1300,  268,  269,  270,  271,  269,  755,  307,  269,
      268,  783,  270,  271, 1300,  270,  271,  269,  270,  271,
      308, 1300,  310,  309,  316,  311,  270,  271,  319,  413,
     1300,  312,  313,  268,  317,  322,  314,  315, 1300,  322,
      269,  322,  323,  602,  328,  320,  323,  322,  323,  270,
      271,  324,  325,  329,  323,  324,  325,  324,  325,  180,
     1300,  782, 1300,  324,  325,  330,  331,  330,  330,  330,
      330,  505,  322, 1300,  322,  181,  182,  322,  549,  323,
      322,  323,  332,  332,  323,  693, 1300,  323,  324,  325,

      324,  325,  744,  324,  333, 1300,  324,  325,  418,  335,
      336,  337,  337,  335,  335,  559,  585, 1300, 1300,  338,
     1300,  334,  339,  337,  336,  337,  337,  337,  337,  755,
      783,  345,  345,  338, 1300,  345,  339,  337,  336,  337,
      337,  337,  337,  345,  343,  345,  343,  338,  343,  349,
      339,  344,  343,  344,  350,  344, 1300, 1300, 1300,  344,
      345,  346,  345,  346,  345,  346,  343, 1300,  345,  346,
      343, 1300,  343,  344,  345,  345, 1300,  344,  343,  344,
     1300, 1300,  345,  346,  351,  344,  345,  352,  345,  346,
      343, 1300,  343, 1300,  345,  346,  343,  344, 1300,  344,

     1300, 1300, 1300,  344,  375, 1300,  345,  346,  345,  346,
     1300,  376,  345,  346,  353, 1300,  343, 1300,  356,  343,
      377,  378,  354,  344, 1300, 1300,  344,  355,  357, 1300,
      343,  358,  345,  346,  359,  345,  346,  344,  343, 1300,
      360, 1300,  361, 1300, 1300,  344,  345,  346,  363, 1300,
      343, 1300,  364, 1300,  345,  346,  362,  344, 1300,  180,
      365,  343, 1300,  343, 1300,  343,  345,  346,  344,  367,
      344, 1300,  344, 1300,  366,  181,  182,  345,  346,  345,
      346,  345,  346,  343, 1300,  424, 1300, 1300,  375,  370,
      344,  381, 1300,  368, 1300,  376,  369, 1300,  371,  345,

      346,  375,  372,  375,  377,  378,  375,  382,  376, 1300,
      376, 1300, 1300,  376, 1300,  373, 1300,  377,  378,  377,
      378, 1300,  377,  383,  377,  377,  374,  180,  377, 1300,
      375, 1300, 1300,  374,  374,  389,  377,  376,  377,  374,
     1300,  375, 1300,  181,  182,  390,  377,  378,  376,  400,
      401,  402,  402,  400,  400, 1300,  375,  377,  378,  403,
      392,  391,  404,  376,  375, 1300,  180,  377,  377,  375,
     1300,  376,  377,  378, 1300,  387,  376,  375, 1300, 1300,
      377,  378,  181,  182,  376,  377,  378, 1300,  423,  375,
     1300,  384,  393,  377,  378, 1300,  376,  394,  385,  386,

      375, 1300, 1300,  387,  388,  377,  378,  376,  375, 1300,
     1300,  180,  395,  375, 1300,  376,  377,  378,  387, 1300,
      376,  414,  181,  181,  377,  378,  181,  181,  182,  377,
      378,  399,  396, 1300,  181,  180,  181,  419,  397, 1300,
      420,  416, 1300, 1300,  398,  402,  401,  402,  402,  402,
      402,  181,  182, 1300,  180,  403, 1300, 1300,  404,  402,
      401,  402,  402,  402,  402,  181,  181,  180, 1300,  403,
      181,  182,  404,  181,  181,  187,  187,  181,  180, 1300,
      180, 1300,  180,  181,  182,  181, 1300,  181, 1300,  180,
     1300,  421,  180, 1300,  181,  182,  181,  182,  181,  182,

      425, 1300,  426,  427, 1300,  181,  182,  180,  181,  182,
     1300, 1300,  180, 1300,  432,  180,  181,  181,  428,  429,
      430,  180, 1300,  181,  182,  180,  433,  431,  181,  182,
      180,  181,  182,  180, 1300, 1300, 1300,  181,  182,  180,
     1300,  181,  182,  434,  436,  435,  181,  182,  180,  181,
      182,  180,  438,  439, 1300,  181,  182,  441, 1300,  180,
     1300,  437,  180, 1300,  181,  182,  180,  181,  182, 1300,
      440, 1300,  180, 1300,  180,  181,  182,  180,  181,  182,
      442,  444,  181,  182,  180, 1300,  443,  255,  181,  182,
      181,  182,  446,  181,  182,  180, 1300,  447,  180, 1300,

      181,  182, 1300, 1300,  180, 1300, 1300,  180, 1300,  445,
     1300,  181,  182,  180,  181,  182,  180,  450,  180,  448,
      181,  182,  451,  181,  182,  180,  449, 1300,  180,  181,
      182, 1300,  181,  182,  181,  182,  452,  180, 1300,  180,
     1300,  181,  182,  180,  181,  182,  180, 1300,  455,  457,
      453,  180,  454,  181,  182,  181,  182,  180, 1300,  181,
      182, 1300,  181,  182,  180, 1300,  456,  181,  182,  180,
     1300, 1300,  458,  181,  182,  180,  461,  180,  460,  459,
      181,  182,  180,  463,  255,  181,  182,  462,  180, 1300,
      180,  181,  182,  181,  182,  506,  270,  270,  181,  182,

      270, 1300,  180, 1300,  181,  182,  181,  182,  270,  180,
      270,  464,  465,  180,  466,  467,  468,  180,  181,  182,
      180, 1300,  469,  471,  470,  181,  182,  180, 1300,  181,
      182, 1300, 1300,  181,  182,  472,  181,  182,  474,  270,
      270, 1300,  180,  181,  182,  180, 1300, 1300,  180,  479,
      473,  180, 1300,  475, 1300, 1300,  476,  477,  181,  182,
      480,  181,  182,  478,  181,  182,  180,  181,  182, 1300,
     1300,  481, 1300,  180, 1300, 1300,  180,  483, 1300,  482,
      484,  180,  181,  182, 1300,  485,  486,  180,  487,  181,
      182,  488,  181,  182, 1300,  489, 1300,  181,  182,  180,

      490,  180, 1300,  181,  182,  180, 1300,  180, 1300,  180,
     1300,  491,  492, 1300, 1300,  181,  182,  181,  182,  494,
      180,  181,  182,  181,  182,  181,  182, 1300, 1300,  493,
      180,  495,  180, 1300,  180, 1300,  181,  182,  499, 1300,
     1300, 1300,  496, 1300,  497,  180,  181,  182,  181,  182,
      181,  182,  498,  180, 1300, 1300,  500,  502,  268,  503,
      268,  181,  182,  504,  268,  269,  501,  269, 1300,  181,
      182,  269, 1300, 1300,  270,  271,  270,  271, 1300,  268,
      270,  279,  507,  268, 1300,  268,  269,  268, 1300,  508,
      269,  268,  269, 1300,  269,  270,  271, 1300,  269,  270,

      271,  270,  271,  270,  271,  270,  270,  270,  271,  270,
     1300,  268, 1300,  268, 1300, 1300,  268,  270,  269,  270,
      269,  180, 1300,  269,  180, 1300, 1300,  270,  271,  270,
      271,  510,  270,  271, 1300,  268, 1300,  181,  182,  268,
      181,  182,  269, 1300, 1300, 1300,  269,  509,  270,  270,
      285,  270,  271, 1300,  511,  270,  271,  268, 1300,  268,
     1300,  268, 1300, 1300,  269,  268,  269,  180,  269,  512,
      513, 1300,  269,  270,  271,  270,  271,  270,  271,  268,
     1300,  270,  271,  181,  182,  611,  269,  268,  514, 1300,
      268, 1300,  268,  515,  269,  270,  271,  269,  268,  269,

      517,  180,  516,  270,  271,  269,  270,  271,  270,  271,
     1300, 1300,  268,  374,  270,  271, 1300,  181,  182,  269,
      374,  374, 1300,  268,  520,  268,  374,  518,  270,  271,
      269,  522,  269,  519, 1300,  523,  268, 1300,  268,  270,
      271,  270,  271,  269,  268,  269, 1300,  524, 1300,  521,
     1300,  269,  270,  271,  270,  271,  525,  268, 1300, 1300,
      270,  271,  268, 1300,  269, 1300,  526, 1300,  268,  269,
      268, 1300, 1300,  270,  271,  269,  268,  269,  270,  271,
     1300,  528, 1300,  269,  270,  271,  270,  271,  267,  527,
      267,  530,  270,  271,  268, 1300, 1300,  531,  267,  529,

      534,  269,  268,  532,  533, 1300,  268, 1300,  536,  269,
      270,  271,  180,  269,  180, 1300, 1300,  268,  270,  271,
      268,  535,  270,  271,  269,  268, 1300,  269,  181,  182,
      181,  182,  269,  270,  271,  538,  270,  271,  537,  539,
      268,  270,  271,  268,  541,  268,  618,  269, 1300,  540,
      269,  268,  269, 1300,  613, 1300,  270,  271,  269,  270,
      271,  270,  271, 1300, 1300,  543,  268,  270,  271,  268,
      545,  268, 1300,  269,  268,  542,  269,  268,  269, 1300,
      544,  269,  270,  271,  269,  270,  271,  270,  271,  322,
      270,  271, 1300,  270,  271,  322,  323,  547, 1300, 1300,

      322,  546,  323, 1300, 1300,  324,  325,  323, 1300,  548,
     1300,  324,  325,  550,  324,  324,  324,  333,  324, 1300,
      322,  324,  324,  551,  322,  324,  324,  323,  324, 1300,
      552,  323,  322,  324, 1300,  324,  324,  325, 1300,  323,
      324,  325,  330,  331,  330,  330,  330,  330,  324,  325,
     1300,  180,  553,  322, 1300,  554, 1300,  324,  324, 1300,
      323,  332,  332, 1300,  324,  324, 1300,  181,  182,  324,
      325,  335,  336,  337,  337,  335,  335,  610,  560,  345,
      345,  338, 1300,  345,  339,  337,  336,  337,  337,  337,
      337,  345,  343,  345,  343,  338,  343, 1300,  339,  344,

     1300,  344, 1300,  344, 1300, 1300, 1300, 1300,  345,  346,
      345,  346,  345,  352,  343, 1300, 1300,  561,  343, 1300,
      343,  344,  345,  345,  562,  344, 1300,  344,  345,  345,
      345,  346,  345, 1300,  345,  346,  345,  346,  343, 1300,
      345,  343,  345,  343, 1300,  344,  343, 1300,  344,  343,
      344,  180, 1300,  344,  345,  346,  344,  345,  346,  345,
      346, 1300,  345,  346, 1300,  345,  346,  181,  182, 1300,
     1300,  345,  345,  566,  563,  343,  564,  565,  343, 1300,
      567,  343,  344,  343,  568,  344,  609, 1300,  344, 1300,
      344,  345,  346,  571,  345,  346,  343,  345,  346,  345,

      346, 1300, 1300,  344,  343,  572, 1300,  569, 1300,  343,
     1300,  344,  345,  346,  180,  570,  344,  343,  573, 1300,
      345,  346,  343, 1300,  344,  345,  346, 1300,  343,  344,
      181,  182,  575,  345,  346,  344, 1300, 1300,  345,  346,
     1300,  574,  343,  615,  345,  346,  571,  576,  180,  344,
      343, 1300, 1300,  577,  578,  579, 1300,  344,  345,  346,
     1300,  343, 1300, 1300,  181,  182,  345,  346,  344, 1300,
     1300,  580,  581,  343, 1300,  343, 1300,  345,  346, 1300,
      344,  343,  344,  612, 1300,  582,  375, 1300,  344,  345,
      346,  345,  346,  376, 1300,  583,  180,  345,  346,  375,

     1300,  375,  377,  378, 1300, 1300,  376, 1300,  376, 1300,
      584,  180,  181,  182,  614,  377,  378,  377,  383,  586,
      377,  377,  375, 1300,  377,  587, 1300,  181,  182,  376,
      375,  616,  377, 1300,  377, 1300,  588,  376,  377,  378,
      377,  377,  375, 1300,  377, 1300,  377,  378, 1300,  376,
      375, 1300,  377, 1300,  377,  375, 1300,  376,  377,  378,
      589,  375,  376,  377,  377, 1300,  377,  378,  376,  387,
     1300,  377,  378, 1300, 1300,  375, 1300,  377,  378, 1300,
     1300,  375,  376,  377,  377, 1300,  375, 1300,  376, 1300,
      387,  377,  378,  376,  375, 1300,  590,  377,  378, 1300,

      375,  376,  377,  378, 1300,  375,  592,  376, 1300, 1300,
      377,  378,  376,  375, 1300, 1300,  377,  378,  591, 1300,
      376,  377,  378, 1300,  593, 1300,  387,  375, 1300,  377,
      378,  375, 1300, 1300,  376,  375, 1300, 1300,  376,  375,
     1300,  387,  376,  377,  378,  594,  376,  377,  378, 1300,
      596,  377,  378,  180, 1300,  377,  378, 1300, 1300, 1300,
     1300,  597,  595,  400,  401,  402,  402,  400,  400,  181,
      182,  617,  180,  403,  598, 1300,  404,  402,  401,  402,
      402,  402,  402, 1300, 1300, 1300, 1300,  403,  181,  182,
      404,  603,  180, 1300,  603, 1300, 1300, 1300, 1300,  605,

      603,  603,  619,  180,  603,  620, 1300, 1300,  181,  182,
      180,  606,  603,  625,  603,  607,  608, 1300,  180,  181,
      182,  180, 1300,  621,  622, 1300,  181,  182, 1300, 1300,
      180, 1300, 1300,  180,  181,  182, 1300,  181,  182, 1300,
      623,  624, 1300,  603,  603,  603,  181,  182,  603,  181,
      182, 1300,  627,  605,  603,  603,  626,  180,  603,  180,
     1300, 1300,  180, 1300,  180,  606,  603,  180,  603,  607,
      608,  180, 1300,  181,  182,  181,  182,  180,  181,  182,
      181,  182, 1300,  181,  182,  180,  631,  181,  182,  180,
      628,  630,  255,  181,  182,  180, 1300,  603,  603,  629,

      180,  181,  182,  180,  632,  181,  182,  633, 1300, 1300,
      180,  181,  182, 1300,  180, 1300,  181,  182,  180,  181,
      182,  180, 1300, 1300,  638,  634,  181,  182,  635,  636,
      181,  182,  637,  180,  181,  182,  639,  181,  182,  640,
      180, 1300,  180, 1300,  180, 1300,  180, 1300,  180,  181,
      182, 1300,  180,  642,  641,  180,  181,  182,  181,  182,
      181,  182,  181,  182,  181,  182, 1300,  644,  181,  182,
      180,  181,  182, 1300,  643,  180, 1300,  180, 1300,  180,
     1300,  647, 1300,  646,  645,  648,  181,  182,  180,  649,
      180,  181,  182,  181,  182,  181,  182,  180,  650, 1300,

      180, 1300, 1300,  180,  181,  182,  181,  182, 1300, 1300,
      651,  180, 1300,  181,  182,  653,  181,  182,  654,  181,
      182,  180, 1300, 1300,  652,  180,  656,  181,  182,  180,
     1300,  655,  180, 1300,  180, 1300,  658,  181,  182, 1300,
      657,  181,  182,  180, 1300,  181,  182,  180,  181,  182,
      181,  182,  180, 1300, 1300,  660, 1300,  180, 1300,  181,
      182,  180,  659,  181,  182,  663, 1300,  180,  181,  182,
      661,  180,  662,  181,  182,  180, 1300,  181,  182,  665,
     1300,  180,  664,  181,  182, 1300, 1300,  181,  182,  667,
      180,  181,  182,  180, 1300,  180,  666,  181,  182,  669,

     1300,  180,  255,  180, 1300,  180,  181,  182,  180,  181,
      182,  181,  182,  180, 1300,  668,  671,  181,  182,  181,
      182,  181,  182,  180,  181,  182, 1300,  670, 1300,  181,
      182,  180, 1300, 1300,  180,  672,  674, 1300,  673,  181,
      182,  675,  180,  676,  180,  677,  681,  181,  182,  180,
      181,  182, 1300,  678,  680,  180, 1300,  679,  181,  182,
      181,  182, 1300,  684,  180,  181,  182,  180,  682, 1300,
     1300,  181,  182, 1300, 1300,  180, 1300,  180,  683, 1300,
      181,  182, 1300,  181,  182,  180,  686, 1300,  268,  685,
      268,  181,  182,  181,  182,  269,  688,  269, 1300,  687,

      689,  181,  182,  268,  270,  271,  270,  271,  690, 1300,
      269,  268, 1300, 1300,  267, 1300,  703, 1300,  269,  270,
      271, 1300,  691,  603,  267, 1300,  603,  270,  271,  704,
      267,  695,  603,  603,  268,  700,  603,  180,  696,  180,
     1300,  269,  268,  697,  603,  268,  603,  698,  699,  269,
      270,  271,  269,  181,  182,  181,  182,  268,  270,  271,
     1300,  270,  271,  816,  269, 1300, 1300,  180, 1300, 1300,
      701, 1300,  702,  270,  271,  603,  603,  603, 1300,  712,
      603, 1300,  706,  181,  182,  695,  603,  603,  268, 1300,
      603, 1300,  696,  823, 1300,  269,  268,  697,  603,  824,

      603,  698,  699,  269,  270,  271,  267, 1300,  707, 1300,
     1300,  268,  270,  271, 1300,  527,  267,  708,  269, 1300,
      180,  709,  710,  705,  711, 1300,  713,  270,  271,  603,
      603,  268, 1300,  268, 1300,  268,  181,  182,  269, 1300,
      269,  714,  269,  180, 1300, 1300,  268,  270,  271,  270,
      271,  270,  271,  269,  715,  820,  716,  268,  717,  181,
      182, 1300,  270,  271,  269,  268, 1300, 1300,  268, 1300,
     1300,  268,  269,  270,  271,  269,  718,  719,  269, 1300,
      813,  270,  271, 1300,  270,  271,  720,  270,  271,  268,
     1300,  268, 1300,  722, 1300, 1300,  269,  268,  269, 1300,

      721, 1300,  268, 1300,  269,  270,  271,  270,  271,  269,
      268,  723, 1300,  270,  271,  268, 1300,  269,  270,  271,
     1300, 1300,  269,  268, 1300, 1300,  270,  271,  724,  725,
      269,  270,  271,  727,  268, 1300,  268, 1300,  726,  270,
      271,  269, 1300,  269, 1300,  729,  728,  268, 1300,  268,
      270,  271,  270,  271,  269,  268,  269, 1300, 1300,  730,
      268, 1300,  269,  270,  271,  270,  271,  269, 1300,  732,
     1300,  270,  271, 1300,  268, 1300,  270,  271, 1300,  268,
     1300,  269, 1300, 1300, 1300,  734,  269,  268, 1300,  731,
      270,  271,  733,  268,  269,  270,  271, 1300, 1300,  736,

      269,  268, 1300,  270,  271,  737, 1300,  268,  269,  270,
      271,  735, 1300,  738,  269, 1300, 1300,  270,  271,  268,
     1300, 1300, 1300,  270,  271,  322,  269,  343, 1300,  739,
      343,  740,  323,  343,  344,  270,  271,  344,  741, 1300,
      344,  324,  325,  345,  346, 1300,  345,  346, 1300,  345,
      346,  343, 1300, 1300, 1300,  742,  603, 1300,  344,  603,
     1300, 1300,  762,  763,  746,  603,  603,  345,  346,  603,
     1300,  747, 1300, 1300,  764, 1300,  748,  603,  343,  603,
      749,  750,  343, 1300,  343,  344,  343,  765,  180,  344,
      343,  344, 1300,  344,  345,  346, 1300,  344,  345,  346,

      345,  346,  345,  346,  181,  182,  345,  346,  603,  603,
      603, 1300, 1300,  603,  767,  766, 1300,  571,  746,  603,
      603,  343, 1300,  603,  814,  747, 1300, 1300,  344,  768,
      748,  603,  343,  603,  749,  750, 1300,  345,  346,  344,
      343, 1300, 1300,  343, 1300, 1300,  769,  344,  345,  346,
      344, 1300,  180, 1300,  773, 1300,  345,  346, 1300,  345,
      346, 1300,  603,  603,  603, 1300, 1300,  603,  181,  182,
      770,  771,  757,  603,  603,  343, 1300,  603,  772,  758,
      817,  180,  344,  343,  759,  603,  343,  603,  760,  761,
      344,  345,  346,  344,  343, 1300, 1300,  181,  182,  345,

      346,  344,  345,  346, 1300, 1300, 1300,  343, 1300,  819,
      345,  346,  571,  343,  344,  571,  603,  603,  603, 1300,
      344,  603,  774,  345,  346,  775,  757,  603,  603,  345,
      346,  603, 1300,  758,  180,  776,  777,  343,  759,  603,
     1300,  603,  760,  761,  344, 1300,  180, 1300,  343, 1300,
      181,  182,  343,  345,  346,  344,  825,  778, 1300,  344,
      343, 1300,  181,  182,  345,  346, 1300,  344,  345,  346,
      603,  603,  780,  779,  375, 1300,  345,  346,  781, 1300,
      180,  376,  375,  818, 1300, 1300, 1300,  375, 1300,  376,
      377,  378,  603, 1300,  376,  603,  181,  182,  377,  378,

      785,  603,  603,  377,  378,  603,  826,  786, 1300,  796,
      374, 1300,  787,  603,  375,  603,  788,  789,  790,  374,
      375,  376,  375,  374,  972,  375,  374,  376, 1300,  376,
      377,  378,  376, 1300,  180, 1300,  377,  378,  377,  378,
     1300,  377,  378,  797,  603,  603,  603,  180, 1300,  603,
      181,  182,  822, 1300,  785,  603,  603,  798,  387,  603,
     1300,  786,  799,  181,  182,  375,  787,  603, 1300,  603,
      788,  789,  376,  375, 1300, 1300,  375, 1300,  180, 1300,
      376,  377,  378,  376,  828,  800, 1300, 1300, 1300,  377,
      378, 1300,  377,  378,  181,  182, 1300, 1300,  603,  603,

      375,  801,  603,  183,  802,  603, 1300,  376,  183,  180,
      604,  180,  387, 1300,  815, 1300,  377,  378,  180, 1300,
     1300, 1300, 1300,  791,  804,  181,  182,  181,  182,  180,
      792, 1300,  793, 1300,  181,  182,  794,  795, 1300,  792,
      805, 1300,  180,  805,  821,  181,  182, 1300,  807,  805,
      805,  180, 1300,  805,  180,  827,  829,  180,  181,  182,
      180,  805,  180,  805,  808,  809,  830,  181,  182,  180,
      181,  182, 1300,  181,  182, 1300,  181,  182,  181,  182,
      831, 1300, 1300, 1300,  180,  181,  182,  836, 1300,  832,
     1300,  834,  805,  805,  603,  833,  180,  603, 1300,  835,

      181,  182,  812,  607,  607,  180, 1300,  607,  180,  838,
      180, 1300,  181,  182, 1300,  607,  180,  607,  603,  603,
      180,  181,  182, 1300,  181,  182,  181,  182,  180,  840,
     1300,  837,  181,  182,  180, 1300,  181,  182,  180,  842,
      180, 1300, 1300,  839,  181,  182,  607,  607,  180, 1300,
      181,  182,  841,  180,  181,  182,  181,  182,  180,  843,
     1300, 1300,  180, 1300,  181,  182,  844, 1300, 1300,  181,
      182,  180, 1300,  180,  181,  182, 1300,  845,  181,  182,
      848,  180, 1300,  180,  847,  846,  180,  181,  182,  181,
      182,  180, 1300,  849,  180, 1300, 1300,  181,  182,  181,

      182,  180,  181,  182,  180,  851,  180,  181,  182, 1300,
      181,  182,  850,  180, 1300, 1300,  180,  181,  182,  180,
      181,  182,  181,  182,  180, 1300,  854,  853,  180,  181,
      182,  852,  181,  182,  855,  181,  182, 1300, 1300,  857,
      181,  182,  180, 1300,  181,  182,  859,  180,  856,  180,
      603, 1300,  183,  603,  858,  180,  183,  180,  181,  182,
      180, 1300,  180,  181,  182,  181,  182, 1300,  860,  861,
      180,  181,  182,  181,  182,  862,  181,  182,  181,  182,
     1300, 1300, 1300,  478,  180, 1300,  181,  182,  180, 1300,
      180, 1300, 1300,  180, 1300,  180,  863, 1300,  864,  180,

      181,  182, 1300, 1300,  181,  182,  181,  182,  865,  181,
      182,  181,  182,  869, 1300,  181,  182,  180, 1300,  866,
      180, 1300,  180, 1300,  867,  180, 1300, 1300, 1300,  180,
      868, 1300,  180,  181,  182, 1300,  181,  182,  181,  182,
      180,  181,  182,  180,  871,  181,  182,  873,  181,  182,
     1300,  870,  180, 1300, 1300, 1300,  181,  182,  180,  181,
      182,  180, 1300, 1300, 1300,  180, 1300,  872,  181,  182,
      876,  180,  874, 1300,  181,  182,  180,  181,  182,  875,
      877,  181,  182,  878, 1300, 1300, 1300,  181,  182,  879,
     1300,  268,  181,  182,  603,  272,  880,  603,  269, 1300,

      272, 1300,  694, 1300, 1300, 1300,  268,  270,  271, 1300,
     1300,  891,  268,  269, 1300, 1300,  882,  805,  180,  269,
      805, 1300,  270,  271, 1300,  884,  805,  805,  270,  271,
      805, 1300,  885, 1300,  181,  182,  268, 1300,  805,  268,
      805,  886,  887,  269,  893, 1300,  269,  268,  892, 1300,
      268, 1300,  270,  271,  269,  270,  271,  269, 1300, 1300,
     1300,  268,  894,  270,  271, 1300,  270,  271,  269,  805,
      805,  603, 1300, 1300,  603, 1300,  895,  270,  271,  890,
      698,  698,  896,  268,  698, 1300,  268, 1300, 1300,  180,
      269,  527,  698,  269,  698,  603,  603, 1300,  897,  270,

      271,  268,  270,  271,  268,  181,  182, 1300,  269, 1300,
      989,  269,  268,  527, 1300,  268,  527,  270,  271,  269,
      270,  271,  269,  698,  698, 1300,  527, 1300,  270,  271,
      268,  270,  271,  899,  268, 1300,  180,  269,  268, 1300,
     1300,  269,  268,  898, 1300,  269,  270,  271, 1300,  269,
      270,  271,  181,  182,  270,  271,  900, 1300,  270,  271,
      901,  268,  990,  268, 1300,  268, 1300,  180,  269,  268,
      269, 1300,  269, 1300,  902, 1300,  269,  270,  271,  270,
      271,  270,  271,  181,  182,  270,  271,  906,  268,  987,
      268, 1300,  268, 1300,  903,  269, 1300,  269,  180,  269,

      904, 1300, 1300,  905,  270,  271,  270,  271,  270,  271,
     1300,  268, 1300,  268,  181,  182,  268,  907,  269,  268,
      269, 1300, 1300,  269, 1300, 1300,  269,  270,  271,  270,
      271,  908,  270,  271,  909,  270,  271,  268, 1300,  268,
      910, 1300,  268, 1300,  269,  268,  269, 1300,  180,  269,
     1300, 1300,  269,  270,  271,  270,  271,  911,  270,  271,
     1300,  270,  271,  268,  181,  182,  268,  914, 1300, 1300,
      269,  912,  913,  269,  268, 1300, 1300,  268, 1300,  270,
      271,  269,  270,  271,  269,  915, 1300, 1300,  268, 1300,
      270,  271,  268,  270,  271,  269,  180, 1300, 1300,  269,

      268, 1300, 1300,  916,  270,  271,  920,  269,  270,  271,
      917, 1300,  181,  182,  918,  988,  270,  271,  268, 1300,
      268, 1300, 1300,  268,  922,  269, 1300,  269, 1300,  919,
      269, 1300,  921, 1300,  270,  271,  270,  271, 1300,  270,
      271, 1300,  603,  326,  923,  603, 1300, 1300,  326, 1300,
      745, 1300, 1300,  180,  603,  347, 1300,  603, 1300, 1300,
      347, 1300,  756, 1300,  925,  805,  180, 1300,  805,  181,
      182, 1300, 1300,  927,  805,  805,  935,  343,  805, 1300,
      928, 1300,  181,  182,  344,  343,  805, 1300,  805,  929,
      930,  180,  344,  345,  346,  992,  343,  944,  343, 1300,

     1300,  345,  346,  344,  343,  344, 1300,  181,  182,  343,
     1300,  344,  345,  346,  345,  346,  344,  805,  805,  603,
      345,  346,  603,  945,  946,  345,  346,  933,  749,  749,
      343,  949,  749,  947,  343, 1300,  571,  344,  180, 1300,
      749,  344,  749,  603,  603,  343,  345,  346,  948, 1300,
      345,  346,  344,  343,  181,  182,  950, 1300,  343, 1300,
      344,  345,  346,  180, 1300,  344, 1300, 1300, 1300,  345,
      346,  749,  749,  805,  345,  346,  805, 1300,  951,  181,
      182,  937,  805,  805,  343,  985,  805, 1300,  938,  180,
      952,  344, 1300, 1300,  805,  986,  805,  939,  940,  571,

      345,  346,  953,  343, 1300,  181,  182,  343, 1300,  997,
      344, 1300, 1300, 1300,  344, 1300,  180, 1300, 1300,  345,
      346,  954,  343,  345,  346,  805,  805,  603,  955,  344,
      603, 1300,  181,  182, 1300,  943,  760,  760,  345,  346,
      760, 1300,  956,  180, 1300, 1300,  343,  991,  760,  343,
      760,  603,  603,  344, 1300, 1300,  344,  343, 1300,  181,
      182,  343,  345,  346,  344,  345,  346, 1300,  344,  999,
     1300,  958, 1300,  345,  346,  343,  957,  345,  346,  760,
      760, 1300,  344,  375, 1300, 1300, 1300,  959, 1300,  180,
      376,  345,  346,  180,  571,  603,  379,  375,  603,  377,

      378,  379, 1300,  784,  376,  181,  182, 1300,  375,  181,
      182,  994,  960,  377,  378,  376, 1300,  962,  805,  971,
      993,  805, 1300, 1300,  377,  378,  964,  805,  805,  375,
     1300,  805, 1300,  965, 1300, 1300,  376,  375,  792,  805,
      375,  805,  966,  967,  376,  377,  378,  376,  375, 1300,
     1300,  375, 1300,  377,  378,  376,  377,  378,  376,  792,
      180, 1300,  792, 1300,  377,  378, 1300,  377,  378, 1300,
      805,  805,  603,  975, 1300,  603,  181,  182,  974,  973,
      970,  788,  788,  375, 1300,  788, 1004,  375, 1300, 1300,
      376,  375, 1300,  788,  376,  788,  603,  603,  376,  377,

      378,  180, 1300,  377,  378,  375, 1300,  377,  378, 1300,
     1300, 1300,  376, 1300, 1300,  180,  976,  181,  182,  387,
      180,  377,  378,  977,  788,  788, 1300,  603,  183,  387,
      603,  181,  182,  183, 1300,  604,  181,  182,  995,  805,
      183, 1000,  805, 1300, 1300,  183,  996,  806, 1300,  804,
      805,  180, 1300,  805, 1300, 1300, 1300, 1300,  807,  805,
      805,  979, 1300,  805,  180,  607,  607,  181,  182,  607,
     1300,  805, 1001,  805,  808,  809,  180,  607,  180,  607,
      181,  182, 1300,  603,  601, 1300,  603, 1300, 1300,  601,
     1300,  811,  181,  182,  181,  182, 1300, 1300,  998,  180,

     1002, 1003,  805,  805,  805,  984,  180,  805,  607,  607,
     1300, 1300,  982,  808,  808,  181,  182,  808,  180, 1300,
      180, 1300,  181,  182,  180,  808,  180,  808,  805,  805,
      180, 1300,  180, 1300,  181,  182,  181,  182, 1300, 1005,
      181,  182,  181,  182, 1006,  180,  181,  182,  181,  182,
      180, 1300, 1300,  180, 1009, 1300,  808,  808,  180, 1300,
     1007,  181,  182,  180, 1300, 1300,  181,  182, 1300,  181,
      182, 1008,  180, 1300,  181,  182, 1300, 1300,  180,  181,
      182, 1011, 1012, 1300, 1300, 1010,  180, 1300,  181,  182,
      180, 1300,  180, 1013,  181,  182,  180, 1300, 1300, 1014,

     1015,  180,  181,  182,  180, 1300,  181,  182,  181,  182,
     1017, 1300,  181,  182,  180, 1016,  180,  181,  182,  180,
      181,  182,  180, 1019,  180, 1300, 1020, 1018, 1300, 1300,
      181,  182,  181,  182,  180,  181,  182, 1300,  181,  182,
      181,  182, 1300, 1021, 1023,  180, 1025,  180, 1300, 1300,
      181,  182,  180, 1022,  180, 1300, 1300, 1300,  180, 1024,
      180,  181,  182,  181,  182, 1026,  180, 1300,  181,  182,
      181,  182,  180, 1027,  181,  182,  181,  182,  180, 1300,
     1028,  180,  181,  182, 1030,  180, 1300,  180,  181,  182,
      180, 1300, 1300, 1029,  181,  182,  180,  181,  182,  180,

     1300,  181,  182,  181,  182, 1300,  181,  182,  180, 1031,
     1300, 1300,  181,  182, 1300,  181,  182, 1032, 1300, 1300,
      603,  272, 1033,  603,  181,  182,  272, 1300,  694,  603,
     1300,  272,  603, 1035, 1034,  272,  698,  698, 1300, 1300,
      698, 1300,  882,  805, 1300, 1300,  805, 1300,  698, 1300,
      698,  884,  805,  805,  805,  272,  805,  805,  885, 1300,
      272, 1300,  883, 1300,  805, 1300,  805,  886,  887,  603,
      692,  268,  603, 1300, 1300,  692, 1037,  889,  269,  698,
      698, 1300,  268, 1300, 1300, 1300,  268,  270,  271,  269,
     1300, 1042, 1300,  269, 1300,  805,  805,  805,  270,  271,

      805, 1300,  270,  271, 1300, 1040,  886,  886, 1043,  268,
      886, 1300,  268, 1300, 1300, 1300,  269, 1300,  886,  269,
      886,  805,  805, 1044,  268,  270,  271,  268,  270,  271,
     1300,  269, 1300, 1045,  269, 1300,  603, 1300,  326,  603,
      270,  271,  326,  270,  271, 1300,  268, 1046, 1300,  886,
      886,  603,  527,  269,  603, 1300, 1300, 1300, 1300,  695,
      603,  603,  270,  271,  603, 1300,  696, 1047, 1300, 1300,
      268, 1300,  603,  268,  603,  698,  699,  269,  268, 1300,
      269,  268, 1300, 1300,  268,  269,  270,  271,  269,  270,
      271,  269, 1300, 1300,  270,  271, 1300,  270,  271, 1300,

      270,  271, 1300,  603,  603,  268, 1300, 1048, 1050, 1049,
     1300,  268,  269, 1051, 1300, 1300, 1052,  268,  269,  268,
     1300,  270,  271,  268,  269, 1300,  269,  270,  271, 1300,
      269, 1053, 1054,  270,  271,  270,  271, 1300, 1300,  270,
      271,  268, 1300,  268, 1300, 1300,  268, 1300,  269, 1300,
      269, 1300, 1300,  269, 1055, 1300, 1300,  270,  271,  270,
      271, 1057,  270,  271,  268, 1056, 1300, 1300,  268, 1300,
      268,  269,  268, 1300, 1300,  269, 1300,  269, 1300,  269,
      270,  271, 1300, 1058,  270,  271,  270,  271,  270,  271,
      268, 1061, 1062, 1300,  268, 1300, 1059,  269,  268, 1300,

     1060,  269,  268, 1300, 1300,  269,  270,  271, 1300,  269,
      270,  271, 1300,  268,  270,  271, 1063, 1300,  270,  271,
      269,  268, 1300,  180, 1064,  268, 1300,  268,  269,  270,
      271, 1065,  269, 1300,  269, 1300, 1300,  270,  271,  181,
      182,  270,  271,  270,  271,  603,  326, 1300,  603, 1300,
     1067,  326, 1300,  745, 1300, 1300, 1066,  805,  326, 1300,
      805, 1300, 1300,  326, 1300,  926, 1300,  925,  805, 1300,
      180,  805, 1300, 1300, 1300, 1300,  927,  805,  805, 1069,
     1300,  805, 1300,  928,  749,  749,  181,  182,  749,  805,
     1300,  805,  929,  930,  603,  743,  749,  603,  749, 1300,

      743, 1300,  932, 1300,  603,  347, 1111,  603, 1300, 1300,
      347, 1300,  756, 1300, 1300, 1300, 1074,  343, 1300, 1300,
      805,  805,  805, 1300,  344,  805,  935,  749,  749, 1300,
     1072,  929,  929,  345,  346,  929,  603, 1300,  347,  603,
     1300, 1084,  347,  929, 1300,  929,  805,  805,  805,  347,
     1300,  805, 1300, 1300,  347, 1300,  936, 1300, 1300,  760,
      760,  603,  754,  760,  603,  343, 1300,  754, 1300,  942,
     1076,  760,  344,  760,  929,  929,  603,  180, 1300,  603,
     1300,  345,  346, 1081,  746,  603,  603, 1300,  343,  603,
     1300,  747, 1300,  181,  182,  344,  571,  603, 1300,  603,

      749,  750,  760,  760,  345,  346,  343, 1300, 1300,  343,
     1300, 1300, 1110,  344, 1082,  180,  344, 1300,  180, 1300,
      343, 1300,  345,  346, 1300,  345,  346,  344,  603,  603,
      805,  181,  182,  805,  181,  182,  345,  346,  937,  805,
      805, 1085,  343,  805,  180,  938, 1083, 1113, 1300,  344,
      180,  805, 1300,  805,  939,  940,  343,  571,  345,  346,
      181,  182,  180,  344,  343, 1300,  181,  182, 1300,  343,
     1121,  344,  345,  346, 1300, 1114,  344,  571,  181,  182,
      345,  346,  805,  805,  805,  345,  346,  805, 1086, 1300,
     1087, 1300,  937,  805,  805,  343, 1300,  805, 1300,  938,

     1112, 1300,  344, 1300, 1300,  805, 1088,  805,  939,  940,
      343,  345,  346,  343, 1300,  343, 1300,  344,  343, 1089,
      344, 1300,  344, 1300, 1300,  344,  345,  346, 1090,  345,
      346,  345,  346, 1093,  345,  346,  805,  805,  805, 1092,
     1300,  805, 1300, 1300, 1300, 1300, 1079,  939,  939,  343,
      571,  939, 1300,  343, 1300, 1300,  344, 1300, 1300,  939,
      344,  939,  805,  805, 1300,  345,  346, 1300, 1300,  345,
      346,  603,  379, 1300,  603, 1094, 1300,  379, 1300,  784,
      375, 1091,  603, 1300,  379,  603, 1300,  376,  379, 1300,
      939,  939,  603,  962, 1300,  603,  377,  378, 1106, 1300,

      757,  603,  603,  805,  379,  603,  805,  758, 1300,  379,
     1300,  963, 1300,  603, 1300,  603,  760,  761, 1300,  788,
      788,  603,  782,  788,  603, 1096, 1300,  782, 1300,  969,
     1300,  788, 1300,  788, 1300,  375, 1300, 1300, 1300, 1300,
     1300, 1300,  376, 1101,  603,  603,  805, 1300, 1300,  805,
     1300,  377,  378, 1300,  964,  805,  805, 1102,  375,  805,
      180,  965,  788,  788, 1300,  376, 1300,  805,  180,  805,
      966,  967,  375, 1300,  377,  378,  181,  182,  180,  376,
      375,  427, 1300,  792,  181,  182, 1300,  376,  377,  378,
     1115, 1300, 1300, 1103,  181,  182,  377,  378,  805,  805,

      805, 1104, 1300,  805, 1300, 1300, 1300, 1117,  964,  805,
      805,  375, 1300,  805, 1300,  965, 1300, 1300,  376, 1300,
     1300,  805, 1300,  805,  966,  967,  375,  377,  378,  805,
      183, 1105,  805,  376, 1300,  183, 1300,  806,  805, 1300,
      183,  805,  377,  378,  183, 1300,  808,  808, 1300, 1300,
      808,  979,  805,  805,  805, 1300, 1300,  805,  808, 1300,
      808, 1107, 1099,  966,  966,  805,  601,  966,  805, 1300,
     1300,  601, 1300,  981, 1300,  966, 1300,  966,  805,  805,
      603,  601,  180,  603,  180, 1300,  601, 1109,  811,  808,
      808,  603, 1300,  601,  603, 1300,  180,  601,  181,  182,

      181,  182,  984,  180, 1116, 1300,  966,  966,  603, 1300,
     1118,  603,  181,  182, 1300, 1300,  785,  603,  603,  181,
      182,  603,  180,  786,  180, 1120,  180, 1300,  180,  603,
     1300,  603,  788,  789, 1119, 1300,  180, 1300,  181,  182,
      181,  182,  181,  182,  181,  182, 1123,  180, 1300, 1300,
      180, 1300,  181,  182, 1300, 1300, 1300, 1124, 1300, 1122,
      603,  603,  805,  181,  182,  805,  181,  182, 1300, 1126,
      807,  805,  805, 1125,  180,  805,  180, 1300,  180, 1300,
      180, 1127,  180,  805,  180,  805,  808,  809, 1300,  180,
      181,  182,  181,  182,  181,  182,  181,  182,  181,  182,

      181,  182,  180, 1300, 1129,  181,  182,  180, 1300,  180,
     1130,  180, 1300,  180,  805,  805, 1128,  180,  181,  182,
      180, 1300,  180,  181,  182,  181,  182,  181,  182,  181,
      182, 1132, 1131,  181,  182, 1134,  181,  182,  181,  182,
      180, 1300,  180, 1300,  180, 1300, 1300,  180, 1133, 1300,
      180, 1300,  180, 1300,  180, 1300,  181,  182,  181,  182,
      181,  182, 1135,  181,  182, 1136,  181,  182,  181,  182,
      181,  182, 1137, 1300, 1300, 1300,  180, 1300,  180, 1300,
      180, 1300,  180, 1300,  180, 1300,  180, 1300, 1300, 1138,
      180, 1139,  181,  182,  181,  182,  181,  182,  181,  182,

      181,  182,  181,  182, 1142, 1300,  181,  182,  805,  272,
      180,  805, 1300, 1300,  272, 1300,  883, 1141, 1140, 1143,
     1300, 1144,  805, 1300,  272,  805,  181,  182,  272, 1300,
     1037,  886,  886,  805,  692,  886,  805, 1300, 1300,  692,
     1300, 1039, 1300,  886, 1300,  886,  603,  692, 1300,  603,
      180, 1300,  692,  268,  889, 1146,  603, 1300,  692,  603,
      269, 1300,  692, 1300, 1300,  268,  181,  182, 1042,  270,
      271, 1147,  269,  268,  886,  886, 1300,  268, 1300,  268,
      269,  270,  271, 1148,  269,  268,  269, 1191, 1300,  270,
      271,  268,  269,  270,  271,  270,  271,  268,  269, 1300,

     1300,  270,  271,  268,  269, 1151, 1300,  270,  271,  268,
      269, 1149, 1300,  270,  271, 1150,  269,  268, 1300,  270,
      271,  268, 1300,  268,  269,  270,  271, 1300,  269, 1300,
      269, 1152, 1300,  270,  271,  268, 1300,  270,  271,  270,
      271, 1300,  269,  268, 1300, 1156, 1153, 1155,  268, 1300,
      269,  270,  271, 1300, 1154,  269,  268, 1157,  180,  270,
      271,  268, 1300,  269,  270,  271, 1300, 1300,  269,  268,
     1300, 1300,  270,  271,  181,  182,  269,  270,  271, 1300,
     1158,  268, 1300,  268, 1159,  270,  271,  268,  269, 1300,
      269, 1161, 1300,  180,  269, 1300, 1160,  270,  271,  270,

      271, 1300, 1300,  270,  271, 1300,  268, 1300,  268,  181,
      182, 1164, 1163,  269,  268,  269, 1300, 1300, 1162, 1300,
     1300,  269,  270,  271,  270,  271,  805,  326, 1300,  805,
      270,  271,  326, 1192,  926,  805, 1300,  326,  805,  929,
      929,  326, 1165,  929, 1300, 1166, 1167, 1300, 1069,  805,
      743,  929,  805,  929, 1300,  743, 1300, 1071,  603,  743,
      180,  603, 1300, 1300,  743, 1300,  932,  603, 1300,  743,
      603, 1169, 1300,  743, 1300, 1300,  181,  182,  805,  347,
     1074,  805,  929,  929,  347, 1300,  936,  805, 1300,  347,
      805,  939,  939,  347,  343,  939,  805,  754, 1300,  805,

     1076,  344,  754,  939, 1078,  939,  603,  754, 1300,  603,
      345,  346,  754, 1300,  942, 1300, 1300, 1300, 1171,  603,
     1300,  754,  603,  343, 1300,  754,  343, 1300, 1081,  343,
      344,  343, 1174,  344,  939,  939,  344, 1300,  344,  345,
      346, 1172,  345,  346, 1173,  345,  346,  345,  346,  343,
     1300, 1300, 1300,  343, 1300,  343,  344,  343, 1300, 1300,
      344, 1300,  344, 1300,  344,  345,  346, 1175, 1176,  345,
      346,  345,  346,  345,  346, 1178,  343,  571, 1300, 1300,
      343, 1300,  343,  344,  343, 1300, 1177,  344, 1300,  344,
     1300,  344,  345,  346, 1179, 1300,  345,  346,  345,  346,

      345,  346, 1181, 1300,  805,  379, 1182,  805,  180, 1300,
      379, 1180,  963,  571,  805, 1300,  379,  805,  966,  966,
      379, 1300,  966, 1300,  181,  182, 1096, 1300,  805,  782,
      966,  805,  966, 1300,  782, 1300, 1098,  603,  782, 1194,
      603, 1300, 1300,  782, 1300,  969,  603, 1300,  782,  603,
     1184,  375,  782,  375, 1300, 1300,  375, 1300,  376, 1101,
      376,  966,  966,  376,  375, 1300, 1300,  377,  378,  377,
      378,  376,  377,  378,  180, 1300,  375, 1300,  375, 1185,
      377,  378, 1186,  376, 1300,  376, 1300,  387, 1300, 1300,
      181,  182,  377,  378,  377,  378,  805,  601, 1300,  805,

     1190, 1187,  601,  180,  981,  805, 1300,  601,  805,  180,
     1300,  601, 1188,  180, 1300, 1189,  985,  180, 1109,  181,
      182, 1300, 1300,  180, 1300,  181,  182,  180, 1300,  181,
      182,  180, 1300,  181,  182, 1196,  180, 1300, 1193,  181,
      182, 1195, 1300,  181,  182,  180, 1300,  181,  182, 1198,
     1300, 1300,  181,  182,  180, 1300,  180, 1300, 1199,  180,
     1197,  181,  182,  180, 1300,  180, 1300, 1200,  180, 1300,
      181,  182,  181,  182, 1300,  181,  182, 1201,  180,  181,
      182,  181,  182,  180,  181,  182,  180, 1300,  180, 1300,
     1203, 1300, 1300,  180,  181,  182,  180, 1300, 1300,  181,

      182,  180,  181,  182,  181,  182, 1300, 1300, 1202,  181,
      182, 1300,  181,  182,  180, 1204,  180,  181,  182,  180,
     1300,  180, 1300, 1206,  180, 1300,  180, 1300, 1205, 1300,
      181,  182,  181,  182, 1300,  181,  182,  181,  182, 1300,
      181,  182,  181,  182, 1300,  805,  692,  268,  805, 1300,
     1300,  692, 1207, 1039,  269, 1208, 1209, 1300, 1210,  805,
     1300,  692,  805,  270,  271,  692,  268, 1146, 1300,  268,
     1300,  268, 1300,  269, 1300, 1300,  269, 1300,  269, 1300,
     1300,  180,  270,  271, 1211,  270,  271,  270,  271,  268,
     1300, 1214,  268, 1300,  268, 1300,  269,  181,  182,  269,

     1300,  269, 1300, 1212, 1213,  270,  271,  268,  270,  271,
      270,  271,  268, 1300,  269,  268, 1216, 1300,  268,  269,
     1215, 1300,  269,  270,  271,  269, 1300, 1300,  270,  271,
      268,  270,  271, 1300,  270,  271, 1219,  269,  268, 1300,
     1300, 1300, 1300, 1218,  268,  269,  270,  271, 1220, 1217,
      268,  269,  268, 1300,  270,  271,  268,  269,  268,  269,
      270,  271, 1300,  269, 1300,  269,  270,  271,  270,  271,
     1300,  180,  270,  271,  270,  271,  268, 1221, 1223,  268,
     1300, 1222,  268,  269, 1300, 1300,  269,  181,  182,  269,
     1300, 1300,  270,  271, 1300,  270,  271, 1300,  270,  271,

     1224,  805,  743, 1300,  805,  805,  754,  743,  805, 1071,
     1300,  754, 1225, 1078, 1227, 1226,  805, 1300,  743,  805,
     1300, 1300,  743, 1169, 1300,  343, 1300, 1171,  805, 1300,
      754,  805,  344,  343,  754, 1300,  343, 1300,  343, 1300,
      344,  345,  346,  344,  343,  344, 1300, 1300,  180,  345,
      346,  344,  345,  346,  345,  346,  343, 1300, 1231, 1300,
      345,  346, 1228,  344,  181,  182, 1232,  343, 1300,  343,
     1229, 1230,  345,  346,  344,  343,  344, 1300,  180, 1242,
     1300, 1300,  344,  345,  346,  345,  346,  571,  571,  343,
     1300,  345,  346,  343,  181,  182,  344, 1300, 1233, 1300,

      344,  805, 1300,  782,  805,  345,  346,  782, 1234,  345,
      346,  805,  782, 1300,  805,  375, 1300,  782, 1300, 1098,
     1235,  375,  376,  375, 1300, 1300, 1300,  375,  376, 1300,
      376,  377,  378, 1184,  376,  571, 1300,  377,  378,  377,
      378,  375, 1300,  377,  378,  180, 1236, 1300,  376, 1238,
     1300, 1300, 1237,  180, 1300,  180, 1300,  377,  378, 1300,
     1300,  181,  182, 1239,  180, 1300,  180, 1240,  180,  181,
      182,  181,  182, 1300,  180, 1241, 1300,  387, 1300, 1300,
      181,  182,  181,  182,  181,  182,  180, 1300, 1300, 1245,
      181,  182, 1243,  180, 1300, 1244,  180, 1300, 1300, 1300,

      180, 1300,  181,  182, 1246,  180, 1300,  180, 1300,  181,
      182,  180,  181,  182,  180, 1247,  181,  182,  180, 1300,
      180,  181,  182,  181,  182, 1249,  268,  181,  182, 1300,
      181,  182, 1248,  269,  181,  182,  181,  182,  268, 1300,
     1300, 1300,  270,  271, 1300,  269,  268, 1300, 1250,  268,
     1300, 1300, 1253,  269,  270,  271,  269, 1300, 1251,  180,
     1252,  268,  270,  271, 1254,  270,  271, 1255,  269, 1300,
     1300, 1300,  268, 1300,  268,  181,  182,  270,  271,  269,
      268,  269, 1300, 1256,  523,  923, 1300,  269,  270,  271,
      270,  271,  268, 1300,  268,  985,  270,  271,  268,  269,

      268,  269, 1300, 1257,  923,  269, 1300,  269,  270,  271,
      270,  271,  268, 1300,  270,  271,  270,  271,  268,  269,
     1259, 1300, 1300, 1258,  268,  269, 1300, 1300,  270,  271,
     1300,  269,  268, 1300,  270,  271, 1300,  268, 1300,  269,
      270,  271,  180, 1260,  269,  343, 1261, 1300,  270,  271,
      343, 1300,  344,  270,  271, 1300,  343,  344,  181,  182,
     1300,  345,  346,  344, 1300, 1262,  345,  346,  343, 1300,
      343, 1263,  345,  346, 1265,  344, 1264,  344, 1300, 1300,
     1300,  343, 1300,  343,  345,  346,  345,  346,  344, 1300,
      344,  571, 1300, 1300, 1300,  343, 1300,  345,  346,  345,

      346, 1267,  344,  375, 1300, 1266,  375, 1300, 1268,  375,
      376,  345,  346,  376, 1300, 1269,  376,  375, 1300,  377,
      378,  180,  377,  378,  376,  377,  378,  387,  180, 1300,
      387,  180, 1300,  377,  378,  180, 1300,  181,  182, 1271,
     1270,  180, 1300,  180,  181,  182,  180,  181,  182,  180,
     1300,  181,  182,  180, 1300, 1300, 1300,  181,  182,  181,
      182,  180,  181,  182,  841,  181,  182,  180, 1273,  181,
      182, 1300, 1272,  268, 1274,  268, 1300,  181,  182, 1275,
      269,  268,  269,  181,  182,  180, 1300,  268,  269,  270,
      271,  270,  271,  268,  269, 1300, 1300,  270,  271,  268,

      269,  181,  182,  270,  271, 1300,  269, 1300, 1300,  270,
      271, 1300, 1276, 1300, 1277,  270,  271,  268, 1278, 1279,
      268, 1300, 1289, 1300,  269, 1281, 1300,  269, 1300, 1300,
     1280,  268, 1300,  270,  271,  268,  270,  271,  269, 1282,
     1300, 1300,  269,  343,  923, 1300,  343,  270,  271,  343,
      344,  270,  271,  344,  343, 1300,  344,  343, 1300,  345,
      346,  344,  345,  346,  344,  345,  346, 1283, 1300, 1300,
      345,  346, 1300,  345,  346, 1300,  343, 1300, 1300, 1300,
     1300,  343, 1284,  344, 1300, 1285, 1286, 1300,  344, 1287,
     1300,  571,  345,  346,  375, 1300,  180,  345,  346,  375,

     1300,  376, 1288,  571,  180, 1300,  376,  180, 1300, 1300,
      377,  378,  181,  182,  180,  377,  378, 1300,  387, 1300,
      181,  182, 1300,  181,  182, 1300,  268, 1300, 1300,  268,
      181,  182, 1014,  269, 1300,  387,  269,  268, 1300, 1290,
      268, 1300,  270,  271,  269,  270,  271,  269, 1291, 1300,
     1300, 1292,  268,  270,  271,  268,  270,  271, 1300,  269,
      268, 1300,  269, 1293, 1300, 1300,  268,  269,  270,  271,
     1300,  270,  271,  269,  343,  705,  270,  271,  343, 1300,
     1294,  344,  270,  271, 1300,  344,  343, 1300, 1300,  180,
      345,  346,  343,  344,  345,  346,  571,  343, 1300,  344,

      571, 1300,  345,  346,  344,  181,  182, 1300,  345,  346,
     1300, 1300, 1295,  345,  346,  268, 1300,  571,  268, 1300,
     1296,  268,  269,  268, 1300,  269,  343,  571,  269,  180,
      269,  270,  271,  344,  270,  271, 1300,  270,  271,  270,
      271, 1300,  345,  346,  268,  181,  182,  343, 1300,  268,
     1300,  269, 1300, 1297,  344, 1300,  269, 1300, 1298, 1300,
      270,  271, 1300,  345,  346,  270,  271, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1299, 1300, 1300,  571,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  179,  179, 1300, 1300,  179,  179,
      179,  183, 1300,  183,  183,  183,  183,  183,  183,  183,
      183,  267,  267, 1300, 1300,  267,  267,  267,  272, 1300,
      272,  272,  272,  272,  272,  272,  272,  272,  321,  321,
     1300, 1300,  321,  321,  321,  326, 1300,  326,  326,  326,
      326,  326,  326,  326,  326,  342,  342, 1300, 1300,  342,
      342,  342,  347, 1300,  347,  347,  347,  347,  347,  347,

      347,  347,  374,  374, 1300, 1300,  374,  374,  374,  379,
     1300,  379,  379,  379,  379,  379,  379,  379,  379,  405,
     1300, 1300, 1300,  405, 1300,  405,  405, 1300,  405,  405,
      409, 1300, 1300,  409,  409, 1300,  409,  409,  409,  409,
      409,  410,  410, 1300,  410,  410,  410,  410,  410,  410,
      410,  410,  411, 1300,  411,  411, 1300, 1300,  411, 1300,
      411,  413,  413,  413,  413,  413, 1300,  413,  505,  505,
      505,  505,  505, 1300,  505,  549,  549,  549,  549,  549,
     1300,  549,  559,  559,  559,  559,  559, 1300,  559,  585,
      585,  585,  585,  585, 1300,  585,  601, 1300,  601,  601,

      601,  601,  601,  601,  601,  601,  604, 1300, 1300, 1300,
      604,  604,  604,  604,  604,  604,  604,  692, 1300,  692,
      692,  692,  692,  692,  692,  692,  692,  694, 1300, 1300,
     1300,  694,  694,  694,  694,  694,  694,  694,  743, 1300,
      743,  743,  743,  743,  743,  743,  743,  743,  745, 1300,
     1300, 1300,  745,  745,  745,  745,  745,  745,  745,  603,
     1300, 1300, 1300,  603,  603,  603,  603,  603,  603,  603,
      754, 1300,  754,  754,  754,  754,  754,  754,  754,  754,
      756, 1300, 1300, 1300,  756,  756,  756,  756,  756,  756,
      756,  782, 1300,  782,  782,  782,  782,  782,  782,  782,

      782,  784, 1300, 1300, 1300,  784,  784,  784,  784,  784,
      784,  784,  803,  803, 1300,  803,  803,  803,  803,  803,
      803,  803,  803,  806, 1300, 1300, 1300,  806,  806,  806,
      806,  806,  806,  806,  811, 1300, 1300, 1300,  811,  811,
      811,  811,  811,  811,  811,  881,  881, 1300,  881,  881,
      881,  881,  881,  881,  881,  881,  883, 1300, 1300, 1300,
      883,  883,  883,  883,  883,  883,  883,  889, 1300, 1300,
     1300,  889,  889,  889,  889,  889,  889,  889,  924,  924,
     1300,  924,  924,  924,  924,  924,  924,  924,  924,  926,
     1300, 1300, 1300,  926,  926,  926,  926,  926,  926,  926,

      932, 1300, 1300, 1300,  932,  932,  932,  932,  932,  932,
      932,  805, 1300, 1300, 1300,  805,  805,  805,  805,  805,
      805,  805,  934,  934, 1300,  934,  934,  934,  934,  934,
      934,  934,  934,  936, 1300, 1300, 1300,  936,  936,  936,
      936,  936,  936,  936,  942, 1300, 1300, 1300,  942,  942,
      942,  942,  942,  942,  942,  961,  961, 1300,  961,  961,
      961,  961,  961,  961,  961,  961,  963, 1300, 1300, 1300,
      963,  963,  963,  963,  963,  963,  963,  969, 1300, 1300,
     1300,  969,  969,  969,  969,  969,  969,  969,  978,  978,
     1300,  978,  978,  978,  978,  978,  978,  978,  978,  981,

     1300, 1300, 1300,  981,  981,  981,  981,  981,  981,  981,
      983,  983, 1300,  983,  983,  983,  983,  983,  983,  983,
      983, 1036, 1036, 1300, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1039, 1300, 1300, 1300, 1039, 1039, 1039, 1039,
     1039, 1039, 1039,  694, 1300, 1300, 1300,  694,  694,  694,
      694,  694,  694,  694, 1041, 1041, 1300, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041,  267,  267, 1300, 1300,  267,
      267,  267, 1068, 1068, 1300, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1071, 1300, 1300, 1300, 1071, 1071, 1071,
     1071, 1071, 1071, 1071,  745, 1300, 1300, 1300,  745,  745,

      745,  745,  745,  745,  745, 1073, 1073, 1300, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073,  934,  934, 1300,  934,
      934,  934,  934,  934,  934,  934,  934,  936, 1300, 1300,
     1300,  936,  936,  936,  936,  936,  936,  936, 1075, 1075,
     1300, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1078,
     1300, 1300, 1300, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
      756, 1300, 1300, 1300,  756,  756,  756,  756,  756,  756,
      756, 1080, 1080, 1300, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080,  342,  342, 1300, 1300,  342,  342,  342,  961,
      961, 1300,  961,  961,  961,  961,  961,  961,  961,  961,

      963, 1300, 1300, 1300,  963,  963,  963,  963,  963,  963,
      963, 1095, 1095, 1300, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1098, 1300, 1300, 1300, 1098, 1098, 1098, 1098,
     1098, 1098, 1098,  784, 1300, 1300, 1300,  784,  784,  784,
      784,  784,  784,  784, 1100, 1100, 1300, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100,  374,  374, 1300, 1300,  374,
      374,  374,  978,  978, 1300,  978,  978,  978,  978,  978,
      978,  978,  978,  805, 1300, 1300, 1300,  805,  805,  805,
      805,  805,  805,  805,  806, 1300, 1300, 1300,  806,  806,
      806,  806,  806,  806,  806, 1108, 1108, 1300, 1108, 1108,

     1108, 1108, 1108, 1108, 1108, 1108,  983,  983, 1300,  983,
      983,  983,  983,  983,  983,  983,  983,  179,  179, 1300,
     1300,  179,  179,  179, 1145, 1145, 1300, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1168, 1168, 1300, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1170, 1170, 1300, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1183, 1183, 1300,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,   23, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,

     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300
    } ;

static yyconst flex_int16_t yy_chk[8626] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  966,   15,   15,   28,   15,   15,
       15,  939,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  929,   90,   28,   28,   13,   15,   13,  886,   29,
      811,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  808,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  786,   36,  607,   33,   33,   37,  109,  607,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  184,  184,  784,   39,
       39,  758,   39,   38,   39,   38,  273,  273,  756,   40,
       21,   21,   39,   21,   22,  179,   22,   22,   22,   22,
       39,   42,   22,   22,   22,   40,   40,  752,  180,   45,
      751,  179,  179,  747,   38,   38,   22,   42,   42,   43,
      183,   40,  180,   42,   40,   45,   45,   40,  268,   45,
      745,   45,  696,   42,  183,   43,   43,  327,  327,   42,
      698,  272,  268,  694,   45,  698,   22,   22,   44,   22,
       41,   43,   44,   43,   43,  272,   44,   44,  749,   44,
       43,   46,   44,  749,   44,  604,   41,   41,  163,  600,

      163,   41,   47,  322,   61,   41,  599,   46,   46,   41,
       41,   61,   41,   48,  163,   41,   49,  322,   47,   47,
       61,   61,   46,  326,  558,  343,   46,  347,   47,   48,
       48,   48,   49,   49,   49,   49,   50,  326,   49,  343,
       51,  347,   49,  557,   52,   48,  348,  348,   49,   48,
       53,  375,   50,   50,   50,  556,   51,   51,   50,   51,
       52,   52,   52,   51,  555,  375,   53,   53,   50,   54,
       51,   51,  760,   51,   50,  554,   52,  760,   56,   52,
       57,  553,   52,  404,   52,   54,   54,   54,   53,   59,
      403,   54,  380,  380,   56,   56,   57,   57,   54,  341,

       56,  602,  602,   56,   56,   59,   59,   54,   55,   55,
       58,   57,   55,   56,   59,   59,   55,   55,  181,   55,
      340,   60,   55,  339,   55,   55,   58,   58,   58,  693,
      693,  338,   58,   65,  181,  181,   58,   60,   60,   64,
       65,  107,   64,  175,  175,   60,   64,   66,   58,   65,
       65,   60,  106,   66,   66,   64,   64,  379,   67,   66,
       68,   23,   69,   66,   66,   67,   71,   68,   67,   69,
        0,  379,   68,   71,   67,   67,   68,   68,   69,   69,
       70,   70,   71,   71,   70,    0,  175,  175,   73,  744,
      744,   76,   70,    0,   70,   73,   74,  414,   76,   75,

        0,  189,   71,   74,   73,   73,   75,   76,   76,   76,
        0,  414,   74,   74,   73,   75,   75,  189,  189,   78,
      755,  755,    0,   70,   70,   72,   78,   74,    0,  193,
       74,   75,   72,  189,   75,   78,   78,   74,   78,   98,
       98,   72,   72,   98,  506,  193,  193,   72,    0,   79,
      193,   98,    0,   98,   72,   72,   79,   72,  506,   72,
       72,   86,   72,   77,  788,   79,   79,   79,   86,  788,
       77,   79,  185,  550,   80,  185,    0,   86,   86,   77,
       77,   80,   98,   98,   77,   81,   77,  550,  185,  185,
       80,   80,   81,   80,   77,    0,   80,   86,   82,   77,

       77,   81,   81,  560,   81,   82,   83,  586,    0,   84,
       80,    0,   85,   83,   82,   82,   84,  560,   81,   85,
       87,  586,   83,   83,    0,   84,   84,   87,   85,   85,
       82,    0,   83,   82,   85,   83,   87,   87,   87,  601,
        0,   84,   84,   88,   85,   89,   84,   84,    0,   96,
       88,   92,   89,  601,   92,   88,   96,   93,   92,   88,
       88,   89,   89,   93,   93,   96,   96,   92,   92,  190,
      783,  783,    0,   93,   93,   94,   94,   94,   94,   94,
       94,  692,   94,    0,   95,  190,  190,   97,  743,   94,
       99,   95,   95,   95,   97,  692,    0,   99,   94,   94,

       95,   95,  743,   97,   97,    0,   99,   99,  190,  102,
      102,  102,  102,  102,  102,  754,  782,    0,    0,  102,
        0,   99,  102,  104,  104,  104,  104,  104,  104,  754,
      782,  121,  121,  104,    0,  121,  104,  105,  105,  105,
      105,  105,  105,  121,  108,  121,  112,  105,  114,  112,
      105,  108,  115,  112,  114,  114,    0,    0,    0,  115,
      108,  108,  112,  112,  114,  114,  116,    0,  115,  115,
      120,    0,  117,  116,  121,  121,    0,  120,  122,  117,
        0,    0,  116,  116,  117,  122,  120,  120,  117,  117,
      123,    0,  124,    0,  122,  122,  125,  123,    0,  124,

        0,    0,    0,  125,  137,    0,  123,  123,  124,  124,
        0,  137,  125,  125,  122,    0,  126,    0,  124,  127,
      137,  137,  123,  126,    0,    0,  127,  123,  125,    0,
      128,  125,  126,  126,  126,  127,  127,  128,  129,    0,
      127,    0,  127,    0,    0,  129,  128,  128,  128,    0,
      130,    0,  128,    0,  129,  129,  127,  130,    0,  195,
      129,  131,    0,  132,    0,  133,  130,  130,  131,  130,
      132,    0,  133,    0,  129,  195,  195,  131,  131,  132,
      132,  133,  133,  134,    0,  195,    0,    0,  139,  132,
      134,  139,    0,  131,    0,  139,  131,    0,  133,  134,

      134,  140,  133,  141,  139,  139,  142,  140,  140,    0,
      141,    0,    0,  142,    0,  134,    0,  140,  140,  141,
      141,    0,  142,  142,  143,  143,  145,  196,  143,    0,
      146,    0,    0,  145,  145,  145,  143,  146,  143,  145,
        0,  147,    0,  196,  196,  145,  146,  146,  147,  155,
      155,  155,  155,  155,  155,    0,  148,  147,  147,  155,
      147,  146,  155,  148,  149,    0,  194,  143,  143,  144,
        0,  149,  148,  148,    0,  148,  144,  150,    0,    0,
      149,  149,  194,  194,  150,  144,  144,    0,  194,  151,
        0,  144,  148,  150,  150,    0,  151,  149,  144,  144,

      152,    0,    0,  144,  144,  151,  151,  152,  153,    0,
        0,  191,  150,  154,    0,  153,  152,  152,  151,    0,
      154,  182,  182,  182,  153,  153,  182,  191,  191,  154,
      154,  154,  152,    0,  182,  186,  182,  191,  152,    0,
      191,  186,    0,    0,  153,  157,  157,  157,  157,  157,
      157,  186,  186,    0,  192,  157,    0,    0,  157,  158,
      158,  158,  158,  158,  158,  182,  182,  187,    0,  158,
      192,  192,  158,  188,  188,  187,  187,  188,  197,    0,
      198,    0,  199,  187,  187,  188,    0,  188,    0,  200,
        0,  192,  201,    0,  197,  197,  198,  198,  199,  199,

      197,    0,  198,  199,    0,  200,  200,  202,  201,  201,
        0,    0,  203,    0,  201,  204,  188,  188,  200,  200,
      200,  205,    0,  202,  202,  206,  202,  200,  203,  203,
      207,  204,  204,  208,    0,    0,    0,  205,  205,  209,
        0,  206,  206,  202,  205,  204,  207,  207,  210,  208,
      208,  211,  207,  208,    0,  209,  209,  209,    0,  212,
        0,  206,  213,    0,  210,  210,  214,  211,  211,    0,
      208,    0,  215,    0,  216,  212,  212,  217,  213,  213,
      210,  212,  214,  214,  218,    0,  211,  213,  215,  215,
      216,  216,  216,  217,  217,  219,    0,  217,  220,    0,

      218,  218,    0,    0,  221,    0,    0,  222,    0,  215,
        0,  219,  219,  223,  220,  220,  224,  220,  225,  218,
      221,  221,  221,  222,  222,  226,  219,    0,  227,  223,
      223,    0,  224,  224,  225,  225,  221,  228,    0,  229,
        0,  226,  226,  230,  227,  227,  231,    0,  225,  227,
      223,  234,  224,  228,  228,  229,  229,  232,    0,  230,
      230,    0,  231,  231,  233,    0,  226,  234,  234,  235,
        0,    0,  228,  232,  232,  236,  231,  237,  230,  229,
      233,  233,  238,  234,  232,  235,  235,  233,  240,    0,
      239,  236,  236,  237,  237,  271,  271,  271,  238,  238,

      271,    0,  241,    0,  240,  240,  239,  239,  271,  242,
      271,  236,  237,  243,  237,  238,  239,  244,  241,  241,
      246,    0,  239,  241,  240,  242,  242,  245,    0,  243,
      243,    0,    0,  244,  244,  242,  246,  246,  244,  271,
      271,    0,  247,  245,  245,  248,    0,    0,  249,  246,
      243,  250,    0,  244,    0,    0,  244,  244,  247,  247,
      247,  248,  248,  245,  249,  249,  251,  250,  250,    0,
        0,  247,    0,  252,    0,    0,  254,  248,    0,  247,
      249,  253,  251,  251,    0,  249,  250,  255,  251,  252,
      252,  252,  254,  254,    0,  252,    0,  253,  253,  256,

      253,  257,    0,  255,  255,  258,    0,  259,    0,  260,
        0,  253,  254,    0,    0,  256,  256,  257,  257,  257,
      264,  258,  258,  259,  259,  260,  260,    0,    0,  256,
      261,  258,  262,    0,  263,    0,  264,  264,  262,    0,
        0,    0,  259,    0,  260,  266,  261,  261,  262,  262,
      263,  263,  261,  265,    0,    0,  263,  264,  267,  265,
      269,  266,  266,  266,  270,  267,  263,  269,    0,  265,
      265,  270,    0,    0,  267,  267,  269,  269,    0,  274,
      270,  270,  274,  275,    0,  276,  274,  277,    0,  275,
      275,  278,  276,    0,  277,  274,  274,    0,  278,  275,

      275,  276,  276,  277,  277,  279,  279,  278,  278,  279,
        0,  280,    0,  282,    0,    0,  281,  279,  280,  279,
      282,  413,    0,  281,  420,    0,    0,  280,  280,  282,
      282,  282,  281,  281,    0,  283,    0,  413,  413,  284,
      420,  420,  283,    0,    0,    0,  284,  280,  279,  279,
      281,  283,  283,    0,  283,  284,  284,  285,    0,  286,
        0,  287,    0,    0,  285,  288,  286,  419,  287,  284,
      284,    0,  288,  285,  285,  286,  286,  287,  287,  289,
        0,  288,  288,  419,  419,  419,  289,  290,  286,    0,
      291,    0,  293,  287,  290,  289,  289,  291,  292,  293,

      289,  427,  288,  290,  290,  292,  291,  291,  293,  293,
        0,    0,  294,  384,  292,  292,    0,  427,  427,  294,
      384,  384,    0,  296,  293,  295,  384,  291,  294,  294,
      296,  295,  295,  292,    0,  295,  297,    0,  298,  296,
      296,  295,  295,  297,  299,  298,    0,  295,    0,  294,
        0,  299,  297,  297,  298,  298,  297,  300,    0,    0,
      299,  299,  301,    0,  300,    0,  299,    0,  302,  301,
      303,    0,    0,  300,  300,  302,  305,  303,  301,  301,
        0,  301,    0,  305,  302,  302,  303,  303,  304,  300,
      304,  302,  305,  305,  306,    0,    0,  304,  304,  301,

      305,  306,  307,  304,  304,    0,  308,    0,  307,  307,
      306,  306,  422,  308,  428,    0,    0,  309,  307,  307,
      310,  306,  308,  308,  309,  311,    0,  310,  422,  422,
      428,  428,  311,  309,  309,  308,  310,  310,  307,  309,
      312,  311,  311,  313,  310,  314,  428,  312,    0,  309,
      313,  315,  314,    0,  422,    0,  312,  312,  315,  313,
      313,  314,  314,    0,    0,  313,  316,  315,  315,  317,
      315,  318,    0,  316,  319,  312,  317,  320,  318,    0,
      314,  319,  316,  316,  320,  317,  317,  318,  318,  321,
      319,  319,    0,  320,  320,  323,  321,  318,    0,    0,

      324,  316,  323,    0,    0,  321,  321,  324,    0,  319,
        0,  323,  323,  325,  325,  325,  324,  324,  325,    0,
      328,  333,  333,  328,  329,  333,  325,  328,  325,    0,
      329,  329,  334,  333,    0,  333,  328,  328,    0,  334,
      329,  329,  330,  330,  330,  330,  330,  330,  334,  334,
        0,  418,  330,  332,    0,  330,    0,  325,  325,    0,
      332,  332,  332,    0,  333,  333,    0,  418,  418,  332,
      332,  335,  335,  335,  335,  335,  335,  418,  346,  346,
      346,  335,    0,  346,  335,  337,  337,  337,  337,  337,
      337,  346,  342,  346,  344,  337,  345,    0,  337,  342,

        0,  344,    0,  345,    0,    0,    0,    0,  342,  342,
      344,  344,  345,  345,  349,    0,    0,  349,  350,    0,
      351,  349,  346,  346,  350,  350,    0,  351,  352,  352,
      349,  349,  352,    0,  350,  350,  351,  351,  353,    0,
      352,  355,  352,  356,    0,  353,  354,    0,  355,  357,
      356,  417,    0,  354,  353,  353,  357,  355,  355,  356,
      356,    0,  354,  354,    0,  357,  357,  417,  417,    0,
        0,  352,  352,  355,  353,  358,  354,  354,  359,    0,
      356,  361,  358,  360,  357,  359,  417,    0,  361,    0,
      360,  358,  358,  360,  359,  359,  362,  361,  361,  360,

      360,    0,    0,  362,  363,  360,    0,  358,    0,  364,
        0,  363,  362,  362,  424,  359,  364,  365,  362,    0,
      363,  363,  366,    0,  365,  364,  364,    0,  367,  366,
      424,  424,  364,  365,  365,  367,    0,    0,  366,  366,
        0,  363,  368,  424,  367,  367,  366,  365,  421,  368,
      369,    0,    0,  365,  365,  367,    0,  369,  368,  368,
        0,  370,    0,    0,  421,  421,  369,  369,  370,    0,
        0,  368,  369,  371,    0,  372,    0,  370,  370,    0,
      371,  373,  372,  421,    0,  370,  374,    0,  373,  371,
      371,  372,  372,  374,    0,  371,  423,  373,  373,  376,

        0,  377,  374,  374,    0,    0,  376,    0,  377,    0,
      372,  425,  423,  423,  423,  376,  376,  377,  377,  378,
      378,  378,  381,    0,  378,  381,    0,  425,  425,  381,
      382,  425,  378,    0,  378,    0,  382,  382,  381,  381,
      383,  383,  385,    0,  383,    0,  382,  382,    0,  385,
      386,    0,  383,    0,  383,  387,    0,  386,  385,  385,
      385,  388,  387,  378,  378,    0,  386,  386,  388,  386,
        0,  387,  387,    0,    0,  389,    0,  388,  388,    0,
        0,  390,  389,  383,  383,    0,  391,    0,  390,    0,
      388,  389,  389,  391,  392,    0,  389,  390,  390,    0,

      393,  392,  391,  391,    0,  394,  391,  393,    0,    0,
      392,  392,  394,  395,    0,    0,  393,  393,  390,    0,
      395,  394,  394,    0,  393,    0,  392,  396,    0,  395,
      395,  397,    0,    0,  396,  398,    0,    0,  397,  399,
        0,  394,  398,  396,  396,  395,  399,  397,  397,    0,
      397,  398,  398,  426,    0,  399,  399,    0,    0,    0,
        0,  398,  396,  400,  400,  400,  400,  400,  400,  426,
      426,  426,  429,  400,  399,    0,  400,  402,  402,  402,
      402,  402,  402,    0,    0,    0,    0,  402,  429,  429,
      402,  415,  432,    0,  415,    0,    0,    0,    0,  415,

      415,  415,  429,  430,  415,  429,    0,    0,  432,  432,
      431,  415,  415,  432,  415,  415,  415,    0,  433,  430,
      430,  436,    0,  430,  430,    0,  431,  431,    0,    0,
      434,    0,    0,  437,  433,  433,    0,  436,  436,    0,
      430,  431,    0,  415,  415,  416,  434,  434,  416,  437,
      437,    0,  434,  416,  416,  416,  433,  435,  416,  438,
        0,    0,  439,    0,  440,  416,  416,  441,  416,  416,
      416,  442,    0,  435,  435,  438,  438,  443,  439,  439,
      440,  440,    0,  441,  441,  444,  440,  442,  442,  445,
      435,  439,  442,  443,  443,  446,    0,  416,  416,  438,

      447,  444,  444,  449,  441,  445,  445,  443,    0,    0,
      448,  446,  446,    0,  450,    0,  447,  447,  451,  449,
      449,  452,    0,    0,  449,  444,  448,  448,  446,  447,
      450,  450,  448,  453,  451,  451,  450,  452,  452,  451,
      454,    0,  455,    0,  456,    0,  457,    0,  458,  453,
      453,    0,  459,  453,  452,  460,  454,  454,  455,  455,
      456,  456,  457,  457,  458,  458,    0,  456,  459,  459,
      461,  460,  460,    0,  455,  462,    0,  463,    0,  464,
        0,  459,    0,  458,  457,  460,  461,  461,  465,  461,
      466,  462,  462,  463,  463,  464,  464,  467,  463,    0,

      468,    0,    0,  469,  465,  465,  466,  466,    0,    0,
      465,  470,    0,  467,  467,  466,  468,  468,  467,  469,
      469,  471,    0,    0,  465,  472,  469,  470,  470,  473,
        0,  468,  474,    0,  475,    0,  470,  471,  471,    0,
      469,  472,  472,  476,    0,  473,  473,  477,  474,  474,
      475,  475,  478,    0,    0,  473,    0,  479,    0,  476,
      476,  480,  472,  477,  477,  476,    0,  481,  478,  478,
      474,  482,  475,  479,  479,  483,    0,  480,  480,  479,
        0,  484,  477,  481,  481,    0,    0,  482,  482,  481,
      486,  483,  483,  485,    0,  487,  480,  484,  484,  485,

        0,  488,  484,  489,    0,  490,  486,  486,  492,  485,
      485,  487,  487,  491,    0,  483,  487,  488,  488,  489,
      489,  490,  490,  495,  492,  492,    0,  486,    0,  491,
      491,  493,    0,    0,  494,  487,  489,    0,  488,  495,
      495,  490,  496,  491,  497,  492,  495,  493,  493,  498,
      494,  494,    0,  493,  494,  499,    0,  493,  496,  496,
      497,  497,    0,  497,  500,  498,  498,  501,  496,    0,
        0,  499,  499,    0,    0,  502,    0,  503,  496,    0,
      500,  500,    0,  501,  501,  504,  499,    0,  505,  498,
      511,  502,  502,  503,  503,  505,  501,  511,    0,  500,

      502,  504,  504,  509,  505,  505,  511,  511,  503,    0,
      509,  514,    0,    0,  513,    0,  513,    0,  514,  509,
      509,    0,  504,  507,  513,    0,  507,  514,  514,  513,
      513,  507,  507,  507,  510,  509,  507,  612,  507,  613,
        0,  510,  512,  507,  507,  516,  507,  507,  507,  512,
      510,  510,  516,  612,  612,  613,  613,  518,  512,  512,
        0,  516,  516,  612,  518,    0,    0,  620,    0,    0,
      510,    0,  512,  518,  518,  507,  507,  508,    0,  518,
      508,    0,  516,  620,  620,  508,  508,  508,  515,    0,
      508,    0,  508,  620,    0,  515,  519,  508,  508,  620,

      508,  508,  508,  519,  515,  515,  517,    0,  517,    0,
        0,  520,  519,  519,    0,  517,  517,  517,  520,    0,
      617,  517,  517,  515,  517,    0,  519,  520,  520,  508,
      508,  521,    0,  522,    0,  523,  617,  617,  521,    0,
      522,  520,  523,  609,    0,    0,  524,  521,  521,  522,
      522,  523,  523,  524,  520,  617,  521,  525,  522,  609,
      609,    0,  524,  524,  525,  526,    0,    0,  527,    0,
        0,  528,  526,  525,  525,  527,  524,  524,  528,    0,
      609,  526,  526,    0,  527,  527,  525,  528,  528,  529,
        0,  530,    0,  528,    0,    0,  529,  531,  530,    0,

      526,    0,  532,    0,  531,  529,  529,  530,  530,  532,
      534,  529,    0,  531,  531,  533,    0,  534,  532,  532,
        0,    0,  533,  535,    0,    0,  534,  534,  530,  531,
      535,  533,  533,  533,  536,    0,  537,    0,  532,  535,
      535,  536,    0,  537,    0,  535,  534,  538,    0,  539,
      536,  536,  537,  537,  538,  540,  539,    0,    0,  536,
      541,    0,  540,  538,  538,  539,  539,  541,    0,  539,
        0,  540,  540,    0,  542,    0,  541,  541,    0,  543,
        0,  542,    0,    0,    0,  541,  543,  544,    0,  538,
      542,  542,  540,  545,  544,  543,  543,    0,    0,  543,

      545,  546,    0,  544,  544,  544,    0,  547,  546,  545,
      545,  542,    0,  545,  547,    0,    0,  546,  546,  548,
        0,    0,    0,  547,  547,  549,  548,  559,    0,  545,
      563,  546,  549,  564,  559,  548,  548,  563,  547,    0,
      564,  549,  549,  559,  559,    0,  563,  563,    0,  564,
      564,  565,    0,    0,    0,  548,  551,    0,  565,  551,
        0,    0,  563,  564,  551,  551,  551,  565,  565,  551,
        0,  551,    0,    0,  565,    0,  551,  551,  567,  551,
      551,  551,  566,    0,  568,  567,  569,  565,  610,  566,
      571,  568,    0,  569,  567,  567,    0,  571,  566,  566,

      568,  568,  569,  569,  610,  610,  571,  571,  551,  551,
      552,    0,    0,  552,  568,  567,    0,  566,  552,  552,
      552,  570,    0,  552,  610,  552,    0,    0,  570,  569,
      552,  552,  574,  552,  552,  552,    0,  570,  570,  574,
      572,    0,    0,  573,    0,    0,  570,  572,  574,  574,
      573,    0,  614,    0,  574,    0,  572,  572,    0,  573,
      573,    0,  552,  552,  561,    0,    0,  561,  614,  614,
      572,  572,  561,  561,  561,  575,    0,  561,  573,  561,
      614,  616,  575,  576,  561,  561,  577,  561,  561,  561,
      576,  575,  575,  577,  580,    0,    0,  616,  616,  576,

      576,  580,  577,  577,    0,    0,    0,  578,    0,  616,
      580,  580,  575,  579,  578,  576,  561,  561,  562,    0,
      579,  562,  577,  578,  578,  578,  562,  562,  562,  579,
      579,  562,    0,  562,  621,  579,  580,  581,  562,  562,
        0,  562,  562,  562,  581,    0,  615,    0,  582,    0,
      621,  621,  583,  581,  581,  582,  621,  581,    0,  583,
      584,    0,  615,  615,  582,  582,    0,  584,  583,  583,
      562,  562,  583,  582,  585,    0,  584,  584,  584,    0,
      622,  585,  589,  615,    0,    0,    0,  591,    0,  589,
      585,  585,  587,    0,  591,  587,  622,  622,  589,  589,

      587,  587,  587,  591,  591,  587,  622,  587,    0,  591,
      791,    0,  587,  587,  592,  587,  587,  587,  589,  791,
      594,  592,  593,  791,  791,  595,  791,  594,    0,  593,
      592,  592,  595,    0,  619,    0,  594,  594,  593,  593,
        0,  595,  595,  592,  587,  587,  588,  624,    0,  588,
      619,  619,  619,    0,  588,  588,  588,  594,  593,  588,
        0,  588,  595,  624,  624,  596,  588,  588,    0,  588,
      588,  588,  596,  597,    0,    0,  598,    0,  611,    0,
      597,  596,  596,  598,  624,  596,    0,    0,    0,  597,
      597,    0,  598,  598,  611,  611,    0,    0,  588,  588,

      590,  596,  605,  605,  597,  605,    0,  590,  605,  618,
      605,  628,  598,    0,  611,    0,  590,  590,  625,    0,
        0,    0,    0,  590,  605,  618,  618,  628,  628,  623,
      590,    0,  590,    0,  625,  625,  590,  590,    0,  590,
      606,    0,  626,  606,  618,  623,  623,    0,  606,  606,
      606,  627,    0,  606,  629,  623,  625,  630,  626,  626,
      631,  606,  632,  606,  606,  606,  626,  627,  627,  633,
      629,  629,    0,  630,  630,    0,  631,  631,  632,  632,
      627,    0,    0,    0,  635,  633,  633,  633,    0,  629,
        0,  631,  606,  606,  608,  630,  634,  608,    0,  632,

      635,  635,  608,  608,  608,  636,    0,  608,  637,  635,
      639,    0,  634,  634,    0,  608,  638,  608,  608,  608,
      640,  636,  636,    0,  637,  637,  639,  639,  641,  637,
        0,  634,  638,  638,  642,    0,  640,  640,  643,  639,
      644,    0,    0,  636,  641,  641,  608,  608,  645,    0,
      642,  642,  638,  646,  643,  643,  644,  644,  647,  642,
        0,    0,  648,    0,  645,  645,  644,    0,    0,  646,
      646,  649,    0,  650,  647,  647,    0,  645,  648,  648,
      648,  651,    0,  652,  647,  646,  653,  649,  649,  650,
      650,  654,    0,  649,  655,    0,    0,  651,  651,  652,

      652,  656,  653,  653,  657,  652,  659,  654,  654,    0,
      655,  655,  651,  658,    0,    0,  660,  656,  656,  661,
      657,  657,  659,  659,  662,    0,  657,  656,  663,  658,
      658,  655,  660,  660,  658,  661,  661,    0,    0,  661,
      662,  662,  664,    0,  663,  663,  663,  665,  660,  666,
      804,  804,  804,  804,  662,  667,  804,  668,  664,  664,
      669,    0,  670,  665,  665,  666,  666,    0,  664,  666,
      671,  667,  667,  668,  668,  667,  669,  669,  670,  670,
        0,    0,    0,  665,  672,    0,  671,  671,  673,    0,
      674,    0,    0,  675,    0,  676,  669,    0,  670,  677,

      672,  672,    0,    0,  673,  673,  674,  674,  671,  675,
      675,  676,  676,  676,    0,  677,  677,  678,    0,  672,
      679,    0,  680,    0,  673,  681,    0,    0,    0,  682,
      675,    0,  683,  678,  678,    0,  679,  679,  680,  680,
      684,  681,  681,  685,  680,  682,  682,  682,  683,  683,
        0,  679,  686,    0,    0,    0,  684,  684,  687,  685,
      685,  688,    0,    0,    0,  689,    0,  681,  686,  686,
      686,  690,  684,    0,  687,  687,  691,  688,  688,  685,
      687,  689,  689,  688,    0,    0,    0,  690,  690,  690,
        0,  700,  691,  691,  695,  695,  691,  695,  700,    0,

      695,    0,  695,    0,    0,    0,  702,  700,  700,    0,
        0,  700,  701,  702,    0,    0,  695,  697,  813,  701,
      697,    0,  702,  702,    0,  697,  697,  697,  701,  701,
      697,    0,  697,    0,  813,  813,  703,    0,  697,  704,
      697,  697,  697,  703,  702,    0,  704,  705,  701,    0,
      706,    0,  703,  703,  705,  704,  704,  706,    0,    0,
        0,  707,  703,  705,  705,    0,  706,  706,  707,  697,
      697,  699,    0,    0,  699,    0,  704,  707,  707,  699,
      699,  699,  706,  708,  699,    0,  709,    0,    0,  817,
      708,  707,  699,  709,  699,  699,  699,    0,  707,  708,

      708,  710,  709,  709,  711,  817,  817,    0,  710,    0,
      817,  711,  712,  708,    0,  713,  709,  710,  710,  712,
      711,  711,  713,  699,  699,    0,  710,    0,  712,  712,
      714,  713,  713,  713,  715,    0,  818,  714,  716,    0,
        0,  715,  717,  712,    0,  716,  714,  714,    0,  717,
      715,  715,  818,  818,  716,  716,  715,    0,  717,  717,
      716,  718,  818,  719,    0,  720,    0,  815,  718,  721,
      719,    0,  720,    0,  717,    0,  721,  718,  718,  719,
      719,  720,  720,  815,  815,  721,  721,  721,  722,  815,
      723,    0,  724,    0,  718,  722,    0,  723,  819,  724,

      719,    0,    0,  720,  722,  722,  723,  723,  724,  724,
        0,  725,    0,  728,  819,  819,  726,  722,  725,  727,
      728,    0,    0,  726,    0,    0,  727,  725,  725,  728,
      728,  723,  726,  726,  726,  727,  727,  729,    0,  730,
      727,    0,  731,    0,  729,  732,  730,    0,  820,  731,
        0,    0,  732,  729,  729,  730,  730,  729,  731,  731,
        0,  732,  732,  733,  820,  820,  734,  732,    0,    0,
      733,  730,  731,  734,  735,    0,    0,  738,    0,  733,
      733,  735,  734,  734,  738,  733,    0,    0,  736,    0,
      735,  735,  737,  738,  738,  736,  816,    0,    0,  737,

      739,    0,    0,  734,  736,  736,  738,  739,  737,  737,
      735,    0,  816,  816,  736,  816,  739,  739,  740,    0,
      741,    0,    0,  742,  740,  740,    0,  741,    0,  737,
      742,    0,  739,    0,  740,  740,  741,  741,    0,  742,
      742,    0,  746,  746,  741,  746,    0,    0,  746,    0,
      746,    0,    0,  821,  757,  757,    0,  757,    0,    0,
      757,    0,  757,    0,  746,  748,  823,    0,  748,  821,
      821,    0,    0,  748,  748,  748,  757,  762,  748,    0,
      748,    0,  823,  823,  762,  763,  748,    0,  748,  748,
      748,  828,  763,  762,  762,  823,  765,  762,  764,    0,

        0,  763,  763,  765,  766,  764,    0,  828,  828,  768,
        0,  766,  765,  765,  764,  764,  768,  748,  748,  750,
      766,  766,  750,  763,  764,  768,  768,  750,  750,  750,
      767,  768,  750,  765,  769,    0,  766,  767,  830,    0,
      750,  769,  750,  750,  750,  770,  767,  767,  767,    0,
      769,  769,  770,  771,  830,  830,  769,    0,  773,    0,
      771,  770,  770,  814,    0,  773,    0,    0,    0,  771,
      771,  750,  750,  759,  773,  773,  759,    0,  770,  814,
      814,  759,  759,  759,  772,  814,  759,    0,  759,  829,
      771,  772,    0,    0,  759,  814,  759,  759,  759,  773,

      772,  772,  772,  774,    0,  829,  829,  775,    0,  829,
      774,    0,    0,    0,  775,    0,  822,    0,    0,  774,
      774,  774,  776,  775,  775,  759,  759,  761,  775,  776,
      761,    0,  822,  822,    0,  761,  761,  761,  776,  776,
      761,    0,  776,  832,    0,    0,  777,  822,  761,  778,
      761,  761,  761,  777,    0,    0,  778,  779,    0,  832,
      832,  780,  777,  777,  779,  778,  778,    0,  780,  832,
        0,  778,    0,  779,  779,  781,  777,  780,  780,  761,
      761,    0,  781,  790,    0,    0,    0,  780,    0,  824,
      790,  781,  781,  825,  779,  785,  785,  792,  785,  790,

      790,  785,    0,  785,  792,  824,  824,    0,  793,  825,
      825,  825,  781,  792,  792,  793,    0,  785,  787,  790,
      824,  787,    0,    0,  793,  793,  787,  787,  787,  794,
        0,  787,    0,  787,    0,    0,  794,  795,  793,  787,
      797,  787,  787,  787,  795,  794,  794,  797,  796,    0,
        0,  798,    0,  795,  795,  796,  797,  797,  798,  794,
      837,    0,  795,    0,  796,  796,    0,  798,  798,    0,
      787,  787,  789,  798,    0,  789,  837,  837,  797,  796,
      789,  789,  789,  799,    0,  789,  837,  800,    0,    0,
      799,  801,    0,  789,  800,  789,  789,  789,  801,  799,

      799,  826,    0,  800,  800,  802,    0,  801,  801,    0,
        0,    0,  802,    0,    0,  827,  800,  826,  826,  799,
      833,  802,  802,  801,  789,  789,    0,  803,  803,  802,
      803,  827,  827,  803,    0,  803,  833,  833,  826,  807,
      807,  833,  807,    0,    0,  807,  827,  807,    0,  803,
      806,  834,    0,  806,    0,    0,    0,    0,  806,  806,
      806,  807,    0,  806,  836,  810,  810,  834,  834,  810,
        0,  806,  834,  806,  806,  806,  831,  810,  835,  810,
      836,  836,    0,  812,  812,    0,  812,    0,    0,  812,
        0,  812,  831,  831,  835,  835,    0,    0,  831,  838,

      835,  836,  806,  806,  809,  812,  840,  809,  810,  810,
        0,    0,  809,  809,  809,  838,  838,  809,  839,    0,
      841,    0,  840,  840,  842,  809,  843,  809,  809,  809,
      844,    0,  845,    0,  839,  839,  841,  841,    0,  839,
      842,  842,  843,  843,  840,  846,  844,  844,  845,  845,
      847,    0,    0,  848,  845,    0,  809,  809,  849,    0,
      842,  846,  846,  850,    0,    0,  847,  847,    0,  848,
      848,  844,  851,    0,  849,  849,    0,    0,  852,  850,
      850,  847,  848,    0,    0,  846,  853,    0,  851,  851,
      854,    0,  855,  849,  852,  852,  856,    0,    0,  850,

      850,  857,  853,  853,  858,    0,  854,  854,  855,  855,
      854,    0,  856,  856,  859,  853,  860,  857,  857,  861,
      858,  858,  862,  857,  863,    0,  858,  856,    0,    0,
      859,  859,  860,  860,  864,  861,  861,    0,  862,  862,
      863,  863,    0,  859,  861,  865,  863,  866,    0,    0,
      864,  864,  867,  860,  868,    0,    0,    0,  869,  862,
      870,  865,  865,  866,  866,  865,  871,    0,  867,  867,
      868,  868,  872,  866,  869,  869,  870,  870,  873,    0,
      868,  874,  871,  871,  870,  875,    0,  876,  872,  872,
      877,    0,    0,  869,  873,  873,  878,  874,  874,  879,

        0,  875,  875,  876,  876,    0,  877,  877,  880,  873,
        0,    0,  878,  878,    0,  879,  879,  874,    0,    0,
      881,  881,  876,  881,  880,  880,  881,    0,  881,  882,
      882,  882,  882,  880,  879,  882,  888,  888,    0,    0,
      888,    0,  881,  883,    0,    0,  883,    0,  888,    0,
      888,  883,  883,  883,  884,  884,  883,  884,  883,    0,
      884,    0,  884,    0,  883,    0,  883,  883,  883,  890,
      890,  892,  890,    0,    0,  890,  884,  890,  892,  888,
      888,    0,  891,    0,    0,    0,  893,  892,  892,  891,
        0,  890,    0,  893,    0,  883,  883,  887,  891,  891,

      887,    0,  893,  893,    0,  887,  887,  887,  891,  894,
      887,    0,  895,    0,    0,    0,  894,    0,  887,  895,
      887,  887,  887,  893,  896,  894,  894,  897,  895,  895,
        0,  896,    0,  894,  897,    0,  925,  925,  925,  925,
      896,  896,  925,  897,  897,    0,  898,  895,    0,  887,
      887,  889,  897,  898,  889,    0,    0,    0,    0,  889,
      889,  889,  898,  898,  889,    0,  889,  898,    0,    0,
      899,    0,  889,  901,  889,  889,  889,  899,  900,    0,
      901,  902,    0,    0,  903,  900,  899,  899,  902,  901,
      901,  903,    0,    0,  900,  900,    0,  902,  902,    0,

      903,  903,    0,  889,  889,  904,    0,  899,  901,  900,
        0,  905,  904,  902,    0,    0,  903,  906,  905,  907,
        0,  904,  904,  908,  906,    0,  907,  905,  905,    0,
      908,  904,  905,  906,  906,  907,  907,    0,    0,  908,
      908,  909,    0,  910,    0,    0,  911,    0,  909,    0,
      910,    0,    0,  911,  906,    0,    0,  909,  909,  910,
      910,  910,  911,  911,  912,  909,    0,    0,  913,    0,
      914,  912,  915,    0,    0,  913,    0,  914,    0,  915,
      912,  912,    0,  911,  913,  913,  914,  914,  915,  915,
      916,  914,  915,    0,  917,    0,  912,  916,  918,    0,

      913,  917,  919,    0,    0,  918,  916,  916,    0,  919,
      917,  917,    0,  920,  918,  918,  918,    0,  919,  919,
      920,  921,    0,  985,  919,  922,    0,  923,  921,  920,
      920,  920,  922,    0,  923,    0,    0,  921,  921,  985,
      985,  922,  922,  923,  923,  924,  924,    0,  924,    0,
      922,  924,    0,  924,    0,    0,  921,  927,  927,    0,
      927,    0,    0,  927,    0,  927,    0,  924,  926,    0,
      987,  926,    0,    0,    0,    0,  926,  926,  926,  927,
        0,  926,    0,  926,  931,  931,  987,  987,  931,  926,
        0,  926,  926,  926,  933,  933,  931,  933,  931,    0,

      933,    0,  933,    0,  934,  934,  987,  934,    0,    0,
      934,    0,  934,    0,    0,    0,  933,  946,    0,    0,
      926,  926,  930,    0,  946,  930,  934,  931,  931,    0,
      930,  930,  930,  946,  946,  930,  935,  935,  935,  935,
        0,  946,  935,  930,    0,  930,  930,  930,  937,  937,
        0,  937,    0,    0,  937,    0,  937,    0,    0,  941,
      941,  943,  943,  941,  943,  949,    0,  943,    0,  943,
      937,  941,  949,  941,  930,  930,  932,  986,    0,  932,
        0,  949,  949,  943,  932,  932,  932,    0,  944,  932,
        0,  932,    0,  986,  986,  944,  949,  932,    0,  932,

      932,  932,  941,  941,  944,  944,  947,    0,    0,  945,
        0,    0,  986,  947,  944,  989,  945,    0, 1001,    0,
      948,    0,  947,  947,    0,  945,  945,  948,  932,  932,
      936,  989,  989,  936, 1001, 1001,  948,  948,  936,  936,
      936,  947,  950,  936,  990,  936,  945,  989,    0,  950,
      998,  936,    0,  936,  936,  936,  951,  948,  950,  950,
      990,  990,  988,  951,  952,    0,  998,  998,    0,  953,
      998,  952,  951,  951,    0,  990,  953,  950,  988,  988,
      952,  952,  936,  936,  938,  953,  953,  938,  951,    0,
      952,    0,  938,  938,  938,  954,    0,  938,    0,  938,

      988,    0,  954,    0,    0,  938,  953,  938,  938,  938,
      955,  954,  954,  956,    0,  959,    0,  955,  958,  954,
      956,    0,  959,    0,    0,  958,  955,  955,  955,  956,
      956,  959,  959,  959,  958,  958,  938,  938,  940,  958,
        0,  940,    0,    0,    0,    0,  940,  940,  940,  957,
      956,  940,    0,  960,    0,    0,  957,    0,    0,  940,
      960,  940,  940,  940,    0,  957,  957,    0,    0,  960,
      960,  961,  961,    0,  961,  960,    0,  961,    0,  961,
      976,  957,  962,  962,  962,  962,    0,  976,  962,    0,
      940,  940,  942,  961,    0,  942,  976,  976,  976,    0,

      942,  942,  942,  964,  964,  942,  964,  942,    0,  964,
        0,  964,    0,  942,    0,  942,  942,  942,    0,  968,
      968,  970,  970,  968,  970,  964,    0,  970,    0,  970,
        0,  968,    0,  968,    0,  971,    0,    0,    0,    0,
        0,    0,  971,  970,  942,  942,  963,    0,    0,  963,
        0,  971,  971,    0,  963,  963,  963,  971,  972,  963,
      991,  963,  968,  968,    0,  972,    0,  963,  992,  963,
      963,  963,  973,    0,  972,  972,  991,  991,  994,  973,
      974,  991,    0,  972,  992,  992,    0,  974,  973,  973,
      992,    0,    0,  973,  994,  994,  974,  974,  963,  963,

      965,  974,    0,  965,    0,    0,    0,  994,  965,  965,
      965,  975,    0,  965,    0,  965,    0,    0,  975,    0,
        0,  965,    0,  965,  965,  965,  977,  975,  975,  978,
      978,  975,  978,  977,    0,  978,    0,  978,  979,  979,
      979,  979,  977,  977,  979,    0,  980,  980,    0,    0,
      980,  978,  965,  965,  967,    0,    0,  967,  980,    0,
      980,  977,  967,  967,  967,  982,  982,  967,  982,    0,
        0,  982,    0,  982,    0,  967,    0,  967,  967,  967,
      983,  983,  993,  983,  995,    0,  983,  982,  983,  980,
      980,  984,  984,  984,  984,    0,  996,  984,  993,  993,

      995,  995,  983,  997,  993,    0,  967,  967,  969,    0,
      995,  969,  996,  996,    0,    0,  969,  969,  969,  997,
      997,  969,  999,  969, 1000,  997, 1002,    0, 1003,  969,
        0,  969,  969,  969,  996,    0, 1004,    0,  999,  999,
     1000, 1000, 1002, 1002, 1003, 1003, 1000, 1005,    0,    0,
     1006,    0, 1004, 1004,    0,    0,    0, 1002,    0,  999,
      969,  969,  981, 1005, 1005,  981, 1006, 1006,    0, 1005,
      981,  981,  981, 1004, 1007,  981, 1008,    0, 1010,    0,
     1009, 1006, 1011,  981, 1012,  981,  981,  981,    0, 1013,
     1007, 1007, 1008, 1008, 1010, 1010, 1009, 1009, 1011, 1011,

     1012, 1012, 1014,    0, 1011, 1013, 1013, 1015,    0, 1016,
     1012, 1017,    0, 1019,  981,  981, 1009, 1018, 1014, 1014,
     1020,    0, 1021, 1015, 1015, 1016, 1016, 1017, 1017, 1019,
     1019, 1016, 1015, 1018, 1018, 1018, 1020, 1020, 1021, 1021,
     1022,    0, 1023,    0, 1024,    0,    0, 1025, 1017,    0,
     1026,    0, 1027,    0, 1028,    0, 1022, 1022, 1023, 1023,
     1024, 1024, 1022, 1025, 1025, 1025, 1026, 1026, 1027, 1027,
     1028, 1028, 1026,    0,    0,    0, 1029,    0, 1030,    0,
     1031,    0, 1032,    0, 1033,    0, 1034,    0,    0, 1027,
     1035, 1028, 1029, 1029, 1030, 1030, 1031, 1031, 1032, 1032,

     1033, 1033, 1034, 1034, 1032,    0, 1035, 1035, 1036, 1036,
     1111, 1036,    0,    0, 1036,    0, 1036, 1031, 1029, 1033,
        0, 1034, 1037, 1037, 1037, 1037, 1111, 1111, 1037,    0,
     1036, 1038, 1038, 1040, 1040, 1038, 1040,    0,    0, 1040,
        0, 1040,    0, 1038,    0, 1038, 1041, 1041,    0, 1041,
     1112,    0, 1041, 1043, 1041, 1040, 1042, 1042, 1042, 1042,
     1043,    0, 1042,    0,    0, 1044, 1112, 1112, 1041, 1043,
     1043, 1043, 1044, 1045, 1038, 1038,    0, 1046,    0, 1047,
     1045, 1044, 1044, 1044, 1046, 1048, 1047, 1112,    0, 1045,
     1045, 1049, 1048, 1046, 1046, 1047, 1047, 1050, 1049,    0,

        0, 1048, 1048, 1051, 1050, 1047,    0, 1049, 1049, 1052,
     1051, 1045,    0, 1050, 1050, 1046, 1052, 1053,    0, 1051,
     1051, 1054,    0, 1055, 1053, 1052, 1052,    0, 1054,    0,
     1055, 1051,    0, 1053, 1053, 1056,    0, 1054, 1054, 1055,
     1055,    0, 1056, 1057,    0, 1055, 1052, 1054, 1058,    0,
     1057, 1056, 1056,    0, 1053, 1058, 1059, 1056, 1114, 1057,
     1057, 1060,    0, 1059, 1058, 1058,    0,    0, 1060, 1061,
        0,    0, 1059, 1059, 1114, 1114, 1061, 1060, 1060,    0,
     1057, 1062,    0, 1063, 1059, 1061, 1061, 1064, 1062,    0,
     1063, 1061,    0, 1113, 1064,    0, 1060, 1062, 1062, 1063,

     1063,    0,    0, 1064, 1064,    0, 1065,    0, 1066, 1113,
     1113, 1064, 1063, 1065, 1067, 1066,    0,    0, 1062,    0,
        0, 1067, 1065, 1065, 1066, 1066, 1068, 1068,    0, 1068,
     1067, 1067, 1068, 1113, 1068, 1069, 1069, 1069, 1069, 1070,
     1070, 1069, 1065, 1070,    0, 1066, 1067,    0, 1068, 1072,
     1072, 1070, 1072, 1070,    0, 1072,    0, 1072, 1073, 1073,
     1117, 1073,    0,    0, 1073,    0, 1073, 1074, 1074, 1074,
     1074, 1072,    0, 1074,    0,    0, 1117, 1117, 1075, 1075,
     1073, 1075, 1070, 1070, 1075,    0, 1075, 1076, 1076, 1076,
     1076, 1077, 1077, 1076, 1084, 1077, 1079, 1079,    0, 1079,

     1075, 1084, 1079, 1077, 1079, 1077, 1080, 1080,    0, 1080,
     1084, 1084, 1080,    0, 1080,    0,    0,    0, 1079, 1081,
     1081, 1081, 1081, 1082,    0, 1081, 1083,    0, 1080, 1085,
     1082, 1086, 1084, 1083, 1077, 1077, 1085,    0, 1086, 1082,
     1082, 1082, 1083, 1083, 1083, 1085, 1085, 1086, 1086, 1087,
        0,    0,    0, 1088,    0, 1089, 1087, 1090,    0,    0,
     1088,    0, 1089,    0, 1090, 1087, 1087, 1085, 1086, 1088,
     1088, 1089, 1089, 1090, 1090, 1088, 1091, 1089,    0,    0,
     1092,    0, 1094, 1091, 1093,    0, 1087, 1092,    0, 1094,
        0, 1093, 1091, 1091, 1090,    0, 1092, 1092, 1094, 1094,

     1093, 1093, 1092,    0, 1095, 1095, 1094, 1095, 1116,    0,
     1095, 1091, 1095, 1093, 1096, 1096, 1096, 1096, 1097, 1097,
     1096,    0, 1097,    0, 1116, 1116, 1095,    0, 1099, 1099,
     1097, 1099, 1097,    0, 1099,    0, 1099, 1100, 1100, 1116,
     1100,    0,    0, 1100,    0, 1100, 1101, 1101, 1101, 1101,
     1099, 1102, 1101, 1103,    0,    0, 1104,    0, 1102, 1100,
     1103, 1097, 1097, 1104, 1105,    0,    0, 1102, 1102, 1103,
     1103, 1105, 1104, 1104, 1110,    0, 1106,    0, 1107, 1103,
     1105, 1105, 1104, 1106,    0, 1107,    0, 1102,    0,    0,
     1110, 1110, 1106, 1106, 1107, 1107, 1108, 1108,    0, 1108,

     1110, 1105, 1108, 1115, 1108, 1109, 1109, 1109, 1109, 1118,
        0, 1109, 1106, 1119,    0, 1107, 1110, 1120, 1108, 1115,
     1115,    0,    0, 1121,    0, 1118, 1118, 1122,    0, 1119,
     1119, 1123,    0, 1120, 1120, 1119, 1124,    0, 1115, 1121,
     1121, 1118,    0, 1122, 1122, 1125,    0, 1123, 1123, 1122,
        0,    0, 1124, 1124, 1126,    0, 1127,    0, 1124, 1128,
     1121, 1125, 1125, 1129,    0, 1130,    0, 1125, 1131,    0,
     1126, 1126, 1127, 1127,    0, 1128, 1128, 1127, 1132, 1129,
     1129, 1130, 1130, 1133, 1131, 1131, 1134,    0, 1135,    0,
     1131,    0,    0, 1136, 1132, 1132, 1137,    0,    0, 1133,

     1133, 1138, 1134, 1134, 1135, 1135,    0,    0, 1130, 1136,
     1136,    0, 1137, 1137, 1139, 1134, 1140, 1138, 1138, 1141,
        0, 1142,    0, 1138, 1143,    0, 1144,    0, 1136,    0,
     1139, 1139, 1140, 1140,    0, 1141, 1141, 1142, 1142,    0,
     1143, 1143, 1144, 1144,    0, 1145, 1145, 1147, 1145,    0,
        0, 1145, 1139, 1145, 1147, 1141, 1143,    0, 1144, 1146,
     1146, 1146, 1146, 1147, 1147, 1146, 1148, 1145,    0, 1149,
        0, 1150,    0, 1148,    0,    0, 1149,    0, 1150,    0,
        0, 1193, 1148, 1148, 1147, 1149, 1149, 1150, 1150, 1151,
        0, 1150, 1152,    0, 1153,    0, 1151, 1193, 1193, 1152,

        0, 1153,    0, 1148, 1149, 1151, 1151, 1154, 1152, 1152,
     1153, 1153, 1155,    0, 1154, 1156, 1153,    0, 1157, 1155,
     1151,    0, 1156, 1154, 1154, 1157,    0,    0, 1155, 1155,
     1158, 1156, 1156,    0, 1157, 1157, 1156, 1158, 1159,    0,
        0,    0,    0, 1155, 1160, 1159, 1158, 1158, 1158, 1154,
     1161, 1160, 1162,    0, 1159, 1159, 1163, 1161, 1164, 1162,
     1160, 1160,    0, 1163,    0, 1164, 1161, 1161, 1162, 1162,
        0, 1196, 1163, 1163, 1164, 1164, 1165, 1160, 1162, 1166,
        0, 1161, 1167, 1165,    0,    0, 1166, 1196, 1196, 1167,
        0,    0, 1165, 1165,    0, 1166, 1166,    0, 1167, 1167,

     1164, 1168, 1168,    0, 1168, 1170, 1170, 1168, 1170, 1168,
        0, 1170, 1165, 1170, 1167, 1166, 1169, 1169, 1169, 1169,
        0,    0, 1169, 1168,    0, 1172,    0, 1170, 1171, 1171,
     1171, 1171, 1172, 1173, 1171,    0, 1174,    0, 1175,    0,
     1173, 1172, 1172, 1174, 1176, 1175,    0,    0, 1192, 1173,
     1173, 1176, 1174, 1174, 1175, 1175, 1177,    0, 1175,    0,
     1176, 1176, 1172, 1177, 1192, 1192, 1176, 1178,    0, 1179,
     1173, 1174, 1177, 1177, 1178, 1180, 1179,    0, 1197, 1192,
        0,    0, 1180, 1178, 1178, 1179, 1179, 1179, 1178, 1181,
        0, 1180, 1180, 1182, 1197, 1197, 1181,    0, 1177,    0,

     1182, 1184, 1184, 1184, 1184, 1181, 1181, 1184, 1180, 1182,
     1182, 1183, 1183,    0, 1183, 1185,    0, 1183,    0, 1183,
     1181, 1186, 1185, 1187,    0,    0,    0, 1188, 1186,    0,
     1187, 1185, 1185, 1183, 1188, 1182,    0, 1186, 1186, 1187,
     1187, 1189,    0, 1188, 1188, 1190, 1185,    0, 1189, 1187,
        0,    0, 1186, 1191,    0, 1194,    0, 1189, 1189,    0,
        0, 1190, 1190, 1188, 1195,    0, 1198, 1190, 1199, 1191,
     1191, 1194, 1194,    0, 1200, 1191,    0, 1189,    0,    0,
     1195, 1195, 1198, 1198, 1199, 1199, 1201,    0,    0, 1199,
     1200, 1200, 1194, 1202,    0, 1195, 1203,    0,    0,    0,

     1204,    0, 1201, 1201, 1201, 1205,    0, 1206,    0, 1202,
     1202, 1207, 1203, 1203, 1208, 1202, 1204, 1204, 1209,    0,
     1210, 1205, 1205, 1206, 1206, 1205, 1211, 1207, 1207,    0,
     1208, 1208, 1203, 1211, 1209, 1209, 1210, 1210, 1212,    0,
        0,    0, 1211, 1211,    0, 1212, 1214,    0, 1207, 1213,
        0,    0, 1211, 1214, 1212, 1212, 1213,    0, 1209, 1240,
     1210, 1215, 1214, 1214, 1212, 1213, 1213, 1213, 1215,    0,
        0,    0, 1216,    0, 1217, 1240, 1240, 1215, 1215, 1216,
     1218, 1217,    0, 1214, 1217, 1215,    0, 1218, 1216, 1216,
     1217, 1217, 1219,    0, 1220, 1240, 1218, 1218, 1221, 1219,

     1222, 1220,    0, 1216, 1218, 1221,    0, 1222, 1219, 1219,
     1220, 1220, 1223,    0, 1221, 1221, 1222, 1222, 1224, 1223,
     1222,    0,    0, 1221, 1225, 1224,    0,    0, 1223, 1223,
        0, 1225, 1226,    0, 1224, 1224,    0, 1227,    0, 1226,
     1225, 1225, 1241, 1223, 1227, 1228, 1225,    0, 1226, 1226,
     1229,    0, 1228, 1227, 1227,    0, 1230, 1229, 1241, 1241,
        0, 1228, 1228, 1230,    0, 1227, 1229, 1229, 1231,    0,
     1232, 1228, 1230, 1230, 1230, 1231, 1229, 1232,    0,    0,
        0, 1233,    0, 1234, 1231, 1231, 1232, 1232, 1233,    0,
     1234, 1233,    0,    0,    0, 1235,    0, 1233, 1233, 1234,

     1234, 1232, 1235, 1236,    0, 1231, 1237,    0, 1234, 1238,
     1236, 1235, 1235, 1237,    0, 1235, 1238, 1239,    0, 1236,
     1236, 1242, 1237, 1237, 1239, 1238, 1238, 1236, 1243,    0,
     1237, 1244,    0, 1239, 1239, 1245,    0, 1242, 1242, 1239,
     1238, 1246,    0, 1247, 1243, 1243, 1248, 1244, 1244, 1249,
        0, 1245, 1245, 1250,    0,    0,    0, 1246, 1246, 1247,
     1247, 1251, 1248, 1248, 1243, 1249, 1249, 1252, 1248, 1250,
     1250,    0, 1246, 1253, 1249, 1254,    0, 1251, 1251, 1250,
     1253, 1255, 1254, 1252, 1252, 1272,    0, 1256, 1255, 1253,
     1253, 1254, 1254, 1257, 1256,    0,    0, 1255, 1255, 1258,

     1257, 1272, 1272, 1256, 1256,    0, 1258,    0,    0, 1257,
     1257,    0, 1253,    0, 1254, 1258, 1258, 1259, 1255, 1256,
     1260,    0, 1272,    0, 1259, 1258,    0, 1260,    0,    0,
     1257, 1261,    0, 1259, 1259, 1262, 1260, 1260, 1261, 1259,
        0,    0, 1262, 1263, 1260,    0, 1264, 1261, 1261, 1265,
     1263, 1262, 1262, 1264, 1267,    0, 1265, 1266,    0, 1263,
     1263, 1267, 1264, 1264, 1266, 1265, 1265, 1261,    0,    0,
     1267, 1267,    0, 1266, 1266,    0, 1268,    0,    0,    0,
        0, 1269, 1263, 1268,    0, 1264, 1265,    0, 1269, 1266,
        0, 1267, 1268, 1268, 1270,    0, 1273, 1269, 1269, 1271,

        0, 1270, 1268, 1269, 1274,    0, 1271, 1275,    0,    0,
     1270, 1270, 1273, 1273, 1289, 1271, 1271,    0, 1270,    0,
     1274, 1274,    0, 1275, 1275,    0, 1276,    0,    0, 1277,
     1289, 1289, 1273, 1276,    0, 1271, 1277, 1278,    0, 1275,
     1279,    0, 1276, 1276, 1278, 1277, 1277, 1279, 1276,    0,
        0, 1277, 1280, 1278, 1278, 1282, 1279, 1279,    0, 1280,
     1281,    0, 1282, 1278,    0,    0, 1283, 1281, 1280, 1280,
        0, 1282, 1282, 1283, 1284, 1279, 1281, 1281, 1285,    0,
     1281, 1284, 1283, 1283,    0, 1285, 1286,    0,    0, 1290,
     1284, 1284, 1287, 1286, 1285, 1285, 1284, 1288,    0, 1287,

     1285,    0, 1286, 1286, 1288, 1290, 1290,    0, 1287, 1287,
        0,    0, 1286, 1288, 1288, 1291,    0, 1288, 1292,    0,
     1290, 1293, 1291, 1294,    0, 1292, 1295, 1287, 1293, 1296,
     1294, 1291, 1291, 1295, 1292, 1292,    0, 1293, 1293, 1294,
     1294,    0, 1295, 1295, 1297, 1296, 1296, 1298,    0, 1299,
        0, 1297,    0, 1293, 1298,    0, 1299,    0, 1295,    0,
     1297, 1297,    0, 1298, 1298, 1299, 1299,    0,    0,    0,
        0,    0,    0,    0,    0, 1297,    0,    0, 1298, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,

     1302, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1306, 1306,    0,    0, 1306, 1306,
     1306, 1307,    0, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1308, 1308,    0,    0, 1308, 1308, 1308, 1309,    0,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1310, 1310,
        0,    0, 1310, 1310, 1310, 1311,    0, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1312, 1312,    0,    0, 1312,
     1312, 1312, 1313,    0, 1313, 1313, 1313, 1313, 1313, 1313,

     1313, 1313, 1314, 1314,    0,    0, 1314, 1314, 1314, 1315,
        0, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1316,
        0,    0,    0, 1316,    0, 1316, 1316,    0, 1316, 1316,
     1317,    0,    0, 1317, 1317,    0, 1317, 1317, 1317, 1317,
     1317, 1318, 1318,    0, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1319,    0, 1319, 1319,    0,    0, 1319,    0,
     1319, 1320, 1320, 1320, 1320, 1320,    0, 1320, 1321, 1321,
     1321, 1321, 1321,    0, 1321, 1322, 1322, 1322, 1322, 1322,
        0, 1322, 1323, 1323, 1323, 1323, 1323,    0, 1323, 1324,
     1324, 1324, 1324, 1324,    0, 1324, 1325,    0, 1325, 1325,

     1325, 1325, 1325, 1325, 1325, 1325, 1326,    0,    0,    0,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1327,    0, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1328,    0,    0,
        0, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1329,    0,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1330,    0,
        0,    0, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1331,
        0,    0,    0, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1332,    0, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1333,    0,    0,    0, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1334,    0, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1335,    0,    0,    0, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1336, 1336,    0, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1337,    0,    0,    0, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1338,    0,    0,    0, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1339, 1339,    0, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1340,    0,    0,    0,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1341,    0,    0,
        0, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1342, 1342,
        0, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1343,
        0,    0,    0, 1343, 1343, 1343, 1343, 1343, 1343, 1343,

     1344,    0,    0,    0, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1345,    0,    0,    0, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1346, 1346,    0, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1347,    0,    0,    0, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1348,    0,    0,    0, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1349, 1349,    0, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1350,    0,    0,    0,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1351,    0,    0,
        0, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1352, 1352,
        0, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1353,

        0,    0,    0, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1354, 1354,    0, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1355, 1355,    0, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1356,    0,    0,    0, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1357,    0,    0,    0, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1358, 1358,    0, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1359, 1359,    0,    0, 1359,
     1359, 1359, 1360, 1360,    0, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1361,    0,    0,    0, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1362,    0,    0,    0, 1362, 1362,

     1362, 1362, 1362, 1362, 1362, 1363, 1363,    0, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1364, 1364,    0, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1365,    0,    0,
        0, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1366, 1366,
        0, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1367,
        0,    0,    0, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1368,    0,    0,    0, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1369, 1369,    0, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1370, 1370,    0,    0, 1370, 1370, 1370, 1371,
     1371,    0, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,

     1372,    0,    0,    0, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1373, 1373,    0, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1374,    0,    0,    0, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1375,    0,    0,    0, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1376, 1376,    0, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1377, 1377,    0,    0, 1377,
     1377, 1377, 1378, 1378,    0, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1379,    0,    0,    0, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1380,    0,    0,    0, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1381, 1381,    0, 1381, 1381,

     1381, 1381, 1381, 1381, 1381, 1381, 1382, 1382,    0, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1383, 1383,    0,
        0, 1383, 1383, 1383, 1384, 1384,    0, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1385, 1385,    0, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1386, 1386,    0, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387, 1387,    0,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,

     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2010 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

void getInput(char* buf, yy_size_t& result, yy_size_t max_size);
//
//	result might be an int or a yy_size_t depending on flex version, so we use a temporary.
//
#define YY_INPUT(buf, result, max_size) \
  { yy_size_t safeResult; getInput(buf, safeResult, max_size); result = safeResult; }

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;










#line 2911 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 119 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3123 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1301 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8569 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_CHECK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_GET;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_VARIANTS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_VARIANT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_OPS2;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return KW_IRREDUNDANT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
return KW_TEST;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
return KW_SMT_SEARCH;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
return KW_VU_NARROW;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 273 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 277 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 282 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 117:
YY_RULE_SETUP
#line 294 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 295 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 296 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 299 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 300 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 301 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 302 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 303 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 304 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 333 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 334 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 335 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 336 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 337 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 340 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 341 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 342 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 343 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 344 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 345 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 169:
YY_RULE_SETUP
#line 352 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 358 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 364 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 370 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 376 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 382 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 388 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 394 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 400 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 409 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 413 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 424 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 425 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 436 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 447 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 184:
YY_RULE_SETUP
#line 456 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 464 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 186:
YY_RULE_SETUP
#line 472 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 476 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 480 "../../../src/Mixfix/lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 189:
YY_RULE_SETUP
#line 492 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 498 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 499 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 500 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 501 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 502 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 503 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 512 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 197:
YY_RULE_SETUP
#line 521 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 527 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 528 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 200:
YY_RULE_SETUP
#line 537 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 542 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 202:
YY_RULE_SETUP
#line 551 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 552 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 557 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 571 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 575 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 579 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 583 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 586 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 592 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 593 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 594 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 599 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK
#line 4544 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1301 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1301 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1300);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 599 "../../../src/Mixfix/lexer.ll"



#include "lexerAux.cc"

