/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 202
#define YY_END_OF_BUFFER 203
static yyconst short int yy_accept[1248] =
    {   0,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,    0,    0,    0,    0,  190,  190,
        0,    0,  203,  201,  199,  200,  200,   98,  201,   96,
       98,   98,   98,   96,   97,   97,   98,  201,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   15,   98,   98,   98,   98,   98,   98,   98,
      158,  201,  156,  156,  156,  158,  156,  156,  158,  201,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  104,  201,
      100,  104,  104,  102,  101,  100,  104,  201,  104,  102,

      106,  106,  105,  106,  106,  106,  106,  173,  201,  168,
      169,  173,  160,  173,  171,  159,  163,  161,  162,  173,
      201,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  170,  178,  178,  178,  178,  178,
      176,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  199,  175,  201,  200,  184,  185,
      186,  179,  183,  188,  187,  189,  190,  191,  198,  192,
      197,  197,  193,  194,  192,  195,  196,  199,   98,    0,
       98,    0,    0,    0,   98,   98,   97,    0,   98,   98,
       98,   98,   98,   98,   11,   98,   98,   98,   98,   98,

       41,   98,   98,   73,   98,   98,   98,   98,   98,   98,
       98,   60,   98,    5,   98,   98,   98,   14,   98,   72,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   36,
       70,   98,   98,   98,   98,   98,   98,   98,   98,   74,
       98,   98,   98,   98,   98,   98,   98,   98,    6,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      158,    0,  157,  158,    0,    0,    0,  158,  158,  152,
      155,  153,    0,  158,  158,  158,  158,  158,  147,  158,
      158,  158,  158,  146,  135,  158,  158,  158,  158,  134,
      158,  133,  158,  158,  158,  158,  144,  158,  158,  158,

      140,  158,  135,  158,  148,  158,  158,  158,  158,  158,
      107,  135,  158,  154,  104,    0,  103,  104,    0,    0,
        0,  104,  104,    0,   99,  101,    0,    5,  199,  105,
        0,    0,    0,    0,    0,  173,    0,  172,  173,    0,
        0,    0,  173,  173,  164,    0,  173,  173,  173,  173,
      173,  173,  173,  173,  166,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  165,    0,    0,  177,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      174,    0,    0,  174,    0,    0,    0,  174,  174,    0,
        0,  174,    0,  199,  175,    0,    0,    0,  184,  180,

      181,  182,  188,  190,  192,  192,   98,    0,    2,    2,
       98,   98,   98,   65,   98,   98,   98,   98,   64,   98,
       98,   98,   98,   98,   98,   98,   98,   16,   73,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   72,   98,   98,    6,   27,   98,   98,
       37,   98,   70,   98,   98,   98,   98,   98,   98,   10,
       98,   95,   19,   98,   98,   21,   74,   98,   98,   98,
       34,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   71,   98,   98,   98,   98,   98,   98,   98,
       98,  158,    0,    2,    2,  158,  158,  145,  158,  158,

      149,  158,  158,  158,  158,  158,  158,  158,  158,  112,
      158,  135,  158,  150,  158,  158,  158,  158,  158,  158,
      128,  127,  158,  141,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  143,  104,    0,    2,    2,    0,
        0,    0,    0,    2,    2,  173,    0,    2,    2,  173,
      173,  173,  173,  173,  173,  173,  173,  167,  173,  173,
      173,  173,  173,  173,  173,  167,  173,  173,  173,  173,
      173,    0,    0,    2,    2,    0,    0,    0,  174,  174,
        0,    0,    0,    0,  174,    0,    0,    0,    0,    2,
        2,    2,    1,    2,    2,   98,   98,   98,   43,   98,

       98,   98,   98,   98,   98,   98,   50,   26,   98,   20,
       98,   98,   88,   22,   98,   98,   56,   98,   23,   98,
       98,   98,   98,    9,   25,   98,    3,   98,   98,   98,
       18,   98,    7,   98,   98,   91,   13,   98,   98,   98,
       98,   15,   98,   98,   98,   98,   98,   74,   98,   98,
       35,   69,   24,   98,   86,   98,   98,   61,   98,   98,
       98,   71,   98,    8,   98,   98,   57,   98,   98,   98,
        0,    0,    2,    2,    2,    1,    2,    2,  158,  158,
      111,  158,  158,  123,  158,  158,  150,  158,  158,  151,
      158,  158,  108,  158,  158,  158,  113,  158,  158,  114,

      158,  158,  115,    3,  158,  158,  142,  158,  158,  122,
      117,  158,  158,  136,  158,  158,  158,  158,  158,  158,
      143,    0,    0,    2,    2,    2,    1,    2,    2,    0,
        0,    1,    0,    0,    2,    2,    2,    1,    2,    2,
      173,  167,  173,  173,  173,  173,  173,  173,  167,  173,
      167,  173,  173,  173,  173,  167,  167,  173,  173,  173,
        0,    0,    2,    2,    2,    1,    2,    2,    0,    0,
      174,  174,    0,    0,    0,    0,    0,  174,    0,    0,
        0,    2,    2,    1,    1,    1,    1,    1,    2,    2,
        2,   85,   98,   59,   89,   98,   42,   53,   98,   98,

       98,   98,   98,   98,   78,   98,   83,   98,   98,   98,
       98,   98,   98,   98,   54,   98,   76,   92,   29,   98,
       98,   98,   98,   98,   58,   17,   52,   98,   98,   12,
       98,   98,   98,   98,   98,   98,   98,   69,   98,   62,
       51,   98,   98,   38,   32,   98,   68,   87,   45,   98,
       98,   98,    2,    2,    1,    1,    1,    1,    1,    2,
        2,    2,  110,  138,  158,  158,  158,  129,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  109,  124,
      158,  158,  158,  158,  158,  158,  158,  116,  136,  158,
      120,  158,  158,  158,  135,    2,    2,    1,    1,    1,

        1,    1,    2,    2,    2,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,  167,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  167,    2,    2,    1,    1,    1,    1,    1,    2,
        2,    2,  174,    0,    0,    0,    0,    0,    0,    1,
        1,    1,    1,    1,    2,    2,   39,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   80,   98,    4,   98,   98,   92,   55,   67,   27,
       98,   94,   58,   98,   98,   98,   98,   19,   84,   49,
       98,   31,   46,   98,   98,   98,   63,   98,   98,   30,

       33,    1,    1,    1,    1,    1,    2,    2,  158,  158,
      126,  158,  158,    4,  121,  118,  158,  158,  158,  158,
      158,  158,  158,  127,  158,  158,  158,  158,  158,  158,
      158,  158,  158,    1,    1,    1,    1,    1,    2,    2,
        1,    1,    1,    1,    1,    2,    2,  173,  173,  167,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
        1,    1,    1,    1,    1,    2,    2,    0,    0,    0,
        0,    0,    0,    1,    1,   98,   59,   98,   44,   77,
       98,   48,   98,   98,   20,   98,   98,   82,   98,   98,
       81,   66,   98,   98,   93,   79,   98,   21,   98,   98,

       75,   40,   98,    1,    1,  158,  158,  158,  158,  158,
      130,  158,  158,  158,  158,  128,  158,  131,  158,  158,
      158,  125,  158,  158,  137,  158,    1,    1,    1,    1,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,    1,    1,    0,    0,    0,    0,  174,   98,   98,
       77,   98,   98,   26,   47,   22,   98,   23,   98,   98,
       95,   24,   98,   98,  158,  158,  158,  158,  158,  158,
      158,  158,  114,  119,  158,  158,  158,  120,  139,  137,
      158,  173,  173,  173,  173,  173,  173,  173,  173,    0,
        0,    0,  174,   98,   90,   98,   50,   56,   18,   98,

       98,   28,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  132,  173,  173,  173,  173,  173,  173,  173,    0,
        0,   98,   98,  158,  158,  158,  158,  113,  158,  117,
      139,  173,  173,  173,  173,  173,   98,  110,  111,  158,
      122,  173,   51,  158,  173,  126,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst int yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static yyconst short int yy_base[1335] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  725, 8202,  174, 8202, 8202,  309,  317, 8202,
      341, 8202,  361,  371,  373,  375,  379,  392,  385,  411,
      423,  434,  445,  459,  447,  481,  457,  484,  487,  507,
      510,  514,  518,  542,  581,  550,  553,  561,  574,  572,
      521,  321, 8202,  605,  607,  620,  628,  634,  640,  647,
      654,  693,  658,  672,  666,  669,  731,  695,  717,  742,
      753,  766,  774,  777,  780,  729,  788,  811,  813,  324,
     8202,  819,  825,  850,  852,  817,  855,  872,  863, 8202,

     8202,  895, 8202,  909,  925,  704,  693,  925,  366, 8202,
     8202,  927, 8202,  929,  933,  947,  953, 8202, 8202,  951,
      970,  973,  979,  977,  991, 1012, 1017, 1025, 1039, 1050,
     1063, 1065, 1071, 1020, 8202, 8202, 1076,  372, 1094, 1096,
     1099, 1107, 1116, 1162,  400, 1119, 1125, 1130, 1138, 1151,
     1156, 1182, 1187, 1193, 1231, 8202, 1245, 1259,    0, 8202,
     8202, 8202,  595,    0, 8202, 8202,    0, 8202, 8202,    0,
     8202, 8202, 8202, 8202,  676, 8202, 8202,  188,  664,  403,
      740, 1231,  478,  703,  837, 1068, 1250, 1259,  865,  939,
     1148, 1159,  988,  883, 1073, 1190, 1201, 1263, 1268, 1270,

     1281, 1283, 1291, 1295, 1302, 1305, 1310, 1316, 1320, 1323,
     1334, 1330, 1344, 1349, 1341, 1354, 1363, 1367, 1374, 1376,
     1385, 1382, 1387, 1389, 1397, 1400, 1409, 1418, 1421, 1427,
     1429, 1431, 1439, 1454, 1433, 1442, 1457, 1460, 1475, 1462,
     1484, 1487, 1490, 1493, 1502, 1512, 1523, 1527, 1531, 1533,
     1535, 1538, 1542, 1556, 1562, 1565, 1569, 1583, 1576, 1588,
     1595,  485, 1601, 1607, 1620,  508,  702, 1627, 1631, 1629,
     1642, 1650, 1667, 1654, 1676, 1678, 1681, 1699, 1701, 1707,
     1721, 1725, 1727, 1733, 1739, 1747, 1751, 1770, 1774, 1772,
     1778, 1792, 1797, 1805, 1810, 1816, 1818, 1815, 1824, 1842,

     1850, 1854, 1865, 1868, 1873, 1888, 1891, 1893, 1899, 1914,
     1917, 1919, 1922, 1925, 1937,  548, 1943, 1948, 1961,  551,
      665, 1968, 1972, 1997, 8202, 2001, 1968, 1980, 2026, 8202,
     2040,  652,  636,  630,  624, 2040,  568, 2042, 2044, 2026,
      601,  610, 2062, 2066, 2068, 2075, 2086, 2094, 2089, 2091,
     2097, 2123, 2126, 2131, 2129, 2144, 2152, 2157, 2165, 2170,
     2176, 2190, 2198, 2209, 2221, 2223, 2229, 2234,  617, 2247,
     2249, 2267,  625,  600, 2270, 2278, 2287,  952, 2290, 2298,
     2303, 2309, 2323, 2329, 2334, 2342, 2348, 2353, 2361, 2375,
     2379, 2383, 2387, 2418, 8202, 2432,  589,  580,    0, 8202,

     8202, 8202,    0,    0,    0, 8202, 1639,  629, 2447, 2501,
     1687, 1999, 1860, 2099, 2162, 2244, 2402, 2437, 2118, 2259,
     2440, 2451, 2196, 2458, 2461, 2465, 2417, 2469, 2494, 2504,
     2507, 2509, 2512, 2522, 2534, 2537, 2540, 2542, 2562, 2552,
     2565, 2572, 2575, 2580, 2584, 2587, 2590, 2598, 2602, 2608,
     2613, 2620, 2622, 2626, 2634, 2640, 2647, 2649, 2652, 2654,
     2658, 2667, 2673, 2680, 2682, 2685, 2691, 2700, 2709, 2712,
     2714, 2719, 2721, 2723, 2732, 2741, 2746, 2750, 2752, 2754,
     2773, 2775, 2783, 2785, 2794, 2796, 2806, 2808, 2820, 2826,
     2828, 2832,  653, 2872, 2926, 2859, 2883, 2840, 2894, 2872,

     2853, 2897, 2929, 2926, 2937, 2960, 2968, 2972, 2987, 2992,
     3000, 3006, 3020, 3025, 3040, 3043, 3051, 3054, 3066, 3074,
     3077, 3089, 3100, 3103, 3114, 3122, 3127, 3133, 3145, 3153,
     3159, 3167, 3172, 3178, 3190, 3198,  694, 3235, 3289,  570,
      557,  554,  549,  535,  532, 3201,  704, 3343, 3397, 3212,
     3204, 3238, 3253, 3249, 3216, 3276, 3300, 3311, 3323, 3361,
     3315, 3357, 3363, 3365, 3400, 3369, 3408, 3419, 3421, 3427,
     3445, 3448,  705, 3474, 3528, 3477, 3574, 3451, 3485, 3488,
     3499, 3510, 3532, 3546, 3550,  533,  511,  737,  521,    0,
      499, 1221, 3622,  364, 3676, 2865, 3002, 3028, 2906, 3282,

     2964, 2934, 3063, 3241, 3538, 3571, 3367, 3406, 3542, 3440,
     3297, 3454, 3480, 3583, 3578, 3603, 3592, 3615, 3625, 3628,
     3646, 3585, 3640, 3648, 3658, 3670, 3680, 3682, 3685, 3690,
     3694, 3709, 3688, 3713, 3716, 3718, 3723, 3736, 3741, 3743,
     3745, 3747, 3754, 3768, 3774, 3776, 3779, 3781, 3783, 3802,
     3807, 3809, 3811, 3813, 3815, 3820, 3834, 3838, 3842, 3844,
     3847, 3853, 3862, 3865, 3868, 3871, 3875, 3880, 3883, 3895,
      741,  499,  458, 3910,  442, 3933,  448, 3987, 3906, 3920,
     3914, 3944, 3947, 3955, 3958, 3969, 3991, 3994, 4009, 4012,
     4020, 4023, 4038, 4042, 4046, 4050, 4069, 4071, 4073, 4077,

     4096, 4098, 4100, 4119, 4124, 4127, 4121, 4145, 4147, 4150,
     4153, 4171, 4174, 4182, 4196, 4200, 4185, 4208, 4226, 4228,
     4231,  771,  454,  430, 4258,  421, 4281,  478, 4335,  429,
      404,    0,  775,  415,  396, 4265,  388, 4389,  651, 4443,
     4254, 4268, 4292, 4295, 4307, 4303, 4338, 4342, 4366, 4361,
     4369, 4400, 4403, 4346, 4408, 4423, 4447, 4455, 4450, 4461,
      807,  405,  386, 4491,  362, 4514,  839, 4568, 4496, 1012,
     4494, 4517, 4535, 4537, 4571, 4539, 4550, 4575, 4579, 4590,
     4593, 4623,  916,    0, 4646, 4635,  332, 4700, 4627,  320,
     4660, 3980, 4653, 4075, 4044, 4106, 4156, 4204, 4300, 4397,

     4603, 4650, 4395, 4665, 4465, 4677, 4687, 4706, 4708, 4710,
     4719, 4721, 4730, 4732, 4739, 4752, 4754, 4759, 4761, 4763,
     4765, 4772, 4774, 4783, 4785, 4792, 4794, 4797, 4807, 4815,
     4817, 4819, 4828, 4830, 4837, 4839, 4849, 4851, 4861, 4863,
     4872, 4875, 4883, 4885, 4895, 4897, 4903, 4905, 4908, 4915,
     4918, 4923, 4946, 1576, 4974, 4953,    0,  313, 5028, 4957,
     5082, 4957, 4947, 4961, 4988, 4992, 4996, 5010, 5032, 5035,
     5053, 5047, 5059, 5085, 5093, 5096, 5107, 5104, 5129, 5131,
     5133, 5135, 5154, 5156, 5158, 5160, 5162, 5180, 5185, 5193,
     5198, 5206, 5212, 5218, 5232, 5238, 1808, 5261, 5259,    0,

      306, 5315, 5278, 5369, 5272, 5289, 2823, 5423, 5290, 5477,
      296, 5531, 5296, 5585, 5329, 5318, 5338, 5349, 5346, 5351,
     5380, 5391, 5403, 5383, 5405, 5427, 5441, 5446, 5449, 5454,
     5480, 5488, 5511, 3054, 5639, 5520, 5693,  289, 5747, 5537,
     5801, 5545, 5549, 5553, 5551, 5588, 5596, 5607, 5500, 5650,
     3657, 5657, 5855, 5665, 5676, 3947, 4998, 5661, 5416, 5557,
     5620, 5594, 5675, 5699, 5021, 5378, 5687, 5707, 5711, 5296,
     5718, 5485, 5741, 5513, 5750, 5753, 5761, 5765, 5768, 5773,
     5783, 5794, 5805, 5807, 5812, 5825, 5819, 5827, 5848, 5858,
     5861, 5863, 5869, 5873, 5876, 5881, 5887, 5895, 5891, 5902,

     5905, 5722, 4295, 5923,    0, 5935, 5939, 4349, 5940, 5943,
     5948, 5962, 5966, 5974, 5977, 5980, 5988, 6001, 6003, 6006,
     6014, 6026, 6028, 6034, 6039, 6047, 6052, 6070, 6072, 6076,
     6078, 6096, 6099, 6110, 4528, 6117,    0, 6125, 6142, 4988,
     6143, 5073, 6145,    0, 6153, 6171, 6017, 6165, 6170, 6184,
     6192, 6195, 6197, 6203, 6221, 6224, 6229, 6235, 6249, 6253,
     6276, 6181, 6278,    0, 6289, 6300, 6307, 6304, 6308, 6310,
     6312, 6330, 6335, 6361, 6370, 6341, 5929, 6081, 5954, 6338,
     6360, 6111, 6316, 6363, 6370, 6378, 6381, 6384, 6388, 6390,
     6392, 6402, 6411, 6413, 6416, 6420, 6422, 6424, 6426, 6444,

     6446, 6449, 6452, 6458, 6479, 6476, 6478, 6481, 6489, 6501,
     6503, 6507, 6521, 6526, 6534, 6545, 6549, 6553, 6564, 6568,
     6572, 6576, 6587, 6595, 6600, 6606, 6626, 6647, 6635, 6652,
     6648, 6651, 6654, 6656, 6662, 6674, 6680, 6686, 6692, 6698,
     6706, 6726, 6736, 6720, 6738, 6742, 6746, 6750, 6574, 6744,
     6470, 6695, 6756, 6530, 6643, 6666, 6764, 6774, 6776, 6778,
     6783, 6788, 6796, 6801, 6803, 6808, 6821, 6835, 6840, 6843,
     6861, 6846, 6866, 6869, 6880, 6884, 6892, 6895, 6903, 6914,
     6917, 6922, 6935, 6937, 6940, 6943, 6962, 6964, 6966, 6968,
     6987, 6990, 6993, 6890, 6806, 6996, 6832, 7001, 7008, 7014,

     7022, 7026, 7028, 7033, 7046, 7052, 7054, 7073, 7078, 7058,
     7081, 7086, 7104, 7106, 7109, 7112, 7124, 7132, 7135, 7147,
     7153, 7060, 7150, 7168, 7176, 7179, 7187, 7199, 7201, 7207,
     7212, 7220, 7231, 7233, 7239, 7244, 7241, 7262, 7266, 7268,
     7270, 7281, 7156, 7289, 7292, 7294, 8202, 7332, 7343, 7354,
     7365, 7376, 7383, 7391, 7398, 7406, 7413, 7421, 7428, 7436,
     7443, 7451, 7462, 7473, 7484, 7494, 7500, 7507, 7514, 7521,
     7528, 7536, 7547, 7555, 7566, 7574, 7585, 7596, 7604, 7615,
     7623, 7634, 7645, 7656, 7667, 7678, 7689, 7700, 7711, 7722,
     7733, 7744, 7755, 7766, 7777, 7788, 7799, 7810, 7821, 7832,

     7843, 7854, 7865, 7876, 7887, 7894, 7905, 7916, 7927, 7938,
     7949, 7960, 7971, 7982, 7993, 8004, 8011, 8022, 8033, 8044,
     8055, 8066, 8077, 8084, 8095, 8106, 8117, 8128, 8139, 8146,
     8157, 8168, 8179, 8190
    } ;

static yyconst short int yy_def[1335] =
    {   0,
     1247,    1, 1247,    3, 1247,    5, 1248, 1248, 1247,    9,
     1247,   11,   11,   13, 1249, 1249, 1250, 1250, 1251, 1251,
     1252, 1252, 1247, 1247, 1247, 1247, 1247, 1253, 1254, 1247,
     1253, 1247, 1253, 1253, 1253, 1253, 1253, 1247, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1255, 1256, 1247, 1255, 1255, 1255, 1255, 1255, 1255, 1247,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1257, 1258,
     1247, 1257, 1257, 1257, 1257, 1257, 1257, 1247, 1257, 1247,

     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1259, 1260, 1247,
     1247, 1259, 1247, 1259, 1259, 1259, 1259, 1247, 1247, 1259,
     1247, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1247, 1247, 1261, 1262, 1261, 1261,
     1261, 1261, 1247, 1261,  144, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1247, 1247, 1247, 1247, 1263, 1247,
     1247, 1247, 1247, 1264, 1247, 1247, 1265, 1247, 1247, 1266,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1253, 1254,
     1253, 1267, 1254, 1254, 1253, 1253, 1253, 1247, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1255, 1256, 1255, 1255, 1268, 1256, 1256, 1255, 1255, 1255,
     1255, 1255, 1247, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255,   77, 1255, 1255,

     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1257, 1258, 1257, 1257, 1269, 1258,
     1258, 1257, 1257, 1247, 1247, 1257, 1247, 1257, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1259, 1260, 1259, 1259, 1270,
     1260, 1260, 1259, 1259, 1259, 1247, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1261, 1262, 1261,
     1261, 1271, 1262, 1262, 1261, 1261, 1247,  144, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1247, 1247, 1247, 1247, 1247, 1263, 1247,

     1247, 1247, 1264, 1265, 1266, 1247, 1253, 1272, 1273, 1273,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1255, 1274, 1275, 1275, 1255, 1255, 1255, 1255,   77,

     1255, 1255, 1255,   77, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1257, 1276, 1277, 1277, 1247,
     1247, 1247, 1247, 1278, 1278, 1259, 1279, 1280, 1280, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1261, 1281, 1282, 1282, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1247, 1247, 1272, 1272, 1278,
      410, 1283, 1284,  410, 1285, 1253, 1253, 1253, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1274, 1274,  495, 1286,  495, 1287,  495, 1288, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,

     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1276, 1276,  539, 1289,  539, 1290,  539, 1291, 1247,
     1247, 1292, 1279, 1279,  549, 1293,  549, 1294,  549, 1295,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1281, 1281,  575, 1296,  575, 1297,  575, 1298, 1261,  577,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1283, 1283, 1292, 1284, 1299,  785, 1300, 1278,  410,
     1301, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1286, 1286, 1287, 1302,  855,  855, 1303, 1278,
     1304, 1305, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1289, 1289, 1290, 1307,  898,

      898, 1308, 1278, 1309, 1310, 1311, 1311, 1312, 1313, 1312,
      910, 1314, 1278, 1315, 1316, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1318, 1318, 1319, 1320, 1319,  937, 1321, 1278,
     1322, 1323, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1325,
     1325, 1326, 1327, 1328, 1329, 1329, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,

     1330, 1302, 1302, 1326,  855, 1331, 1305, 1305, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1307, 1307, 1326,  898, 1332, 1310, 1310,
     1313, 1313, 1326,  910, 1333, 1316, 1316, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1320, 1320, 1326,  937, 1334, 1323, 1323, 1324, 1324, 1324,
     1324, 1324, 1324, 1328, 1328, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,

     1330, 1330, 1330, 1331, 1331, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1332, 1332, 1333, 1333,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1334, 1334, 1324, 1324, 1324, 1324, 1324, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1324,
     1324, 1324, 1324, 1330, 1330, 1330, 1330, 1330, 1330, 1330,

     1330, 1330, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1324,
     1324, 1330, 1330, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1317, 1317, 1317, 1317, 1317, 1330, 1306, 1306, 1306,
     1306, 1317, 1330, 1306, 1317, 1306,    0, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,

     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247
    } ;

static yyconst short int yy_nxt[8259] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1063,  160,  161,  180,  161,  160,
      160, 1043,  162,  160,  161,  179,  161,  160,  160,  261,
      162, 1036,  315,  181,  182,  137,  163,  137, 1004,  184,
      591,  137,  137,  267,  163,  137,  321,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166,  952,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  336,  186,  169,  173,  174,  180,
      368,  180,  763,  180,  591,  181,  182,  180,  342,  789,
      175,  187,  187,  180,  374,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181,  763,  761,  735,  181,
      182,  179,  189,  181,  190,  181,  735,  733,  325,  180,
      176,  177,  191,  169,  169,  184,  171,  169,  172,  169,
      368,  180,  169,  173,  174,  181,  182,  368,  368,  383,
      325,  724,  180,  368,  181,  181,  175,  181,  182,  384,
      724,  192,  195,  180,  193,  180,  722,  194,  181,  182,
      196,  197,  673,  198,  200,  180,  199,  180,  673,  181,
      182,  181,  182,  860,  201,  212,  176,  177,  673,  169,
      202,  181,  182,  181,  182,  203,  179,  204,  205,  180,
      213,  215,  180,  261,  206,  180,  207,  208,  724,  209,

      184,  671,  210,  903,  211,  181,  182,  267,  181,  182,
      216,  181,  182,  219,  220,  180,  261,  221,  180,  591,
      214,  222,  180,  588,  217,  395,  180,  223,  218,  262,
      267,  181,  182,  224,  181,  182,  263,  227,  181,  182,
      232,  228,  181,  182,  395,  264,  265,  225,  229,  230,
      180,  231,  732,  226,  233,  732,  315,  234,  180,  315,
      235,  180,  236,  330,  237,  330,  181,  182,  238,  180,
      321,  731,  239,  321,  181,  182,  336,  181,  182,  240,
      180,  730,  180,  249,  250,  181,  182,  253,  241,  180,
      342,  254,  252,  251,  587,  255,  181,  182,  181,  182,

      586,  400,  373,  401,  258,  181,  182,  256,  257,  336,
      259,  242,  341,  262,  243,  262,  268,  402,  260,  244,
      263,  245,  263,  342,  246,  368,  247,  248,  262,  264,
      265,  264,  265,  368,  269,  263,  262,  407,  545,  374,
      270,  544,  262,  263,  264,  265,  271,  374,  262,  263,
      543,  589,  264,  265,  272,  263,  264,  264,  264,  265,
      264,  492,  262,  542,  264,  273,  262,  320,  264,  263,
      264,  735,  180,  263,  262,  672,  913,  262,  264,  265,
      262,  263,  264,  265,  263,  406,  406,  263,  181,  182,
      264,  265,  282,  264,  265,  288,  264,  265,  274,  264,

      264,  262,  536,  262,  266,  183,  286,  335,  263,  287,
      263,  283,  546,  572,  284,  334,  723,  264,  265,  264,
      265,  285,  294,  275, 1247,  262,  734,  762,  406,  406,
      276,  277,  263,  278, 1247,  279,  280,  262,  281,  262,
     1247,  264,  265,  295,  263,  407,  263,  296,  180,  492,
      262, 1247, 1247,  264,  265,  264,  265,  263, 1247,  589,
      289,  262,  290,  672,  181,  188,  264,  265,  263,  297,
      291, 1247,  298,  312,  262,  292,  293,  264,  265,  536,
      300,  263,  262,  546, 1247,  262,  299, 1247,  262,  263,
      264,  265,  263,  723,  301,  263,  262,  734,  264,  265,

     1247,  264,  265,  263,  264,  265,  302, 1247,  304,  303,
      310,  305,  264,  265,  313,  572, 1247,  306,  307,  262,
      311,  316,  308,  309, 1247,  316,  263,  316,  317,  762,
      322,  314,  317,  316,  317,  264,  265,  318,  319,  323,
      317,  318,  319,  318,  319,  180, 1247, 1247,  409,  318,
      319,  324,  325,  324,  324,  324,  324, 1247,  316,  763,
      316,  181,  182,  316,  940,  317, 1247,  317,  326,  326,
      317,  316, 1247,  180,  318,  319,  318,  319,  317,  318,
      327,  318,  318, 1247, 1247,  318, 1247,  318,  319,  181,
      182,  180, 1247,  318, 1247,  318,  329,  330,  331,  331,

      329,  329,  328, 1247, 1247,  411,  332,  181,  182,  333,
      331,  330,  331,  331,  331,  331,  590,  417,  183,  590,
      332, 1247,  183,  333,  318,  318,  331,  330,  331,  331,
      331,  331, 1247,  337, 1247,  337,  332,  337,  343,  333,
      338,  337,  338,  344,  338, 1247, 1247,  180,  338,  339,
      340,  339,  340,  339,  340,  337, 1247,  339,  340,  337,
     1247,  337,  338,  181,  182, 1247,  338, 1247,  338, 1247,
     1247,  339,  340,  345, 1247,  339,  346,  339,  340,  339,
      339,  337,  368,  339, 1247,  337,  412,  337,  338,  368,
      368,  339,  338,  339,  338,  368,  180,  339,  340,  337,

     1247,  339,  340,  339,  340, 1247,  338, 1247, 1247, 1247,
     1247,  350,  181,  182, 1247,  339,  340,  347,  416,  348,
      337, 1247,  339,  339,  349,  337, 1247,  338,  337, 1247,
     1247,  351,  338,  337,  352,  338,  339,  340,  353, 1247,
      338,  339,  340,  368,  339,  340,  354,  337,  355,  339,
      340,  357,  368, 1247,  338,  358,  368,  944,  337,  368,
      367, 1247,  356,  339,  340,  338, 1247, 1247, 1247,  359,
     1247,  337, 1247,  337,  339,  340,  180,  361,  338,  337,
      338,  180,  410,  360,  369, 1247,  338,  339,  340,  339,
      340,  370,  181,  182, 1247,  339,  340,  181,  182,  364,

      371,  372,  369,  362,  369,  375,  363,  369, 1247,  370,
      376,  370,  365, 1247,  370,  369,  366, 1247,  371,  372,
      371,  372,  370,  371,  372,  371,  371,  369, 1247,  371,
     1247,  371,  377,  369,  370, 1247, 1247,  371,  369,  371,
      370, 1247, 1247,  371,  372,  370,  369, 1247, 1247,  371,
      372, 1247,  386,  370,  371,  372,  180,  381,  385,  369,
     1247, 1247,  371,  372,  369, 1247,  370,  180,  371,  371,
      369,  370,  181,  182,  387,  371,  372,  370, 1247,  388,
      371,  372,  413,  181,  182,  414,  371,  372,  415, 1247,
      369, 1247,  378,  381,  389,  369, 1247,  370,  180,  379,

      380,  369,  370, 1247,  381,  382,  371,  372,  370,  180,
     1247,  371,  372, 1247,  181,  182, 1247,  371,  372,  393,
      418,  590,  390, 1247,  590,  181,  182,  183,  391,  591,
      419,  392,  394,  395,  396,  396,  394,  394, 1247,  408,
      181,  181,  397,  783,  181,  398,  396,  395,  396,  396,
      396,  396,  181, 1247,  181, 1247,  397, 1247,  180,  398,
      396,  395,  396,  396,  396,  396,  187,  187,  181,  181,
      397,  180,  181,  398,  181,  182,  180, 1247,  180, 1247,
      181, 1247,  181,  181,  181, 1247, 1247,  181,  182,  180,
     1247,  180,  181,  182,  181,  182, 1247,  425,  424,  180,

      420,  421,  422,  180, 1247,  181,  182,  181,  182,  423,
      180,  181,  181,  180,  426,  181,  182, 1247,  180,  181,
      182,  427,  428, 1247,  180, 1247,  181,  182,  180,  181,
      182,  180,  430,  431,  181,  182,  433, 1247,  180,  429,
      181,  182,  180, 1247,  181,  182, 1247,  181,  182,  180,
      432, 1247,  180,  436,  181,  182,  434,  180,  181,  182,
     1247, 1247,  180,  435, 1247,  181,  182,  249,  181,  182,
      437,  180, 1247,  181,  182,  180, 1247,  438,  181,  182,
      439,  440,  180, 1247,  180, 1247, 1247,  181,  182,  441,
      180,  181,  182,  180, 1247,  180, 1247,  180,  181,  182,

      181,  182, 1247,  442, 1247,  180,  181,  182,  180,  181,
      182,  181,  182,  181,  182, 1247,  447,  180, 1247,  443,
      444,  181,  182,  445,  181,  182,  180, 1247, 1247,  180,
     1247,  446,  448,  181,  182,  180, 1247,  180,  450,  180,
      449,  180,  181,  182,  249,  181,  182,  180, 1247,  451,
      180,  181,  182,  181,  182,  181,  182,  181,  182, 1247,
     1247,  452,  180,  181,  182,  180,  181,  182,  180, 1247,
      180,  460, 1247,  453,  454, 1247,  455,  459,  181,  182,
      456,  181,  182,  180,  181,  182,  181,  182,  457, 1247,
     1247,  461,  180, 1247,  458,  180, 1247, 1247,  180,  181,

      182,  180, 1247, 1247,  463,  462,  467, 1247,  181,  182,
      180,  181,  182,  469,  181,  182, 1247,  181,  182,  464,
      180,  468,  465,  466,  470, 1247,  181,  182, 1247, 1247,
      472,  180,  471,  473, 1247,  180,  181,  182, 1247,  180,
     1247,  180,  475,  180, 1247,  474,  180,  181,  182,  476,
      180,  181,  182,  477,  478,  181,  182,  181,  182,  181,
      182,  481,  181,  182,  180,  479,  181,  182, 1247, 1247,
      180,  480,  482,  180, 1247, 1247,  590,  180,  266,  590,
      181,  182,  266, 1247,  180,  483,  181,  182, 1247,  181,
      182,  180,  485,  181,  182,  486,  180,  489, 1247,  484,

      181,  182,  490,  262, 1247,  487, 1247,  181,  182,  262,
      263, 1247,  181,  182,  488,  262,  263, 1247, 1247,  264,
      265, 1247,  263, 1247, 1247,  264,  265,  491,  493,  264,
      264,  264,  273,  264, 1247,  262, 1247,  262,  494,  262,
     1247,  264,  263,  264,  263,  495,  263,  180, 1247, 1247,
      262,  264,  265,  264,  265,  264,  265,  263,  262, 1247,
     1247, 1247,  262,  181,  182,  263,  264,  265, 1247,  263,
     1247, 1247,  264,  264,  264,  265,  264,  264,  264,  265,
      264, 1247, 1247, 1247,  262, 1247,  262, 1247,  264,  262,
      264,  263, 1247,  263, 1247,  180,  263, 1247,  496, 1247,

      264,  265,  264,  265,  497,  264,  265,  262,  498,  262,
     1247,  181,  182, 1247,  263,  262,  263, 1247,  279,  264,
      264, 1247,  263,  264,  265,  264,  265, 1247, 1247,  262,
      596,  264,  265,  262, 1247,  262,  263,  499,  500, 1247,
      263,  262,  263, 1247,  501,  264,  265,  262,  263,  264,
      265,  264,  265, 1247,  263,  262,  504,  264,  265,  262,
     1247,  502,  263,  264,  265, 1247,  263, 1247, 1247, 1247,
      503,  264,  265, 1247, 1247,  264,  265, 1247,  262, 1247,
      262, 1247,  262, 1247,  505,  263,  262,  263,  509,  263,
      506,  507,  510,  263,  264,  265,  264,  265,  264,  265,

      262, 1247,  264,  265,  511,  262,  512,  263,  590, 1247,
      320,  590,  263,  262,  320,  508,  264,  265,  262, 1247,
      263,  264,  265, 1247,  262,  263,  262,  513, 1247,  264,
      265,  263,  262,  263,  264,  265, 1247,  515, 1247,  263,
      264,  265,  264,  265,  261,  514,  261,  517,  264,  265,
      262, 1247, 1247,  518,  261,  516,  521,  263,  262,  519,
      520, 1247,  262, 1247,  523,  263,  264,  265,  180,  263,
     1247, 1247, 1247,  262,  264,  265,  262,  522,  264,  265,
      263,  262, 1247,  263,  181,  182,  598, 1247,  263,  264,
      265,  525,  264,  265,  524,  526,  262,  264,  265,  262,

      528,  262, 1247,  263, 1247,  527,  263,  262,  263, 1247,
     1247, 1247,  264,  265,  263,  264,  265,  264,  265, 1247,
     1247,  530,  262,  264,  265,  262,  532,  262, 1247,  263,
      262,  529,  263,  262,  263, 1247,  531,  263,  264,  265,
      263,  264,  265,  264,  265,  316,  264,  265, 1247,  264,
      265,  316,  317,  534, 1247, 1247,  316,  533,  317, 1247,
     1247,  318,  319,  317, 1247,  535, 1247,  318,  319,  537,
      318,  318,  318,  327,  318, 1247,  316,  318,  318,  538,
      316,  318,  318,  317,  318, 1247,  539,  317,  316,  318,
     1247,  318,  318,  319, 1247,  317,  318,  319,  324,  325,

      324,  324,  324,  324,  318,  319, 1247,  180,  540,  316,
     1247,  541, 1247,  318,  318, 1247,  317,  326,  326, 1247,
      318,  318, 1247,  181,  182,  318,  319,  329,  330,  331,
      331,  329,  329,  597,  547,  339,  339,  332, 1247,  339,
      333,  331,  330,  331,  331,  331,  331,  339,  337,  339,
      337,  332,  337, 1247,  333,  338, 1247,  338, 1247,  338,
     1247, 1247, 1247, 1247,  339,  340,  339,  340,  339,  346,
      337, 1247, 1247,  548,  337, 1247,  337,  338,  339,  339,
      549,  338, 1247,  338,  339,  339,  339,  340,  339, 1247,
      339,  340,  339,  340,  337, 1247,  339,  337,  339,  337,

     1247,  338,  337, 1247,  338,  337,  338,  180, 1247,  338,
      339,  340,  338,  339,  340,  339,  340, 1247,  339,  340,
     1247,  339,  340,  181,  182, 1247,  180,  339,  339,  553,
      550,  337,  551,  552,  337, 1247,  554,  337,  338,  337,
      555,  338,  181,  182,  338, 1247,  338,  339,  340,  558,
      339,  340,  337,  339,  340,  339,  340, 1247, 1247,  338,
      337,  559, 1247,  556, 1247,  337, 1247,  338,  339,  340,
      180,  557,  338,  337,  560, 1247,  339,  340,  337, 1247,
      338,  339,  340, 1247,  337,  338,  181,  182,  562,  339,
      340,  338, 1247, 1247,  339,  340, 1247,  561,  337, 1247,

      339,  340,  558,  563,  180,  338,  337, 1247, 1247,  564,
      565,  566,  599,  338,  339,  340, 1247,  337, 1247, 1247,
      181,  182,  339,  340,  338, 1247, 1247,  567,  568,  337,
     1247,  337, 1247,  339,  340,  609,  338,  337,  338, 1247,
     1247,  569,  369, 1247,  338,  339,  340,  339,  340,  370,
     1247,  570,  180,  339,  340,  369, 1247,  369,  371,  372,
     1247, 1247,  370, 1247,  370, 1247,  571,  180,  181,  182,
      600,  371,  372,  371,  377,  573,  371,  371,  369, 1247,
      371,  574, 1247,  181,  182,  370,  369, 1247,  371, 1247,
      371, 1247,  575,  370,  371,  372,  371,  371,  369,  603,

      371, 1247,  371,  372, 1247,  370,  369, 1247,  371, 1247,
      371,  369, 1247,  370,  371,  372,  576,  369,  370,  371,
      371, 1247,  371,  372,  370,  381, 1247,  371,  372, 1247,
     1247,  369, 1247,  371,  372, 1247, 1247,  369,  370,  371,
      371, 1247,  369, 1247,  370, 1247,  381,  371,  372,  370,
      369, 1247,  577,  371,  372, 1247,  369,  370,  371,  372,
     1247,  369,  579,  370, 1247, 1247,  371,  372,  370,  369,
     1247, 1247,  371,  372,  578, 1247,  370,  371,  372, 1247,
      580, 1247,  381,  369, 1247,  371,  372,  369, 1247, 1247,
      370,  369, 1247, 1247,  370,  369, 1247,  381,  370,  371,

      372,  581,  370,  371,  372, 1247,  583,  371,  372, 1247,
      180,  371,  372, 1247, 1247, 1247, 1247,  584,  582,  394,
      395,  396,  396,  394,  394,  180,  181,  182, 1247,  397,
      585, 1247,  398,  396,  395,  396,  396,  396,  396,  601,
     1247,  181,  182,  397, 1247,  180,  398,  590,  180, 1247,
      590, 1247, 1247, 1247, 1247,  592,  590,  590,  613,  180,
      590,  181,  182,  602,  181,  182,  180,  593,  590,  180,
      590,  594,  595,  180, 1247,  181,  182,  180,  604,  606,
      607,  605,  181,  182, 1247,  181,  182,  610, 1247,  181,
      182, 1247, 1247,  181,  182,  612,  608, 1247, 1247,  590,

      590,  590,  180, 1247,  590, 1247, 1247,  611, 1247,  592,
      590,  590,  180, 1247,  590,  180, 1247,  180,  181,  182,
      180,  593,  590, 1247,  590,  594,  595, 1247,  181,  182,
      180,  181,  182,  181,  182, 1247,  181,  182, 1247,  616,
     1247, 1247,  180, 1247,  615,  180,  181,  182,  180, 1247,
      180,  249,  614,  590,  590, 1247, 1247,  617,  181,  182,
      180,  181,  182, 1247,  181,  182,  181,  182, 1247, 1247,
      180, 1247,  618,  180, 1247, 1247,  181,  182, 1247,  621,
      180,  620,  623,  180, 1247,  619,  181,  182,  180,  181,
      182,  622,  180, 1247,  624,  180,  181,  182,  180,  181,

      182, 1247, 1247,  626,  181,  182,  180, 1247,  181,  182,
      180,  181,  182,  625,  181,  182,  180, 1247,  628, 1247,
     1247,  180,  181,  182,  627, 1247,  181,  182,  180, 1247,
      180, 1247,  181,  182,  180,  632,  629,  181,  182, 1247,
      631,  630,  180, 1247,  181,  182,  181,  182,  180,  633,
      181,  182, 1247, 1247, 1247,  180,  634,  180,  181,  182,
      180, 1247,  180, 1247,  181,  182,  180,  636, 1247,  637,
      635,  181,  182,  181,  182,  180,  181,  182,  181,  182,
      639,  180,  181,  182, 1247,  641,  638, 1247,  180, 1247,
      180,  181,  182,  180,  640, 1247, 1247,  181,  182,  180,

     1247,  643, 1247,  642,  181,  182,  181,  182,  180,  181,
      182, 1247,  646, 1247, 1247,  181,  182,  180, 1247,  644,
      180, 1247,  180, 1247,  181,  182,  645,  180,  647,  180,
      648,  180, 1247,  181,  182, 1247,  181,  182,  181,  182,
      180, 1247,  650,  181,  182,  181,  182,  181,  182,  180,
      249, 1247,  649, 1247,  180, 1247,  181,  182,  180, 1247,
      180, 1247,  180, 1247, 1247,  181,  182,  651,  652, 1247,
      181,  182, 1247, 1247,  181,  182,  181,  182,  181,  182,
      653,  180, 1247,  180,  658, 1247,  654,  655,  659, 1247,
      657,  180, 1247,  180,  656, 1247, 1247,  181,  182,  181,

      182,  660,  180, 1247,  180, 1247,  661,  181,  182,  181,
      182, 1247,  663, 1247,  180, 1247,  180, 1247,  181,  182,
      181,  182, 1247,  590, 1247,  341,  590,  662,  180,  341,
      181,  182,  181,  182,  180, 1247,  180, 1247, 1247,  665,
      262,  667,  664,  666,  181,  182, 1247,  263,  262, 1247,
      181,  182,  181,  182, 1247,  263,  264,  265, 1247,  668,
     1247,  262,  670, 1247,  264,  265, 1247,  262,  263, 1247,
     1247,  669,  590,  180,  263,  590, 1247,  264,  265, 1247,
      674,  590,  590,  264,  265,  590, 1247,  675, 1247,  181,
      182,  262,  676,  590, 1247,  590,  677,  678,  263,  679,

     1247,  261,  262,  682, 1247,  262, 1247,  264,  265,  263,
      792,  261,  263, 1247,  180, 1247,  683,  261,  264,  265,
     1247,  264,  265, 1247,  590,  590,  590,  680, 1247,  590,
      181,  182,  681, 1247,  674,  590,  590,  262, 1247,  590,
      684,  675,  180, 1247,  263,  262,  676,  590, 1247,  590,
      677,  678,  263,  264,  265,  261, 1247,  686,  181,  182,
     1247,  264,  265, 1247,  514,  261,  687,  691,  262, 1247,
      688,  689,  180,  690,  685,  263,  262,  797,  590,  590,
      262, 1247, 1247,  263,  264,  265, 1247,  263,  181,  182,
     1247, 1247,  264,  265, 1247,  262,  264,  265,  692, 1247,

      262, 1247,  263, 1247, 1247,  695,  693,  263,  262,  796,
      180,  264,  265, 1247,  262,  263,  264,  265, 1247,  694,
      696,  263, 1247, 1247,  264,  265,  181,  182,  262, 1247,
      264,  265, 1247,  262, 1247,  263,  180, 1247,  697,  698,
      263, 1247, 1247,  699,  264,  265,  793, 1247,  262,  264,
      265,  262,  181,  182,  590,  263,  373,  590,  263,  262,
      373, 1247,  262,  700,  264,  265,  263,  264,  265,  263,
      701,  180,  794,  702,  262,  264,  265, 1247,  264,  265,
     1247,  263,  262, 1247, 1247,  262, 1247,  181,  182,  263,
      264,  265,  263, 1247,  704, 1247,  703,  262,  264,  265,

      706,  264,  265, 1247,  263, 1247,  798, 1247,  262, 1247,
      705,  262, 1247,  264,  265,  263, 1247, 1247,  263,  708,
     1247,  707,  262, 1247,  264,  265, 1247,  264,  265,  263,
      262, 1247, 1247,  709, 1247,  262, 1247,  263,  264,  265,
     1247,  262,  263, 1247, 1247, 1247,  264,  265,  263, 1247,
      711,  264,  265,  262, 1247, 1247, 1247,  264,  265, 1247,
      263,  262, 1247, 1247,  710, 1247,  713,  262,  263,  264,
      265, 1247,  712, 1247,  263,  262, 1247,  264,  265, 1247,
      262,  715,  263,  264,  265,  716,  262,  263, 1247, 1247,
      714,  264,  265,  263, 1247,  717,  264,  265,  262, 1247,

     1247, 1247,  264,  265, 1247,  263,  316, 1247, 1247,  337,
      719,  718,  337,  317,  264,  265,  338,  720, 1247,  338,
      337, 1247,  318,  319,  337,  339,  340,  338,  339,  340,
     1247,  338, 1247, 1247,  721,  590,  339,  340,  590, 1247,
      339,  340,  742,  725,  590,  590,  337, 1247,  590,  180,
      726, 1247,  741,  338,  746,  727,  590,  337,  590,  728,
      729,  337,  339,  340,  338,  181,  182,  799,  338,  743,
     1247, 1247, 1247,  339,  340, 1247, 1247,  339,  340, 1247,
     1247, 1247,  744, 1247,  337, 1247, 1247,  590,  590,  590,
      180,  338,  590, 1247,  745, 1247,  558,  725,  590,  590,

      339,  340,  590, 1247,  726,  180,  181,  182,  337,  727,
      590, 1247,  590,  728,  729,  338, 1247, 1247,  795,  337,
     1247,  181,  182,  337,  339,  340,  338,  747, 1247,  807,
      338,  337, 1247,  748, 1247,  339,  340, 1247,  338,  339,
      340,  590,  590,  590, 1247,  752,  590,  339,  340, 1247,
     1247,  736,  590,  590, 1247, 1247,  590, 1247,  737, 1247,
     1247,  749,  750,  738,  590,  337,  590,  739,  740,  337,
     1247,  337,  338,  337, 1247,  180,  338,  337,  338, 1247,
      338,  339,  340, 1247,  338,  339,  340,  339,  340,  339,
      340,  181,  182,  339,  340,  590,  590,  590, 1247,  755,

      590,  803,  558,  558,  751,  736,  590,  590,  337,  753,
      590, 1247,  737, 1247,  180,  338,  337,  738,  590, 1247,
      590,  739,  740,  338,  339,  340,  754,  337, 1247,  337,
      181,  182,  339,  340,  338,  337,  338, 1247, 1247, 1247,
      804, 1247,  338,  339,  340,  339,  340,  757,  180,  590,
      590,  339,  340,  337,  758,  759,  369, 1247,  756,  369,
      338, 1247,  180,  370,  181,  182,  370, 1247, 1247,  339,
      340,  760,  371,  372,  590,  371,  372,  590,  181,  182,
     1247,  775,  764,  590,  590,  369,  806,  590,  180,  765,
     1247,  808,  370,  369,  766,  590,  369,  590,  767,  768,

      370,  371,  372,  370,  181,  182, 1247,  369, 1247,  371,
      372, 1247,  371,  372,  370, 1247, 1247, 1247,  369, 1247,
     1247,  769,  776,  371,  372,  370,  590,  590,  590, 1247,
     1247,  590,  381, 1247,  371,  372,  764,  590,  590, 1247,
      369,  590, 1247,  765,  777, 1247,  180,  370,  766,  590,
      180,  590,  767,  768,  369,  778,  371,  372,  369, 1247,
      779,  370,  181,  182, 1247,  370,  181,  182, 1247, 1247,
      371,  372,  800, 1247,  371,  372,  780, 1247,  801,  180,
      590,  590,  369, 1247, 1247,  781,  180,  805, 1247,  370,
     1247,  180, 1247,  180,  381,  181,  182, 1247,  371,  372,

      180,  802,  181,  182, 1247,  770, 1247,  181,  182,  181,
      182,  180,  771, 1247,  772, 1247,  181,  182,  773,  774,
     1247,  771,  784,  180,  810,  784,  809,  181,  182,  817,
      786,  784,  784,  180, 1247,  784,  180,  812, 1247,  181,
      182,  813,  811,  784, 1247,  784,  787,  788,  180,  181,
      182, 1247,  181,  182,  180, 1247,  180,  784, 1247,  183,
      784,  815, 1247,  183,  181,  182,  180, 1247,  814, 1247,
      181,  182,  181,  182,  784,  784,  590,  818,  180,  590,
     1247, 1247,  181,  182,  791,  594,  594, 1247,  180,  594,
      180, 1247,  816,  180,  181,  182,  180,  594,  180,  594,

      590,  590,  180,  819,  181,  182,  181,  182, 1247,  181,
      182, 1247,  181,  182,  181,  182,  820,  180,  181,  182,
      823,  180,  821, 1247,  180, 1247,  180, 1247,  594,  594,
      822,  180, 1247,  181,  182, 1247, 1247,  181,  182,  824,
      181,  182,  181,  182,  180, 1247,  826,  181,  182,  180,
     1247,  180,  825,  180, 1247,  180, 1247, 1247, 1247, 1247,
      181,  182,  180, 1247, 1247,  181,  182,  181,  182,  181,
      182,  181,  182,  829,  830,  828,  180, 1247,  181,  182,
     1247,  827,  180, 1247,  180, 1247, 1247,  180, 1247,  180,
     1247,  180,  181,  182,  831, 1247,  832, 1247,  181,  182,

      181,  182,  834,  181,  182,  181,  182,  181,  182, 1247,
      180,  836,  833,  835, 1247,  180, 1247,  180, 1247,  180,
     1247,  180, 1247,  180, 1247,  467,  181,  182,  180, 1247,
      837,  181,  182,  181,  182,  181,  182,  181,  182,  181,
      182, 1247,  180, 1247,  181,  182,  180, 1247, 1247, 1247,
      180, 1247,  180,  838,  839,  180, 1247,  840,  181,  182,
      842,  180,  181,  182, 1247,  841,  181,  182,  181,  182,
      180,  181,  182,  180,  844, 1247,  180,  181,  182,  180,
     1247,  843, 1247,  180, 1247, 1247,  181,  182,  180,  181,
      182,  180,  181,  182, 1247,  181,  182,  845,  848,  181,

      182,  849,  846,  180,  181,  182,  850,  181,  182,  847,
      590,  851, 1247,  590,  262, 1247,  266, 1247,  673,  181,
      182,  263,  262, 1247, 1247, 1247,  852, 1247,  262,  263,
      264,  265,  854,  784,  863,  263,  784, 1247,  264,  265,
     1247,  856,  784,  784,  264,  265,  784,  590,  857,  588,
      590, 1247,  262,  588,  784,  262,  784,  858,  859,  263,
      865, 1247,  263,  262,  864, 1247,  262, 1247,  264,  265,
      263,  264,  265,  263, 1247, 1247, 1247,  262,  866,  264,
      265, 1247,  264,  265,  263,  784,  784,  590,  180, 1247,
      590, 1247,  867,  264,  265,  862,  677,  677,  868,  262,

      677, 1247,  262, 1247,  181,  182,  263,  514,  677,  263,
      677,  590,  590, 1247,  869,  264,  265,  262,  264,  265,
      262, 1247, 1247, 1247,  263, 1247, 1247,  263,  262,  514,
     1247,  262,  514,  264,  265,  263,  264,  265,  263,  677,
      677, 1247,  514, 1247,  264,  265,  262,  264,  265,  871,
      262, 1247,  180,  263,  262, 1247, 1247,  263,  262,  870,
     1247,  263,  264,  265, 1247,  263,  264,  265,  181,  182,
      264,  265,  872,  960,  264,  265,  873,  262, 1247,  262,
     1247,  262, 1247,  180,  263,  262,  263, 1247,  263, 1247,
      874, 1247,  263,  264,  265,  264,  265,  264,  265,  181,

      182,  264,  265,  878,  262,  959,  262, 1247,  262, 1247,
      875,  263, 1247,  263,  180,  263,  876, 1247, 1247,  877,
      264,  265,  264,  265,  264,  265, 1247,  262, 1247,  262,
      181,  182,  262,  879,  263,  262,  263, 1247, 1247,  263,
      961, 1247,  263,  264,  265,  264,  265,  880,  264,  265,
      881,  264,  265,  262, 1247,  262,  882, 1247,  262, 1247,
      263,  262,  263, 1247,  180,  263, 1247, 1247,  263,  264,
      265,  264,  265,  883,  264,  265, 1247,  264,  265,  262,
      181,  182,  262,  886, 1247, 1247,  263,  884,  885,  263,
      262, 1247, 1247,  262, 1247,  264,  265,  263,  264,  265,

      263,  887, 1247, 1247,  262, 1247,  264,  265,  262,  264,
      265,  263,  180, 1247, 1247,  263,  262, 1247, 1247,  888,
      264,  265,  892,  263,  264,  265,  889, 1247,  181,  182,
      890, 1247,  264,  265,  262, 1247,  262, 1247, 1247,  262,
      894,  263, 1247,  263, 1247,  891,  263, 1247,  893, 1247,
      264,  265,  264,  265, 1247,  264,  265, 1247,  590, 1247,
      895,  590,  337, 1247,  320,  590,  724, 1247,  590,  338,
     1247,  341, 1247,  735, 1247, 1247,  337, 1247,  339,  340,
      897,  784,  916,  338,  784, 1247, 1247,  907, 1247,  899,
      784,  784,  339,  340,  784,  784,  900,  266,  784, 1247,

      337,  266,  784,  337,  784,  901,  902,  338,  180, 1247,
      338,  337, 1247, 1247,  917,  337,  339,  340,  338,  339,
      340, 1247,  338, 1247,  181,  182,  918,  339,  340,  920,
     1247,  339,  340,  784,  784,  590, 1247, 1247,  590,  962,
      919, 1247, 1247,  905,  728,  728,  337,  558,  728,  590,
      337,  671,  590,  338,  337,  671,  728,  338,  728,  590,
      590,  338,  339,  340, 1247, 1247,  339,  340,  921,  337,
      339,  340,  922, 1247,  337,  927,  338,  337, 1247, 1247,
     1247,  338, 1247, 1247,  338,  339,  340,  728,  728,  784,
      339,  340,  784,  339,  340,  925, 1247,  909,  784,  784,

     1247, 1247,  784,  180,  910,  180,  924,  923,  337, 1247,
      784,  337,  784,  911,  912,  338,  337, 1247,  338,  181,
      182,  181,  182,  338,  339,  340, 1247,  339,  340,  926,
     1247,  337,  339,  340,  963, 1247,  928, 1247,  338, 1247,
      966,  784,  784,  590, 1247, 1247,  590,  339,  340,  558,
     1247,  915,  739,  739, 1247,  337,  739, 1247,  337, 1247,
     1247,  929,  338,  337,  739,  338,  739,  590,  590,  337,
      338,  339,  340,  180,  339,  340,  338,  930, 1247,  339,
      340, 1247, 1247, 1247,  931,  339,  340, 1247, 1247,  181,
      182,  590, 1247, 1247,  590,  739,  739,  373, 1247,  763,

      558, 1247,  369, 1247,  369, 1247,  932, 1247, 1247,  370,
     1247,  370, 1247,  934,  784, 1247, 1247,  784,  371,  372,
      371,  372,  936,  784,  784,  369, 1247,  784,  784,  937,
      320,  784,  370, 1247,  320,  784, 1247,  784,  938,  939,
      943,  371,  372,  369, 1247,  369, 1247,  369, 1247, 1247,
      370, 1247,  370, 1247,  370,  771, 1247, 1247,  369,  371,
      372,  371,  372,  371,  372,  370,  784,  784,  590, 1247,
      771,  590, 1247,  771,  371,  372,  942,  767,  767,  369,
      947,  767, 1247,  369, 1247,  946,  370,  369, 1247,  767,
      370,  767,  590,  590,  370,  371,  372, 1247,  369,  371,

      372,  369, 1247,  371,  372,  370, 1247, 1247,  370, 1247,
      945,  180, 1247, 1247,  371,  372,  948,  371,  372,  381,
      767,  767, 1247,  590, 1247,  381,  590,  181,  182,  183,
      949,  591, 1247, 1247, 1247,  784,  594,  594,  784, 1247,
      594,  183,  964,  785, 1247,  783,  784, 1247,  594,  784,
      594, 1247, 1247, 1247,  786,  784,  784,  951,  180,  784,
      590,  180, 1247,  590, 1247, 1247,  588,  784,  790,  784,
      787,  788, 1247,  180,  181,  182,  965,  181,  182,  594,
      594, 1247,  956,  957, 1247,  180, 1247, 1247, 1247,  181,
      182, 1247, 1247,  958, 1247,  180, 1247, 1247,  784,  784,

      784,  181,  182,  784,  967,  968, 1247, 1247,  954,  787,
      787,  181,  182,  787,  180, 1247,  180, 1247,  180, 1247,
     1247,  787, 1247,  787,  784,  784, 1247,  180, 1247,  180,
      181,  182,  181,  182,  181,  182,  969, 1247,  180,  971,
      180, 1247,  970,  181,  182,  181,  182,  180,  972, 1247,
     1247,  973,  787,  787,  181,  182,  181,  182, 1247, 1247,
      180, 1247,  180,  181,  182, 1247,  975,  180, 1247,  180,
     1247,  180, 1247,  180, 1247,  974,  181,  182,  181,  182,
      180,  976,  180,  181,  182,  181,  182,  181,  182,  181,
      182,  180, 1247,  180, 1247,  979,  181,  182,  181,  182,

      180, 1247,  180,  977, 1247,  180, 1247,  181,  182,  181,
      182,  981,  978, 1247, 1247,  180,  181,  182,  181,  182,
      980,  181,  182,  180, 1247,  180,  982,  180, 1247,  983,
      984,  181,  182, 1247,  985,  986,  180, 1247,  180,  181,
      182,  181,  182,  181,  182,  180, 1247,  180, 1247,  988,
     1247, 1247,  181,  182,  181,  182,  987,  180,  989,  180,
     1247,  181,  182,  181,  182, 1247, 1247,  990, 1247,  180,
     1247,  180,  992,  181,  182,  181,  182, 1247, 1247, 1247,
      180, 1247,  991,  180, 1247,  181,  182,  181,  182, 1247,
     1247,  180, 1247,  180,  993,  994,  181,  182, 1247,  181,

      182, 1247, 1247,  180, 1247,  180,  995,  181,  182,  181,
      182,  180, 1247,  180, 1247,  997,  180, 1247,  996,  181,
      182,  181,  182,  180, 1247, 1247,  180,  181,  182,  181,
      182,  180,  181,  182, 1247, 1247, 1247, 1247, 1247,  181,
      182,  998,  181,  182, 1247, 1247,  590,  181,  182,  590,
     1247, 1000,  266,  784,  673,  262,  784,  590,  999,  266,
      590,  855,  263,  671, 1247,  861,  677,  677,  854,  262,
      677,  264,  265, 1001,  784, 1003,  263,  784,  677, 1008,
      677, 1009,  856,  784,  784,  264,  265,  784,  590,  857,
      722,  590, 1247, 1247,  722,  784,  262,  784,  858,  859,

      262, 1247, 1247,  263,  262, 1247,  180,  263, 1247,  677,
      677,  263,  264,  265, 1247, 1247,  264,  265,  262, 1247,
      264,  265,  181,  182, 1011,  263,  784,  784,  784,  180,
     1247,  784, 1247, 1010,  264,  265, 1006,  858,  858, 1012,
      262,  858, 1247,  262, 1247,  181,  182,  263, 1247,  858,
      263,  858,  784,  784, 1247,  262,  264,  265, 1082,  264,
      265,  262,  263, 1247, 1013,  514, 1247,  262,  263, 1247,
     1247,  264,  265,  784,  263,  341,  784,  264,  265,  341,
      858,  858,  590,  264,  265,  590, 1015, 1247, 1247, 1247,
      674,  590,  590,  262, 1247,  590, 1247,  675, 1014, 1247,

      263,  262, 1016,  590,  262,  590,  677,  678,  263,  264,
      265,  263,  262, 1247, 1247,  262, 1247,  264,  265,  263,
      264,  265,  263, 1247, 1247, 1017, 1247, 1247,  264,  265,
     1019,  264,  265, 1018,  590,  590, 1020,  262, 1247,  262,
     1247,  262, 1247,  262,  263, 1247,  263, 1247,  263, 1021,
      263, 1247, 1247,  264,  265,  264,  265,  264,  265,  264,
      265, 1023,  262, 1247,  262, 1022,  262, 1247,  262,  263,
      262,  263, 1247,  263, 1247,  263, 1247,  263,  264,  265,
      264,  265,  264,  265,  264,  265,  264,  265,  262, 1027,
     1028, 1247, 1247,  262, 1247,  263, 1025, 1247, 1026, 1024,

      263,  262, 1247, 1247,  264,  265,  262, 1247,  263,  264,
      265, 1247, 1247,  263,  262, 1247, 1247,  264,  265, 1029,
      262,  263,  264,  265, 1247, 1247,  262,  263, 1030, 1247,
      264,  265, 1031,  263, 1247, 1247,  264,  265,  590, 1247,
      262,  590,  264,  265,  320, 1247,  724,  263, 1247, 1247,
     1247, 1033, 1247, 1247, 1247, 1032,  264,  265, 1247,  784,
      897,  784,  784, 1247,  784,  320, 1247,  898, 1247,  899,
      784,  784,  590, 1247,  784,  590,  900, 1247,  722, 1247,
      904, 1035,  784, 1247,  784,  901,  902,  728,  728,  590,
      784,  728,  590,  784, 1040,  341,  341,  735,  908,  728,

     1247,  728, 1247, 1247,  180,  739,  739, 1247, 1247,  739,
     1247,  907, 1042,  784,  784,  784, 1247,  739,  784,  739,
      181,  182, 1247, 1038,  901,  901,  337, 1247,  901,  590,
      728,  728,  590,  338, 1247,  733,  901,  914,  901,  784,
      784, 1087,  339,  340, 1247, 1247,  337, 1247,  739,  739,
     1247, 1047, 1048,  338,  337, 1247, 1247,  337, 1247,  337,
     1247,  338,  339,  340,  338, 1247,  338,  901,  901,  590,
      339,  340,  590,  339,  340,  339,  340,  725,  590,  590,
     1247, 1050,  590, 1049,  726, 1247,  180, 1247,  337, 1051,
      590,  337,  590,  728,  729,  338,  558, 1247,  338,  337,

     1247, 1247,  181,  182,  339,  340,  338,  339,  340, 1247,
     1247,  337, 1083,  337, 1247,  339,  340, 1053,  338,  558,
      338,  590,  590,  784,  180, 1247,  784,  339,  340,  339,
      340,  909,  784,  784,  558,  337,  784, 1247,  910, 1247,
      181,  182,  338, 1052,  784, 1247,  784,  911,  912,  337,
     1054,  339,  340, 1247,  337, 1247,  338,  337, 1247, 1055,
     1077,  338,  337, 1247,  338,  339,  340, 1056, 1247,  338,
      339,  340, 1247,  339,  340,  784,  784,  784,  339,  340,
      784, 1247, 1247, 1058, 1247,  909,  784,  784,  337, 1057,
      784,  558,  910,  180, 1247,  338,  337, 1247,  784, 1247,

      784,  911,  912,  338,  339,  340, 1059, 1247,  369,  181,
      182,  590,  339,  340,  590,  370, 1247,  373, 1060,  763,
      784,  180, 1247,  784,  371,  372,  373, 1247,  935,  784,
      784,  784, 1247,  934,  784, 1247, 1247,  181,  182, 1045,
      911,  911, 1062, 1073,  911,  590,  767,  767,  590, 1247,
      767,  761,  911,  941,  911,  784,  784,  369,  767,  369,
      767,  369, 1247, 1247,  370,  180,  370, 1067,  370, 1247,
     1247, 1247, 1247,  371,  372,  371,  372,  371,  372, 1068,
     1069,  181,  182,  911,  911,  590,  771, 1247,  590,  767,
      767, 1247, 1247,  736,  590,  590,  369, 1078,  590, 1247,

      737, 1247,  180,  370,  369, 1247,  590, 1247,  590,  739,
      740,  370,  371,  372, 1247,  369, 1247, 1070,  181,  182,
      371,  372,  370,  419, 1071, 1247, 1247, 1247,  180, 1247,
     1247,  371,  372, 1072, 1247, 1247, 1247,  590,  590,  784,
     1247, 1247,  784, 1247,  181,  182, 1247,  936,  784,  784,
      784, 1247,  784,  784,  937, 1247,  183, 1247,  785, 1079,
      784, 1247,  784,  938,  939,  784,  787,  787,  784,  180,
      787,  588,  951,  953, 1247, 1247,  590, 1247,  787,  590,
      787, 1247,  588,  180,  790,  181,  182, 1075, 1247, 1247,
     1247,  784,  784,  784, 1247,  180,  784, 1247,  956,  181,

      182,  936,  784,  784, 1076, 1080,  784,  180,  937,  787,
      787,  181,  182, 1247,  784,  180,  784,  938,  939,  180,
     1247, 1247,  784,  181,  182,  784,  180, 1247,  266, 1081,
      855,  181,  182, 1084, 1247,  181,  182, 1085, 1247, 1086,
     1247, 1247,  181,  182, 1003,  784,  784,  784, 1088,  180,
      784, 1247, 1247, 1247, 1247, 1065,  938,  938,  180, 1247,
      938,  180, 1247, 1247, 1247,  181,  182, 1247,  938,  180,
      938,  784,  784,  180,  181,  182,  180,  181,  182, 1247,
     1089,  180, 1247, 1091, 1247,  181,  182, 1247, 1247,  181,
      182,  180,  181,  182, 1247, 1090, 1247,  181,  182,  938,

      938,  590,  180, 1247,  590, 1247, 1247,  181,  182,  764,
      590,  590, 1092,  180,  590,  180,  765, 1093,  181,  182,
      180, 1247,  590, 1247,  590,  767,  768,  180, 1247,  181,
      182,  181,  182,  180, 1247,  180,  181,  182, 1247, 1247,
     1094, 1247, 1095,  181,  182, 1097, 1247, 1247, 1247,  181,
      182,  181,  182,  590,  590,  784,  180, 1247,  784, 1247,
     1247, 1247, 1247,  786,  784,  784,  180, 1247,  784,  180,
     1096,  180,  181,  182, 1247, 1247,  784,  180,  784,  787,
      788,  180,  181,  182,  180,  181,  182,  181,  182,  180,
     1247, 1098, 1247,  181,  182,  180, 1247,  181,  182,  180,

      181,  182, 1247,  180, 1247,  181,  182,  784,  784, 1247,
      180,  181,  182,  180, 1247,  181,  182, 1247, 1099,  181,
      182, 1100, 1247, 1247, 1247, 1102,  181,  182, 1247,  181,
      182, 1101,  858,  858, 1103,  784,  858,  180,  784,  590,
     1247,  671,  590, 1005,  858,  671,  858,  861,  262, 1247,
     1247,  262, 1247,  181,  182,  263,  262, 1105,  263, 1247,
     1247, 1008,  180,  263,  264,  265, 1106,  264,  265, 1107,
      262, 1247,  264,  265,  262,  858,  858,  263,  181,  182,
     1247,  263,  262, 1247, 1247,  262,  264,  265,  262,  263,
      264,  265,  263, 1247, 1108,  263,  262, 1247,  264,  265,

     1110,  264,  265,  263,  264,  265, 1247, 1247, 1109,  262,
     1247,  262,  264,  265,  262, 1247,  263,  590,  263,  733,
      590,  263,  262,  733, 1111,  264,  265,  264,  265,  263,
      264,  265, 1247, 1247,  262, 1247,  262, 1247,  264,  265,
     1114,  263,  262,  263, 1115, 1247, 1112,  262, 1113,  263,
      264,  265,  264,  265,  263,  262, 1116, 1247,  264,  265,
      262, 1247,  263,  264,  265, 1247, 1247,  263, 1247, 1247,
     1247,  264,  265, 1117, 1247, 1118,  264,  265,  262, 1247,
      262, 1247, 1120, 1247,  262,  263,  262,  263, 1247,  180,
     1119,  263, 1247,  263,  264,  265,  264,  265, 1247, 1247,

      264,  265,  264,  265,  262,  181,  182,  262, 1123, 1122,
      784,  263, 1247,  784,  263, 1121,  320, 1247,  898,  180,
      264,  265, 1124,  264,  265,  784,  901,  901,  784, 1150,
      901,  722, 1035, 1037, 1247,  181,  182, 1247,  901, 1126,
      901, 1125,  590,  784, 1247,  590,  784, 1128,  722,  341,
      904,  908, 1247,  784,  911,  911,  784, 1247,  911,  733,
     1247, 1044, 1247, 1247, 1040, 1042,  911, 1247,  911,  901,
      901,  590, 1247,  337,  590, 1130, 1247,  733,  337,  914,
      338,  784, 1247,  373,  784,  338, 1247,  373, 1247,  339,
      340, 1131,  337, 1047,  339,  340, 1132,  911,  911,  338,

      337, 1247, 1247,  337, 1247,  337, 1247,  338,  339,  340,
      338,  337,  338, 1247, 1247, 1247,  339,  340,  338,  339,
      340,  339,  340, 1247, 1247, 1247, 1247,  339,  340,  337,
     1133, 1247,  337, 1137, 1247, 1247,  338,  337, 1134,  338,
     1135, 1247, 1136,  337,  338,  339,  340, 1247,  339,  340,
      338,  558, 1247,  339,  340, 1247, 1247,  337, 1247,  339,
      340,  337, 1247, 1247,  338, 1140, 1247, 1247,  338, 1138,
     1247, 1247, 1139,  339,  340, 1247,  784,  339,  340,  784,
     1247, 1247,  373, 1247,  935, 1141,  558,  938,  938,  784,
     1247,  938,  784, 1247, 1247,  761, 1247, 1064, 1062,  938,

      590,  938, 1247,  590, 1247, 1247,  761,  590,  941,  761,
      590, 1143,  369,  761, 1247, 1247,  369, 1247,  369,  370,
      369, 1247, 1067,  370,  180,  370, 1247,  370,  371,  372,
      938,  938,  371,  372,  371,  372,  371,  372,  369, 1247,
      181,  182, 1144,  369, 1145,  370,  180, 1247,  381,  180,
      370, 1247, 1247, 1247,  371,  372, 1153, 1146, 1247,  371,
      372,  784,  181,  182,  784,  181,  182,  588,  180,  953,
      784,  180,  588,  784, 1147, 1149,  588, 1247,  180, 1247,
     1148, 1151, 1247, 1075,  181,  182,  180,  181,  182,  180,
     1247,  957,  180, 1154,  181,  182,  180, 1247,  180, 1152,

      180, 1247,  181,  182, 1247,  181,  182, 1247,  181,  182,
      180, 1156,  181,  182,  181,  182,  181,  182, 1157,  180,
     1158,  180, 1247, 1155,  180, 1247,  181,  182,  180, 1247,
      180, 1247,  180, 1247,  180,  181,  182,  181,  182, 1247,
      181,  182, 1247, 1160,  181,  182,  181,  182,  181,  182,
      181,  182,  180, 1247,  180, 1247, 1162,  180,  784, 1161,
      180,  784, 1159, 1247,  671, 1247, 1005, 1247,  181,  182,
      181,  182, 1247,  181,  182, 1247,  181,  182,  180,  784,
     1105,  671,  784, 1247,  262,  671,  262, 1247, 1247,  262,
     1163,  263, 1164,  263,  181,  182,  263,  262, 1247, 1247,

      264,  265,  264,  265,  263,  264,  265, 1247, 1247,  262,
     1247,  262, 1247,  264,  265,  262,  263, 1168,  263, 1247,
     1247, 1165,  263, 1166, 1167,  264,  265,  264,  265,  262,
     1247,  264,  265, 1247,  262, 1247,  263, 1170,  180, 1247,
     1169,  263,  262, 1247, 1247,  264,  265, 1247, 1247,  263,
      264,  265, 1247,  262,  181,  182, 1247,  262,  264,  265,
      263,  262, 1247, 1173,  263, 1172, 1247, 1247,  263,  264,
      265, 1171,  262,  264,  265, 1174,  262,  264,  265,  263,
      262, 1247,  180,  263,  262, 1247, 1247,  263,  264,  265,
     1247,  263,  264,  265, 1247,  262,  264,  265,  181,  182,

      264,  265,  263,  262, 1194, 1175, 1177, 1176,  262, 1247,
      263,  264,  265, 1247,  262,  263, 1247, 1247, 1247,  264,
      265,  263, 1247, 1247,  264,  265,  784, 1247, 1247,  784,
      264,  265,  722, 1247, 1037,  784, 1247, 1178,  784, 1179,
     1247,  733, 1247, 1044, 1180, 1247, 1181,  784, 1128,  722,
      784,  180,  784,  722,  733,  784,  337, 1130,  733,  337,
     1247, 1247,  337,  338,  337, 1247,  338,  181,  182,  338,
      337,  338,  339,  340,  180,  339,  340,  338,  339,  340,
      339,  340,  337, 1247, 1185, 1247,  339,  340,  337,  338,
      181,  182, 1186, 1182,  337,  338, 1183, 1184,  339,  340,

      337,  338, 1247,  180,  339,  340,  337,  338, 1247,  558,
      339,  340,  558,  338,  337, 1247,  339,  340, 1247,  181,
      182,  338,  339,  340, 1187, 1247,  784, 1247,  369,  784,
      339,  340,  761, 1188, 1064,  370,  784, 1189,  761,  784,
     1196, 1247,  761, 1247,  371,  372,  369, 1247, 1143, 1247,
      369, 1247,  180,  370,  369, 1247,  558,  370,  369, 1190,
     1247,  370,  371,  372,  180,  370,  371,  372,  181,  182,
      371,  372,  180, 1247,  371,  372, 1192, 1191, 1247, 1247,
      181,  182,  180, 1195,  180, 1247,  180, 1247,  181,  182,
     1193,  180, 1247, 1198,  381, 1197,  180, 1247,  181,  182,

      181,  182,  181,  182,  180, 1247, 1199,  181,  182,  180,
     1247,  262,  181,  182,  180, 1247,  262, 1247,  263, 1247,
      181,  182, 1200,  263, 1247,  181,  182,  264,  265,  262,
      181,  182,  264,  265, 1247, 1247,  263, 1203, 1247, 1247,
      180, 1201, 1204,  262, 1247,  264,  265, 1205,  262, 1202,
      263,  262, 1247, 1247,  262,  263,  181,  182,  263,  264,
      265,  263, 1247, 1247,  264,  265, 1247,  264,  265,  262,
      264,  265,  895, 1247,  262, 1247,  263,  262,  895,  510,
     1206,  263, 1207, 1247,  263,  264,  265, 1247,  262, 1247,
      264,  265,  262,  264,  265,  263, 1247, 1247,  180,  263,

      262, 1247, 1247,  262,  264,  265, 1247,  263,  264,  265,
      263,  262, 1209, 1208,  181,  182,  264,  265,  263,  264,
      265, 1247,  262, 1247, 1247,  262, 1247,  264,  265,  263,
      337, 1210,  263, 1211,  957, 1247, 1247,  338,  264,  265,
     1247,  264,  265,  337, 1247,  337,  339,  340,  337, 1247,
      338,  337,  338, 1212, 1247,  338, 1213, 1247,  338,  339,
      340,  339,  340, 1215,  339,  340, 1247,  339,  340, 1214,
      337, 1247,  337, 1247,  337, 1247,  369,  338, 1247,  338,
      558,  338, 1217,  370, 1247, 1216,  339,  340,  339,  340,
      339,  340,  371,  372, 1219,  369, 1247, 1218,  369, 1247,

      381,  369,  370, 1247,  180,  370, 1247, 1247,  370,  180,
     1247,  371,  372, 1247,  371,  372,  180,  371,  372,  381,
      181,  182,  180, 1221, 1247,  181,  182, 1247, 1247, 1220,
      180, 1247,  181,  182,  180, 1247,  262, 1247,  181,  182,
      817,  262, 1247,  263, 1222, 1247,  181,  182,  263, 1247,
      181,  182,  264,  265,  262, 1247, 1223,  264,  265, 1247,
      262,  263,  262, 1247, 1247, 1247,  262,  263,  180,  263,
      264,  265, 1247,  263, 1247, 1224,  264,  265,  264,  265,
     1225,  262,  264,  265,  181,  182,  262, 1247,  263,  262,
      895, 1226, 1227,  263,  262, 1247,  263,  264,  265, 1228,

     1247,  263,  264,  265,  983,  264,  265, 1229, 1230, 1247,
      264,  265,  337, 1247,  337, 1247, 1247,  337, 1247,  338,
      337,  338, 1247, 1247,  338, 1231, 1247,  338,  339,  340,
      339,  340,  337,  339,  340, 1247,  339,  340, 1247,  338,
      337, 1247, 1247,  337, 1247, 1247, 1247,  338,  339,  340,
      338, 1232, 1235, 1233, 1234,  369,  339,  340,  180,  339,
      340,  369,  370, 1247,  180,  558, 1236, 1247,  370,  558,
     1247,  371,  372, 1247,  181,  182,  262,  371,  372,  381,
      181,  182, 1247,  263,  262, 1247, 1247,  262, 1247, 1247,
     1237,  263,  264,  265,  263,  262, 1247,  381, 1238, 1247,

      264,  265,  263,  264,  265, 1247, 1239,  262, 1247,  262,
     1247,  264,  265, 1240,  263,  262,  263, 1247, 1247, 1247,
      262, 1247,  263,  264,  265,  264,  265,  263,  337, 1241,
      684,  264,  265, 1247, 1247,  338,  264,  265, 1247,  337,
     1247,  337, 1247, 1247,  339,  340,  338,  337,  338,  180,
      558, 1247,  337, 1247,  338,  339,  340,  339,  340,  338,
     1247,  558, 1247,  339,  340,  181,  182, 1242,  339,  340,
      262, 1247,  558, 1247,  262, 1247,  262,  263,  262, 1247,
     1243,  263,  558,  263, 1247,  263,  264,  265, 1247,  337,
      264,  265,  264,  265,  264,  265,  338,  262, 1247, 1247,

      337, 1247,  262, 1247,  263,  339,  340,  338, 1244,  263,
     1247, 1247, 1247,  264,  265, 1247,  339,  340,  264,  265,
     1247, 1245, 1247, 1247, 1247, 1247, 1247, 1247, 1246, 1247,
     1247,  558,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  179,  179, 1247,
     1247,  179,  179,  179,  183,  183,  183,  183,  183,  183,

      183,  183,  261,  261, 1247, 1247,  261,  261,  261,  266,
      266,  266,  266,  266,  266,  266,  266,  315,  315, 1247,
     1247,  315,  315,  315,  320,  320,  320,  320,  320,  320,
      320,  320,  336,  336, 1247, 1247,  336,  336,  336,  341,
      341,  341,  341,  341,  341,  341,  341,  368,  368, 1247,
     1247,  368,  368,  368,  373,  373,  373,  373,  373,  373,
      373,  373,  399, 1247, 1247, 1247,  399, 1247,  399,  399,
     1247,  399,  399,  403, 1247, 1247,  403,  403, 1247,  403,
      403,  403,  403,  403,  404,  404, 1247,  404,  404,  404,
      404,  404,  404,  404,  404,  405, 1247,  405,  405, 1247,

     1247,  405, 1247,  405,  407,  407,  407,  407,  407, 1247,
      407,  492,  492,  492,  492,  492, 1247,  492,  536,  536,
      536,  536,  536, 1247,  536,  546,  546,  546,  546,  546,
     1247,  546,  572,  572,  572,  572,  572, 1247,  572,  588,
      588,  588,  588,  588,  588,  588,  588,  591, 1247, 1247,
     1247,  591,  591,  591,  591,  591,  591,  591,  671,  671,
      671,  671,  671,  671,  671,  671,  673, 1247, 1247, 1247,
      673,  673,  673,  673,  673,  673,  673,  722,  722,  722,
      722,  722,  722,  722,  722,  724, 1247, 1247, 1247,  724,
      724,  724,  724,  724,  724,  724,  590, 1247, 1247, 1247,

      590,  590,  590,  590,  590,  590,  590,  733,  733,  733,
      733,  733,  733,  733,  733,  735, 1247, 1247, 1247,  735,
      735,  735,  735,  735,  735,  735,  761,  761,  761,  761,
      761,  761,  761,  761,  763, 1247, 1247, 1247,  763,  763,
      763,  763,  763,  763,  763,  782, 1247, 1247,  782,  782,
      782,  782,  782,  782,  782,  782,  785, 1247, 1247, 1247,
      785,  785,  785,  785,  785,  785,  785,  790, 1247, 1247,
     1247,  790,  790,  790,  790,  790,  790,  790,  853, 1247,
     1247,  853,  853,  853,  853,  853,  853,  853,  853,  855,
     1247, 1247, 1247,  855,  855,  855,  855,  855,  855,  855,

      861, 1247, 1247, 1247,  861,  861,  861,  861,  861,  861,
      861,  896, 1247, 1247,  896,  896,  896,  896,  896,  896,
      896,  896,  898, 1247, 1247, 1247,  898,  898,  898,  898,
      898,  898,  898,  904, 1247, 1247, 1247,  904,  904,  904,
      904,  904,  904,  904,  784, 1247, 1247, 1247,  784,  784,
      784,  784,  784,  784,  784,  906, 1247, 1247,  906,  906,
      906,  906,  906,  906,  906,  906,  908, 1247, 1247, 1247,
      908,  908,  908,  908,  908,  908,  908,  914, 1247, 1247,
     1247,  914,  914,  914,  914,  914,  914,  914,  933, 1247,
     1247,  933,  933,  933,  933,  933,  933,  933,  933,  935,

     1247, 1247, 1247,  935,  935,  935,  935,  935,  935,  935,
      941, 1247, 1247, 1247,  941,  941,  941,  941,  941,  941,
      941,  950, 1247, 1247,  950,  950,  950,  950,  950,  950,
      950,  950,  953, 1247, 1247, 1247,  953,  953,  953,  953,
      953,  953,  953,  955, 1247, 1247,  955,  955,  955,  955,
      955,  955,  955,  955, 1002, 1247, 1247, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1005, 1247, 1247, 1247, 1005,
     1005, 1005, 1005, 1005, 1005, 1005,  673, 1247, 1247, 1247,
      673,  673,  673,  673,  673,  673,  673, 1007, 1247, 1247,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,  261,  261,

     1247, 1247,  261,  261,  261, 1034, 1247, 1247, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1037, 1247, 1247, 1247,
     1037, 1037, 1037, 1037, 1037, 1037, 1037,  724, 1247, 1247,
     1247,  724,  724,  724,  724,  724,  724,  724, 1039, 1247,
     1247, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,  906,
     1247, 1247,  906,  906,  906,  906,  906,  906,  906,  906,
      908, 1247, 1247, 1247,  908,  908,  908,  908,  908,  908,
      908, 1041, 1247, 1247, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1044, 1247, 1247, 1247, 1044, 1044, 1044, 1044,
     1044, 1044, 1044,  735, 1247, 1247, 1247,  735,  735,  735,

      735,  735,  735,  735, 1046, 1247, 1247, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046,  336,  336, 1247, 1247,  336,
      336,  336,  933, 1247, 1247,  933,  933,  933,  933,  933,
      933,  933,  933,  935, 1247, 1247, 1247,  935,  935,  935,
      935,  935,  935,  935, 1061, 1247, 1247, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1064, 1247, 1247, 1247, 1064,
     1064, 1064, 1064, 1064, 1064, 1064,  763, 1247, 1247, 1247,
      763,  763,  763,  763,  763,  763,  763, 1066, 1247, 1247,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,  368,  368,
     1247, 1247,  368,  368,  368,  950, 1247, 1247,  950,  950,

      950,  950,  950,  950,  950,  950,  784, 1247, 1247, 1247,
      784,  784,  784,  784,  784,  784,  784,  785, 1247, 1247,
     1247,  785,  785,  785,  785,  785,  785,  785, 1074, 1247,
     1247, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,  955,
     1247, 1247,  955,  955,  955,  955,  955,  955,  955,  955,
      179,  179, 1247, 1247,  179,  179,  179, 1104, 1247, 1247,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1127, 1247,
     1247, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1129,
     1247, 1247, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1142, 1247, 1247, 1142, 1142, 1142, 1142, 1142, 1142, 1142,

     1142,   23, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247
    } ;

static yyconst short int yy_chk[8259] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  938,   15,   15,   28,   15,   15,
       15,  911,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  901,   90,   28,   28,   13,   15,   13,  858,   29,
      790,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  787,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  765,   36,  594,   33,   33,   37,  109,  594,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  763,  762,  737,   39,
       39,  180,   39,   38,   39,   38,  735,  734,  731,   40,
       21,   21,   39,   21,   22,  180,   22,   22,   22,   22,
      145,   41,   22,   22,   22,   40,   40,  145,  145,  145,
      730,  726,   42,  145,   38,   38,   22,   41,   41,  145,
      724,   40,   41,   43,   40,   45,  723,   40,   42,   42,
       41,   41,  675,   41,   42,   47,   41,   44,  677,   43,
       43,   45,   45,  677,   42,   45,   22,   22,  673,   22,
       42,   47,   47,   44,   44,   43,  183,   43,   43,   46,
       45,   47,   48,  262,   43,   49,   44,   44,  728,   44,

      183,  672,   44,  728,   44,   46,   46,  262,   48,   48,
       48,   49,   49,   49,   49,   50,  266,   49,   51,  591,
       46,   49,   52,  589,   48,  587,   53,   49,   48,   61,
      266,   50,   50,   50,   51,   51,   61,   51,   52,   52,
       52,   51,   53,   53,  586,   61,   61,   50,   51,   51,
       54,   51,  545,   50,   52,  544,  316,   52,   56,  320,
       52,   57,   52,  543,   53,  542,   54,   54,   54,   58,
      316,  541,   54,  320,   56,   56,  337,   57,   57,   54,
       60,  540,   59,   56,   56,   58,   58,   58,   54,   55,
      337,   58,   57,   56,  398,   58,   60,   60,   59,   59,

      397,  163,  374,  163,   60,   55,   55,   59,   59,  341,
       60,   55,  342,   64,   55,   65,   64,  163,   60,   55,
       64,   55,   65,  341,   55,  369,   55,   55,   66,   64,
       64,   65,   65,  373,   66,   66,   67,  408,  335,  369,
       66,  334,   68,   67,   66,   66,   67,  373,   69,   68,
      333,  408,   67,   67,   68,   69,   70,   70,   68,   68,
       70,  493,   71,  332,   69,   69,   73,  321,   70,   71,
       70,  739,  179,   73,   75,  493,  739,   76,   71,   71,
       74,   75,   73,   73,   76,  175,  175,   74,  179,  179,
       75,   75,   73,   76,   76,   76,   74,   74,   71,   70,

       70,   72,  537,   78,  267,  184,   75,  107,   72,   75,
       78,   74,  547,  573,   74,  106,  537,   72,   72,   78,
       78,   74,   78,   72,   23,   79,  547,  573,  175,  175,
       72,   72,   79,   72,    0,   72,   72,   86,   72,   77,
        0,   79,   79,   79,   86,  588,   77,   79,  181,  671,
       80,    0,    0,   86,   86,   77,   77,   80,    0,  588,
       77,   81,   77,  671,  181,  181,   80,   80,   81,   80,
       77,    0,   80,   86,   82,   77,   77,   81,   81,  722,
       81,   82,   83,  733,    0,   84,   80,    0,   85,   83,
       82,   82,   84,  722,   81,   85,   87,  733,   83,   83,

        0,   84,   84,   87,   85,   85,   82,    0,   83,   82,
       85,   83,   87,   87,   87,  761,    0,   84,   84,   88,
       85,   89,   84,   84,    0,   96,   88,   92,   89,  761,
       92,   88,   96,   93,   92,   88,   88,   89,   89,   93,
       93,   96,   96,   92,   92,  185,    0,    0,  185,   93,
       93,   94,   94,   94,   94,   94,   94,    0,   94,  767,
       95,  185,  185,   97,  767,   94,    0,   95,   95,   95,
       97,   99,    0,  189,   94,   94,   95,   95,   99,   97,
       97,   98,   98,    0,    0,   98,    0,   99,   99,  189,
      189,  194,    0,   98,    0,   98,  102,  102,  102,  102,

      102,  102,   99,    0,    0,  189,  102,  194,  194,  102,
      104,  104,  104,  104,  104,  104,  783,  194,  783,  783,
      104,    0,  783,  104,   98,   98,  105,  105,  105,  105,
      105,  105,    0,  108,    0,  112,  105,  114,  112,  105,
      108,  115,  112,  114,  114,    0,    0,  190,  115,  108,
      108,  112,  112,  114,  114,  116,    0,  115,  115,  120,
        0,  117,  116,  190,  190,    0,  120,    0,  117,    0,
        0,  116,  116,  117,    0,  120,  120,  117,  117,  121,
      121,  122,  378,  121,    0,  124,  190,  123,  122,  378,
      378,  121,  124,  121,  123,  378,  193,  122,  122,  125,

        0,  124,  124,  123,  123,    0,  125,    0,    0,    0,
        0,  124,  193,  193,    0,  125,  125,  122,  193,  123,
      126,    0,  121,  121,  123,  127,    0,  126,  134,    0,
        0,  125,  127,  128,  125,  134,  126,  126,  126,    0,
      128,  127,  127,  770,  134,  134,  127,  129,  127,  128,
      128,  128,  770,    0,  129,  128,  770,  770,  130,  770,
      134,    0,  127,  129,  129,  130,    0,    0,    0,  129,
        0,  131,    0,  132,  130,  130,  186,  130,  131,  133,
      132,  195,  186,  129,  137,    0,  133,  131,  131,  132,
      132,  137,  186,  186,    0,  133,  133,  195,  195,  132,

      137,  137,  139,  131,  140,  139,  131,  141,    0,  139,
      140,  140,  133,    0,  141,  142,  133,    0,  139,  139,
      140,  140,  142,  141,  141,  143,  143,  146,    0,  143,
        0,  142,  142,  147,  146,    0,    0,  143,  148,  143,
      147,    0,    0,  146,  146,  148,  149,    0,    0,  147,
      147,    0,  147,  149,  148,  148,  191,  148,  146,  150,
        0,    0,  149,  149,  151,    0,  150,  192,  143,  143,
      144,  151,  191,  191,  148,  150,  150,  144,    0,  149,
      151,  151,  191,  192,  192,  191,  144,  144,  192,    0,
      152,    0,  144,  151,  150,  153,    0,  152,  196,  144,

      144,  154,  153,    0,  144,  144,  152,  152,  154,  197,
        0,  153,  153,    0,  196,  196,    0,  154,  154,  154,
      196,  592,  152,    0,  592,  197,  197,  592,  152,  592,
      197,  153,  155,  155,  155,  155,  155,  155,    0,  182,
      182,  182,  155,  592,  182,  155,  157,  157,  157,  157,
      157,  157,  182,    0,  182,    0,  157,    0,  187,  157,
      158,  158,  158,  158,  158,  158,  187,  187,  188,  188,
      158,  198,  188,  158,  187,  187,  199,    0,  200,    0,
      188,    0,  188,  182,  182,    0,    0,  198,  198,  201,
        0,  202,  199,  199,  200,  200,    0,  200,  199,  203,

      198,  198,  198,  204,    0,  201,  201,  202,  202,  198,
      205,  188,  188,  206,  200,  203,  203,    0,  207,  204,
      204,  202,  203,    0,  208,    0,  205,  205,  209,  206,
      206,  210,  205,  206,  207,  207,  207,    0,  212,  204,
      208,  208,  211,    0,  209,  209,    0,  210,  210,  215,
      206,    0,  213,  210,  212,  212,  208,  214,  211,  211,
        0,    0,  216,  209,    0,  215,  215,  211,  213,  213,
      213,  217,    0,  214,  214,  218,    0,  214,  216,  216,
      215,  216,  219,    0,  220,    0,    0,  217,  217,  217,
      222,  218,  218,  221,    0,  223,    0,  224,  219,  219,

      220,  220,    0,  217,    0,  225,  222,  222,  226,  221,
      221,  223,  223,  224,  224,    0,  223,  227,    0,  219,
      220,  225,  225,  221,  226,  226,  228,    0,    0,  229,
        0,  222,  224,  227,  227,  230,    0,  231,  226,  232,
      225,  235,  228,  228,  227,  229,  229,  233,    0,  228,
      236,  230,  230,  231,  231,  232,  232,  235,  235,    0,
        0,  229,  234,  233,  233,  237,  236,  236,  238,    0,
      240,  236,    0,  231,  232,    0,  232,  235,  234,  234,
      233,  237,  237,  239,  238,  238,  240,  240,  234,    0,
        0,  237,  241,    0,  234,  242,    0,    0,  243,  239,

      239,  244,    0,    0,  239,  238,  240,    0,  241,  241,
      245,  242,  242,  242,  243,  243,    0,  244,  244,  239,
      246,  241,  239,  239,  242,    0,  245,  245,    0,    0,
      243,  247,  242,  244,    0,  248,  246,  246,    0,  249,
        0,  250,  246,  251,    0,  245,  252,  247,  247,  247,
      253,  248,  248,  247,  248,  249,  249,  250,  250,  251,
      251,  251,  252,  252,  254,  248,  253,  253,    0,    0,
      255,  250,  252,  256,    0,    0,  854,  257,  854,  854,
      254,  254,  854,    0,  259,  253,  255,  255,    0,  256,
      256,  258,  255,  257,  257,  256,  260,  258,    0,  254,

      259,  259,  259,  261,    0,  256,    0,  258,  258,  263,
      261,    0,  260,  260,  257,  264,  263,    0,    0,  261,
      261,    0,  264,    0,    0,  263,  263,  260,  265,  265,
      265,  264,  264,  265,    0,  268,    0,  270,  268,  269,
        0,  265,  268,  265,  270,  269,  269,  407,    0,    0,
      271,  268,  268,  270,  270,  269,  269,  271,  272,    0,
        0,    0,  274,  407,  407,  272,  271,  271,    0,  274,
        0,    0,  265,  265,  272,  272,  273,  273,  274,  274,
      273,    0,    0,    0,  275,    0,  276,    0,  273,  277,
      273,  275,    0,  276,    0,  411,  277,    0,  274,    0,

      275,  275,  276,  276,  276,  277,  277,  278,  277,  279,
        0,  411,  411,    0,  278,  280,  279,    0,  275,  273,
      273,    0,  280,  278,  278,  279,  279,    0,    0,  281,
      411,  280,  280,  282,    0,  283,  281,  278,  278,    0,
      282,  284,  283,    0,  280,  281,  281,  285,  284,  282,
      282,  283,  283,    0,  285,  286,  283,  284,  284,  287,
        0,  281,  286,  285,  285,    0,  287,    0,    0,    0,
      282,  286,  286,    0,    0,  287,  287,    0,  288,    0,
      290,    0,  289,    0,  285,  288,  291,  290,  289,  289,
      286,  287,  289,  291,  288,  288,  290,  290,  289,  289,

      292,    0,  291,  291,  289,  293,  291,  292,  897,    0,
      897,  897,  293,  294,  897,  288,  292,  292,  295,    0,
      294,  293,  293,    0,  296,  295,  297,  293,    0,  294,
      294,  296,  299,  297,  295,  295,    0,  295,    0,  299,
      296,  296,  297,  297,  298,  294,  298,  296,  299,  299,
      300,    0,    0,  298,  298,  295,  299,  300,  301,  298,
      298,    0,  302,    0,  301,  301,  300,  300,  413,  302,
        0,    0,    0,  303,  301,  301,  304,  300,  302,  302,
      303,  305,    0,  304,  413,  413,  413,    0,  305,  303,
      303,  302,  304,  304,  301,  303,  306,  305,  305,  307,

      304,  308,    0,  306,    0,  303,  307,  309,  308,    0,
        0,    0,  306,  306,  309,  307,  307,  308,  308,    0,
        0,  307,  310,  309,  309,  311,  309,  312,    0,  310,
      313,  306,  311,  314,  312,    0,  308,  313,  310,  310,
      314,  311,  311,  312,  312,  315,  313,  313,    0,  314,
      314,  317,  315,  312,    0,    0,  318,  310,  317,    0,
        0,  315,  315,  318,    0,  313,    0,  317,  317,  319,
      319,  319,  318,  318,  319,    0,  322,  327,  327,  322,
      323,  327,  319,  322,  319,    0,  323,  323,  328,  327,
        0,  327,  322,  322,    0,  328,  323,  323,  324,  324,

      324,  324,  324,  324,  328,  328,    0,  412,  324,  326,
        0,  324,    0,  319,  319,    0,  326,  326,  326,    0,
      327,  327,    0,  412,  412,  326,  326,  329,  329,  329,
      329,  329,  329,  412,  340,  340,  340,  329,    0,  340,
      329,  331,  331,  331,  331,  331,  331,  340,  336,  340,
      338,  331,  339,    0,  331,  336,    0,  338,    0,  339,
        0,    0,    0,    0,  336,  336,  338,  338,  339,  339,
      343,    0,    0,  343,  344,    0,  345,  343,  340,  340,
      344,  344,    0,  345,  346,  346,  343,  343,  346,    0,
      344,  344,  345,  345,  347,    0,  346,  349,  346,  350,

        0,  347,  348,    0,  349,  351,  350,  414,    0,  348,
      347,  347,  351,  349,  349,  350,  350,    0,  348,  348,
        0,  351,  351,  414,  414,    0,  419,  346,  346,  349,
      347,  352,  348,  348,  353,    0,  350,  355,  352,  354,
      351,  353,  419,  419,  355,    0,  354,  352,  352,  354,
      353,  353,  356,  355,  355,  354,  354,    0,    0,  356,
      357,  354,    0,  352,    0,  358,    0,  357,  356,  356,
      415,  353,  358,  359,  356,    0,  357,  357,  360,    0,
      359,  358,  358,    0,  361,  360,  415,  415,  358,  359,
      359,  361,    0,    0,  360,  360,    0,  357,  362,    0,

      361,  361,  360,  359,  423,  362,  363,    0,    0,  359,
      359,  361,  415,  363,  362,  362,    0,  364,    0,    0,
      423,  423,  363,  363,  364,    0,    0,  362,  363,  365,
        0,  366,    0,  364,  364,  423,  365,  367,  366,    0,
        0,  364,  368,    0,  367,  365,  365,  366,  366,  368,
        0,  365,  416,  367,  367,  370,    0,  371,  368,  368,
        0,    0,  370,    0,  371,    0,  366,  420,  416,  416,
      416,  370,  370,  371,  371,  372,  372,  372,  375,    0,
      372,  375,    0,  420,  420,  375,  376,    0,  372,    0,
      372,    0,  376,  376,  375,  375,  377,  377,  379,  420,

      377,    0,  376,  376,    0,  379,  380,    0,  377,    0,
      377,  381,    0,  380,  379,  379,  379,  382,  381,  372,
      372,    0,  380,  380,  382,  380,    0,  381,  381,    0,
        0,  383,    0,  382,  382,    0,    0,  384,  383,  377,
      377,    0,  385,    0,  384,    0,  382,  383,  383,  385,
      386,    0,  383,  384,  384,    0,  387,  386,  385,  385,
        0,  388,  385,  387,    0,    0,  386,  386,  388,  389,
        0,    0,  387,  387,  384,    0,  389,  388,  388,    0,
      387,    0,  386,  390,    0,  389,  389,  391,    0,    0,
      390,  392,    0,    0,  391,  393,    0,  388,  392,  390,

      390,  389,  393,  391,  391,    0,  391,  392,  392,    0,
      417,  393,  393,    0,    0,    0,    0,  392,  390,  394,
      394,  394,  394,  394,  394,  427,  417,  417,    0,  394,
      393,    0,  394,  396,  396,  396,  396,  396,  396,  417,
        0,  427,  427,  396,    0,  418,  396,  409,  421,    0,
      409,    0,    0,    0,    0,  409,  409,  409,  427,  422,
      409,  418,  418,  418,  421,  421,  424,  409,  409,  425,
      409,  409,  409,  426,    0,  422,  422,  428,  421,  422,
      422,  421,  424,  424,    0,  425,  425,  424,    0,  426,
      426,    0,    0,  428,  428,  426,  422,    0,    0,  409,

      409,  410,  429,    0,  410,    0,    0,  425,    0,  410,
      410,  410,  430,    0,  410,  431,    0,  432,  429,  429,
      433,  410,  410,    0,  410,  410,  410,    0,  430,  430,
      434,  431,  431,  432,  432,    0,  433,  433,    0,  432,
        0,    0,  435,    0,  431,  436,  434,  434,  437,    0,
      438,  434,  430,  410,  410,    0,    0,  433,  435,  435,
      440,  436,  436,    0,  437,  437,  438,  438,    0,    0,
      439,    0,  435,  441,    0,    0,  440,  440,    0,  438,
      442,  437,  440,  443,    0,  436,  439,  439,  444,  441,
      441,  439,  445,    0,  441,  446,  442,  442,  447,  443,

      443,    0,    0,  443,  444,  444,  448,    0,  445,  445,
      449,  446,  446,  442,  447,  447,  450,    0,  446,    0,
        0,  451,  448,  448,  445,    0,  449,  449,  452,    0,
      453,    0,  450,  450,  454,  450,  447,  451,  451,    0,
      449,  448,  455,    0,  452,  452,  453,  453,  456,  452,
      454,  454,    0,    0,    0,  457,  454,  458,  455,  455,
      459,    0,  460,    0,  456,  456,  461,  455,    0,  456,
      454,  457,  457,  458,  458,  462,  459,  459,  460,  460,
      458,  463,  461,  461,    0,  459,  457,    0,  464,    0,
      465,  462,  462,  466,  458,    0,    0,  463,  463,  467,

        0,  462,    0,  461,  464,  464,  465,  465,  468,  466,
      466,    0,  465,    0,    0,  467,  467,  469,    0,  463,
      470,    0,  471,    0,  468,  468,  464,  472,  466,  473,
      468,  474,    0,  469,  469,    0,  470,  470,  471,  471,
      475,    0,  470,  472,  472,  473,  473,  474,  474,  476,
      473,    0,  469,    0,  477,    0,  475,  475,  478,    0,
      479,    0,  480,    0,    0,  476,  476,  472,  474,    0,
      477,  477,    0,    0,  478,  478,  479,  479,  480,  480,
      475,  481,    0,  482,  480,    0,  476,  477,  480,    0,
      479,  483,    0,  484,  478,    0,    0,  481,  481,  482,

      482,  481,  485,    0,  486,    0,  482,  483,  483,  484,
      484,    0,  484,    0,  487,    0,  488,    0,  485,  485,
      486,  486,    0,  907,    0,  907,  907,  483,  489,  907,
      487,  487,  488,  488,  490,    0,  491,    0,    0,  486,
      492,  488,  485,  487,  489,  489,    0,  492,  498,    0,
      490,  490,  491,  491,    0,  498,  492,  492,    0,  489,
        0,  501,  491,    0,  498,  498,    0,  496,  501,    0,
        0,  490,  494,  596,  496,  494,    0,  501,  501,    0,
      494,  494,  494,  496,  496,  494,    0,  494,    0,  596,
      596,  497,  494,  494,    0,  494,  494,  494,  497,  496,

        0,  500,  499,  500,    0,  502,    0,  497,  497,  499,
      596,  500,  502,    0,  599,    0,  500,  500,  499,  499,
        0,  502,  502,    0,  494,  494,  495,  497,    0,  495,
      599,  599,  499,    0,  495,  495,  495,  503,    0,  495,
      502,  495,  602,    0,  503,  505,  495,  495,    0,  495,
      495,  495,  505,  503,  503,  504,    0,  504,  602,  602,
        0,  505,  505,    0,  504,  504,  504,  505,  506,    0,
      504,  504,  601,  504,  503,  506,  507,  602,  495,  495,
      508,    0,    0,  507,  506,  506,    0,  508,  601,  601,
        0,    0,  507,  507,    0,  509,  508,  508,  506,    0,

      510,    0,  509,    0,    0,  508,  507,  510,  511,  601,
      597,  509,  509,    0,  512,  511,  510,  510,    0,  507,
      509,  512,    0,    0,  511,  511,  597,  597,  513,    0,
      512,  512,    0,  514,    0,  513,  598,    0,  511,  511,
      514,    0,    0,  512,  513,  513,  597,    0,  515,  514,
      514,  516,  598,  598,  934,  515,  934,  934,  516,  517,
      934,    0,  518,  513,  515,  515,  517,  516,  516,  518,
      515,  603,  598,  516,  519,  517,  517,    0,  518,  518,
        0,  519,  520,    0,    0,  521,    0,  603,  603,  520,
      519,  519,  521,    0,  518,    0,  517,  522,  520,  520,

      520,  521,  521,    0,  522,    0,  603,    0,  523,    0,
      519,  524,    0,  522,  522,  523,    0,    0,  524,  522,
        0,  521,  525,    0,  523,  523,    0,  524,  524,  525,
      526,    0,    0,  523,    0,  527,    0,  526,  525,  525,
        0,  528,  527,    0,    0,    0,  526,  526,  528,    0,
      526,  527,  527,  529,    0,    0,    0,  528,  528,    0,
      529,  530,    0,    0,  525,    0,  528,  531,  530,  529,
      529,    0,  527,    0,  531,  532,    0,  530,  530,    0,
      533,  530,  532,  531,  531,  531,  534,  533,    0,    0,
      529,  532,  532,  534,    0,  532,  533,  533,  535,    0,

        0,    0,  534,  534,    0,  535,  536,    0,    0,  546,
      533,  532,  551,  536,  535,  535,  546,  534,    0,  551,
      550,    0,  536,  536,  555,  546,  546,  550,  551,  551,
        0,  555,    0,    0,  535,  538,  550,  550,  538,    0,
      555,  555,  551,  538,  538,  538,  552,    0,  538,  604,
      538,    0,  550,  552,  555,  538,  538,  554,  538,  538,
      538,  553,  552,  552,  554,  604,  604,  604,  553,  552,
        0,    0,    0,  554,  554,    0,    0,  553,  553,    0,
        0,    0,  552,    0,  556,    0,    0,  538,  538,  539,
      600,  556,  539,    0,  554,    0,  553,  539,  539,  539,

      556,  556,  539,    0,  539,  611,  600,  600,  557,  539,
      539,    0,  539,  539,  539,  557,    0,    0,  600,  558,
        0,  611,  611,  561,  557,  557,  558,  556,    0,  611,
      561,  559,    0,  557,    0,  558,  558,    0,  559,  561,
      561,  539,  539,  548,    0,  561,  548,  559,  559,    0,
        0,  548,  548,  548,    0,    0,  548,    0,  548,    0,
        0,  559,  559,  548,  548,  562,  548,  548,  548,  560,
        0,  563,  562,  564,    0,  607,  560,  566,  563,    0,
      564,  562,  562,    0,  566,  560,  560,  563,  563,  564,
      564,  607,  607,  566,  566,  548,  548,  549,    0,  566,

      549,  607,  562,  563,  560,  549,  549,  549,  565,  564,
      549,    0,  549,    0,  608,  565,  567,  549,  549,    0,
      549,  549,  549,  567,  565,  565,  565,  568,    0,  569,
      608,  608,  567,  567,  568,  570,  569,    0,    0,    0,
      608,    0,  570,  568,  568,  569,  569,  568,  610,  549,
      549,  570,  570,  571,  569,  570,  572,    0,  567,  578,
      571,    0,  612,  572,  610,  610,  578,    0,    0,  571,
      571,  571,  572,  572,  574,  578,  578,  574,  612,  612,
        0,  578,  574,  574,  574,  576,  610,  574,  613,  574,
        0,  612,  576,  579,  574,  574,  580,  574,  574,  574,

      579,  576,  576,  580,  613,  613,    0,  581,    0,  579,
      579,    0,  580,  580,  581,    0,    0,    0,  582,    0,
        0,  576,  579,  581,  581,  582,  574,  574,  575,    0,
        0,  575,  580,    0,  582,  582,  575,  575,  575,    0,
      583,  575,    0,  575,  581,    0,  605,  583,  575,  575,
      609,  575,  575,  575,  584,  582,  583,  583,  585,    0,
      583,  584,  605,  605,    0,  585,  609,  609,    0,    0,
      584,  584,  605,    0,  585,  585,  583,    0,  605,  606,
      575,  575,  577,    0,    0,  584,  615,  609,    0,  577,
        0,  614,    0,  622,  585,  606,  606,    0,  577,  577,

      617,  606,  615,  615,    0,  577,    0,  614,  614,  622,
      622,  616,  577,    0,  577,    0,  617,  617,  577,  577,
        0,  577,  593,  618,  615,  593,  614,  616,  616,  622,
      593,  593,  593,  619,    0,  593,  620,  617,    0,  618,
      618,  618,  616,  593,    0,  593,  593,  593,  623,  619,
      619,    0,  620,  620,  621,    0,  624,  951,    0,  951,
      951,  620,    0,  951,  623,  623,  625,    0,  619,    0,
      621,  621,  624,  624,  593,  593,  595,  623,  626,  595,
        0,    0,  625,  625,  595,  595,  595,    0,  627,  595,
      628,    0,  621,  629,  626,  626,  633,  595,  630,  595,

      595,  595,  631,  626,  627,  627,  628,  628,    0,  629,
      629,    0,  633,  633,  630,  630,  628,  632,  631,  631,
      631,  634,  629,    0,  635,    0,  636,    0,  595,  595,
      630,  637,    0,  632,  632,    0,    0,  634,  634,  632,
      635,  635,  636,  636,  638,    0,  635,  637,  637,  639,
        0,  640,  634,  641,    0,  642,    0,    0,    0,    0,
      638,  638,  643,    0,    0,  639,  639,  640,  640,  641,
      641,  642,  642,  640,  641,  639,  644,    0,  643,  643,
        0,  638,  645,    0,  646,    0,    0,  647,    0,  648,
        0,  649,  644,  644,  643,    0,  644,    0,  645,  645,

      646,  646,  646,  647,  647,  648,  648,  649,  649,    0,
      650,  649,  645,  647,    0,  651,    0,  652,    0,  653,
        0,  654,    0,  655,    0,  648,  650,  650,  656,    0,
      650,  651,  651,  652,  652,  653,  653,  654,  654,  655,
      655,    0,  657,    0,  656,  656,  658,    0,    0,    0,
      659,    0,  660,  652,  653,  661,    0,  654,  657,  657,
      657,  662,  658,  658,    0,  656,  659,  659,  660,  660,
      663,  661,  661,  664,  660,    0,  665,  662,  662,  666,
        0,  659,    0,  667,    0,    0,  663,  663,  668,  664,
      664,  669,  665,  665,    0,  666,  666,  661,  665,  667,

      667,  666,  663,  670,  668,  668,  668,  669,  669,  664,
      674,  669,    0,  674,  679,    0,  674,    0,  674,  670,
      670,  679,  681,    0,    0,    0,  670,    0,  680,  681,
      679,  679,  674,  676,  679,  680,  676,    0,  681,  681,
        0,  676,  676,  676,  680,  680,  676,  956,  676,  956,
      956,    0,  682,  956,  676,  683,  676,  676,  676,  682,
      681,    0,  683,  684,  680,    0,  685,    0,  682,  682,
      684,  683,  683,  685,    0,    0,    0,  686,  682,  684,
      684,    0,  685,  685,  686,  676,  676,  678,  792,    0,
      678,    0,  683,  686,  686,  678,  678,  678,  685,  687,

      678,    0,  688,    0,  792,  792,  687,  686,  678,  688,
      678,  678,  678,    0,  686,  687,  687,  689,  688,  688,
      690,    0,    0,    0,  689,    0,    0,  690,  691,  687,
        0,  692,  688,  689,  689,  691,  690,  690,  692,  678,
      678,    0,  689,    0,  691,  691,  693,  692,  692,  692,
      694,    0,  795,  693,  695,    0,    0,  694,  696,  691,
        0,  695,  693,  693,    0,  696,  694,  694,  795,  795,
      695,  695,  694,  795,  696,  696,  695,  697,    0,  698,
        0,  699,    0,  794,  697,  700,  698,    0,  699,    0,
      696,    0,  700,  697,  697,  698,  698,  699,  699,  794,

      794,  700,  700,  700,  701,  794,  702,    0,  703,    0,
      697,  701,    0,  702,  796,  703,  698,    0,    0,  699,
      701,  701,  702,  702,  703,  703,    0,  704,    0,  707,
      796,  796,  705,  701,  704,  706,  707,    0,    0,  705,
      796,    0,  706,  704,  704,  707,  707,  702,  705,  705,
      705,  706,  706,  708,    0,  709,  706,    0,  710,    0,
      708,  711,  709,    0,  797,  710,    0,    0,  711,  708,
      708,  709,  709,  708,  710,  710,    0,  711,  711,  712,
      797,  797,  713,  711,    0,    0,  712,  709,  710,  713,
      714,    0,    0,  717,    0,  712,  712,  714,  713,  713,

      717,  712,    0,    0,  715,    0,  714,  714,  716,  717,
      717,  715,  798,    0,    0,  716,  718,    0,    0,  713,
      715,  715,  717,  718,  716,  716,  714,    0,  798,  798,
      715,    0,  718,  718,  719,    0,  720,    0,    0,  721,
      719,  719,    0,  720,    0,  716,  721,    0,  718,    0,
      719,  719,  720,  720,    0,  721,  721,    0,  725,    0,
      720,  725,  741,    0,  725,  736,  725,    0,  736,  741,
        0,  736,    0,  736,    0,    0,  742,    0,  741,  741,
      725,  727,  741,  742,  727,    0,    0,  736,    0,  727,
      727,  727,  742,  742,  727, 1003,  727, 1003, 1003,    0,

      743, 1003,  727,  744,  727,  727,  727,  743,  799,    0,
      744,  746,    0,    0,  742,  745,  743,  743,  746,  744,
      744,    0,  745,    0,  799,  799,  743,  746,  746,  746,
        0,  745,  745,  727,  727,  729,    0,    0,  729,  799,
      744,    0,    0,  729,  729,  729,  747,  745,  729, 1008,
      748, 1008, 1008,  747,  754, 1008,  729,  748,  729,  729,
      729,  754,  747,  747,    0,    0,  748,  748,  747,  750,
      754,  754,  748,    0,  749,  754,  750,  751,    0,    0,
        0,  749,    0,    0,  751,  750,  750,  729,  729,  738,
      749,  749,  738,  751,  751,  751,    0,  738,  738,  738,

        0,    0,  738,  803,  738,  800,  750,  749,  752,    0,
      738,  753,  738,  738,  738,  752,  755,    0,  753,  803,
      803,  800,  800,  755,  752,  752,    0,  753,  753,  753,
        0,  756,  755,  755,  800,    0,  755,    0,  756,    0,
      803,  738,  738,  740,    0,    0,  740,  756,  756,  752,
        0,  740,  740,  740,    0,  757,  740,    0,  759,    0,
        0,  756,  757,  758,  740,  759,  740,  740,  740,  760,
      758,  757,  757,  805,  759,  759,  760,  757,    0,  758,
      758,    0,    0,    0,  759,  760,  760,    0,    0,  805,
      805,  764,    0,    0,  764,  740,  740,  764,    0,  764,

      758,    0,  771,    0,  769,    0,  760,    0,    0,  771,
        0,  769,    0,  764,  766,    0,    0,  766,  771,  771,
      769,  769,  766,  766,  766,  772,    0,  766, 1035,  766,
     1035, 1035,  772,    0, 1035,  766,    0,  766,  766,  766,
      769,  772,  772,  773,    0,  774,    0,  776,    0,    0,
      773,    0,  774,    0,  776,  772,    0,    0,  777,  773,
      773,  774,  774,  776,  776,  777,  766,  766,  768,    0,
      774,  768,    0,  773,  777,  777,  768,  768,  768,  775,
      777,  768,    0,  778,    0,  776,  775,  779,    0,  768,
      778,  768,  768,  768,  779,  775,  775,    0,  780,  778,

      778,  781,    0,  779,  779,  780,    0,    0,  781,    0,
      775,  801,    0,    0,  780,  780,  779,  781,  781,  778,
      768,  768,    0,  782,    0,  781,  782,  801,  801,  782,
      780,  782,    0,    0,    0,  786,  789,  789,  786,    0,
      789,  786,  801,  786,    0,  782,  785,    0,  789,  785,
      789,    0,    0,    0,  785,  785,  785,  786,  802,  785,
      791,  793,    0,  791,    0,    0,  791,  785,  791,  785,
      785,  785,    0,  804,  802,  802,  802,  793,  793,  789,
      789,    0,  791,  793,    0,  806,    0,    0,    0,  804,
      804,    0,    0,  793,    0,  807,    0,    0,  785,  785,

      788,  806,  806,  788,  804,  806,    0,    0,  788,  788,
      788,  807,  807,  788,  808,    0,  809,    0,  810,    0,
        0,  788,    0,  788,  788,  788,    0,  811,    0,  812,
      808,  808,  809,  809,  810,  810,  808,    0,  813,  810,
      814,    0,  809,  811,  811,  812,  812,  815,  811,    0,
        0,  812,  788,  788,  813,  813,  814,  814,    0,    0,
      816,    0,  817,  815,  815,    0,  814,  818,    0,  819,
        0,  820,    0,  821,    0,  813,  816,  816,  817,  817,
      822,  816,  823,  818,  818,  819,  819,  820,  820,  821,
      821,  824,    0,  825,    0,  821,  822,  822,  823,  823,

      826,    0,  827,  818,    0,  828,    0,  824,  824,  825,
      825,  823,  820,    0,    0,  829,  826,  826,  827,  827,
      822,  828,  828,  830,    0,  831,  824,  832,    0,  825,
      825,  829,  829,    0,  828,  829,  833,    0,  834,  830,
      830,  831,  831,  832,  832,  835,    0,  836,    0,  832,
        0,    0,  833,  833,  834,  834,  831,  837,  833,  838,
        0,  835,  835,  836,  836,    0,    0,  834,    0,  839,
        0,  840,  836,  837,  837,  838,  838,    0,    0,    0,
      841,    0,  835,  842,    0,  839,  839,  840,  840,    0,
        0,  843,    0,  844,  837,  839,  841,  841,    0,  842,

      842,    0,    0,  845,    0,  846,  841,  843,  843,  844,
      844,  847,    0,  848,    0,  843,  849,    0,  842,  845,
      845,  846,  846,  850,    0,    0,  851,  847,  847,  848,
      848,  852,  849,  849,    0,    0,    0,    0,    0,  850,
      850,  846,  851,  851,    0,    0,  853,  852,  852,  853,
        0,  851,  853,  856,  853,  863,  856,  862,  850,  856,
      862,  856,  863,  862,    0,  862,  860,  860,  853,  864,
      860,  863,  863,  852,  855,  856,  864,  855,  860,  862,
      860,  863,  855,  855,  855,  864,  864,  855, 1040,  855,
     1040, 1040,    0,    0, 1040,  855,  865,  855,  855,  855,

      866,    0,    0,  865,  867,    0,  957,  866,    0,  860,
      860,  867,  865,  865,    0,    0,  866,  866,  868,    0,
      867,  867,  957,  957,  866,  868,  855,  855,  859,  965,
        0,  859,    0,  865,  868,  868,  859,  859,  859,  867,
      869,  859,    0,  870,    0,  965,  965,  869,    0,  859,
      870,  859,  859,  859,    0,  872,  869,  869,  965,  870,
      870,  871,  872,    0,  870,  869,    0,  873,  871,    0,
        0,  872,  872, 1042,  873, 1042, 1042,  871,  871, 1042,
      859,  859,  861,  873,  873,  861,  872,    0,    0,    0,
      861,  861,  861,  874,    0,  861,    0,  861,  871,    0,

      874,  875,  873,  861,  876,  861,  861,  861,  875,  874,
      874,  876,  878,    0,    0,  877,    0,  875,  875,  878,
      876,  876,  877,    0,    0,  874,    0,    0,  878,  878,
      876,  877,  877,  875,  861,  861,  877,  879,    0,  880,
        0,  881,    0,  882,  879,    0,  880,    0,  881,  878,
      882,    0,    0,  879,  879,  880,  880,  881,  881,  882,
      882,  882,  883,    0,  884,  881,  885,    0,  886,  883,
      887,  884,    0,  885,    0,  886,    0,  887,  883,  883,
      884,  884,  885,  885,  886,  886,  887,  887,  888,  886,
      887,    0,    0,  889,    0,  888,  884,    0,  885,  883,

      889,  890,    0,    0,  888,  888,  891,    0,  890,  889,
      889,    0,    0,  891,  892,    0,    0,  890,  890,  890,
      893,  892,  891,  891,    0,    0,  894,  893,  891,    0,
      892,  892,  892,  894,    0,    0,  893,  893,  896,    0,
      895,  896,  894,  894,  896,    0,  896,  895,    0,    0,
        0,  894,    0,    0,    0,  893,  895,  895,    0,  899,
      896,  898,  899,    0,  898,  899,    0,  899,    0,  898,
      898,  898,  905,    0,  898,  905,  898,    0,  905,    0,
      905,  899,  898,    0,  898,  898,  898,  903,  903,  906,
      909,  903,  906,  909,  905,  906,  909,  906,  909,  903,

        0,  903,    0,    0,  970,  913,  913,    0,    0,  913,
        0,  906,  909,  898,  898,  902,    0,  913,  902,  913,
      970,  970,    0,  902,  902,  902,  916,    0,  902,  915,
      903,  903,  915,  916,    0,  915,  902,  915,  902,  902,
      902,  970,  916,  916,    0,    0,  917,    0,  913,  913,
        0,  915,  916,  917,  919,    0,    0,  918,    0,  920,
        0,  919,  917,  917,  918,    0,  920,  902,  902,  904,
      919,  919,  904,  918,  918,  920,  920,  904,  904,  904,
        0,  918,  904,  917,  904,    0,  966,    0,  921,  919,
      904,  924,  904,  904,  904,  921,  920,    0,  924,  922,

        0,    0,  966,  966,  921,  921,  922,  924,  924,    0,
        0,  923,  966,  925,    0,  922,  922,  924,  923,  921,
      925,  904,  904,  908,  959,    0,  908,  923,  923,  925,
      925,  908,  908,  908,  922,  926,  908,    0,  908,    0,
      959,  959,  926,  923,  908,    0,  908,  908,  908,  927,
      925,  926,  926,    0,  928,    0,  927,  929,    0,  926,
      959,  928,  930,    0,  929,  927,  927,  927,    0,  930,
      928,  928,    0,  929,  929,  908,  908,  910,  930,  930,
      910,    0,    0,  930,    0,  910,  910,  910,  931,  929,
      910,  928,  910,  972,    0,  931,  932,    0,  910,    0,

      910,  910,  910,  932,  931,  931,  931,    0,  949,  972,
      972,  933,  932,  932,  933,  949,    0,  933,  932,  933,
      936,  974,    0,  936,  949,  949,  936,    0,  936,  910,
      910,  912,    0,  933,  912,    0,    0,  974,  974,  912,
      912,  912,  936,  949,  912,  942,  940,  940,  942,    0,
      940,  942,  912,  942,  912,  912,  912,  943,  940,  945,
      940,  944,    0,    0,  943,  960,  945,  942,  944,    0,
        0,    0,    0,  943,  943,  945,  945,  944,  944,  943,
      945,  960,  960,  912,  912,  914,  944,    0,  914,  940,
      940,    0,    0,  914,  914,  914,  946,  960,  914,    0,

      914,    0,  962,  946,  947,    0,  914,    0,  914,  914,
      914,  947,  946,  946,    0,  948,    0,  946,  962,  962,
      947,  947,  948,  962,  947,    0,    0,    0,  961,    0,
        0,  948,  948,  948,    0,    0,    0,  914,  914,  935,
        0,    0,  935,    0,  961,  961,    0,  935,  935,  935,
      950,    0,  935,  950,  935,    0,  950,    0,  950,  961,
      935,    0,  935,  935,  935,  954,  952,  952,  954,  958,
      952,  954,  950,  954,    0,    0,  955,    0,  952,  955,
      952,    0,  955,  963,  955,  958,  958,  954,    0,    0,
        0,  935,  935,  937,    0,  967,  937,    0,  955,  963,

      963,  937,  937,  937,  958,  963,  937,  964,  937,  952,
      952,  967,  967,    0,  937,  968,  937,  937,  937,  969,
        0,    0, 1002,  964,  964, 1002,  971,    0, 1002,  964,
     1002,  968,  968,  967,    0,  969,  969,  968,    0,  969,
        0,    0,  971,  971, 1002,  937,  937,  939,  971,  973,
      939,    0,    0,    0,    0,  939,  939,  939,  975,    0,
      939,  976,    0,    0,    0,  973,  973,    0,  939,  977,
      939,  939,  939,  978,  975,  975,  979,  976,  976,    0,
      973,  980,    0,  976,    0,  977,  977,    0,    0,  978,
      978,  981,  979,  979,    0,  975,    0,  980,  980,  939,

      939,  941,  982,    0,  941,    0,    0,  981,  981,  941,
      941,  941,  979,  983,  941,  984,  941,  981,  982,  982,
      985,    0,  941,    0,  941,  941,  941,  987,    0,  983,
      983,  984,  984,  986,    0,  988,  985,  985,    0,    0,
      984,    0,  985,  987,  987,  987,    0,    0,    0,  986,
      986,  988,  988,  941,  941,  953,  989,    0,  953,    0,
        0,    0,    0,  953,  953,  953,  990,    0,  953,  991,
      986,  992,  989,  989,    0,    0,  953,  993,  953,  953,
      953,  994,  990,  990,  995,  991,  991,  992,  992,  996,
        0,  991,    0,  993,  993,  997,    0,  994,  994,  999,

      995,  995,    0,  998,    0,  996,  996,  953,  953,    0,
     1000,  997,  997, 1001,    0,  999,  999,    0,  994,  998,
      998,  995,    0,    0,    0,  998, 1000, 1000,    0, 1001,
     1001,  996, 1004, 1004,  999, 1006, 1004, 1077, 1006, 1007,
        0, 1006, 1007, 1006, 1004, 1007, 1004, 1007, 1009,    0,
        0, 1010,    0, 1077, 1077, 1009, 1011, 1006, 1010,    0,
        0, 1007, 1079, 1011, 1009, 1009, 1009, 1010, 1010, 1010,
     1012,    0, 1011, 1011, 1013, 1004, 1004, 1012, 1079, 1079,
        0, 1013, 1014,    0,    0, 1015, 1012, 1012, 1016, 1014,
     1013, 1013, 1015,    0, 1011, 1016, 1017,    0, 1014, 1014,

     1013, 1015, 1015, 1017, 1016, 1016,    0,    0, 1012, 1018,
        0, 1019, 1017, 1017, 1020,    0, 1018, 1047, 1019, 1047,
     1047, 1020, 1021, 1047, 1017, 1018, 1018, 1019, 1019, 1021,
     1020, 1020,    0,    0, 1022,    0, 1023,    0, 1021, 1021,
     1020, 1022, 1024, 1023, 1021,    0, 1018, 1025, 1019, 1024,
     1022, 1022, 1023, 1023, 1025, 1026, 1022,    0, 1024, 1024,
     1027,    0, 1026, 1025, 1025,    0,    0, 1027,    0,    0,
        0, 1026, 1026, 1023,    0, 1025, 1027, 1027, 1028,    0,
     1029,    0, 1027,    0, 1030, 1028, 1031, 1029,    0, 1078,
     1026, 1030,    0, 1031, 1028, 1028, 1029, 1029,    0,    0,

     1030, 1030, 1031, 1031, 1032, 1078, 1078, 1033, 1030, 1029,
     1034, 1032,    0, 1034, 1033, 1028, 1034,    0, 1034, 1082,
     1032, 1032, 1031, 1033, 1033, 1038, 1036, 1036, 1038, 1078,
     1036, 1038, 1034, 1038,    0, 1082, 1082,    0, 1036, 1033,
     1036, 1032, 1039, 1041,    0, 1039, 1041, 1038, 1039, 1041,
     1039, 1041,    0, 1045, 1043, 1043, 1045,    0, 1043, 1045,
        0, 1045,    0,    0, 1039, 1041, 1043,    0, 1043, 1036,
     1036, 1046,    0, 1048, 1046, 1045,    0, 1046, 1049, 1046,
     1048, 1062,    0, 1062, 1062, 1049,    0, 1062,    0, 1048,
     1048, 1048, 1050, 1046, 1049, 1049, 1049, 1043, 1043, 1050,

     1051,    0,    0, 1052,    0, 1053,    0, 1051, 1050, 1050,
     1052, 1054, 1053,    0,    0,    0, 1051, 1051, 1054, 1052,
     1052, 1053, 1053,    0,    0,    0,    0, 1054, 1054, 1055,
     1050,    0, 1056, 1054,    0,    0, 1055, 1057, 1051, 1056,
     1052,    0, 1053, 1058, 1057, 1055, 1055,    0, 1056, 1056,
     1058, 1055,    0, 1057, 1057,    0,    0, 1059,    0, 1058,
     1058, 1060,    0,    0, 1059, 1058,    0,    0, 1060, 1056,
        0,    0, 1057, 1059, 1059,    0, 1061, 1060, 1060, 1061,
        0,    0, 1061,    0, 1061, 1060, 1059, 1063, 1063, 1065,
        0, 1063, 1065,    0,    0, 1065,    0, 1065, 1061, 1063,

     1066, 1063,    0, 1066,    0,    0, 1066, 1067, 1066, 1067,
     1067, 1065, 1068, 1067,    0,    0, 1069,    0, 1070, 1068,
     1071,    0, 1066, 1069, 1083, 1070,    0, 1071, 1068, 1068,
     1063, 1063, 1069, 1069, 1070, 1070, 1071, 1071, 1072,    0,
     1083, 1083, 1069, 1073, 1070, 1072, 1080,    0, 1068, 1076,
     1073,    0,    0,    0, 1072, 1072, 1083, 1071,    0, 1073,
     1073, 1074, 1080, 1080, 1074, 1076, 1076, 1074, 1081, 1074,
     1075, 1084, 1075, 1075, 1072, 1076, 1075,    0, 1085,    0,
     1073, 1080,    0, 1074, 1081, 1081, 1086, 1084, 1084, 1087,
        0, 1076, 1088, 1084, 1085, 1085, 1089,    0, 1090, 1081,

     1091,    0, 1086, 1086,    0, 1087, 1087,    0, 1088, 1088,
     1092, 1087, 1089, 1089, 1090, 1090, 1091, 1091, 1089, 1093,
     1090, 1094,    0, 1086, 1095,    0, 1092, 1092, 1096,    0,
     1097,    0, 1098,    0, 1099, 1093, 1093, 1094, 1094,    0,
     1095, 1095,    0, 1094, 1096, 1096, 1097, 1097, 1098, 1098,
     1099, 1099, 1100,    0, 1101,    0, 1099, 1102, 1104, 1097,
     1103, 1104, 1093,    0, 1104,    0, 1104,    0, 1100, 1100,
     1101, 1101,    0, 1102, 1102,    0, 1103, 1103, 1151, 1105,
     1104, 1105, 1105,    0, 1106, 1105, 1107,    0,    0, 1108,
     1100, 1106, 1103, 1107, 1151, 1151, 1108, 1109,    0,    0,

     1106, 1106, 1107, 1107, 1109, 1108, 1108,    0,    0, 1110,
        0, 1111,    0, 1109, 1109, 1112, 1110, 1109, 1111,    0,
        0, 1106, 1112, 1107, 1108, 1110, 1110, 1111, 1111, 1113,
        0, 1112, 1112,    0, 1114,    0, 1113, 1112, 1154,    0,
     1110, 1114, 1115,    0,    0, 1113, 1113,    0,    0, 1115,
     1114, 1114,    0, 1116, 1154, 1154,    0, 1117, 1115, 1115,
     1116, 1118,    0, 1115, 1117, 1114,    0,    0, 1118, 1116,
     1116, 1113, 1119, 1117, 1117, 1117, 1120, 1118, 1118, 1119,
     1121,    0, 1149, 1120, 1122,    0,    0, 1121, 1119, 1119,
        0, 1122, 1120, 1120,    0, 1123, 1121, 1121, 1149, 1149,

     1122, 1122, 1123, 1124, 1149, 1119, 1121, 1120, 1125,    0,
     1124, 1123, 1123,    0, 1126, 1125,    0,    0,    0, 1124,
     1124, 1126,    0,    0, 1125, 1125, 1127,    0,    0, 1127,
     1126, 1126, 1127,    0, 1127, 1129,    0, 1123, 1129, 1124,
        0, 1129,    0, 1129, 1125,    0, 1126, 1128, 1127, 1128,
     1128, 1155, 1130, 1128, 1130, 1130, 1131, 1129, 1130, 1132,
        0,    0, 1133, 1131, 1134,    0, 1132, 1155, 1155, 1133,
     1135, 1134, 1131, 1131, 1156, 1132, 1132, 1135, 1133, 1133,
     1134, 1134, 1136,    0, 1134,    0, 1135, 1135, 1137, 1136,
     1156, 1156, 1135, 1131, 1138, 1137, 1132, 1133, 1136, 1136,

     1139, 1138,    0, 1152, 1137, 1137, 1140, 1139,    0, 1137,
     1138, 1138, 1138, 1140, 1141,    0, 1139, 1139,    0, 1152,
     1152, 1141, 1140, 1140, 1136,    0, 1142,    0, 1144, 1142,
     1141, 1141, 1142, 1139, 1142, 1144, 1143, 1140, 1143, 1143,
     1152,    0, 1143,    0, 1144, 1144, 1145,    0, 1142,    0,
     1146,    0, 1150, 1145, 1147,    0, 1141, 1146, 1148, 1144,
        0, 1147, 1145, 1145, 1153, 1148, 1146, 1146, 1150, 1150,
     1147, 1147, 1157,    0, 1148, 1148, 1146, 1145,    0,    0,
     1153, 1153, 1158, 1150, 1159,    0, 1160,    0, 1157, 1157,
     1147, 1161,    0, 1157, 1148, 1153, 1162,    0, 1158, 1158,

     1159, 1159, 1160, 1160, 1163,    0, 1159, 1161, 1161, 1164,
        0, 1165, 1162, 1162, 1195,    0, 1166,    0, 1165,    0,
     1163, 1163, 1160, 1166,    0, 1164, 1164, 1165, 1165, 1167,
     1195, 1195, 1166, 1166,    0,    0, 1167, 1165,    0,    0,
     1197, 1163, 1166, 1168,    0, 1167, 1167, 1167, 1169, 1164,
     1168, 1170,    0,    0, 1172, 1169, 1197, 1197, 1170, 1168,
     1168, 1172,    0,    0, 1169, 1169,    0, 1170, 1170, 1171,
     1172, 1172, 1169,    0, 1173,    0, 1171, 1174, 1172, 1171,
     1168, 1173, 1170,    0, 1174, 1171, 1171,    0, 1175,    0,
     1173, 1173, 1176, 1174, 1174, 1175,    0,    0, 1194, 1176,

     1177,    0,    0, 1178, 1175, 1175,    0, 1177, 1176, 1176,
     1178, 1179, 1176, 1175, 1194, 1194, 1177, 1177, 1179, 1178,
     1178,    0, 1180,    0,    0, 1181,    0, 1179, 1179, 1180,
     1182, 1177, 1181, 1179, 1194,    0,    0, 1182, 1180, 1180,
        0, 1181, 1181, 1183,    0, 1184, 1182, 1182, 1185,    0,
     1183, 1186, 1184, 1181,    0, 1185, 1182,    0, 1186, 1183,
     1183, 1184, 1184, 1184, 1185, 1185,    0, 1186, 1186, 1183,
     1187,    0, 1188,    0, 1189,    0, 1190, 1187,    0, 1188,
     1187, 1189, 1186, 1190,    0, 1185, 1187, 1187, 1188, 1188,
     1189, 1189, 1190, 1190, 1189, 1191,    0, 1188, 1192,    0,

     1190, 1193, 1191,    0, 1196, 1192,    0,    0, 1193, 1198,
        0, 1191, 1191,    0, 1192, 1192, 1199, 1193, 1193, 1191,
     1196, 1196, 1200, 1193,    0, 1198, 1198,    0,    0, 1192,
     1201,    0, 1199, 1199, 1202,    0, 1203,    0, 1200, 1200,
     1196, 1204,    0, 1203, 1200,    0, 1201, 1201, 1204,    0,
     1202, 1202, 1203, 1203, 1205,    0, 1201, 1204, 1204,    0,
     1206, 1205, 1207,    0,    0,    0, 1210, 1206, 1222, 1207,
     1205, 1205,    0, 1210,    0, 1203, 1206, 1206, 1207, 1207,
     1204, 1208, 1210, 1210, 1222, 1222, 1209,    0, 1208, 1211,
     1210, 1205, 1206, 1209, 1212,    0, 1211, 1208, 1208, 1207,

        0, 1212, 1209, 1209, 1222, 1211, 1211, 1208, 1209,    0,
     1212, 1212, 1213,    0, 1214,    0,    0, 1215,    0, 1213,
     1216, 1214,    0,    0, 1215, 1211,    0, 1216, 1213, 1213,
     1214, 1214, 1217, 1215, 1215,    0, 1216, 1216,    0, 1217,
     1218,    0,    0, 1219,    0,    0,    0, 1218, 1217, 1217,
     1219, 1213, 1216, 1214, 1215, 1220, 1218, 1218, 1223, 1219,
     1219, 1221, 1220,    0, 1243, 1219, 1218,    0, 1221, 1217,
        0, 1220, 1220,    0, 1223, 1223, 1224, 1221, 1221, 1220,
     1243, 1243,    0, 1224, 1225,    0,    0, 1226,    0,    0,
     1223, 1225, 1224, 1224, 1226, 1227,    0, 1221, 1224,    0,

     1225, 1225, 1227, 1226, 1226,    0, 1225, 1228,    0, 1229,
        0, 1227, 1227, 1226, 1228, 1230, 1229,    0,    0,    0,
     1231,    0, 1230, 1228, 1228, 1229, 1229, 1231, 1232, 1229,
     1227, 1230, 1230,    0,    0, 1232, 1231, 1231,    0, 1233,
        0, 1234,    0,    0, 1232, 1232, 1233, 1235, 1234, 1237,
     1232,    0, 1236,    0, 1235, 1233, 1233, 1234, 1234, 1236,
        0, 1233,    0, 1235, 1235, 1237, 1237, 1234, 1236, 1236,
     1238,    0, 1236,    0, 1239,    0, 1240, 1238, 1241,    0,
     1237, 1239, 1235, 1240,    0, 1241, 1238, 1238,    0, 1242,
     1239, 1239, 1240, 1240, 1241, 1241, 1242, 1244,    0,    0,

     1245,    0, 1246,    0, 1244, 1242, 1242, 1245, 1240, 1246,
        0,    0,    0, 1244, 1244,    0, 1245, 1245, 1246, 1246,
        0, 1242,    0,    0,    0,    0,    0,    0, 1244,    0,
        0, 1245, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1253, 1253,    0,
        0, 1253, 1253, 1253, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1255, 1255,    0,    0, 1255, 1255, 1255, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1257, 1257,    0,
        0, 1257, 1257, 1257, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1259, 1259,    0,    0, 1259, 1259, 1259, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1261, 1261,    0,
        0, 1261, 1261, 1261, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1263,    0,    0,    0, 1263,    0, 1263, 1263,
        0, 1263, 1263, 1264,    0,    0, 1264, 1264,    0, 1264,
     1264, 1264, 1264, 1264, 1265, 1265,    0, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1266,    0, 1266, 1266,    0,

        0, 1266,    0, 1266, 1267, 1267, 1267, 1267, 1267,    0,
     1267, 1268, 1268, 1268, 1268, 1268,    0, 1268, 1269, 1269,
     1269, 1269, 1269,    0, 1269, 1270, 1270, 1270, 1270, 1270,
        0, 1270, 1271, 1271, 1271, 1271, 1271,    0, 1271, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1273,    0,    0,
        0, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1275,    0,    0,    0,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1277,    0,    0,    0, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1278,    0,    0,    0,

     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1280,    0,    0,    0, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1282,    0,    0,    0, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1283,    0,    0, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1284,    0,    0,    0,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1285,    0,    0,
        0, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1286,    0,
        0, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1287,
        0,    0,    0, 1287, 1287, 1287, 1287, 1287, 1287, 1287,

     1288,    0,    0,    0, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1289,    0,    0, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1290,    0,    0,    0, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1291,    0,    0,    0, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1292,    0,    0,    0, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1293,    0,    0, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1294,    0,    0,    0,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1295,    0,    0,
        0, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1296,    0,
        0, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1297,

        0,    0,    0, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1298,    0,    0,    0, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1299,    0,    0, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1300,    0,    0,    0, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1301,    0,    0, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1302,    0,    0, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1303,    0,    0,    0, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1304,    0,    0,    0,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1305,    0,    0,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1306, 1306,

        0,    0, 1306, 1306, 1306, 1307,    0,    0, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1308,    0,    0,    0,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1309,    0,    0,
        0, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1310,    0,
        0, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1311,
        0,    0, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1312,    0,    0,    0, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1313,    0,    0, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1314,    0,    0,    0, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1315,    0,    0,    0, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1316,    0,    0, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1317, 1317,    0,    0, 1317,
     1317, 1317, 1318,    0,    0, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1319,    0,    0,    0, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1320,    0,    0, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1321,    0,    0,    0, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1322,    0,    0,    0,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1323,    0,    0,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1324, 1324,
        0,    0, 1324, 1324, 1324, 1325,    0,    0, 1325, 1325,

     1325, 1325, 1325, 1325, 1325, 1325, 1326,    0,    0,    0,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1327,    0,    0,
        0, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1328,    0,
        0, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1329,
        0,    0, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1330, 1330,    0,    0, 1330, 1330, 1330, 1331,    0,    0,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1332,    0,
        0, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1333,
        0,    0, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1334,    0,    0, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
#define INITIAL 0
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); DebugAdvisory("Stored " << t); }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); DebugAdvisory("Stored fixUp " << t); }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;
#define ID_MODE 1

#define CMD_MODE 2

#define SEEN_DOT 3

#define BUBBLE_MODE 4

#define END_STATEMENT_MODE 5

#define END_COMMAND_MODE 6

#define FILE_NAME_MODE 7

#define FILE_NAME_QUOTE_MODE 8

#define STRING_MODE 9

#define LATEX_MODE 10

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 114 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1248 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8202 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_XUNIFY;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_OPS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 99:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 105:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 107:
YY_RULE_SETUP
#line 279 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 280 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 281 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 282 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 283 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 284 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 285 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 286 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 287 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 288 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 289 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 290 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 291 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 292 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 293 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 294 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 295 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 296 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 299 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 300 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 301 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 302 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 303 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 304 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 159:
YY_RULE_SETUP
#line 337 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 343 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 349 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 355 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 361 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 367 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 373 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 379 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 385 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 394 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 398 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 409 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 410 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 421 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 432 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 174:
YY_RULE_SETUP
#line 441 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 175:
YY_RULE_SETUP
#line 449 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 176:
YY_RULE_SETUP
#line 457 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 461 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 465 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 179:
YY_RULE_SETUP
#line 473 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 479 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 480 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 481 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 482 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 483 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 484 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 493 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 187:
YY_RULE_SETUP
#line 502 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 508 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 509 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 190:
YY_RULE_SETUP
#line 518 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 523 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 192:
YY_RULE_SETUP
#line 532 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 533 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 538 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 552 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 556 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 560 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 564 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 567 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 573 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 574 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 575 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 580 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1248 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1248 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1247);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 580 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"
