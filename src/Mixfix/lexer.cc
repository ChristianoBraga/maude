/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 177
#define YY_END_OF_BUFFER 178
static yyconst short int yy_accept[881] =
    {   0,
      174,  174,  174,  174,  174,  174,    0,    0,    0,    0,
      165,  165,    0,    0,  178,  176,  174,  175,  175,   97,
      176,   95,   97,   97,   97,   95,   96,   96,   97,  176,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   15,   97,   97,   97,   97,   97,
       97,   97,  153,  176,  151,  151,  151,  153,  151,  151,
      153,  176,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      101,  176,   99,  101,   99,  101,  101,  100,   99,  101,
      176,  101,  101,  159,  160,  161,  154,  158,  163,  162,

      164,  165,  166,  173,  167,  172,  172,  168,  169,  167,
      170,  171,  174,   97,    0,   97,    0,    0,    0,   97,
       97,   96,    0,   97,   97,   97,   97,   97,   97,   11,
       97,   97,   97,   97,   97,   40,   97,   97,   72,   97,
       97,   97,   97,   97,   97,   97,   59,   97,    5,   97,
       97,   97,   14,   97,   71,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   35,   69,   97,   97,   97,   97,
       97,   97,   97,   97,   73,   97,   97,   97,   97,   97,
       97,   97,   97,    6,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,  153,    0,  152,  153,    0,    0,

        0,  153,  153,  147,  150,  148,    0,  153,  153,  153,
      153,  153,  142,  153,  153,  153,  153,  141,  130,  153,
      153,  153,  153,  129,  153,  128,  153,  153,  153,  153,
      139,  153,  153,  153,  135,  153,  130,  153,  143,  153,
      153,  153,  153,  153,  102,  130,  153,  149,  101,    0,
      101,    0,    0,    0,  101,  101,    0,   98,  100,    0,
        5,  159,  155,  156,  157,  163,  165,  167,  167,   97,
        0,    2,    2,   97,   97,   97,   64,   97,   97,   97,
       97,   63,   97,   97,   97,   97,   97,   97,   97,   97,
       16,   72,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,   97,   97,   97,   97,   71,   97,   97,    6,
       27,   97,   97,   36,   97,   69,   97,   97,   97,   97,
       97,   97,   10,   97,   94,   19,   97,   97,   21,   73,
       97,   97,   97,   33,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   70,   97,   97,   97,   97,
       97,   97,   97,  153,    0,    2,    2,  153,  153,  140,
      153,  153,  144,  153,  153,  153,  153,  153,  153,  153,
      153,  107,  153,  130,  153,  145,  153,  153,  153,  153,
      153,  153,  123,  122,  153,  136,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  138,  101,    0,    2,

        2,    0,    0,    0,    0,    2,    2,    2,    1,    2,
        2,   97,   97,   97,   42,   97,   97,   97,   97,   97,
       97,   97,   49,   26,   97,   20,   97,   97,   87,   22,
       97,   97,   55,   97,   23,   97,   97,   97,   97,    9,
       25,   97,    3,   97,   97,   97,   18,   97,    7,   97,
       97,   90,   13,   97,   97,   97,   97,   15,   97,   97,
       97,   97,   97,   73,   97,   97,   34,   68,   24,   97,
       85,   97,   97,   60,   97,   97,   97,   70,   97,    8,
       97,   97,   56,   97,   97,    0,    0,    2,    2,    2,
        1,    2,    2,  153,  153,  106,  153,  153,  118,  153,

      153,  145,  153,  153,  146,  153,  153,  103,  153,  153,
      153,  108,  153,  153,  109,  153,  153,  110,    3,  153,
      153,  137,  153,  153,  117,  112,  153,  153,  131,  153,
      153,  153,  153,  153,  153,  138,    0,    0,    2,    2,
        1,    2,    2,    0,    0,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,   84,   97,   58,   88,   97,
       41,   52,   97,   97,   97,   97,   97,   97,   77,   97,
       82,   97,   97,   97,   97,   97,   97,   97,   53,   97,
       75,   91,   28,   97,   97,   97,   97,   97,   57,   17,
       51,   97,   97,   12,   97,   97,   97,   97,   97,   97,

       97,   68,   97,   61,   50,   97,   97,   37,   31,   97,
       67,   86,   44,   97,   97,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,  105,  133,  153,  153,  153,
      124,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  104,  119,  153,  153,  153,  153,  153,  153,  153,
      111,  131,  153,  115,  153,  153,  153,  130,    2,    2,
        1,    1,    1,    1,    2,    2,    2,    1,    1,    1,
        1,    1,    2,    2,   38,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   79,
       97,    4,   97,   97,   91,   54,   66,   27,   97,   93,

       57,   97,   97,   97,   97,   19,   83,   48,   97,   30,
       45,   97,   97,   97,   62,   97,   29,   32,    1,    1,
        1,    1,    1,    2,    2,  153,  153,  121,  153,  153,
        4,  116,  113,  153,  153,  153,  153,  153,  153,  153,
      122,  153,  153,  153,  153,  153,  153,  153,  153,  153,
        1,    1,    1,    1,    1,    2,    2,    1,    1,   97,
       58,   97,   43,   76,   97,   47,   97,   97,   20,   97,
       97,   81,   97,   97,   80,   65,   97,   97,   92,   78,
       97,   21,   97,   97,   74,   39,    1,    1,  153,  153,
      153,  153,  153,  125,  153,  153,  153,  153,  123,  153,

      126,  153,  153,  153,  120,  153,  153,  132,  153,    1,
        1,   97,   97,   76,   97,   97,   26,   46,   22,   97,
       23,   97,   97,   94,   24,   97,  153,  153,  153,  153,
      153,  153,  153,  153,  109,  114,  153,  153,  153,  115,
      134,  132,  153,   97,   89,   97,   49,   55,   18,   97,
       97,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      127,   97,   97,  153,  153,  153,  153,  108,  153,  112,
      134,   97,  105,  106,  153,  117,   50,  153,  121,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   22,    8,   24,   25,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   13,   53,   54,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,   10,   10,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    5,   11
    } ;

static yyconst short int yy_base[928] =
    {   0,
        0,    0,   55,    0,  110,  163,  134,  187,  143,  196,
      148,  153,  216,  271,  261, 5367,  201, 5367, 5367,  204,
      124, 5367,  221, 5367,  223,  225,  227,  261,  231,  243,
      264,  274,  278,  303,  310,  320,  313,  322,  330,  342,
      353,  364,  367,  375,  387,  400,  438,  407,  404,  427,
      440,  410,  281,  177, 5367,  463,  461,  480,  483,  494,
      497,  506,  516,  552,  514,  554,  526,  520,  595,  540,
      575,  598,  620,  632,  593,  642,  644,  646,  669,  680,
      234,  186, 5367,  430, 5367,  528,  704,  473,  435,  502,
      704,  548, 5367,    0, 5367, 5367, 5367,  302,    0, 5367,

     5367,    0, 5367, 5367,    0, 5367, 5367, 5367, 5367,  627,
     5367, 5367,  235,  607,  195,  640,  710,  362,  241,  713,
      718,  722,  738,  726,  745,  749,  752,  667,  755,  763,
      769,  773,  776,  786,  794,  799,  803,  808,  811,  820,
      828,  822,  834,  840,  842,  845,  851,  862,  868,  870,
      873,  880,  890,  892,  894,  898,  901,  903,  915,  920,
      922,  924,  942,  932,  944,  946,  952,  955,  969,  974,
      976,  982,  995,  999, 1001, 1005, 1012, 1008, 1026, 1030,
     1035, 1044, 1052, 1047, 1058, 1069, 1075, 1077, 1079, 1082,
     1089, 1099, 1101, 1106, 1112,  372, 1123, 1125, 1142,  394,

      232, 1145, 1150, 1162, 1164, 1167, 1171, 1181, 1187, 1191,
     1210, 1222, 1224, 1227, 1241, 1246, 1258, 1260, 1264, 1270,
     1281, 1283, 1295, 1306, 1308, 1318, 1328, 1330, 1332, 1351,
     1355, 1352, 1369, 1379, 1383, 1393, 1396, 1407, 1413, 1419,
     1424, 1436, 1441, 1447, 1458, 1460, 1464, 1477, 1189,  457,
     1326, 1486,  491,  228, 1494, 1489, 1518, 5367, 1517, 1518,
     1338,    0, 5367, 5367, 5367,    0,    0,    0, 5367, 1522,
      524, 1571, 1624, 1534, 1527, 1539, 1544, 1564, 1574, 1578,
     1581, 1585, 1592, 1588, 1612, 1630, 1618, 1635, 1641, 1643,
     1595, 1649, 1654, 1661, 1663, 1666, 1671, 1680, 1683, 1685,

     1688, 1690, 1692, 1711, 1714, 1718, 1720, 1723, 1725, 1728,
     1742, 1745, 1748, 1752, 1755, 1762, 1769, 1772, 1779, 1782,
     1786, 1791, 1803, 1805, 1809, 1811, 1813, 1816, 1823, 1830,
     1840, 1836, 1843, 1847, 1853, 1860, 1866, 1871, 1873, 1879,
     1883, 1885, 1891, 1904, 1913, 1915, 1921, 1917, 1925, 1927,
     1938, 1945, 1948, 1951,  562, 1990, 2043, 1968, 1972, 1993,
     2010, 1992, 2004, 2046, 2016, 2043, 2068, 2085, 2088, 2091,
     2105, 2109, 2111, 2128, 2131, 2142, 2145, 2148, 2167, 2170,
     2172, 2189, 2184, 2195, 2208, 2213, 2218, 2230, 2235, 2240,
     2253, 2258, 2263, 2275, 2285, 2281, 2302, 2021,  565, 2346,

     2399,  212,  208,  589,  211,    0,  191, 1553, 2452,  102,
     2505, 2054, 2304, 2307, 2051, 2313, 2178, 2315, 2350, 2352,
     2355, 2357, 2283, 2360, 2377, 2381, 2387, 2405, 2407, 2416,
     2409, 2419, 2440, 2445, 2448, 2459, 2471, 2469, 2473, 2477,
     2498, 2509, 2511, 2515, 2519, 2522, 2528, 2536, 2539, 2546,
     2550, 2558, 2563, 2567, 2569, 2572, 2575, 2581, 2586, 2589,
     2598, 2606, 2600, 2618, 2620, 2626, 2628, 2631, 2640, 2648,
     2652, 2654, 2660, 2657, 2665, 2671, 2678, 2682, 2684, 2688,
     2691, 2701, 2705, 2709, 2711,  612,  208,  185, 2737,  170,
     2760,  117, 2813, 2731, 2742, 2756, 2774, 2780, 2785, 2791,

     2817, 2820, 2823, 2843, 2847, 2861, 2864, 2878, 2882, 2892,
     2895, 2905, 2909, 2915, 2927, 2932, 2946, 2949, 2951, 2963,
     2968, 2974, 2985, 2987, 2991, 3008, 3010, 3012, 3030, 3034,
     3036, 3040, 3054, 3060, 3064, 3074,  650,  181,  162, 2874,
     3099,  155, 3152,  159,  146, 3110,  259,    0, 3205, 3111,
      135, 3258, 3115,  134, 3131, 2753, 3042, 3062, 2825, 2794,
     2957, 3082, 3118, 3121, 3140, 3146, 3135, 3160, 3164, 3166,
     3172, 3177, 3186, 3199, 3208, 3216, 3225, 3227, 3229, 3262,
     3239, 3251, 3264, 3268, 3272, 3275, 3281, 3289, 3295, 3300,
     3303, 3306, 3313, 3320, 3324, 3326, 3337, 3333, 3344, 3350,

     3355, 3357, 3362, 3367, 3369, 3381, 3386, 3388, 3390, 3392,
     3395, 3398, 3416, 3418, 3420, 3430,  764, 3470, 3445,    0,
      125, 3523, 3445,  110, 3468, 3480, 3441, 3484, 3494, 3519,
     3530, 3533, 3543, 3554, 3564, 3568, 3581, 3585, 3598, 3604,
     3610, 3615, 3621, 3627, 3632, 3638, 3644, 3655, 3657, 3669,
     3680, 3682, 3692, 3703, 3705, 3716, 3727, 3729, 3754,  985,
     3777, 3761,  105, 3830, 3761,   97, 3788, 3789, 1139, 3793,
        0, 3815, 3819, 1238, 3423, 3808, 3492, 3516, 3663, 3562,
     3755, 3834, 3812, 3593, 3838, 3841, 3844, 3506, 3851, 3591,
     3861, 3652, 3864, 3868, 3725, 3785, 3870, 3878, 3881, 3887,

     3892, 3895, 3899, 3901, 3909, 3912, 3918, 3923, 3929, 3931,
     3936, 3940, 3942, 3948, 3953, 3959, 3966, 3970, 3992, 1365,
     3960,    0, 3996, 4007, 1474, 4001, 4012, 4015, 4025, 4035,
     4038, 4048, 4058, 4061, 4071, 4075, 4085, 4097, 4099, 4109,
     4119, 4121, 4123, 4140, 4143, 4153, 4167, 4170, 4173, 4184,
     4203, 1508, 4191,    0, 4216, 4226, 1982, 4227, 2892, 3998,
     4079, 4197, 4117, 4223, 4228, 4149, 4231, 4233, 4237, 4245,
     4250, 4259, 4263, 4267, 4270, 4276, 4280, 4287, 4289, 4294,
     4297, 4299, 4311, 4301, 4318, 4320, 4345, 3001, 4339, 4341,
     4351, 4353, 4363, 4373, 4376, 4387, 4399, 4401, 4404, 4418,

     4423, 4436, 4440, 4442, 4446, 4459, 4464, 4469, 4481, 4491,
     3457, 4477, 4487, 4349, 4494, 4506, 4508, 4511, 4513, 4518,
     4516, 4525, 4535, 4537, 4539, 4542, 4549, 4560, 4566, 4572,
     4577, 4589, 4591, 4595, 4609, 4613, 4615, 4626, 4636, 4640,
     4646, 4657, 4663, 4634, 4547, 4659, 4665, 4668, 4671, 4676,
     4685, 4688, 4698, 4702, 4708, 4712, 4725, 4730, 4742, 4747,
     4752, 4755, 4760, 4772, 4785, 4789, 4795, 4808, 4812, 4818,
     4830, 4783, 4832, 4835, 4849, 4852, 4706, 4854, 4866, 5367,
     4893, 4904, 4915, 4926, 4937, 4944, 4952, 4959, 4967, 4974,
     4982, 4993, 5004, 5015, 5025, 5031, 5038, 5045, 5053, 5064,

     5072, 5083, 5091, 5102, 5113, 5124, 5135, 5146, 5157, 5168,
     5179, 5190, 5201, 5212, 5223, 5234, 5245, 5256, 5267, 5278,
     5289, 5300, 5311, 5322, 5333, 5344, 5355
    } ;

static yyconst short int yy_def[928] =
    {   0,
      880,    1,  880,    3,  881,  881,  882,  882,  883,  883,
      884,  884,  885,  885,  880,  880,  880,  880,  880,  886,
      887,  880,  886,  880,  886,  886,  886,  886,  886,  880,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  888,  889,  880,  888,  888,  888,  888,  888,
      888,  880,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      890,  891,  880,  890,  880,  890,  890,  890,  890,  890,
      880,  890,  880,  892,  880,  880,  880,  880,  893,  880,

      880,  894,  880,  880,  895,  880,  880,  880,  880,  880,
      880,  880,  880,  886,  887,  886,  896,  887,  887,  886,
      886,  886,  880,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  888,  889,  888,  888,  897,  889,

      889,  888,  888,  888,  888,  888,  880,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,   69,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  890,  891,
      890,  898,  891,  891,  890,  890,  880,  880,  890,  880,
      890,  892,  880,  880,  880,  893,  894,  895,  880,  886,
      899,  900,  900,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,

      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  888,  901,  902,  902,  888,  888,  888,
      888,   69,  888,  888,  888,   69,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  890,  903,  904,

      904,  880,  880,  899,  899,  905,  273,  906,  907,  273,
      908,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  901,  901,  357,  909,  357,
      910,  357,  911,  888,  888,  888,  888,  888,  888,  888,

      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  903,  903,  401,  912,
      913,  401,  914,  880,  880,  906,  906,  915,  907,  916,
      549,  917,  905,  273,  918,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,

      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  909,  909,  910,  919,  618,
      618,  920,  905,  357,  921,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  912,  912,
      913,  922,  661,  923,  905,  401,  924,  916,  916,  915,
      549,  925,  918,  918,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,

      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  919,  919,
      915,  618,  926,  921,  921,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      922,  922,  915,  661,  927,  924,  924,  925,  925,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  926,  926,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,

      888,  888,  888,  888,  888,  888,  888,  888,  888,  927,
      927,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  886,  886,  886,  886,  886,  886,  886,
      886,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  886,  886,  888,  888,  888,  888,  888,  888,  888,
      888,  886,  888,  888,  888,  888,  886,  888,  888,    0,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880
    } ;

static yyconst short int yy_nxt[5423] =
    {   0,
       16,   17,   18,   16,   19,   17,   17,   20,   21,   22,
       22,   23,   20,   24,   25,   26,   27,   28,   20,   20,
       20,   22,   20,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   20,   38,   20,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   20,
       20,   24,   24,   20,   20,   16,   17,   18,   16,   19,
       17,   17,   53,   54,   55,   55,   56,   57,   55,   58,
       57,   53,   53,   59,   60,   53,   55,   53,   61,   62,
       63,   53,   64,   65,   66,   67,   68,   53,   69,   70,
       53,   71,   72,   53,   73,   74,   53,   75,   76,   77,

       78,   79,   53,   53,   53,   53,   55,   55,   80,   53,
       16,   17,   18,   16,   19,   17,   17,  539,   82,   83,
       83,   84,  407,   85,   86,   87,  553,   88,   89,  753,
      488,   83,  114,   90,   91,   95,   96,  488,   96,   95,
       95,  623,   97,   92,  100,  101,  119,  101,  100,  721,
      103,  100,  103,  103,  407,  103,   98,  103,  103,  670,
      258,   93,   93,   16,   17,   18,   16,   19,   17,   17,
      258,   82,   83,   83,   84,  539,   85,   86,   87,  665,
       88,   89,  539,  537,   83,  195,   90,   91,   95,   96,
      488,   96,   95,   95,  249,   97,   92,  100,  101,  201,

      101,  100,  113,  114,  100,  488,  113,  113,  254,   98,
      486,  407,  115,  404,   93,   93,  104,  119,  106,  104,
      107,  104,  545,  544,  104,  108,  109,  116,  117,  115,
      253,  115,  120,  115,  200,  115,  113,  121,  110,  115,
      113,  113,  250,  118,  116,  117,  116,  117,  116,  117,
      116,  117,  116,  116,  116,  123,  116,  251,  252,  406,
      880,  118,  406,  880,  116,  118,  880,  111,  112,  115,
      104,  104,  115,  106,  104,  107,  104,  122,  122,  104,
      108,  109,  115,  880,  116,  117,  115,  116,  117,  196,
      124,  880,  125,  110,  116,  116,  197,  116,  117,  880,

      126,  116,  117,  880,  198,  199,  130,  880,  263,  880,
      264,  115,  880,  127,  131,  132,  128,  133,  115,  129,
      134,  115,  111,  112,  265,  104,  116,  117,  115,  880,
      115,  880,  135,  116,  117,  880,  116,  117,  115,  880,
      147,  880,  136,  116,  117,  116,  117,  880,  137,  138,
      115,  139,  140,  116,  117,  148,  142,  143,  141,  144,
      149,  115,  145,  150,  146,  116,  117,  151,  880,  880,
      114,  880,  115,  880,  880,  115,  116,  117,  154,  155,
      195,  152,  156,  115,  119,  153,  157,  116,  117,  159,
      116,  117,  158,  162,  201,  115,  880,  163,  116,  117,

      167,  880,  195,  160,  164,  165,  880,  166,  115,  161,
      116,  117,  115,  880,  168,  115,  201,  169,  115,  880,
      170,  880,  171,  116,  117,  173,  880,  116,  117,  174,
      116,  117,  172,  116,  117,  115,  175,  880,  250,  184,
      185,  255,  187,  250,  880,  176,  115,  193,  115,  186,
      116,  117,  188,  251,  252,  194,  189,  880,  251,  252,
      190,  116,  117,  116,  117,  249,  880,  177,  880,  196,
      178,  196,  191,  192,  202,  179,  197,  180,  197,  254,
      181,  250,  182,  183,  198,  199,  198,  199,  196,  259,
      259,  196,  880,  880,  203,  197,  251,  252,  197,  249,

      204,  205,  196,  198,  199,  196,  198,  199,  880,  197,
      250,  880,  197,  254,  206,  198,  198,  198,  199,  198,
      198,  207,  196,  880,  196,  251,  260,  198,  196,  197,
      880,  197,  270,  880,  196,  197,  250,  198,  199,  198,
      199,  197,  256,  198,  199,  222,  405,  216,  196,  198,
      199,  251,  252,  880,  880,  197,  250,  198,  198,  208,
      196,  880,  196,  198,  199,  220,  228,  197,  221,  197,
      354,  251,  252,  398,  880,  198,  199,  198,  199,  880,
      880,  209,  880,  196,  487,  880,  261,  538,  210,  211,
      197,  212,  217,  213,  214,  218,  215,  270,  198,  199,

      229,  196,  219,  196,  230,  880,  196,  880,  197,  880,
      197,  405,  880,  197,  880,  115,  198,  199,  198,  199,
      354,  198,  199,  223,  231,  224,  238,  232,  196,  239,
      116,  117,  880,  225,  487,  197,  269,  269,  226,  227,
      196,  233,  880,  198,  199,  880,  234,  197,  115,  880,
      196,  880,  196,  880,  196,  198,  199,  197,  398,  197,
      235,  197,  880,  116,  123,  198,  199,  198,  199,  198,
      199,  236,  538,  244,  237,  115,  880,  196,  269,  269,
      880,  240,  241,  245,  197,  880,  242,  243,  196,  246,
      116,  117,  198,  199,  247,  197,  279,  880,  880,  880,

      248,  880,  880,  198,  199,  257,  258,  257,  257,  257,
      257,  880,  250,  251,  251,  880,  880,  251,  271,  116,
      116,  115,  880,  116,  272,  251,  115,  251,  252,  880,
      115,  116,  273,  880,  115,  880,  116,  117,  122,  122,
      880,  116,  117,  880,  880,  116,  117,  116,  116,  116,
      117,  116,  880,  115,  880,  251,  251,  115,  880,  116,
      115,  116,  116,  115,  406,  274,  200,  406,  116,  117,
      200,  115,  116,  117,  880,  116,  117,  115,  116,  117,
      278,  115,  276,  880,  115,  277,  116,  117,  280,  116,
      116,  275,  116,  117,  115,  880,  116,  117,  281,  116,

      117,  282,  115,  880,  880,  880,  880,  115,  880,  116,
      117,  115,  283,  284,  285,  287,  115,  116,  117,  115,
      288,  286,  116,  117,  880,  880,  116,  117,  115,  880,
      115,  116,  117,  880,  116,  117,  115,  289,  291,  880,
      290,  880,  115,  116,  117,  116,  117,  296,  115,  293,
      115,  116,  117,  115,  292,  294,  880,  116,  117,  115,
      880,  880,  880,  116,  117,  116,  117,  880,  116,  117,
      115,  299,  295,  297,  116,  117,  115,  184,  115,  880,
      880,  115,  298,  880,  880,  116,  117,  300,  115,  880,
      880,  116,  117,  116,  117,  301,  116,  117,  115,  303,

      115,  880,  115,  116,  117,  304,  115,  880,  302,  115,
      880,  115,  880,  116,  117,  116,  117,  116,  117,  305,
      880,  116,  117,  115,  116,  117,  116,  117,  115,  880,
      115,  310,  115,  880,  880,  308,  306,  307,  116,  117,
      115,  880,  880,  116,  117,  116,  117,  116,  117,  309,
      115,  880,  115,  880,  115,  116,  117,  311,  184,  313,
      115,  880,  312,  115,  880,  116,  117,  116,  117,  116,
      117,  315,  314,  880,  880,  116,  117,  115,  116,  117,
      880,  880,  115,  880,  115,  406,  880,  253,  406,  316,
      115,  253,  116,  117,  317,  319,  318,  116,  117,  116,

      117,  880,  320,  115,  323,  116,  117,  115,  321,  115,
      880,  880,  880,  115,  880,  324,  115,  322,  116,  117,
      115,  880,  116,  117,  116,  117,  880,  326,  116,  117,
      880,  116,  117,  880,  115,  116,  117,  332,  115,  325,
      880,  331,  327,  115,  330,  328,  329,  335,  333,  116,
      117,  880,  115,  116,  117,  115,  334,  880,  116,  117,
      115,  880,  880,  880,  338,  336,  115,  116,  117,  339,
      116,  117,  337,  340,  880,  116,  117,  115,  341,  880,
      880,  116,  117,  115,  880,  115,  880,  115,  880,  342,
      115,  880,  116,  117,  344,  343,  880,  115,  116,  117,

      116,  117,  116,  117,  880,  116,  117,  115,  345,  115,
      880,  348,  116,  117,  115,  880,  880,  880,  349,  346,
      196,  347,  116,  117,  116,  117,  352,  197,  350,  116,
      117,  196,  880,  196,  880,  198,  199,  880,  197,  548,
      197,  118,  548,  351,  353,  118,  198,  199,  198,  207,
      355,  198,  198,  196,  880,  198,  356,  880,  196,  880,
      197,  880,  880,  198,  357,  197,  880,  880,  198,  199,
      196,  880,  196,  198,  199,  196,  880,  197,  880,  197,
      198,  198,  197,  880,  198,  198,  199,  198,  199,  196,
      198,  199,  198,  198,  198,  196,  197,  250,  880,  196,

      880,  880,  197,  880,  198,  199,  197,  880,  880,  880,
      198,  199,  251,  252,  198,  199,  359,  880,  196,  880,
      880,  880,  198,  198,  358,  197,  880,  880,  213,  880,
      196,  880,  196,  198,  199,  196,  360,  197,  406,  197,
      404,  406,  197,  880,  404,  198,  199,  198,  199,  196,
      198,  199,  880,  880,  196,  880,  197,  880,  880,  361,
      362,  197,  880,  363,  198,  199,  196,  880,  196,  198,
      199,  880,  196,  197,  880,  197,  880,  880,  196,  197,
      364,  198,  199,  198,  199,  197,  366,  198,  199,  196,
      365,  196,  880,  198,  199,  880,  197,  880,  197,  880,

      880,  880,  880,  196,  198,  199,  198,  199,  367,  371,
      197,  880,  368,  372,  196,  880,  196,  880,  198,  199,
      369,  197,  880,  197,  373,  880,  196,  370,  880,  198,
      199,  198,  199,  197,  250,  374,  196,  880,  196,  880,
      196,  198,  199,  197,  880,  197,  250,  197,  880,  251,
      260,  198,  199,  198,  199,  198,  199,  375,  377,  196,
      880,  251,  252,  196,  880,  548,  197,  200,  548,  376,
      197,  200,  880,  880,  198,  199,  378,  196,  198,  199,
      195,  379,  195,  880,  197,  880,  880,  196,  880,  380,
      195,  196,  198,  199,  197,  381,  382,  385,  197,  880,

      383,  196,  198,  199,  196,  880,  198,  199,  197,  880,
      880,  197,  880,  384,  880,  196,  198,  199,  880,  198,
      199,  196,  197,  880,  880,  388,  386,  196,  197,  387,
      198,  199,  196,  880,  197,  389,  198,  199,  390,  197,
      880,  880,  198,  199,  196,  880,  880,  198,  199,  196,
      880,  197,  880,  392,  880,  196,  197,  880,  880,  198,
      199,  391,  197,  880,  198,  199,  196,  394,  196,  880,
      198,  199,  196,  197,  406,  197,  486,  406,  393,  197,
      486,  198,  199,  198,  199,  196,  880,  198,  199,  395,
      880,  880,  197,  396,  399,  251,  251,  250,  880,  251,

      198,  199,  250,  401,  880,  400,  397,  251,  548,  880,
      253,  548,  251,  252,  253,  880,  880,  251,  252,  257,
      258,  257,  257,  257,  257,  250,  880,  251,  251,  402,
      115,  251,  403,  259,  259,  115,  880,  251,  251,  251,
      251,  252,  115,  880,  880,  116,  117,  115,  880,  880,
      116,  117,  115,  406,  880,  880,  406,  116,  117,  118,
      413,  407,  116,  117,  414,  880,  880,  116,  117,  251,
      251,  406,  115,  880,  406,  547,  412,  880,  880,  408,
      406,  406,  115,  880,  406,  880,  115,  116,  117,  115,
      880,  409,  406,  115,  410,  411,  115,  116,  117,  416,

      115,  116,  117,  115,  116,  117,  418,  880,  116,  117,
      880,  116,  117,  415,  417,  116,  117,  880,  116,  117,
      115,  880,  406,  406,  406,  420,  115,  406,  421,  880,
      880,  419,  408,  406,  406,  116,  117,  406,  115,  422,
      423,  116,  117,  115,  409,  406,  426,  410,  411,  115,
      880,  115,  880,  116,  117,  880,  424,  115,  116,  117,
      880,  880,  115,  880,  116,  117,  116,  117,  425,  115,
      428,  115,  116,  117,  115,  406,  406,  116,  117,  115,
      427,  880,  880,  429,  116,  117,  116,  117,  115,  116,
      117,  115,  432,  115,  116,  117,  115,  431,  115,  184,

      115,  430,  880,  116,  117,  880,  116,  117,  116,  117,
      433,  116,  117,  116,  117,  116,  117,  434,  438,  115,
      880,  439,  115,  880,  437,  436,  115,  880,  115,  880,
      435,  115,  880,  115,  116,  117,  115,  116,  117,  440,
      880,  116,  117,  116,  117,  442,  116,  117,  116,  117,
      115,  116,  117,  115,  441,  444,  115,  880,  880,  880,
      115,  880,  443,  115,  880,  116,  117,  880,  116,  117,
      115,  116,  117,  445,  448,  116,  117,  115,  116,  117,
      115,  880,  447,  449,  446,  116,  117,  115,  880,  880,
      115,  880,  116,  117,  115,  116,  117,  880,  450,  115,

      880,  880,  116,  117,  452,  116,  117,  453,  880,  116,
      117,  115,  451,  115,  116,  117,  455,  115,  880,  115,
      454,  115,  880,  457,  115,  880,  116,  117,  116,  117,
      456,  115,  116,  117,  116,  117,  116,  117,  115,  116,
      117,  880,  459,  880,  115,  462,  116,  117,  115,  458,
      880,  115,  880,  116,  117,  115,  460,  880,  461,  116,
      117,  115,  880,  116,  117,  463,  116,  117,  115,  464,
      116,  117,  466,  880,  115,  880,  116,  117,  465,  115,
      880,  115,  880,  116,  117,  880,  880,  115,  184,  116,
      117,  115,  880,  115,  116,  117,  116,  117,  880,  115,

      467,  880,  116,  117,  880,  880,  116,  117,  116,  117,
      468,  880,  115,  880,  116,  117,  880,  470,  469,  471,
      474,  115,  473,  115,  475,  115,  472,  116,  117,  115,
      880,  476,  880,  115,  880,  115,  116,  117,  116,  117,
      116,  117,  880,  477,  116,  117,  115,  479,  116,  117,
      116,  117,  880,  115,  880,  880,  115,  880,  478,  196,
      880,  116,  117,  482,  480,  880,  197,  481,  116,  117,
      483,  116,  117,  880,  198,  199,  196,  880,  880,  880,
      196,  485,  406,  197,  537,  406,  880,  197,  537,  484,
      406,  198,  199,  406,  880,  198,  199,  880,  489,  406,

      406,  196,  880,  406,  880,  490,  880,  494,  197,  880,
      491,  406,  196,  492,  493,  495,  198,  199,  196,  197,
      195,  880,  497,  880,  196,  197,  880,  198,  199,  250,
      195,  197,  880,  198,  199,  498,  195,  880,  880,  198,
      199,  406,  406,  406,  251,  252,  406,  496,  880,  880,
      880,  489,  406,  406,  196,  880,  406,  880,  490,  115,
      500,  197,  115,  491,  406,  880,  492,  493,  880,  198,
      199,  195,  880,  501,  116,  117,  196,  116,  117,  880,
      376,  195,  502,  197,  880,  880,  503,  504,  499,  505,
      880,  198,  199,  196,  406,  406,  196,  506,  556,  196,

      197,  880,  880,  197,  880,  880,  197,  880,  198,  199,
      880,  198,  199,  196,  198,  199,  880,  196,  880,  196,
      197,  880,  507,  510,  197,  508,  197,  880,  198,  199,
      880,  880,  198,  199,  198,  199,  196,  511,  509,  196,
      880,  880,  880,  197,  880,  880,  197,  880,  512,  513,
      196,  198,  199,  196,  198,  199,  196,  197,  880,  880,
      197,  880,  880,  197,  514,  198,  199,  880,  198,  199,
      880,  198,  199,  515,  516,  196,  880,  517,  196,  880,
      196,  880,  197,  880,  880,  197,  115,  197,  880,  880,
      198,  199,  196,  198,  199,  198,  199,  196,  880,  197,

      880,  116,  117,  196,  197,  880,  880,  198,  199,  519,
      197,  518,  198,  199,  521,  520,  196,  880,  198,  199,
      880,  196,  560,  197,  523,  880,  196,  522,  197,  880,
      880,  198,  199,  197,  880,  880,  198,  199,  196,  880,
      524,  198,  199,  196,  880,  197,  880,  880,  196,  880,
      197,  880,  880,  198,  199,  197,  880,  526,  198,  199,
      880,  196,  880,  198,  199,  880,  196,  525,  197,  880,
      880,  196,  528,  197,  880,  880,  198,  199,  197,  527,
      880,  198,  199,  196,  880,  530,  198,  199,  531,  196,
      197,  115,  880,  196,  880,  880,  197,  529,  198,  199,

      197,  880,  532,  880,  198,  199,  116,  117,  198,  199,
      196,  880,  115,  880,  880,  115,  567,  197,  533,  535,
      880,  115,  534,  115,  880,  198,  199,  116,  117,  880,
      116,  117,  880,  880,  880,  880,  116,  117,  116,  117,
      880,  880,  880,  880,  880,  536,  406,  557,  559,  406,
      558,  880,  880,  880,  540,  406,  406,  561,  115,  406,
      115,  880,  880,  115,  880,  115,  541,  406,  115,  542,
      543,  880,  880,  116,  117,  116,  117,  563,  116,  117,
      116,  117,  880,  116,  117,  115,  566,  880,  564,  115,
      880,  880,  562,  568,  565,  115,  880,  406,  406,  406,

      116,  117,  406,  880,  116,  117,  880,  540,  406,  406,
      116,  117,  406,  115,  880,  115,  880,  115,  571,  541,
      406,  569,  542,  543,  115,  880,  570,  115,  116,  117,
      116,  117,  116,  117,  880,  880,  880,  880,  880,  116,
      117,  572,  116,  117,  880,  880,  880,  880,  115,  880,
      406,  406,  548,  115,  574,  548,  115,  575,  573,  880,
      550,  548,  548,  116,  117,  548,  880,  115,  116,  117,
      577,  116,  117,  548,  880,  551,  552,  115,  880,  115,
      880,  115,  116,  117,  576,  115,  880,  880,  880,  880,
      578,  579,  116,  117,  116,  117,  116,  117,  880,  880,

      116,  117,  880,  548,  548,  406,  115,  880,  406,  582,
      880,  880,  581,  555,  410,  410,  580,  115,  410,  115,
      880,  116,  117,  115,  880,  880,  410,  115,  406,  406,
      115,  880,  116,  117,  116,  117,  115,  880,  116,  117,
      880,  583,  116,  117,  115,  116,  117,  115,  584,  880,
      880,  116,  117,  587,  115,  585,  410,  410,  115,  116,
      117,  586,  116,  117,  880,  588,  115,  880,  880,  116,
      117,  115,  880,  116,  117,  115,  880,  115,  880,  590,
      115,  116,  117,  115,  589,  880,  116,  117,  880,  115,
      116,  117,  116,  117,  115,  116,  117,  115,  116,  117,

      880,  593,  592,  594,  116,  117,  115,  880,  115,  116,
      117,  591,  116,  117,  115,  880,  596,  880,  880,  880,
      880,  116,  117,  116,  117,  595,  115,  880,  115,  116,
      117,  598,  880,  599,  115,  597,  115,  880,  880,  115,
      880,  116,  117,  116,  117,  880,  880,  600,  115,  116,
      117,  116,  117,  601,  116,  117,  115,  880,  880,  880,
      115,  330,  115,  116,  117,  115,  880,  880,  115,  880,
      880,  116,  117,  115,  602,  116,  117,  116,  117,  115,
      116,  117,  603,  116,  117,  606,  115,  880,  116,  117,
      115,  604,  115,  880,  116,  117,  115,  880,  605,  115,

      608,  116,  117,  607,  880,  116,  117,  116,  117,  115,
      880,  116,  117,  115,  116,  117,  880,  115,  880,  115,
      612,  880,  880,  610,  116,  117,  880,  609,  116,  117,
      613,  611,  116,  117,  116,  117,  614,  406,  880,  196,
      406,  615,  880,  200,  880,  488,  197,  880,  880,  880,
      196,  880,  880,  880,  198,  199,  880,  197,  626,  617,
      548,  115,  880,  548,  196,  198,  199,  880,  619,  548,
      548,  197,  880,  548,  880,  620,  116,  117,  880,  198,
      199,  548,  196,  621,  622,  627,  880,  880,  196,  197,
      880,  880,  880,  196,  880,  197,  880,  198,  199,  196,

      197,  628,  115,  198,  199,  880,  197,  629,  198,  199,
      880,  548,  548,  406,  198,  199,  406,  116,  117,  880,
      880,  625,  492,  492,  630,  196,  492,  679,  196,  880,
      631,  196,  197,  115,  492,  197,  406,  406,  197,  880,
      198,  199,  880,  198,  199,  880,  198,  199,  116,  117,
      880,  196,  880,  678,  376,  196,  880,  376,  197,  880,
      376,  632,  197,  880,  492,  492,  198,  199,  880,  196,
      198,  199,  196,  880,  406,  376,  197,  406,  880,  197,
      253,  880,  539,  880,  198,  199,  196,  198,  199,  634,
      196,  880,  548,  197,  404,  548,  660,  197,  404,  633,

      196,  198,  199,  196,  880,  198,  199,  197,  880,  880,
      197,  635,  880,  196,  880,  198,  199,  196,  198,  199,
      197,  636,  880,  196,  197,  880,  880,  880,  198,  199,
      197,  880,  198,  199,  637,  196,  880,  880,  198,  199,
      196,  880,  197,  880,  880,  638,  880,  197,  880,  880,
      198,  199,  641,  639,  196,  198,  199,  196,  880,  196,
      640,  197,  880,  880,  197,  115,  197,  880,  642,  198,
      199,  196,  198,  199,  198,  199,  196,  880,  197,  880,
      116,  117,  196,  197,  880,  880,  198,  199,  644,  197,
      880,  198,  199,  196,  643,  196,  645,  198,  199,  196,

      197,  548,  197,  486,  548,  880,  197,  486,  198,  199,
      198,  199,  646,  880,  198,  199,  196,  880,  196,  880,
      196,  880,  880,  197,  880,  197,  647,  197,  648,  880,
      880,  198,  199,  198,  199,  198,  199,  649,  196,  650,
      880,  880,  196,  880,  196,  197,  880,  880,  196,  197,
      115,  197,  880,  198,  199,  197,  651,  198,  199,  198,
      199,  880,  196,  198,  199,  116,  117,  653,  196,  197,
      115,  675,  196,  652,  657,  197,  655,  198,  199,  197,
      654,  676,  196,  198,  199,  116,  117,  198,  199,  197,
      115,  677,  880,  656,  880,  658,  880,  198,  199,  548,

      880,  880,  548,  880,  880,  116,  117,  662,  548,  548,
      406,  548,  548,  406,  548,  880,  118,  118,  407,  549,
      548,  880,  663,  664,  410,  410,  115,  880,  410,  115,
      880,  406,  547,  669,  406,  880,  410,  404,  880,  554,
      880,  116,  117,  115,  116,  117,  880,  880,  115,  880,
      548,  548,  406,  674,  115,  406,  680,  681,  116,  117,
      667,  542,  542,  116,  117,  542,  410,  410,  115,  116,
      117,  683,  115,  542,  115,  406,  406,  880,  682,  684,
      115,  880,  880,  116,  117,  115,  880,  116,  117,  116,
      117,  880,  880,  686,  115,  116,  117,  880,  685,  880,

      116,  117,  880,  542,  542,  548,  687,  115,  548,  116,
      117,  880,  880,  550,  548,  548,  115,  880,  548,  688,
      880,  880,  116,  117,  115,  880,  548,  689,  551,  552,
      880,  116,  117,  115,  880,  115,  690,  115,  880,  116,
      117,  880,  880,  880,  880,  691,  880,  115,  116,  117,
      116,  117,  116,  117,  880,  880,  548,  548,  548,  115,
      693,  548,  116,  117,  880,  880,  672,  551,  551,  692,
      115,  551,  115,  880,  116,  117,  115,  880,  880,  551,
      115,  548,  548,  115,  880,  116,  117,  116,  117,  115,
      694,  116,  117,  880,  695,  116,  117,  115,  116,  117,

      880,  697,  880,  115,  116,  117,  880,  880,  115,  551,
      551,  115,  116,  117,  115,  880,  696,  699,  116,  117,
      880,  115,  698,  116,  117,  880,  116,  117,  115,  116,
      117,  700,  115,  880,  115,  880,  116,  117,  701,  702,
      704,  115,  703,  116,  117,  115,  880,  116,  117,  116,
      117,  880,  115,  880,  880,  706,  116,  117,  115,  880,
      116,  117,  705,  115,  880,  115,  707,  116,  117,  708,
      115,  880,  880,  116,  117,  115,  880,  115,  116,  117,
      116,  117,  710,  880,  880,  116,  117,  880,  709,  115,
      116,  117,  116,  117,  115,  712,  115,  880,  115,  711,

      115,  880,  713,  115,  116,  117,  115,  880,  880,  116,
      117,  116,  117,  116,  117,  116,  117,  715,  116,  117,
      880,  116,  117,  714,  115,  880,  115,  880,  115,  880,
      406,  115,  880,  406,  880,  716,  200,  880,  488,  116,
      117,  116,  117,  116,  117,  548,  116,  117,  548,  196,
      717,  200,  617,  618,  492,  492,  197,  548,  492,  537,
      548,  880,  880,  537,  198,  199,  492,  720,  406,  718,
      548,  406,  880,  548,  486,  880,  624,  880,  619,  548,
      548,  880,  880,  548,  880,  620,  880,  880,  196,  880,
      725,  548,  196,  621,  622,  197,  492,  492,  880,  197,

      115,  880,  196,  198,  199,  880,  880,  198,  199,  197,
      880,  880,  880,  726,  115,  116,  117,  198,  199,  880,
      880,  548,  548,  548,  115,  728,  548,  196,  727,  116,
      117,  723,  621,  621,  197,  761,  621,  880,  196,  116,
      117,  196,  198,  199,  621,  197,  548,  548,  197,  880,
      771,  196,  880,  198,  199,  762,  198,  199,  197,  880,
      880,  729,  196,  880,  880,  376,  198,  199,  880,  197,
      115,  730,  196,  880,  621,  621,  196,  198,  199,  197,
      880,  880,  880,  197,  880,  116,  117,  198,  199,  196,
      282,  198,  199,  196,  880,  880,  197,  880,  731,  115,

      197,  115,  732,  880,  198,  199,  196,  880,  198,  199,
      733,  880,  196,  197,  116,  117,  116,  117,  196,  197,
      734,  198,  199,  196,  735,  197,  767,  198,  199,  196,
      197,  736,  737,  198,  199,  196,  197,  880,  198,  199,
      196,  880,  197,  880,  198,  199,  196,  197,  880,  880,
      198,  199,  196,  197,  738,  198,  199,  740,  739,  197,
      115,  198,  199,  196,  880,  196,  880,  198,  199,  880,
      197,  115,  197,  880,  880,  116,  117,  196,  198,  199,
      198,  199,  741,  742,  197,  744,  116,  117,  196,  880,
      196,  880,  198,  199,  743,  197,  745,  197,  880,  880,

      196,  763,  880,  198,  199,  198,  199,  197,  880,  880,
      880,  196,  880,  196,  880,  198,  199,  746,  197,  880,
      197,  880,  880,  880,  196,  880,  198,  199,  198,  199,
      748,  197,  747,  115,  880,  196,  880,  196,  880,  198,
      199,  880,  197,  880,  197,  880,  880,  880,  116,  117,
      198,  199,  198,  199,  406,  880,  880,  406,  749,  750,
      253,  548,  539,  115,  548,  880,  880,  253,  880,  661,
      542,  542,  880,  880,  542,  880,  660,  548,  116,  117,
      548,  880,  542,  752,  764,  662,  548,  548,  406,  548,
      548,  406,  548,  115,  537,  118,  666,  549,  548,  880,

      663,  664,  551,  551,  880,  880,  551,  880,  116,  117,
      757,  669,  542,  542,  551,  548,  115,  880,  548,  406,
      115,  404,  406,  671,  880,  404,  880,  554,  548,  548,
      548,  116,  117,  548,  880,  116,  117,  759,  755,  663,
      663,  674,  115,  663,  551,  551,  115,  880,  766,  115,
      760,  663,  115,  548,  548,  880,  880,  116,  117,  115,
      880,  116,  117,  765,  116,  117,  880,  116,  117,  115,
      769,  770,  115,  880,  116,  117,  115,  880,  115,  880,
      772,  663,  663,  768,  116,  117,  115,  116,  117,  115,
      880,  116,  117,  116,  117,  115,  880,  775,  880,  773,

      115,  116,  117,  115,  116,  117,  880,  115,  774,  115,
      116,  117,  880,  776,  777,  116,  117,  115,  116,  117,
      115,  880,  116,  117,  116,  117,  115,  778,  779,  880,
      880,  115,  116,  117,  781,  116,  117,  115,  880,  115,
      880,  116,  117,  880,  115,  780,  116,  117,  115,  880,
      115,  880,  116,  117,  116,  117,  115,  880,  782,  116,
      117,  115,  880,  116,  117,  116,  117,  115,  880,  621,
      621,  116,  117,  621,  115,  880,  116,  117,  115,  880,
      880,  621,  116,  117,  783,  880,  784,  880,  786,  116,
      117,  880,  548,  116,  117,  548,  548,  785,  200,  548,

      618,  880,  486,  880,  722,  880,  115,  406,  880,  196,
      406,  621,  621,  486,  720,  624,  197,  880,  788,  880,
      196,  116,  117,  196,  198,  199,  789,  197,  880,  725,
      197,  812,  880,  196,  880,  198,  199,  790,  198,  199,
      197,  880,  880,  196,  880,  880,  196,  675,  198,  199,
      197,  880,  880,  197,  880,  880,  196,  880,  198,  199,
      791,  198,  199,  197,  880,  880,  196,  880,  793,  196,
      792,  198,  199,  197,  880,  880,  197,  880,  880,  196,
      880,  198,  199,  196,  198,  199,  197,  115,  880,  880,
      197,  880,  880,  196,  198,  199,  794,  880,  198,  199,

      197,  880,  116,  117,  880,  196,  880,  196,  198,  199,
      880,  880,  197,  880,  197,  795,  880,  196,  797,  796,
      198,  199,  198,  199,  197,  115,  798,  196,  799,  196,
      880,  196,  198,  199,  197,  880,  197,  880,  197,  880,
      116,  117,  198,  199,  198,  199,  198,  199,  196,  880,
      880,  196,  880,  800,  880,  197,  801,  115,  197,  880,
      880,  196,  880,  198,  199,  802,  198,  199,  197,  803,
      880,  880,  116,  117,  880,  196,  198,  199,  196,  880,
      880,  196,  197,  880,  880,  197,  880,  804,  197,  805,
      198,  199,  196,  198,  199,  880,  198,  199,  806,  197,

      663,  663,  880,  548,  663,  115,  548,  198,  199,  253,
      880,  661,  663,  807,  880,  880,  548,  808,  880,  548,
      116,  117,  537,  809,  754,  752,  406,  548,  880,  406,
      548,  115,  537,  404,  666,  671,  115,  880,  811,  115,
      880,  115,  663,  663,  813,  115,  116,  117,  757,  759,
      880,  116,  117,  115,  116,  117,  116,  117,  115,  880,
      116,  117,  817,  880,  880,  814,  815,  115,  116,  117,
      816,  115,  880,  116,  117,  115,  880,  880,  115,  819,
      880,  880,  116,  117,  115,  880,  116,  117,  115,  818,
      116,  117,  820,  116,  117,  115,  821,  115,  880,  116,

      117,  880,  115,  116,  117,  115,  880,  115,  880,  115,
      116,  117,  116,  117,  880,  880,  823,  116,  117,  115,
      116,  117,  116,  117,  116,  117,  115,  880,  115,  880,
      822,  880,  880,  824,  116,  117,  880,  880,  880,  880,
      825,  116,  117,  116,  117,  548,  826,  196,  548,  196,
      880,  486,  880,  722,  197,  880,  197,  115,  880,  196,
      880,  196,  198,  199,  198,  199,  197,  788,  197,  880,
      880,  196,  116,  117,  198,  199,  198,  199,  197,  880,
      830,  196,  880,  827,  196,  828,  198,  199,  197,  880,
      880,  197,  880,  829,  880,  196,  198,  199,  880,  198,

      199,  831,  197,  880,  880,  832,  880,  196,  880,  196,
      198,  199,  196,  880,  197,  880,  197,  880,  880,  197,
      880,  880,  198,  199,  198,  199,  196,  198,  199,  835,
      880,  196,  880,  197,  880,  880,  833,  834,  197,  880,
      880,  198,  199,  836,  196,  880,  198,  199,  196,  880,
      196,  197,  880,  880,  196,  197,  880,  197,  880,  198,
      199,  197,  880,  198,  199,  198,  199,  196,  880,  198,
      199,  880,  196,  880,  197,  839,  837,  196,  838,  197,
      880,  880,  198,  199,  197,  115,  880,  198,  199,  196,
      880,  548,  198,  199,  548,  115,  197,  537,  880,  754,

      116,  117,  115,  880,  198,  199,  844,  841,  840,  880,
      116,  117,  842,  811,  115,  880,  115,  116,  117,  115,
      843,  115,  880,  880,  115,  845,  115,  880,  880,  116,
      117,  116,  117,  115,  116,  117,  116,  117,  846,  116,
      117,  116,  117,  115,  847,  115,  848,  115,  116,  117,
      115,  880,  880,  880,  849,  115,  880,  196,  116,  117,
      116,  117,  116,  117,  197,  116,  117,  880,  196,  880,
      116,  117,  198,  199,  196,  197,  880,  880,  850,  880,
      196,  197,  852,  198,  199,  196,  851,  197,  880,  198,
      199,  854,  197,  853,  880,  198,  199,  196,  880,  196,

      198,  199,  880,  196,  197,  880,  197,  880,  658,  372,
      197,  880,  198,  199,  198,  199,  855,  196,  198,  199,
      880,  196,  880,  196,  197,  880,  658,  856,  197,  880,
      197,  880,  198,  199,  196,  880,  198,  199,  198,  199,
      880,  197,  115,  880,  196,  880,  880,  857,  196,  198,
      199,  197,  880,  858,  196,  197,  880,  116,  117,  198,
      199,  197,  880,  198,  199,  196,  880,  115,  880,  198,
      199,  196,  197,  115,  859,  860,  115,  675,  197,  115,
      198,  199,  116,  117,  115,  880,  198,  199,  116,  117,
      880,  116,  117,  115,  116,  117,  196,  880,  861,  116,

      117,  880,  581,  197,  880,  862,  196,  880,  116,  117,
      196,  198,  199,  197,  115,  880,  196,  197,  863,  880,
      196,  198,  199,  197,  880,  198,  199,  197,  880,  116,
      117,  198,  199,  196,  864,  198,  199,  880,  196,  880,
      197,  880,  880,  880,  865,  197,  866,  867,  198,  199,
      196,  880,  880,  198,  199,  196,  868,  197,  869,  870,
      196,  880,  197,  115,  880,  198,  199,  197,  115,  880,
      198,  199,  880,  658,  880,  198,  199,  880,  116,  117,
      196,  880,  880,  116,  117,  880,  880,  197,  880,  880,
      871,  115,  880,  196,  880,  198,  199,  196,  701,  872,

      197,  873,  880,  196,  197,  880,  116,  117,  198,  199,
      197,  880,  198,  199,  874,  880,  196,  880,  198,  199,
      196,  877,  875,  197,  880,  880,  196,  197,  880,  880,
      880,  198,  199,  197,  880,  198,  199,  499,  196,  876,
      196,  198,  199,  196,  880,  197,  880,  197,  880,  880,
      197,  880,  880,  198,  199,  198,  199,  196,  198,  199,
      196,  880,  196,  880,  197,  880,  880,  197,  880,  197,
      880,  880,  198,  199,  196,  198,  199,  198,  199,  880,
      880,  197,  880,  880,  880,  880,  880,  880,  878,  198,
      199,  880,  879,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  114,  114,
      880,  880,  114,  114,  114,  118,  118,  118,  118,  118,
      118,  118,  118,  195,  195,  880,  880,  195,  195,  195,
      200,  200,  200,  200,  200,  200,  200,  200,  249,  249,
      880,  880,  249,  249,  249,  253,  253,  253,  253,  253,
      253,  253,  253,  262,  880,  880,  880,  262,  880,  262,

      262,  880,  262,  262,  266,  880,  880,  266,  266,  880,
      266,  266,  266,  266,  266,  267,  267,  880,  267,  267,
      267,  267,  267,  267,  267,  267,  268,  880,  268,  268,
      880,  880,  268,  880,  268,  270,  270,  270,  270,  270,
      880,  270,  354,  354,  354,  354,  354,  880,  354,  398,
      398,  398,  398,  398,  880,  398,  404,  404,  404,  404,
      404,  404,  404,  404,  407,  880,  880,  880,  407,  407,
      407,  407,  407,  407,  407,  486,  486,  486,  486,  486,
      486,  486,  486,  488,  880,  880,  880,  488,  488,  488,
      488,  488,  488,  488,  537,  537,  537,  537,  537,  537,

      537,  537,  539,  880,  880,  880,  539,  539,  539,  539,
      539,  539,  539,  406,  880,  880,  880,  406,  406,  406,
      406,  406,  406,  406,  546,  880,  880,  546,  546,  546,
      546,  546,  546,  546,  546,  549,  880,  880,  880,  549,
      549,  549,  549,  549,  549,  549,  554,  880,  880,  880,
      554,  554,  554,  554,  554,  554,  554,  616,  880,  880,
      616,  616,  616,  616,  616,  616,  616,  616,  618,  880,
      880,  880,  618,  618,  618,  618,  618,  618,  618,  624,
      880,  880,  880,  624,  624,  624,  624,  624,  624,  624,
      659,  880,  880,  659,  659,  659,  659,  659,  659,  659,

      659,  661,  880,  880,  880,  661,  661,  661,  661,  661,
      661,  661,  666,  880,  880,  880,  666,  666,  666,  666,
      666,  666,  666,  548,  880,  880,  880,  548,  548,  548,
      548,  548,  548,  548,  668,  880,  880,  668,  668,  668,
      668,  668,  668,  668,  668,  671,  880,  880,  880,  671,
      671,  671,  671,  671,  671,  671,  673,  880,  880,  673,
      673,  673,  673,  673,  673,  673,  673,  719,  880,  880,
      719,  719,  719,  719,  719,  719,  719,  719,  722,  880,
      880,  880,  722,  722,  722,  722,  722,  722,  722,  724,
      880,  880,  724,  724,  724,  724,  724,  724,  724,  724,

      751,  880,  880,  751,  751,  751,  751,  751,  751,  751,
      751,  754,  880,  880,  880,  754,  754,  754,  754,  754,
      754,  754,  756,  880,  880,  756,  756,  756,  756,  756,
      756,  756,  756,  758,  880,  880,  758,  758,  758,  758,
      758,  758,  758,  758,  787,  880,  880,  787,  787,  787,
      787,  787,  787,  787,  787,  810,  880,  880,  810,  810,
      810,  810,  810,  810,  810,  810,   15,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880
    } ;

static yyconst short int yy_chk[5423] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,  666,    5,    5,
        5,    5,  410,    5,    5,    5,  410,    5,    5,  663,
      624,    5,   21,    5,    5,    7,    7,  492,    7,    7,
        7,  492,    7,    5,    9,    9,   21,    9,    9,  621,
       11,    9,   11,   11,  554,   12,    7,   12,   12,  551,
      545,    5,    5,    6,    6,    6,    6,    6,    6,    6,
      544,    6,    6,    6,    6,  542,    6,    6,    6,  542,
        6,    6,  539,  538,    6,   54,    6,    6,    8,    8,
      490,    8,    8,    8,   82,    8,    6,   10,   10,   54,

       10,   10,   17,  115,   10,  488,   17,   17,   82,    8,
      487,  407,   20,  405,    6,    6,   13,  115,   13,   13,
       13,   13,  403,  402,   13,   13,   13,   20,   20,   23,
      254,   25,   23,   26,  201,   27,  113,   25,   13,   29,
      113,  113,   81,  119,   23,   23,   25,   25,   26,   26,
       27,   27,   30,   30,   29,   29,   30,   81,   81,  547,
       15,  547,  547,    0,   30,  547,    0,   13,   13,   28,
       13,   14,   31,   14,   14,   14,   14,   28,   28,   14,
       14,   14,   32,    0,   28,   28,   33,   31,   31,   53,
       31,    0,   31,   14,   30,   30,   53,   32,   32,    0,

       31,   33,   33,    0,   53,   53,   33,    0,   98,    0,
       98,   34,    0,   32,   33,   33,   32,   33,   35,   32,
       33,   37,   14,   14,   98,   14,   34,   34,   36,    0,
       38,    0,   34,   35,   35,    0,   37,   37,   39,    0,
       37,    0,   34,   36,   36,   38,   38,    0,   34,   35,
       40,   35,   35,   39,   39,   37,   36,   36,   35,   36,
       38,   41,   36,   39,   36,   40,   40,   40,    0,    0,
      118,    0,   42,    0,    0,   43,   41,   41,   41,   41,
      196,   40,   41,   44,  118,   40,   41,   42,   42,   42,
       43,   43,   41,   43,  196,   45,    0,   43,   44,   44,

       44,    0,  200,   42,   43,   43,    0,   43,   46,   42,
       45,   45,   49,    0,   44,   48,  200,   44,   52,    0,
       44,    0,   44,   46,   46,   46,    0,   49,   49,   46,
       48,   48,   45,   52,   52,   50,   46,    0,   84,   48,
       48,   84,   49,   89,    0,   46,   47,   52,   51,   48,
       50,   50,   50,   84,   84,   52,   50,    0,   89,   89,
       50,   47,   47,   51,   51,  250,    0,   47,    0,   57,
       47,   56,   51,   51,   56,   47,   57,   47,   56,  250,
       47,   88,   47,   47,   57,   57,   56,   56,   58,   88,
       88,   59,    0,    0,   58,   58,   88,   88,   59,  253,

       58,   59,   60,   58,   58,   61,   59,   59,    0,   60,
       90,    0,   61,  253,   60,   62,   62,   60,   60,   62,
       61,   61,   65,    0,   63,   90,   90,   62,   68,   65,
        0,   63,  271,    0,   67,   68,   86,   65,   65,   63,
       63,   67,   86,   68,   68,   68,  271,   65,   70,   67,
       67,   86,   86,    0,    0,   70,   92,   62,   62,   63,
       64,    0,   66,   70,   70,   67,   70,   64,   67,   66,
      355,   92,   92,  399,    0,   64,   64,   66,   66,    0,
        0,   64,    0,   71,  355,    0,   92,  399,   64,   64,
       71,   64,   66,   64,   64,   66,   64,  404,   71,   71,

       71,   75,   66,   69,   71,    0,   72,    0,   75,    0,
       69,  404,    0,   72,    0,  114,   75,   75,   69,   69,
      486,   72,   72,   69,   72,   69,   75,   72,   73,   75,
      114,  114,    0,   69,  486,   73,  110,  110,   69,   69,
       74,   72,    0,   73,   73,    0,   73,   74,  116,    0,
       76,    0,   77,    0,   78,   74,   74,   76,  537,   77,
       73,   78,    0,  116,  116,   76,   76,   77,   77,   78,
       78,   74,  537,   77,   74,  128,    0,   79,  110,  110,
        0,   76,   76,   77,   79,    0,   76,   76,   80,   78,
      128,  128,   79,   79,   79,   80,  128,    0,    0,    0,

       80,    0,    0,   80,   80,   87,   87,   87,   87,   87,
       87,    0,   87,   91,   91,    0,    0,   91,  117,  117,
      117,  120,    0,  117,  120,   91,  121,   87,   87,    0,
      122,  117,  121,    0,  124,    0,  120,  120,  122,  122,
        0,  121,  121,    0,    0,  122,  122,  123,  123,  124,
      124,  123,    0,  125,    0,   91,   91,  126,    0,  123,
      127,  117,  117,  129,  617,  124,  617,  617,  125,  125,
      617,  130,  126,  126,    0,  127,  127,  131,  129,  129,
      127,  132,  126,    0,  133,  126,  130,  130,  129,  123,
      123,  125,  131,  131,  134,    0,  132,  132,  131,  133,

      133,  132,  135,    0,    0,    0,    0,  136,    0,  134,
      134,  137,  133,  133,  133,  134,  138,  135,  135,  139,
      135,  133,  136,  136,    0,    0,  137,  137,  140,    0,
      142,  138,  138,    0,  139,  139,  141,  135,  138,    0,
      137,    0,  143,  140,  140,  142,  142,  142,  144,  140,
      145,  141,  141,  146,  139,  141,    0,  143,  143,  147,
        0,    0,    0,  144,  144,  145,  145,    0,  146,  146,
      148,  145,  141,  143,  147,  147,  149,  146,  150,    0,
        0,  151,  144,    0,    0,  148,  148,  148,  152,    0,
        0,  149,  149,  150,  150,  149,  151,  151,  153,  151,

      154,    0,  155,  152,  152,  152,  156,    0,  150,  157,
        0,  158,    0,  153,  153,  154,  154,  155,  155,  152,
        0,  156,  156,  159,  157,  157,  158,  158,  160,    0,
      161,  158,  162,    0,    0,  156,  154,  155,  159,  159,
      164,    0,    0,  160,  160,  161,  161,  162,  162,  157,
      163,    0,  165,    0,  166,  164,  164,  159,  162,  161,
      167,    0,  160,  168,    0,  163,  163,  165,  165,  166,
      166,  164,  163,    0,    0,  167,  167,  169,  168,  168,
        0,    0,  170,    0,  171,  660,    0,  660,  660,  166,
      172,  660,  169,  169,  167,  168,  167,  170,  170,  171,

      171,    0,  169,  173,  171,  172,  172,  174,  169,  175,
        0,    0,    0,  176,    0,  172,  178,  170,  173,  173,
      177,    0,  174,  174,  175,  175,    0,  174,  176,  176,
        0,  178,  178,    0,  179,  177,  177,  177,  180,  173,
        0,  176,  174,  181,  175,  174,  174,  178,  177,  179,
      179,    0,  182,  180,  180,  184,  177,    0,  181,  181,
      183,    0,    0,    0,  181,  179,  185,  182,  182,  182,
      184,  184,  180,  182,    0,  183,  183,  186,  183,    0,
        0,  185,  185,  187,    0,  188,    0,  189,    0,  183,
      190,    0,  186,  186,  186,  185,    0,  191,  187,  187,

      188,  188,  189,  189,    0,  190,  190,  192,  187,  193,
        0,  190,  191,  191,  194,    0,    0,    0,  191,  188,
      195,  189,  192,  192,  193,  193,  193,  195,  191,  194,
      194,  197,    0,  198,    0,  195,  195,    0,  197,  669,
      198,  669,  669,  192,  194,  669,  197,  197,  198,  198,
      199,  199,  199,  202,    0,  199,  202,    0,  203,    0,
      202,    0,    0,  199,  203,  203,    0,    0,  202,  202,
      204,    0,  205,  203,  203,  206,    0,  204,    0,  205,
      207,  207,  206,    0,  207,  204,  204,  205,  205,  208,
      206,  206,  207,  199,  199,  209,  208,  249,    0,  210,

        0,    0,  209,    0,  208,  208,  210,    0,    0,    0,
      209,  209,  249,  249,  210,  210,  210,    0,  211,    0,
        0,    0,  207,  207,  208,  211,    0,    0,  209,    0,
      212,    0,  213,  211,  211,  214,  211,  212,  674,  213,
      674,  674,  214,    0,  674,  212,  212,  213,  213,  215,
      214,  214,    0,    0,  216,    0,  215,    0,    0,  212,
      212,  216,    0,  214,  215,  215,  217,    0,  218,  216,
      216,    0,  219,  217,    0,  218,    0,    0,  220,  219,
      215,  217,  217,  218,  218,  220,  217,  219,  219,  221,
      216,  222,    0,  220,  220,    0,  221,    0,  222,    0,

        0,    0,    0,  223,  221,  221,  222,  222,  219,  223,
      223,    0,  220,  223,  224,    0,  225,    0,  223,  223,
      221,  224,    0,  225,  223,    0,  226,  222,    0,  224,
      224,  225,  225,  226,  251,  225,  227,    0,  228,    0,
      229,  226,  226,  227,    0,  228,  261,  229,    0,  251,
      251,  227,  227,  228,  228,  229,  229,  227,  229,  230,
        0,  261,  261,  231,    0,  720,  230,  720,  720,  228,
      231,  720,    0,    0,  230,  230,  229,  233,  231,  231,
      232,  230,  232,    0,  233,    0,    0,  234,    0,  232,
      232,  235,  233,  233,  234,  232,  232,  235,  235,    0,

      233,  236,  234,  234,  237,    0,  235,  235,  236,    0,
        0,  237,    0,  234,    0,  238,  236,  236,    0,  237,
      237,  239,  238,    0,    0,  237,  235,  240,  239,  236,
      238,  238,  241,    0,  240,  237,  239,  239,  238,  241,
        0,    0,  240,  240,  242,    0,    0,  241,  241,  243,
        0,  242,    0,  241,    0,  244,  243,    0,    0,  242,
      242,  240,  244,    0,  243,  243,  245,  243,  246,    0,
      244,  244,  247,  245,  725,  246,  725,  725,  242,  247,
      725,  245,  245,  246,  246,  248,    0,  247,  247,  244,
        0,    0,  248,  246,  252,  252,  252,  256,    0,  252,

      248,  248,  255,  256,    0,  255,  247,  252,  752,    0,
      752,  752,  256,  256,  752,    0,    0,  255,  255,  257,
      257,  257,  257,  257,  257,  259,    0,  260,  260,  257,
      270,  260,  257,  259,  259,  275,    0,  252,  252,  260,
      259,  259,  274,    0,    0,  270,  270,  276,    0,    0,
      275,  275,  277,  408,    0,    0,  408,  274,  274,  408,
      275,  408,  276,  276,  276,    0,    0,  277,  277,  260,
      260,  272,  278,    0,  272,  408,  274,    0,    0,  272,
      272,  272,  279,    0,  272,    0,  280,  278,  278,  281,
        0,  272,  272,  282,  272,  272,  284,  279,  279,  279,

      283,  280,  280,  291,  281,  281,  281,    0,  282,  282,
        0,  284,  284,  278,  280,  283,  283,    0,  291,  291,
      285,    0,  272,  272,  273,  284,  287,  273,  284,    0,
        0,  283,  273,  273,  273,  285,  285,  273,  286,  285,
      285,  287,  287,  288,  273,  273,  287,  273,  273,  289,
        0,  290,    0,  286,  286,    0,  285,  292,  288,  288,
        0,    0,  293,    0,  289,  289,  290,  290,  286,  294,
      289,  295,  292,  292,  296,  273,  273,  293,  293,  297,
      288,    0,    0,  290,  294,  294,  295,  295,  298,  296,
      296,  299,  295,  300,  297,  297,  301,  294,  302,  297,

      303,  293,    0,  298,  298,    0,  299,  299,  300,  300,
      296,  301,  301,  302,  302,  303,  303,  298,  302,  304,
        0,  303,  305,    0,  301,  300,  306,    0,  307,    0,
      299,  308,    0,  309,  304,  304,  310,  305,  305,  304,
        0,  306,  306,  307,  307,  306,  308,  308,  309,  309,
      311,  310,  310,  312,  305,  309,  313,    0,    0,    0,
      314,    0,  308,  315,    0,  311,  311,    0,  312,  312,
      316,  313,  313,  310,  313,  314,  314,  317,  315,  315,
      318,    0,  312,  315,  311,  316,  316,  319,    0,    0,
      320,    0,  317,  317,  321,  318,  318,    0,  317,  322,

        0,    0,  319,  319,  318,  320,  320,  319,    0,  321,
      321,  323,  317,  324,  322,  322,  321,  325,    0,  326,
      320,  327,    0,  322,  328,    0,  323,  323,  324,  324,
      321,  329,  325,  325,  326,  326,  327,  327,  330,  328,
      328,    0,  325,    0,  332,  328,  329,  329,  331,  324,
        0,  333,    0,  330,  330,  334,  326,    0,  327,  332,
      332,  335,    0,  331,  331,  329,  333,  333,  336,  331,
      334,  334,  333,    0,  337,    0,  335,  335,  332,  338,
        0,  339,    0,  336,  336,    0,    0,  340,  336,  337,
      337,  341,    0,  342,  338,  338,  339,  339,    0,  343,

      335,    0,  340,  340,    0,    0,  341,  341,  342,  342,
      337,    0,  344,    0,  343,  343,    0,  339,  338,  340,
      343,  345,  342,  346,  343,  348,  341,  344,  344,  347,
        0,  344,    0,  349,    0,  350,  345,  345,  346,  346,
      348,  348,    0,  345,  347,  347,  351,  347,  349,  349,
      350,  350,    0,  352,    0,    0,  353,    0,  346,  354,
        0,  351,  351,  350,  348,    0,  354,  349,  352,  352,
      351,  353,  353,    0,  354,  354,  358,    0,    0,    0,
      359,  353,  757,  358,  757,  757,    0,  359,  757,  352,
      356,  358,  358,  356,    0,  359,  359,    0,  356,  356,

      356,  360,    0,  356,    0,  356,    0,  358,  360,    0,
      356,  356,  363,  356,  356,  359,  360,  360,  361,  363,
      362,    0,  362,    0,  365,  361,    0,  363,  363,  398,
      362,  365,    0,  361,  361,  362,  362,    0,    0,  365,
      365,  356,  356,  357,  398,  398,  357,  361,    0,    0,
        0,  357,  357,  357,  364,    0,  357,    0,  357,  415,
      365,  364,  412,  357,  357,    0,  357,  357,    0,  364,
      364,  366,    0,  366,  415,  415,  367,  412,  412,    0,
      366,  366,  366,  367,    0,    0,  366,  366,  364,  366,
        0,  367,  367,  368,  357,  357,  369,  367,  412,  370,

      368,    0,    0,  369,    0,    0,  370,    0,  368,  368,
        0,  369,  369,  371,  370,  370,    0,  372,    0,  373,
      371,    0,  368,  370,  372,  369,  373,    0,  371,  371,
        0,    0,  372,  372,  373,  373,  374,  371,  369,  375,
        0,    0,    0,  374,    0,    0,  375,    0,  373,  373,
      376,  374,  374,  377,  375,  375,  378,  376,    0,    0,
      377,    0,    0,  378,  374,  376,  376,    0,  377,  377,
        0,  378,  378,  375,  377,  379,    0,  378,  380,    0,
      381,    0,  379,    0,    0,  380,  417,  381,    0,    0,
      379,  379,  383,  380,  380,  381,  381,  382,    0,  383,

        0,  417,  417,  384,  382,    0,    0,  383,  383,  380,
      384,  379,  382,  382,  382,  381,  385,    0,  384,  384,
        0,  386,  417,  385,  384,    0,  387,  383,  386,    0,
        0,  385,  385,  387,    0,    0,  386,  386,  388,    0,
      385,  387,  387,  389,    0,  388,    0,    0,  390,    0,
      389,    0,    0,  388,  388,  390,    0,  388,  389,  389,
        0,  391,    0,  390,  390,    0,  392,  387,  391,    0,
        0,  393,  390,  392,    0,    0,  391,  391,  393,  389,
        0,  392,  392,  394,    0,  392,  393,  393,  393,  396,
      394,  423,    0,  395,    0,    0,  396,  391,  394,  394,

      395,    0,  394,    0,  396,  396,  423,  423,  395,  395,
      397,    0,  413,    0,    0,  414,  423,  397,  394,  396,
        0,  416,  395,  418,    0,  397,  397,  413,  413,    0,
      414,  414,    0,    0,    0,    0,  416,  416,  418,  418,
        0,    0,    0,    0,    0,  397,  400,  413,  416,  400,
      414,    0,    0,    0,  400,  400,  400,  418,  419,  400,
      420,    0,    0,  421,    0,  422,  400,  400,  424,  400,
      400,    0,    0,  419,  419,  420,  420,  420,  421,  421,
      422,  422,    0,  424,  424,  425,  422,    0,  421,  426,
        0,    0,  419,  424,  421,  427,    0,  400,  400,  401,

      425,  425,  401,    0,  426,  426,    0,  401,  401,  401,
      427,  427,  401,  428,    0,  429,    0,  431,  427,  401,
      401,  425,  401,  401,  430,    0,  426,  432,  428,  428,
      429,  429,  431,  431,    0,    0,    0,    0,    0,  430,
      430,  428,  432,  432,    0,    0,    0,    0,  433,    0,
      401,  401,  409,  434,  431,  409,  435,  432,  430,    0,
      409,  409,  409,  433,  433,  409,    0,  436,  434,  434,
      434,  435,  435,  409,    0,  409,  409,  438,    0,  437,
        0,  439,  436,  436,  433,  440,    0,    0,    0,    0,
      435,  436,  438,  438,  437,  437,  439,  439,    0,    0,

      440,  440,    0,  409,  409,  411,  441,    0,  411,  439,
        0,    0,  438,  411,  411,  411,  437,  442,  411,  443,
        0,  441,  441,  444,    0,    0,  411,  445,  411,  411,
      446,    0,  442,  442,  443,  443,  447,    0,  444,  444,
        0,  442,  445,  445,  448,  446,  446,  449,  444,    0,
        0,  447,  447,  447,  450,  445,  411,  411,  451,  448,
      448,  446,  449,  449,    0,  448,  452,    0,    0,  450,
      450,  453,    0,  451,  451,  454,    0,  455,    0,  451,
      456,  452,  452,  457,  450,    0,  453,  453,    0,  458,
      454,  454,  455,  455,  459,  456,  456,  460,  457,  457,

        0,  456,  455,  457,  458,  458,  461,    0,  463,  459,
      459,  454,  460,  460,  462,    0,  460,    0,    0,    0,
        0,  461,  461,  463,  463,  459,  464,    0,  465,  462,
      462,  462,    0,  463,  466,  461,  467,    0,    0,  468,
        0,  464,  464,  465,  465,    0,    0,  465,  469,  466,
      466,  467,  467,  466,  468,  468,  470,    0,    0,    0,
      471,  464,  472,  469,  469,  474,    0,    0,  473,    0,
        0,  470,  470,  475,  468,  471,  471,  472,  472,  476,
      474,  474,  469,  473,  473,  473,  477,    0,  475,  475,
      478,  470,  479,    0,  476,  476,  480,    0,  472,  481,

      476,  477,  477,  475,    0,  478,  478,  479,  479,  482,
        0,  480,  480,  483,  481,  481,    0,  484,    0,  485,
      481,    0,    0,  479,  482,  482,    0,  477,  483,  483,
      482,  480,  484,  484,  485,  485,  484,  489,    0,  494,
      489,  485,    0,  489,    0,  489,  494,    0,    0,    0,
      495,    0,    0,    0,  494,  494,    0,  495,  494,  489,
      491,  556,    0,  491,  496,  495,  495,    0,  491,  491,
      491,  496,    0,  491,    0,  491,  556,  556,    0,  496,
      496,  491,  497,  491,  491,  495,    0,    0,  498,  497,
        0,    0,    0,  499,    0,  498,    0,  497,  497,  500,

      499,  496,  560,  498,  498,    0,  500,  497,  499,  499,
        0,  491,  491,  493,  500,  500,  493,  560,  560,    0,
        0,  493,  493,  493,  498,  501,  493,  560,  502,    0,
      500,  503,  501,  559,  493,  502,  493,  493,  503,    0,
      501,  501,    0,  502,  502,    0,  503,  503,  559,  559,
        0,  504,    0,  559,  501,  505,    0,  502,  504,    0,
      503,  501,  505,    0,  493,  493,  504,  504,    0,  506,
      505,  505,  507,    0,  540,  504,  506,  540,    0,  507,
      540,    0,  540,    0,  506,  506,  508,  507,  507,  507,
      509,    0,  759,  508,  759,  759,  540,  509,  759,  506,

      510,  508,  508,  511,    0,  509,  509,  510,    0,    0,
      511,  509,    0,  512,    0,  510,  510,  513,  511,  511,
      512,  510,    0,  514,  513,    0,    0,    0,  512,  512,
      514,    0,  513,  513,  511,  515,    0,    0,  514,  514,
      516,    0,  515,    0,    0,  512,    0,  516,    0,    0,
      515,  515,  515,  513,  517,  516,  516,  518,    0,  519,
      514,  517,    0,    0,  518,  561,  519,    0,  516,  517,
      517,  520,  518,  518,  519,  519,  521,    0,  520,    0,
      561,  561,  522,  521,    0,    0,  520,  520,  520,  522,
        0,  521,  521,  523,  517,  524,  521,  522,  522,  525,

      523,  788,  524,  788,  788,    0,  525,  788,  523,  523,
      524,  524,  523,    0,  525,  525,  526,    0,  527,    0,
      528,    0,    0,  526,    0,  527,  524,  528,  525,    0,
        0,  526,  526,  527,  527,  528,  528,  526,  529,  527,
        0,    0,  530,    0,  531,  529,    0,    0,  532,  530,
      557,  531,    0,  529,  529,  532,  528,  530,  530,  531,
      531,    0,  533,  532,  532,  557,  557,  530,  534,  533,
      558,  557,  535,  529,  534,  534,  532,  533,  533,  535,
      531,  557,  536,  534,  534,  558,  558,  535,  535,  536,
      562,  558,    0,  533,    0,  535,    0,  536,  536,  541,

        0,    0,  541,    0,    0,  562,  562,  541,  541,  541,
      546,  550,  541,  546,  550,    0,  546,  550,  546,  550,
      541,    0,  541,  541,  553,  553,  563,    0,  553,  564,
        0,  555,  546,  550,  555,    0,  553,  555,    0,  555,
        0,  563,  563,  567,  564,  564,    0,    0,  565,    0,
      541,  541,  543,  555,  566,  543,  563,  564,  567,  567,
      543,  543,  543,  565,  565,  543,  553,  553,  568,  566,
      566,  566,  569,  543,  570,  543,  543,    0,  565,  567,
      571,    0,    0,  568,  568,  572,    0,  569,  569,  570,
      570,    0,    0,  570,  573,  571,  571,    0,  568,    0,

      572,  572,    0,  543,  543,  549,  572,  574,  549,  573,
      573,    0,    0,  549,  549,  549,  575,    0,  549,  573,
        0,    0,  574,  574,  576,    0,  549,  574,  549,  549,
        0,  575,  575,  577,    0,  578,  575,  579,    0,  576,
      576,    0,    0,    0,    0,  576,    0,  581,  577,  577,
      578,  578,  579,  579,    0,    0,  549,  549,  552,  582,
      578,  552,  581,  581,    0,    0,  552,  552,  552,  577,
      580,  552,  583,    0,  582,  582,  584,    0,    0,  552,
      585,  552,  552,  586,    0,  580,  580,  583,  583,  587,
      580,  584,  584,    0,  582,  585,  585,  588,  586,  586,

        0,  585,    0,  589,  587,  587,    0,    0,  590,  552,
      552,  591,  588,  588,  592,    0,  584,  587,  589,  589,
        0,  593,  586,  590,  590,    0,  591,  591,  594,  592,
      592,  588,  595,    0,  596,    0,  593,  593,  589,  589,
      593,  598,  592,  594,  594,  597,    0,  595,  595,  596,
      596,    0,  599,    0,    0,  596,  598,  598,  600,    0,
      597,  597,  595,  601,    0,  602,  597,  599,  599,  598,
      603,    0,    0,  600,  600,  604,    0,  605,  601,  601,
      602,  602,  600,    0,    0,  603,  603,    0,  599,  606,
      604,  604,  605,  605,  607,  603,  608,    0,  609,  601,

      610,    0,  605,  611,  606,  606,  612,    0,    0,  607,
      607,  608,  608,  609,  609,  610,  610,  607,  611,  611,
        0,  612,  612,  606,  613,    0,  614,    0,  615,    0,
      616,  675,    0,  616,    0,  610,  616,    0,  616,  613,
      613,  614,  614,  615,  615,  619,  675,  675,  619,  627,
      614,  619,  616,  619,  623,  623,  627,  811,  623,  811,
      811,    0,    0,  811,  627,  627,  623,  619,  625,  615,
      618,  625,    0,  618,  625,    0,  625,    0,  618,  618,
      618,    0,    0,  618,    0,  618,    0,    0,  626,    0,
      625,  618,  628,  618,  618,  626,  623,  623,    0,  628,

      677,    0,  629,  626,  626,    0,    0,  628,  628,  629,
        0,    0,    0,  626,  688,  677,  677,  629,  629,    0,
        0,  618,  618,  622,  678,  629,  622,  630,  628,  688,
      688,  622,  622,  622,  630,  677,  622,    0,  631,  678,
      678,  632,  630,  630,  622,  631,  622,  622,  632,    0,
      688,  633,    0,  631,  631,  678,  632,  632,  633,    0,
        0,  630,  634,    0,    0,  632,  633,  633,    0,  634,
      680,  633,  635,    0,  622,  622,  636,  634,  634,  635,
        0,    0,    0,  636,    0,  680,  680,  635,  635,  637,
      680,  636,  636,  638,    0,    0,  637,    0,  634,  690,

      638,  684,  635,    0,  637,  637,  639,    0,  638,  638,
      636,    0,  640,  639,  690,  690,  684,  684,  641,  640,
      637,  639,  639,  642,  638,  641,  684,  640,  640,  643,
      642,  639,  640,  641,  641,  644,  643,    0,  642,  642,
      645,    0,  644,    0,  643,  643,  646,  645,    0,    0,
      644,  644,  647,  646,  641,  645,  645,  645,  644,  647,
      692,  646,  646,  648,    0,  649,    0,  647,  647,    0,
      648,  679,  649,    0,    0,  692,  692,  650,  648,  648,
      649,  649,  646,  647,  650,  649,  679,  679,  651,    0,
      652,    0,  650,  650,  648,  651,  650,  652,    0,    0,

      653,  679,    0,  651,  651,  652,  652,  653,    0,    0,
        0,  654,    0,  655,    0,  653,  653,  653,  654,    0,
      655,    0,    0,    0,  656,    0,  654,  654,  655,  655,
      655,  656,  654,  695,    0,  657,    0,  658,    0,  656,
      656,    0,  657,    0,  658,    0,    0,    0,  695,  695,
      657,  657,  658,  658,  659,    0,    0,  659,  656,  657,
      659,  662,  659,  681,  662,    0,    0,  662,    0,  662,
      665,  665,    0,    0,  665,    0,  659,  661,  681,  681,
      661,    0,  665,  662,  681,  661,  661,  661,  667,  668,
      661,  667,  668,  696,  667,  668,  667,  668,  661,    0,

      661,  661,  670,  670,    0,    0,  670,    0,  696,  696,
      667,  668,  665,  665,  670,  672,  676,    0,  672,  673,
      683,  672,  673,  672,    0,  673,    0,  673,  661,  661,
      664,  676,  676,  664,    0,  683,  683,  672,  664,  664,
      664,  673,  682,  664,  670,  670,  685,    0,  683,  686,
      676,  664,  687,  664,  664,    0,    0,  682,  682,  689,
        0,  685,  685,  682,  686,  686,    0,  687,  687,  691,
      686,  687,  693,    0,  689,  689,  694,    0,  697,    0,
      689,  664,  664,  685,  691,  691,  698,  693,  693,  699,
        0,  694,  694,  697,  697,  700,    0,  694,    0,  691,

      701,  698,  698,  702,  699,  699,    0,  703,  693,  704,
      700,  700,    0,  697,  699,  701,  701,  705,  702,  702,
      706,    0,  703,  703,  704,  704,  707,  702,  703,    0,
        0,  708,  705,  705,  705,  706,  706,  709,    0,  710,
        0,  707,  707,    0,  711,  704,  708,  708,  712,    0,
      713,    0,  709,  709,  710,  710,  714,    0,  709,  711,
      711,  715,    0,  712,  712,  713,  713,  716,    0,  721,
      721,  714,  714,  721,  717,    0,  715,  715,  718,    0,
        0,  721,  716,  716,  712,    0,  713,    0,  716,  717,
      717,    0,  719,  718,  718,  719,  723,  714,  719,  723,

      719,    0,  723,    0,  723,    0,  760,  724,    0,  726,
      724,  721,  721,  724,  719,  724,  726,    0,  723,    0,
      727,  760,  760,  728,  726,  726,  726,  727,    0,  724,
      728,  760,    0,  729,    0,  727,  727,  727,  728,  728,
      729,    0,    0,  730,    0,    0,  731,  760,  729,  729,
      730,    0,    0,  731,    0,    0,  732,    0,  730,  730,
      728,  731,  731,  732,    0,    0,  733,    0,  730,  734,
      729,  732,  732,  733,    0,    0,  734,    0,    0,  735,
        0,  733,  733,  736,  734,  734,  735,  761,    0,    0,
      736,    0,    0,  737,  735,  735,  734,    0,  736,  736,

      737,    0,  761,  761,    0,  738,    0,  739,  737,  737,
        0,    0,  738,    0,  739,  735,    0,  740,  737,  736,
      738,  738,  739,  739,  740,  763,  738,  741,  739,  742,
        0,  743,  740,  740,  741,    0,  742,    0,  743,    0,
      763,  763,  741,  741,  742,  742,  743,  743,  744,    0,
        0,  745,    0,  740,    0,  744,  742,  766,  745,    0,
        0,  746,    0,  744,  744,  743,  745,  745,  746,  744,
        0,    0,  766,  766,    0,  747,  746,  746,  748,    0,
        0,  749,  747,    0,    0,  748,    0,  745,  749,  746,
      747,  747,  750,  748,  748,    0,  749,  749,  747,  750,

      753,  753,    0,  751,  753,  762,  751,  750,  750,  751,
        0,  751,  753,  748,    0,    0,  755,  749,    0,  755,
      762,  762,  755,  750,  755,  751,  756,  758,    0,  756,
      758,  764,  756,  758,  756,  758,  765,    0,  755,  767,
        0,  768,  753,  753,  762,  769,  764,  764,  756,  758,
        0,  765,  765,  770,  767,  767,  768,  768,  771,    0,
      769,  769,  768,    0,    0,  764,  765,  772,  770,  770,
      767,  773,    0,  771,  771,  774,    0,    0,  775,  771,
        0,    0,  772,  772,  776,    0,  773,  773,  777,  770,
      774,  774,  773,  775,  775,  778,  774,  779,    0,  776,

      776,    0,  780,  777,  777,  781,    0,  782,    0,  784,
      778,  778,  779,  779,    0,    0,  778,  780,  780,  783,
      781,  781,  782,  782,  784,  784,  785,    0,  786,    0,
      777,    0,    0,  781,  783,  783,    0,    0,    0,    0,
      783,  785,  785,  786,  786,  787,  784,  789,  787,  790,
        0,  787,    0,  787,  789,    0,  790,  814,    0,  791,
        0,  792,  789,  789,  790,  790,  791,  787,  792,    0,
        0,  793,  814,  814,  791,  791,  792,  792,  793,    0,
      792,  794,    0,  789,  795,  790,  793,  793,  794,    0,
        0,  795,    0,  791,    0,  796,  794,  794,    0,  795,

      795,  793,  796,    0,    0,  795,    0,  797,    0,  798,
      796,  796,  799,    0,  797,    0,  798,    0,    0,  799,
        0,    0,  797,  797,  798,  798,  800,  799,  799,  798,
        0,  801,    0,  800,    0,    0,  796,  797,  801,    0,
        0,  800,  800,  800,  802,    0,  801,  801,  803,    0,
      804,  802,    0,    0,  805,  803,    0,  804,    0,  802,
      802,  805,    0,  803,  803,  804,  804,  806,    0,  805,
      805,    0,  807,    0,  806,  804,  802,  808,  803,  807,
        0,    0,  806,  806,  808,  812,    0,  807,  807,  809,
        0,  810,  808,  808,  810,  813,  809,  810,    0,  810,

      812,  812,  815,    0,  809,  809,  812,  807,  806,    0,
      813,  813,  808,  810,  816,    0,  817,  815,  815,  818,
      809,  819,    0,    0,  821,  813,  820,    0,    0,  816,
      816,  817,  817,  822,  818,  818,  819,  819,  815,  821,
      821,  820,  820,  823,  816,  824,  820,  825,  822,  822,
      826,    0,    0,    0,  822,  845,    0,  827,  823,  823,
      824,  824,  825,  825,  827,  826,  826,    0,  828,    0,
      845,  845,  827,  827,  829,  828,    0,    0,  823,    0,
      830,  829,  827,  828,  828,  831,  826,  830,    0,  829,
      829,  829,  831,  828,    0,  830,  830,  832,    0,  833,

      831,  831,    0,  834,  832,    0,  833,    0,  831,  833,
      834,    0,  832,  832,  833,  833,  830,  835,  834,  834,
        0,  836,    0,  837,  835,    0,  834,  832,  836,    0,
      837,    0,  835,  835,  838,    0,  836,  836,  837,  837,
        0,  838,  844,    0,  839,    0,    0,  837,  840,  838,
      838,  839,    0,  838,  841,  840,    0,  844,  844,  839,
      839,  841,    0,  840,  840,  842,    0,  846,    0,  841,
      841,  843,  842,  847,  839,  841,  848,  844,  843,  849,
      842,  842,  846,  846,  850,    0,  843,  843,  847,  847,
        0,  848,  848,  851,  849,  849,  852,    0,  843,  850,

      850,    0,  846,  852,    0,  850,  853,    0,  851,  851,
      854,  852,  852,  853,  877,    0,  855,  854,  851,    0,
      856,  853,  853,  855,    0,  854,  854,  856,    0,  877,
      877,  855,  855,  857,  852,  856,  856,    0,  858,    0,
      857,    0,    0,    0,  853,  858,  854,  855,  857,  857,
      859,    0,    0,  858,  858,  860,  856,  859,  857,  858,
      861,    0,  860,  862,    0,  859,  859,  861,  863,    0,
      860,  860,    0,  859,    0,  861,  861,    0,  862,  862,
      864,    0,    0,  863,  863,    0,    0,  864,    0,    0,
      860,  872,    0,  865,    0,  864,  864,  866,  862,  863,

      865,  864,    0,  867,  866,    0,  872,  872,  865,  865,
      867,    0,  866,  866,  865,    0,  868,    0,  867,  867,
      869,  872,  866,  868,    0,    0,  870,  869,    0,    0,
        0,  868,  868,  870,    0,  869,  869,  867,  871,  869,
      873,  870,  870,  874,    0,  871,    0,  873,    0,    0,
      874,    0,    0,  871,  871,  873,  873,  875,  874,  874,
      876,    0,  878,    0,  875,    0,    0,  876,    0,  878,
        0,    0,  875,  875,  879,  876,  876,  878,  878,    0,
        0,  879,    0,    0,    0,    0,    0,    0,  875,  879,
      879,    0,  878,  881,  881,  881,  881,  881,  881,  881,

      881,  881,  881,  881,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  886,  886,
        0,    0,  886,  886,  886,  887,  887,  887,  887,  887,
      887,  887,  887,  888,  888,    0,    0,  888,  888,  888,
      889,  889,  889,  889,  889,  889,  889,  889,  890,  890,
        0,    0,  890,  890,  890,  891,  891,  891,  891,  891,
      891,  891,  891,  892,    0,    0,    0,  892,    0,  892,

      892,    0,  892,  892,  893,    0,    0,  893,  893,    0,
      893,  893,  893,  893,  893,  894,  894,    0,  894,  894,
      894,  894,  894,  894,  894,  894,  895,    0,  895,  895,
        0,    0,  895,    0,  895,  896,  896,  896,  896,  896,
        0,  896,  897,  897,  897,  897,  897,    0,  897,  898,
      898,  898,  898,  898,    0,  898,  899,  899,  899,  899,
      899,  899,  899,  899,  900,    0,    0,    0,  900,  900,
      900,  900,  900,  900,  900,  901,  901,  901,  901,  901,
      901,  901,  901,  902,    0,    0,    0,  902,  902,  902,
      902,  902,  902,  902,  903,  903,  903,  903,  903,  903,

      903,  903,  904,    0,    0,    0,  904,  904,  904,  904,
      904,  904,  904,  905,    0,    0,    0,  905,  905,  905,
      905,  905,  905,  905,  906,    0,    0,  906,  906,  906,
      906,  906,  906,  906,  906,  907,    0,    0,    0,  907,
      907,  907,  907,  907,  907,  907,  908,    0,    0,    0,
      908,  908,  908,  908,  908,  908,  908,  909,    0,    0,
      909,  909,  909,  909,  909,  909,  909,  909,  910,    0,
        0,    0,  910,  910,  910,  910,  910,  910,  910,  911,
        0,    0,    0,  911,  911,  911,  911,  911,  911,  911,
      912,    0,    0,  912,  912,  912,  912,  912,  912,  912,

      912,  913,    0,    0,    0,  913,  913,  913,  913,  913,
      913,  913,  914,    0,    0,    0,  914,  914,  914,  914,
      914,  914,  914,  915,    0,    0,    0,  915,  915,  915,
      915,  915,  915,  915,  916,    0,    0,  916,  916,  916,
      916,  916,  916,  916,  916,  917,    0,    0,    0,  917,
      917,  917,  917,  917,  917,  917,  918,    0,    0,  918,
      918,  918,  918,  918,  918,  918,  918,  919,    0,    0,
      919,  919,  919,  919,  919,  919,  919,  919,  920,    0,
        0,    0,  920,  920,  920,  920,  920,  920,  920,  921,
        0,    0,  921,  921,  921,  921,  921,  921,  921,  921,

      922,    0,    0,  922,  922,  922,  922,  922,  922,  922,
      922,  923,    0,    0,    0,  923,  923,  923,  923,  923,
      923,  923,  924,    0,    0,  924,  924,  924,  924,  924,
      924,  924,  924,  925,    0,    0,  925,  925,  925,  925,
      925,  925,  925,  925,  926,    0,    0,  926,  926,  926,
      926,  926,  926,  926,  926,  927,    0,    0,  927,  927,
      927,  927,  927,  927,  927,  927,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
#define INITIAL 0
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

int braceCount;
int parenCount;
string accumulator;
string fileName;
#define ID_MODE 1

#define CMD_MODE 2

#define FILE_NAME_MODE 3

#define FILE_NAME_QUOTE_MODE 4

#define STRING_MODE 5

#define LATEX_MODE 6

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 86 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 881 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5367 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 90 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 94 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 100 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 101 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 105 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 109 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 110 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 111 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 112 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 113 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 114 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 115 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 116 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 117 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 119 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 120 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 121 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 124 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 126 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 130 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 131 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 132 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
return KW_XUNIFY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_OPS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 98:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 102:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 255 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 256 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 260 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 270 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 271 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 272 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 273 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 274 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 275 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 276 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 277 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 278 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 279 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 280 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 281 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 282 "../../../src/Mixfix/lexer.ll"
FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 283 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK


case 154:
YY_RULE_SETUP
#line 287 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 293 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 294 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 295 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 296 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 162:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 165:
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 337 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 167:
YY_RULE_SETUP
#line 346 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 347 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 352 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 366 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 370 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 374 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 378 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 381 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 387 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 388 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 389 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 394 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 881 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 881 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 880);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 394 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"
