/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 162
#define YY_END_OF_BUFFER 163
static yyconst short int yy_accept[837] =
    {   0,
      159,  159,  159,  159,  159,  159,  148,  148,  150,  150,
        0,    0,  163,  161,  159,  160,  160,   94,  161,   92,
       94,   94,   94,   92,   93,   93,   94,  161,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   15,   94,   94,   94,   94,   94,   94,   94,
      147,  161,  146,  146,  146,  147,  146,  147,  161,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,   98,  161,
       96,   98,   96,   98,   98,   97,   96,   98,  161,   98,
       98,  149,  148,  162,  150,  151,  158,  152,  157,  157,

      153,  154,  152,  155,  156,  159,   94,    0,   94,    0,
        0,    0,   94,   94,   93,    0,   94,   94,   94,   94,
       11,   94,   94,   94,   94,   94,   40,   94,   94,   70,
       94,   94,   94,   94,   94,   94,   58,   94,    5,   94,
       94,   14,   94,   69,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   35,   67,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   71,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,  147,
        0,  147,    0,    0,    0,  147,  147,  143,  144,    0,
      147,  147,  147,  147,  147,  137,  147,  147,  147,  147,

      136,  125,  147,  147,  147,  147,  124,  147,  123,  147,
      147,  147,  147,  134,  147,  147,  147,  130,  147,  125,
      147,  138,  147,  147,  147,  147,  147,   99,  125,  147,
      145,   98,    0,   98,    0,    0,    0,   98,   98,    0,
       95,   97,    0,    5,  149,  148,  150,  152,  152,   94,
        0,    2,    2,   94,   94,   94,   63,   94,   94,   62,
       94,   94,   94,   94,   94,   94,   94,   94,   16,   70,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   69,   94,   94,    7,   27,   94,   94,
        6,   36,   94,   67,   94,   94,   94,   94,   94,   94,

       94,   10,   94,   91,   19,   94,   94,   21,   71,   94,
       94,   33,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   68,   94,   94,   94,   94,   94,   94,  147,    0,
        2,    2,  147,  147,  135,  147,  147,  139,  147,  147,
      147,  147,  147,  147,  147,  147,  103,  147,  125,  147,
      140,  147,  147,  147,  147,  147,  118,  117,  147,  131,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      133,   98,    0,    2,    2,    0,    0,    0,    0,    2,
        2,    2,    1,    2,    2,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   48,   26,   94,   20,   94,   94,

       85,   22,   94,   94,   54,   94,   23,   94,   94,   94,
        9,   25,   94,    3,   94,   94,   94,   18,   94,    8,
       24,   94,   94,   88,   13,   94,   94,   94,   94,   15,
       94,   94,   94,   94,   94,   94,   94,   34,   66,   94,
       83,   94,   94,   59,   94,   94,   94,   68,   94,   94,
       94,   55,   94,   94,    0,    0,    2,    2,    1,    2,
        2,  147,  147,  102,  147,  147,  113,  147,  147,  141,
      140,  147,  147,  147,  147,  147,  104,  147,  147,  105,
      147,  147,  106,    3,  147,  132,  147,  147,  112,  108,
      147,  147,  126,  147,  147,  147,  147,  147,  147,  133,

        0,    0,    2,    2,    1,    2,    2,    0,    0,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,   82,
       94,   57,   86,   41,   51,   94,   94,   94,   94,   94,
       94,   94,   75,   94,   80,   94,   94,   94,   94,   94,
       94,   94,   52,   94,   73,   28,   94,   94,   94,   94,
       94,   94,   56,   17,   50,   94,   94,   12,   94,   94,
       94,   94,   94,   94,   94,   66,   60,   49,   94,   94,
       37,   31,   94,   84,   43,   94,   94,    2,    2,    1,
        1,    1,    1,    2,    2,    2,  101,  128,  147,  147,
      147,  119,  142,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  100,  114,  147,  147,  147,  147,  147,  147,
      107,  126,  147,  110,  147,  147,  147,  125,    2,    2,
        1,    1,    1,    1,    2,    2,    2,    1,    1,    1,
        1,    1,    2,    2,   38,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   77,
       94,    4,   94,   94,   53,   65,   27,   94,   90,   94,
       56,   94,   94,   94,   94,   19,   81,   47,   94,   30,
       44,   94,   94,   61,   94,   29,   32,    1,    1,    1,
        1,    1,    2,    2,  147,  147,  116,  147,  147,    4,
      111,  109,  147,  147,  147,  147,  147,  147,  117,  147,

      147,  147,  147,  147,  147,  147,  147,  147,    1,    1,
        1,    1,    1,    2,    2,    1,    1,   94,   57,   94,
       74,   94,   46,   94,   42,   94,   20,   94,   94,   79,
       94,   94,   78,   64,   94,   94,   94,   89,   76,   94,
       21,   94,   72,   39,    1,    1,  147,  147,  147,  147,
      147,  120,  147,  147,  147,  147,  118,  121,  147,  147,
      147,  115,  147,  147,  127,  147,    1,    1,   94,   94,
       74,   94,   94,   26,   45,   22,   94,   23,   94,   24,
       94,   91,   94,  147,  147,  147,  147,  147,  147,  147,
      147,  105,  147,  147,  147,  110,  129,  127,  147,   94,

       87,   94,   48,   54,   18,   94,   94,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  122,   94,   94,  147,
      147,  147,  147,  104,  147,  108,  129,   94,  101,  102,
      147,  112,   49,  147,  116,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   22,    8,   24,   25,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   13,   53,   54,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    6,    9,    9,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    5,    6
    } ;

static yyconst short int yy_base[882] =
    {   0,
        0,    0,   55,    0,  110,  163,  134,  140,  145,  149,
      216,  271,  313, 4608,  151, 4608, 4608,  167,  171, 4608,
      174, 4608,  180,  184,  187,  219,  205,  196,  226,  222,
      261,  282,  278,  305,  236,  286,  232,  291,  325,  332,
      370,  337,  308,  344,  382,  362,  351,  393,  401,  405,
      264,  215, 4608,  284,  364,  423,  412,  375,  431,  415,
      476,  437,  440,  448,  443,  478,  451,  468,  501,  511,
      472,  523,  518,  525,  537,  515, 4608,  545,  547,  231,
     4608,  564, 4608,  559,  588,  590,  576,  578,  595,  595,
     4608,    0,  116, 4608,    0, 4608, 4608,    0, 4608, 4608,

     4608, 4608,  149, 4608, 4608,  448,  601,  269,  607,  613,
      274,  281,  621,  627,  632,  648,  629,  651,  654,  659,
      619,  662,  681,  684,  672,  690,  694,  702,  704,  707,
      724,  728,  733,  736,  738,  741,  755,  758,  761,  763,
      766,  769,  786,  788,  790,  792,  794,  796,  800,  813,
      820,  825,  833,  837,  839,  844,  851,  856,  861,  863,
      875,  868,  881,  889,  899,  903,  906,  910,  930,  938,
      933,  942,  950,  955,  961,  963,  972,  981,  985,  990,
      296, 1002, 1009,  447,  264, 1004, 1021, 1013, 1016, 1033,
     1024, 1033, 1026, 1045, 1054, 1056, 1058, 1064, 1075, 1078,

     1081, 1085, 1088, 1092, 1099, 1110, 1102, 1113, 1124, 1127,
     1130, 1134, 1138, 1141, 1147, 1151, 1164, 1169, 1171, 1177,
     1173, 1191, 1194, 1197, 1200, 1205, 1211, 1214, 1217, 1222,
     1224, 1231,  457, 1235, 1252,  481,  256, 1255, 1260, 1284,
     4608, 1283, 1284, 1248,    0,  131,    0,    0, 4608, 1288,
      521, 1337, 1390, 1300, 1293, 1305, 1310, 1330, 1340, 1343,
     1348, 1354, 1378, 1396, 1351, 1372, 1400, 1404, 1360, 1407,
     1413, 1425, 1427, 1430, 1435, 1444, 1447, 1449, 1454, 1456,
     1468, 1474, 1477, 1479, 1485, 1487, 1497, 1499, 1507, 1510,
     1504, 1524, 1527, 1529, 1535, 1537, 1541, 1546, 1548, 1554,

     1567, 1571, 1573, 1577, 1579, 1581, 1584, 1598, 1604, 1606,
     1608, 1610, 1612, 1630, 1633, 1638, 1641, 1643, 1652, 1663,
     1665, 1674, 1683, 1688, 1691, 1696, 1700, 1702, 1708,  528,
     1745, 1798, 1710, 1713, 1738, 1749, 1751, 1755, 1768, 1759,
     1801, 1776, 1804, 1806, 1812, 1829, 1809, 1831, 1834, 1839,
     1843, 1851, 1863, 1865, 1871, 1874, 1876, 1882, 1899, 1904,
     1906, 1910, 1912, 1916, 1918, 1930, 1935, 1941, 1943, 1953,
     1955, 1962,  544, 1999, 2052,  240,  227,  573,  231,    0,
      212, 1319, 2105,  106, 2158, 1966, 1973, 2003, 1980, 2005,
     2016, 2009, 2030, 2013, 2033, 2056, 2063, 2074, 2060, 2070,

     2087, 2093, 2101, 2113, 2115, 2119, 2141, 2146, 2139, 2152,
     2164, 2166, 2169, 2183, 2188, 2190, 2192, 2194, 2200, 2212,
     2214, 2217, 2219, 2222, 2226, 2236, 2239, 2244, 2246, 2253,
     2258, 2263, 2270, 2275, 2280, 2287, 2293, 2298, 2300, 2304,
     2307, 2310, 2317, 2321, 2327, 2329, 2338, 2340, 2347, 2349,
     2351, 2358, 2361, 2368,  671,  229,  202, 2393, 2416,  237,
     2469, 2381, 2371, 2389, 2394, 2398, 2412, 2420, 2423, 2425,
     2433, 2442, 2430, 2465, 2473, 2475, 2463, 2483, 2477, 2487,
     2500, 2505, 2507, 2509, 2517, 2511, 2531, 2536, 2539, 2541,
     2543, 2560, 2563, 2565, 2569, 2571, 2573, 2577, 2591, 2594,

      715,  210,  182, 2620, 2643,  315, 2696,  188,  175, 2627,
      988,    0, 2749, 2654,  159, 2802, 2627,  150, 2655, 2601,
     2651, 2621, 2660, 2608, 2662, 2674, 2679, 2684, 2702, 2706,
     2708, 2713, 2710, 2715, 2720, 2737, 2745, 2756, 2759, 2766,
     2769, 2773, 2780, 2806, 2808, 2812, 2814, 2816, 2819, 2825,
     2833, 2836, 2844, 2847, 2850, 2855, 2857, 2869, 2874, 2877,
     2881, 2891, 2894, 2899, 2901, 2905, 2911, 2913, 2918, 2924,
     2935, 2941, 2943, 2945, 2948, 2953, 2955, 2981, 1787, 3005,
     2988,  136, 3058, 2988,  135, 3016, 3009, 3012, 3026, 3022,
     3036, 3039, 3061, 3064, 3067, 3075, 3072, 3078, 3081, 3092,

     3095, 3098, 3104, 3116, 3121, 3123, 3125, 3127, 3130, 3133,
     3147, 3151, 3153, 3157, 3160, 3164, 3171, 3174, 3193, 1944,
     3216, 3205,  124, 3269, 3222,  109, 3214, 3238, 1969, 3243,
        0, 3280, 3281, 3245, 3210, 3234, 3242, 3283, 3247, 3288,
     3290, 3292, 3300, 3302, 3319, 3321, 3324, 3329, 3331, 3333,
     3351, 3353, 3355, 3357, 3359, 3361, 3364, 3382, 3384, 3386,
     3388, 3390, 3394, 3408, 3411, 3416, 3418, 3420, 3425, 3437,
     3439, 3442, 3445, 3447, 3449, 3451, 3456, 3481, 3490, 3488,
        0, 3499, 3508, 3517, 3502, 3510, 3459, 3505, 3514, 3528,
     3533, 3535, 3537, 3540, 3545, 3547, 3554, 3558, 3567, 3571,

     3577, 3580, 3584, 3588, 3590, 3594, 3602, 3608, 3627, 3636,
     3631,    0, 3645, 3654, 3663, 3671, 3678, 3662, 3635, 3665,
     3667, 3679, 3684, 3690, 3692, 3696, 3698, 3710, 3715, 3718,
     3722, 3724, 3732, 3735, 3741, 3744, 3752, 3754, 3761, 3763,
     3766, 3771, 3774, 3780, 3802, 3809, 3798, 3805, 3809, 3811,
     3817, 3822, 3829, 3836, 3839, 3842, 3848, 3856, 3859, 3865,
     3867, 3870, 3873, 3878, 3884, 3887, 3906, 3913, 3909, 3912,
     3916, 3921, 3923, 3929, 3933, 3935, 3940, 3943, 3946, 3954,
     3963, 3965, 3968, 3971, 3974, 3976, 3985, 3994, 3997, 4008,
     4014, 4016, 4019, 4025, 4033, 4036, 4038, 4042, 4045, 4050,

     4055, 4062, 4064, 4067, 4073, 4075, 4084, 4086, 4092, 4095,
     4098, 4103, 4112, 4105, 4117, 4134, 4136, 4138, 4141, 4143,
     4145, 4155, 4147, 4167, 4174, 4176, 4179, 4184, 4186, 4188,
     4196, 4205, 4207, 4209, 4213, 4608, 4248, 4257, 4266, 4275,
     4280, 4286, 4291, 4297, 4302, 4308, 4317, 4326, 4334, 4339,
     4343, 4347, 4352, 4361, 4367, 4376, 4382, 4391, 4400, 4409,
     4418, 4427, 4436, 4445, 4454, 4463, 4472, 4481, 4490, 4499,
     4508, 4517, 4526, 4535, 4544, 4553, 4562, 4571, 4580, 4589,
     4598
    } ;

static yyconst short int yy_def[882] =
    {   0,
      836,    1,  836,    3,  837,  837,  838,  838,  839,  839,
      840,  840,  836,  836,  836,  836,  836,  841,  842,  836,
      841,  836,  841,  841,  841,  841,  841,  836,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      843,  844,  836,  843,  843,  843,  843,  843,  836,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  836,  843,  845,  846,
      836,  845,  836,  845,  845,  845,  845,  845,  836,  845,
      836,  847,  836,  836,  848,  836,  836,  849,  836,  836,

      836,  836,  836,  836,  836,  836,  841,  842,  841,  850,
      842,  842,  841,  841,  841,  836,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  843,
      844,  843,  851,  844,  844,  843,  843,  843,  843,  836,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  845,  846,  845,  852,  846,  846,  845,  845,  836,
      836,  845,  836,  845,  847,  836,  848,  849,  836,  841,
      853,  854,  854,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,

      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  843,  855,
      856,  856,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  845,  857,  858,  858,  836,  836,  853,  853,  859,
      253,  860,  861,  253,  862,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,

      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  855,  855,  332,  863,  864,  332,
      865,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      857,  857,  375,  866,  867,  375,  868,  836,  836,  860,
      860,  869,  861,  870,  513,  871,  859,  253,  872,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  863,  863,  864,
      873,  580,  874,  859,  332,  875,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  866,  866,
      867,  876,  621,  877,  859,  375,  878,  870,  870,  869,
      513,  879,  872,  872,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  873,  873,  869,
      580,  880,  875,  875,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      843,  843,  843,  843,  843,  843,  843,  843,  876,  876,
      869,  621,  881,  878,  878,  879,  879,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  880,  880,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  881,  881,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  841,

      841,  841,  841,  841,  841,  841,  841,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  841,  841,  843,
      843,  843,  843,  843,  843,  843,  843,  841,  843,  843,
      843,  843,  841,  843,  843,    0,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836
    } ;

static yyconst short int yy_nxt[4664] =
    {   0,
       14,   15,   16,   14,   17,   15,   15,   18,   19,   20,
       20,   21,   18,   22,   23,   24,   25,   26,   18,   18,
       18,   20,   18,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   18,   36,   18,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   18,
       18,   22,   22,   18,   18,   14,   15,   16,   14,   17,
       15,   15,   51,   52,   53,   53,   54,   55,   53,   56,
       55,   51,   51,   55,   57,   51,   53,   51,   58,   59,
       60,   51,   61,   62,   63,   64,   65,   51,   66,   67,
       51,   68,   69,   51,   70,   71,   51,   72,   73,   74,

       75,   76,   51,   51,   51,   51,   77,   77,   78,   51,
       14,   15,   16,   14,   17,   15,   15,  246,   80,   81,
       81,   82,  246,   83,   84,   85,  381,   86,   87,  503,
      517,   81,  246,   88,   89,   93,   94,  246,   94,   94,
       93,   93,   94,   90,   94,   94,   93,   96,  711,   96,
       96,   96,  106,   96,   96,  457,  106,  106,  249,  249,
      680,   91,   91,   14,   15,   16,   14,   17,   15,   15,
      381,   80,   81,   81,   82,  108,   83,   84,   85,  107,
       86,   87,  108,  630,   81,  113,   88,   89,  108,  241,
      109,  110,  108,  112,  114,  108,   90,  109,  110,  241,

      249,  249,  503,  109,  110,  109,  109,  109,  110,  109,
      109,  110,  501,  108,   91,   91,   97,  109,   99,   97,
      100,   97,  457,  180,   97,  101,  102,  108,  109,  116,
      108,  455,  381,  378,  108,  115,  115,  185,  103,  232,
      108,  509,  109,  110,  108,  109,  110,  109,  109,  109,
      110,  508,  117,  237,  118,  109,  110,  457,  236,  109,
      110,  584,  119,  137,  120,  140,  184,  104,  105,  108,
       97,   97,  181,   99,   97,  100,   97,  107,  138,   97,
      101,  102,  107,  111,  109,  110,  108,  182,  183,  121,
      108,  112,  181,  103,  108,  186,  112,  122,  123,  108,

      124,  109,  110,  125,  180,  109,  110,  182,  183,  109,
      110,  126,  836,  108,  109,  110,  108,  129,  185,  130,
      131,  127,  104,  105,  139,   97,  132,  128,  109,  110,
      141,  109,  110,  108,  142,  503,  836,  836,  836,  625,
      108,  133,  134,  836,  135,  108,  836,  136,  109,  110,
      143,  144,  108,  162,  145,  109,  110,  148,  146,  108,
      109,  110,  157,  836,  147,  836,  836,  109,  110,  163,
      108,  149,  181,  164,  109,  110,  158,  150,  108,  159,
      165,  836,  160,  181,  161,  109,  110,  182,  183,  173,
      108,  836,  836,  109,  110,  171,  151,  836,  182,  190,

      152,  108,  836,  836,  172,  109,  110,  153,  154,  108,
      155,  166,  156,  108,  167,  836,  109,  110,  174,  836,
      181,  168,  175,  181,  109,  110,  169,  170,  109,  110,
      836,  181,  189,  176,  177,  182,  183,  187,  182,  183,
      182,  182,  178,  188,  182,  181,  182,  183,  181,  106,
      179,  181,  182,  106,  106,  180,  181,  836,  191,  181,
      182,  183,  836,  182,  183,  232,  182,  183,  205,  185,
      199,  182,  183,  836,  182,  183,  181,  211,  200,  237,
      181,  201,  182,  182,  181,  836,  181,  203,  202,  232,
      204,  182,  183,  212,  836,  182,  183,  213,  836,  182,

      183,  182,  183,  237,  836,  192,  206,  836,  207,  181,
      836,  219,  193,  194,  220,  195,  208,  196,  197,  181,
      198,  209,  210,  181,  182,  183,  181,  214,  836,  250,
      215,  181,  836,  181,  182,  183,  329,  217,  182,  183,
      230,  182,  183,  379,  216,  181,  182,  183,  182,  183,
      456,  218,  372,  181,  227,  233,  221,  223,  224,  222,
      182,  183,  225,  226,  228,  231,  502,  233,  182,  183,
      234,  235,  233,  239,  836,  238,  836,  836,  836,  836,
      229,  250,  234,  235,  233,  836,  233,  234,  235,  240,
      241,  240,  240,  240,  240,  379,  233,  836,  233,  234,

      235,  234,  243,  233,  234,  234,  242,  242,  234,  108,
      836,  234,  235,  234,  235,  108,  234,  836,  234,  235,
      836,  251,  109,  109,  109,  110,  109,  108,  836,  108,
      109,  116,  252,  244,  109,  108,  836,  108,  836,  836,
      108,  253,  109,  110,  109,  110,  234,  234,  115,  115,
      109,  110,  109,  110,  836,  109,  110,  109,  109,  108,
      836,  109,  108,  836,  109,  109,  836,  108,  254,  109,
      108,  836,  836,  836,  109,  110,  836,  109,  110,  329,
      108,  836,  109,  110,  836,  109,  110,  256,  258,  108,
      257,  259,  108,  456,  836,  109,  110,  255,  108,  109,

      109,  265,  108,  836,  109,  110,  836,  109,  110,  260,
      108,  836,  108,  109,  110,  108,  266,  109,  110,  836,
      261,  262,  263,  372,  836,  109,  110,  109,  110,  264,
      109,  110,  108,  267,  269,  836,  108,  502,  836,  268,
      836,  108,  836,  836,  108,  836,  108,  109,  110,  108,
      270,  109,  110,  271,  836,  272,  109,  110,  274,  109,
      110,  109,  110,  108,  109,  110,  108,  836,  836,  108,
      277,  108,  273,  836,  108,  275,  836,  108,  109,  110,
      276,  109,  110,  278,  109,  110,  109,  110,  279,  109,
      110,  281,  109,  110,  108,  836,  108,  836,  108,  836,

      108,  280,  108,  836,  108,  282,  836,  836,  108,  109,
      110,  109,  110,  109,  110,  109,  110,  109,  110,  109,
      110,  108,  287,  109,  110,  836,  836,  285,  108,  836,
      283,  284,  836,  108,  836,  836,  109,  110,  288,  836,
      286,  108,  289,  109,  110,  108,  836,  108,  109,  110,
      290,  836,  108,  836,  291,  292,  109,  110,  836,  108,
      109,  110,  109,  110,  108,  836,  836,  109,  110,  108,
      836,  108,  293,  295,  109,  110,  108,  836,  836,  109,
      110,  836,  294,  108,  109,  110,  109,  110,  836,  108,
      836,  109,  110,  296,  299,  297,  298,  108,  109,  110,

      300,  303,  836,  302,  109,  110,  301,  108,  836,  836,
      836,  108,  109,  110,  108,  836,  836,  305,  108,  836,
      836,  836,  109,  110,  836,  304,  109,  110,  310,  109,
      110,  836,  306,  109,  110,  307,  308,  836,  108,  311,
      836,  108,  309,  836,  836,  313,  108,  312,  836,  836,
      108,  836,  314,  109,  110,  315,  109,  110,  108,  316,
      836,  109,  110,  108,  317,  109,  110,  320,  836,  108,
      319,  108,  836,  109,  110,  318,  836,  836,  109,  110,
      108,  836,  836,  321,  109,  110,  109,  110,  380,  108,
      111,  380,  324,  108,  111,  109,  110,  322,  181,  836,

      836,  836,  325,  323,  109,  110,  327,  836,  109,  110,
      181,  836,  181,  182,  183,  331,  326,  330,  182,  182,
      836,  181,  182,  328,  181,  182,  190,  182,  183,  181,
      182,  836,  181,  836,  181,  332,  182,  183,  836,  182,
      183,  181,  182,  182,  182,  183,  182,  182,  183,  182,
      183,  334,  836,  181,  182,  836,  182,  183,  836,  836,
      182,  182,  181,  836,  181,  836,  181,  333,  182,  183,
      836,  335,  181,  836,  196,  836,  836,  182,  183,  182,
      183,  182,  183,  181,  182,  182,  181,  182,  183,  181,
      836,  336,  337,  181,  338,  836,  181,  836,  182,  183,

      181,  182,  183,  339,  182,  183,  341,  181,  182,  183,
      181,  182,  183,  836,  836,  182,  183,  836,  181,  340,
      836,  181,  182,  183,  346,  182,  183,  836,  347,  342,
      343,  344,  181,  182,  183,  181,  182,  183,  181,  348,
      349,  836,  181,  345,  836,  836,  181,  182,  183,  181,
      182,  183,  836,  182,  183,  181,  350,  182,  183,  181,
      352,  182,  183,  836,  182,  183,  836,  836,  354,  351,
      182,  183,  181,  836,  182,  183,  836,  181,  353,  181,
      836,  181,  357,  359,  355,  181,  836,  182,  183,  836,
      356,  836,  182,  183,  182,  183,  182,  183,  358,  181,

      182,  183,  181,  836,  364,  181,  362,  361,  181,  836,
      836,  836,  360,  181,  182,  183,  363,  182,  183,  181,
      182,  183,  181,  182,  183,  181,  366,  836,  182,  183,
      181,  368,  181,  836,  182,  183,  365,  182,  183,  233,
      182,  183,  367,  233,  836,  182,  183,  182,  183,  836,
      370,  836,  836,  369,  234,  235,  233,  836,  234,  243,
      373,  234,  234,  233,  371,  234,  374,  836,  233,  836,
      836,  234,  235,  234,  375,  836,  836,  836,  234,  235,
      836,  836,  836,  234,  235,  240,  241,  240,  240,  240,
      240,  233,  836,  234,  234,  376,  108,  234,  377,  242,

      242,  108,  836,  234,  234,  234,  234,  235,  108,  836,
      836,  109,  110,  108,  836,  836,  109,  110,  108,  380,
      836,  836,  380,  109,  110,  111,  387,  381,  109,  110,
      388,  836,  836,  109,  110,  234,  234,  380,  108,  836,
      380,  511,  386,  836,  836,  382,  380,  380,  108,  836,
      380,  108,  836,  109,  110,  389,  108,  383,  380,  108,
      384,  385,  108,  109,  110,  390,  109,  110,  108,  836,
      836,  109,  110,  836,  109,  110,  836,  109,  110,  398,
      108,  836,  836,  109,  110,  836,  108,  391,  380,  380,
      380,  392,  836,  380,  393,  109,  110,  836,  382,  380,

      380,  109,  110,  380,  108,  394,  395,  836,  108,  836,
      383,  380,  108,  384,  385,  108,  836,  399,  836,  109,
      110,  108,  396,  109,  110,  836,  836,  109,  110,  400,
      109,  110,  836,  108,  397,  108,  109,  110,  108,  836,
      836,  380,  380,  108,  401,  836,  836,  836,  109,  110,
      109,  110,  108,  109,  110,  108,  404,  108,  109,  110,
      402,  403,  108,  291,  108,  836,  836,  109,  110,  836,
      109,  110,  109,  110,  405,  836,  108,  109,  110,  109,
      110,  406,  108,  836,  410,  108,  836,  108,  836,  408,
      409,  109,  110,  108,  407,  108,  411,  109,  110,  836,

      109,  110,  109,  110,  413,  108,  836,  108,  109,  110,
      109,  110,  108,  836,  412,  108,  836,  415,  108,  836,
      109,  110,  109,  110,  414,  836,  836,  109,  110,  836,
      109,  110,  108,  109,  110,  108,  419,  108,  836,  836,
      836,  417,  416,  108,  418,  108,  836,  109,  110,  108,
      109,  110,  109,  110,  108,  420,  108,  836,  109,  110,
      109,  110,  108,  836,  109,  110,  422,  836,  836,  109,
      110,  109,  110,  424,  425,  108,  836,  109,  110,  108,
      423,  108,  421,  836,  427,  108,  426,  108,  836,  108,
      109,  110,  108,  836,  109,  110,  109,  110,  428,  429,

      109,  110,  109,  110,  109,  110,  108,  109,  110,  836,
      431,  836,  108,  434,  108,  836,  108,  430,  108,  836,
      108,  109,  110,  836,  432,  836,  433,  109,  110,  109,
      110,  109,  110,  109,  110,  109,  110,  437,  108,  836,
      435,  108,  836,  836,  836,  836,  108,  836,  436,  108,
      836,  108,  836,  109,  110,  836,  109,  110,  836,  438,
      108,  109,  110,  836,  109,  110,  109,  110,  836,  836,
      836,  108,  836,  108,  439,  109,  110,  440,  441,  836,
      443,  444,  108,  836,  442,  445,  109,  110,  109,  110,
      446,  108,  836,  836,  836,  447,  108,  109,  110,  108,

      836,  836,  836,  836,  108,  836,  109,  110,  108,  449,
      108,  109,  110,  836,  109,  110,  181,  448,  181,  109,
      110,  181,  836,  109,  110,  109,  110,  451,  452,  836,
      450,  182,  183,  182,  183,  454,  182,  183,  836,  836,
      836,  836,  836,  836,  453,  380,  181,  836,  380,  462,
      836,  836,  836,  458,  380,  380,  463,  181,  380,  181,
      836,  182,  183,  181,  836,  459,  380,  181,  460,  461,
      836,  836,  182,  183,  182,  183,  181,  836,  182,  183,
      836,  465,  182,  183,  181,  836,  464,  380,  836,  184,
      380,  182,  183,  184,  466,  836,  380,  380,  380,  182,

      183,  380,  836,  468,  836,  472,  458,  380,  380,  181,
      467,  380,  181,  836,  181,  836,  836,  181,  459,  380,
      181,  460,  461,  836,  182,  183,  836,  182,  183,  182,
      183,  469,  182,  183,  836,  182,  183,  181,  470,  181,
      471,  473,  181,  836,  475,  836,  836,  181,  836,  380,
      380,  181,  182,  183,  182,  183,  474,  182,  183,  181,
      836,  476,  182,  183,  836,  836,  182,  183,  477,  478,
      479,  181,  836,  181,  182,  183,  836,  836,  836,  181,
      481,  480,  181,  836,  181,  836,  182,  183,  182,  183,
      181,  836,  482,  836,  182,  183,  836,  182,  183,  182,

      183,  836,  836,  836,  836,  182,  183,  181,  836,  483,
      484,  487,  181,  836,  181,  836,  836,  485,  181,  486,
      181,  836,  182,  183,  181,  836,  181,  182,  183,  182,
      183,  488,  836,  182,  183,  182,  183,  490,  181,  182,
      183,  182,  183,  181,  380,  836,  236,  380,  492,  181,
      236,  181,  836,  182,  183,  489,  491,  494,  182,  183,
      495,  181,  493,  181,  182,  183,  182,  183,  496,  512,
      233,  111,  512,  836,  108,  111,  182,  183,  182,  183,
      498,  108,  836,  836,  497,  234,  235,  836,  108,  109,
      110,  499,  836,  836,  836,  836,  109,  110,  500,  380,

      836,  836,  380,  109,  110,  836,  836,  504,  380,  380,
      520,  108,  380,  108,  836,  523,  521,  108,  836,  505,
      380,  108,  506,  507,  108,  836,  109,  110,  109,  110,
      836,  836,  109,  110,  526,  836,  109,  110,  108,  109,
      110,  108,  529,  836,  836,  836,  522,  524,  836,  836,
      380,  380,  380,  109,  110,  380,  109,  110,  525,  836,
      504,  380,  380,  527,  108,  380,  530,  836,  108,  528,
      836,  108,  505,  380,  836,  506,  507,  836,  108,  109,
      110,  836,  108,  109,  110,  531,  109,  110,  836,  532,
      836,  535,  836,  109,  110,  108,  836,  109,  110,  836,

      836,  108,  836,  380,  380,  512,  536,  533,  512,  108,
      109,  110,  836,  514,  512,  512,  109,  110,  512,  534,
      836,  108,  836,  108,  109,  110,  512,  108,  515,  516,
      836,  836,  836,  836,  836,  537,  109,  110,  109,  110,
      836,  836,  109,  110,  541,  836,  538,  108,  836,  108,
      836,  539,  836,  836,  108,  836,  512,  512,  380,  540,
      108,  380,  109,  110,  109,  110,  519,  384,  384,  109,
      110,  384,  108,  836,  108,  109,  110,  108,  543,  384,
      836,  380,  380,  542,  544,  836,  836,  109,  110,  109,
      110,  108,  109,  110,  836,  545,  108,  836,  108,  836,

      108,  546,  108,  836,  836,  836,  109,  110,  108,  384,
      384,  109,  110,  109,  110,  109,  110,  109,  110,  550,
      108,  547,  108,  109,  110,  108,  548,  108,  836,  551,
      108,  549,  836,  836,  108,  109,  110,  109,  110,  836,
      109,  110,  109,  110,  108,  109,  110,  108,  554,  109,
      110,  836,  108,  836,  108,  553,  552,  836,  836,  109,
      110,  108,  109,  110,  836,  836,  108,  109,  110,  109,
      110,  108,  556,  557,  558,  836,  109,  110,  108,  836,
      555,  109,  110,  108,  836,  836,  109,  110,  108,  836,
      560,  836,  836,  109,  110,  108,  836,  559,  109,  110,

      562,  108,  836,  109,  110,  836,  108,  561,  108,  836,
      109,  110,  108,  563,  564,  108,  109,  110,  108,  836,
      565,  109,  110,  109,  110,  108,  836,  109,  110,  108,
      109,  110,  836,  109,  110,  108,  836,  108,  836,  836,
      109,  110,  569,  566,  109,  110,  108,  567,  108,  836,
      109,  110,  109,  110,  568,  108,  836,  108,  571,  108,
      836,  109,  110,  109,  110,  570,  108,  836,  836,  108,
      109,  110,  109,  110,  109,  110,  108,  836,  574,  181,
      575,  109,  110,  836,  109,  110,  573,  572,  576,  181,
      836,  109,  110,  380,  182,  183,  380,  181,  577,  184,

      836,  457,  181,  836,  182,  183,  181,  836,  587,  836,
      836,  836,  182,  183,  588,  579,  512,  182,  183,  512,
      181,  182,  183,  836,  581,  512,  512,  590,  181,  512,
      836,  181,  836,  181,  589,  182,  183,  512,  181,  582,
      583,  181,  591,  182,  183,  836,  182,  183,  182,  183,
      181,  836,  836,  182,  183,  595,  182,  183,  836,  592,
      351,  836,  836,  836,  836,  182,  183,  512,  512,  380,
      593,  181,  380,  181,  836,  836,  836,  586,  460,  460,
      594,  181,  460,  181,  836,  181,  182,  183,  182,  183,
      460,  181,  380,  380,  596,  181,  182,  183,  182,  183,

      182,  183,  597,  599,  836,  836,  182,  183,  181,  836,
      182,  183,  602,  181,  598,  181,  836,  181,  836,  181,
      460,  460,  601,  182,  183,  181,  836,  600,  182,  183,
      182,  183,  182,  183,  182,  183,  603,  836,  836,  181,
      182,  183,  605,  836,  181,  836,  836,  181,  836,  181,
      836,  181,  836,  604,  182,  183,  836,  836,  606,  182,
      183,  836,  182,  183,  182,  183,  182,  183,  181,  836,
      609,  181,  610,  181,  836,  607,  608,  181,  836,  181,
      836,  181,  836,  182,  183,  181,  182,  183,  182,  183,
      836,  617,  182,  183,  182,  183,  182,  183,  613,  181,

      182,  183,  181,  836,  611,  836,  612,  615,  836,  108,
      836,  836,  616,  614,  182,  183,  108,  182,  183,  836,
      380,  836,  618,  380,  109,  110,  236,  380,  503,  108,
      380,  109,  110,  111,  836,  381,  384,  384,  836,  836,
      384,  836,  620,  512,  109,  110,  512,  836,  384,  511,
      637,  622,  512,  512,  512,  380,  512,  512,  380,  108,
      111,  378,  513,  518,  512,  836,  623,  624,  108,  836,
      108,  836,  836,  836,  109,  110,  629,  634,  384,  384,
      635,  836,  108,  109,  110,  109,  110,  108,  638,  836,
      636,  836,  108,  836,  512,  512,  380,  109,  110,  380,

      836,  836,  109,  110,  627,  506,  506,  109,  110,  506,
      108,  836,  639,  836,  108,  640,  108,  506,  108,  380,
      380,  108,  641,  108,  836,  109,  110,  642,  108,  109,
      110,  109,  110,  109,  110,  836,  109,  110,  109,  110,
      836,  836,  646,  109,  110,  108,  836,  506,  506,  512,
      643,  645,  512,  108,  836,  836,  644,  514,  512,  512,
      109,  110,  512,  836,  108,  836,  647,  108,  109,  110,
      512,  836,  515,  516,  108,  836,  836,  108,  648,  109,
      110,  108,  109,  110,  649,  836,  836,  650,  108,  109,
      110,  836,  109,  110,  836,  651,  109,  110,  836,  836,

      512,  512,  512,  109,  110,  512,  653,  836,  836,  836,
      632,  515,  515,  652,  108,  515,  108,  836,  836,  836,
      108,  836,  108,  515,  108,  512,  512,  108,  836,  109,
      110,  109,  110,  108,  654,  109,  110,  109,  110,  109,
      110,  108,  109,  110,  108,  656,  836,  836,  109,  110,
      836,  836,  108,  515,  515,  108,  109,  110,  108,  109,
      110,  658,  655,  108,  836,  108,  657,  109,  110,  660,
      109,  110,  836,  109,  110,  659,  836,  108,  109,  110,
      109,  110,  108,  836,  664,  108,  836,  661,  662,  108,
      836,  663,  109,  110,  836,  836,  836,  109,  110,  108,

      109,  110,  108,  836,  109,  110,  666,  108,  836,  108,
      667,  836,  665,  108,  109,  110,  836,  109,  110,  108,
      836,  108,  109,  110,  109,  110,  108,  668,  109,  110,
      836,  670,  108,  836,  109,  110,  109,  110,  669,  836,
      836,  109,  110,  108,  836,  671,  672,  109,  110,  108,
      836,  108,  836,  108,  836,  674,  108,  836,  109,  110,
      673,  108,  836,  108,  109,  110,  109,  110,  109,  110,
      836,  109,  110,  836,  836,  836,  109,  110,  109,  110,
      836,  380,  836,  836,  380,  676,  675,  184,  512,  457,
      836,  512,  836,  836,  184,  836,  580,  460,  460,  836,

      836,  460,  836,  579,  677,  512,  836,  836,  512,  460,
      679,  836,  836,  581,  512,  512,  380,  181,  512,  380,
      181,  836,  455,  836,  585,  836,  512,  836,  582,  583,
      181,  836,  182,  183,  181,  182,  183,  836,  684,  460,
      460,  836,  685,  836,  181,  182,  183,  181,  836,  182,
      183,  836,  836,  687,  836,  836,  512,  512,  512,  182,
      183,  512,  182,  183,  836,  836,  682,  582,  582,  181,
      686,  582,  181,  836,  836,  181,  836,  836,  688,  582,
      181,  512,  512,  181,  182,  183,  181,  182,  183,  181,
      182,  183,  689,  836,  836,  182,  183,  836,  182,  183,

      181,  182,  183,  181,  182,  183,  181,  836,  836,  582,
      582,  690,  181,  691,  692,  182,  183,  693,  182,  183,
      694,  182,  183,  696,  181,  695,  836,  182,  183,  181,
      836,  181,  836,  181,  836,  181,  836,  836,  181,  182,
      183,  181,  697,  836,  182,  183,  182,  183,  182,  183,
      182,  183,  698,  182,  183,  181,  182,  183,  702,  181,
      703,  181,  836,  836,  700,  181,  701,  699,  181,  836,
      182,  183,  181,  836,  182,  183,  182,  183,  704,  181,
      182,  183,  181,  182,  183,  706,  705,  182,  183,  836,
      836,  836,  836,  380,  182,  183,  380,  182,  183,  236,

      836,  503,  836,  708,  836,  512,  707,  836,  512,  836,
      836,  236,  836,  621,  380,  620,  512,  380,  108,  512,
      501,  836,  626,  836,  622,  512,  512,  710,  836,  512,
      836,  506,  506,  109,  110,  506,  715,  512,  512,  623,
      624,  512,  108,  506,  111,  380,  513,  378,  380,  836,
      108,  378,  515,  515,  836,  108,  515,  109,  110,  836,
      629,  836,  836,  836,  515,  109,  110,  512,  512,  512,
      109,  110,  512,  506,  506,  260,  718,  713,  623,  623,
      512,  380,  623,  512,  380,  719,  378,  378,  631,  518,
      623,  108,  512,  512,  515,  515,  108,  836,  108,  836,

      108,  836,  717,  634,  836,  836,  109,  110,  108,  836,
      108,  109,  110,  109,  110,  109,  110,  721,  836,  722,
      623,  623,  720,  109,  110,  109,  110,  108,  723,  108,
      836,  836,  108,  724,  836,  836,  836,  108,  836,  108,
      836,  108,  109,  110,  109,  110,  725,  109,  110,  836,
      727,  728,  109,  110,  109,  110,  109,  110,  836,  108,
      730,  108,  836,  108,  726,  108,  836,  108,  836,  108,
      836,  836,  108,  729,  109,  110,  109,  110,  109,  110,
      109,  110,  109,  110,  109,  110,  733,  109,  110,  731,
      108,  836,  108,  836,  108,  836,  108,  836,  108,  732,

      836,  836,  108,  836,  734,  109,  110,  109,  110,  109,
      110,  109,  110,  109,  110,  735,  108,  109,  110,  108,
      836,  836,  737,  738,  108,  836,  108,  836,  108,  836,
      736,  109,  110,  108,  109,  110,  740,  836,  836,  109,
      110,  109,  110,  109,  110,  108,  836,  108,  109,  110,
      108,  836,  739,  108,  741,  108,  836,  108,  836,  108,
      109,  110,  109,  110,  108,  109,  110,  181,  109,  110,
      109,  110,  109,  110,  109,  110,  836,  836,  744,  109,
      110,  512,  182,  183,  512,  836,  742,  184,  836,  580,
      512,  836,  184,  512,  743,  836,  184,  582,  582,  512,

      836,  582,  512,  679,  749,  455,  836,  681,  380,  582,
      181,  380,  836,  181,  455,  836,  585,  380,  181,  455,
      380,  746,  181,  455,  836,  182,  183,  747,  182,  183,
      684,  836,  836,  182,  183,  748,  181,  182,  183,  582,
      582,  181,  836,  181,  836,  181,  836,  751,  181,  836,
      750,  182,  183,  181,  836,  181,  182,  183,  182,  183,
      182,  183,  181,  182,  183,  836,  181,  836,  182,  183,
      182,  183,  752,  836,  836,  181,  836,  182,  183,  181,
      755,  182,  183,  756,  753,  181,  836,  757,  181,  754,
      182,  183,  181,  836,  182,  183,  181,  836,  181,  836,

      182,  183,  181,  182,  183,  836,  758,  182,  183,  760,
      181,  182,  183,  182,  183,  836,  181,  182,  183,  759,
      836,  763,  836,  836,  762,  182,  183,  512,  761,  836,
      512,  182,  183,  236,  836,  621,  512,  764,  236,  512,
      623,  623,  236,  108,  623,  512,  765,  766,  512,  710,
      836,  501,  623,  712,  380,  836,  836,  380,  109,  110,
      501,  836,  626,  380,  836,  501,  380,  768,  836,  501,
      108,  512,  836,  108,  512,  108,  715,  378,  512,  631,
      378,  512,  623,  623,  378,  109,  110,  108,  109,  110,
      109,  110,  108,  717,  836,  769,  836,  836,  108,  836,

      108,  836,  109,  110,  108,  836,  108,  109,  110,  771,
      836,  635,  770,  109,  110,  109,  110,  772,  108,  109,
      110,  109,  110,  108,  836,  774,  108,  836,  836,  773,
      108,  836,  108,  109,  110,  836,  836,  836,  109,  110,
      108,  109,  110,  108,  776,  109,  110,  109,  110,  108,
      836,  777,  108,  778,  775,  109,  110,  836,  109,  110,
      108,  836,  108,  836,  109,  110,  836,  109,  110,  108,
      836,  108,  836,  780,  108,  109,  110,  109,  110,  108,
      836,  781,  108,  836,  109,  110,  109,  110,  108,  109,
      110,  779,  836,  836,  109,  110,  836,  109,  110,  782,

      836,  836,  512,  109,  110,  512,  181,  836,  455,  512,
      681,  455,  512,  181,  836,  455,  783,  181,  836,  181,
      836,  182,  183,  836,  746,  181,  836,  836,  182,  183,
      181,  836,  182,  183,  182,  183,  836,  181,  787,  836,
      182,  183,  784,  836,  181,  182,  183,  181,  836,  785,
      181,  786,  182,  183,  836,  788,  181,  836,  789,  182,
      183,  836,  182,  183,  181,  182,  183,  181,  836,  836,
      792,  182,  183,  181,  836,  181,  836,  791,  181,  182,
      183,  181,  182,  183,  836,  790,  181,  836,  182,  183,
      182,  183,  181,  182,  183,  181,  182,  183,  836,  793,

      795,  182,  183,  794,  836,  836,  512,  182,  183,  512,
      182,  183,  501,  512,  712,  501,  512,  108,  836,  501,
      108,  797,  796,  836,  108,  836,  799,  798,  768,  108,
      836,  108,  109,  110,  836,  109,  110,  108,  800,  109,
      110,  108,  836,  108,  109,  110,  109,  110,  108,  836,
      801,  108,  109,  110,  108,  836,  109,  110,  109,  110,
      836,  803,  108,  109,  110,  802,  109,  110,  804,  109,
      110,  108,  836,  108,  836,  805,  108,  109,  110,  181,
      836,  836,  181,  836,  181,  836,  109,  110,  109,  110,
      836,  109,  110,  181,  182,  183,  836,  182,  183,  182,

      183,  810,  181,  836,  808,  181,  806,  809,  182,  183,
      836,  836,  807,  836,  836,  836,  181,  182,  183,  836,
      182,  183,  181,  836,  181,  618,  347,  181,  836,  811,
      836,  182,  183,  181,  836,  812,  836,  182,  183,  182,
      183,  181,  182,  183,  181,  618,  181,  836,  182,  183,
      181,  813,  814,  181,  836,  836,  182,  183,  108,  182,
      183,  182,  183,  108,  836,  182,  183,  816,  182,  183,
      108,  815,  108,  109,  110,  108,  836,  836,  109,  110,
      817,  108,  836,  108,  836,  109,  110,  109,  110,  836,
      109,  110,  108,  635,  181,  836,  109,  110,  109,  110,

      181,  836,  836,  181,  818,  545,  181,  109,  110,  182,
      183,  181,  836,  181,  836,  182,  183,  819,  182,  183,
      181,  182,  183,  836,  836,  181,  182,  183,  182,  183,
      836,  836,  820,  836,  826,  182,  183,  823,  821,  822,
      182,  183,  181,  836,  181,  825,  108,  824,  618,  108,
      836,  181,  836,  181,  836,  181,  836,  182,  183,  182,
      183,  109,  110,  181,  109,  110,  182,  183,  182,  183,
      182,  183,  829,  836,  830,  181,  836,  827,  182,  183,
      828,  661,  181,  836,  181,  836,  836,  181,  831,  467,
      182,  183,  108,  836,  181,  836,  181,  182,  183,  182,

      183,  832,  182,  183,  181,  836,  836,  109,  110,  182,
      183,  182,  183,  181,  836,  108,  836,  181,  836,  182,
      183,  181,  833,  836,  836,  836,  836,  836,  182,  183,
      109,  110,  182,  183,  836,  834,  182,  183,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  835,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   98,   98,   98,   98,   98,
       98,   98,   98,   98,  107,  107,  836,  836,  107,  111,
      111,  111,  111,  111,  111,  180,  180,  836,  836,  180,

      184,  184,  184,  184,  184,  184,  232,  232,  836,  836,
      232,  236,  236,  236,  236,  236,  236,  245,  836,  836,
      836,  245,  245,  245,  245,  245,  247,  247,  836,  247,
      247,  247,  247,  247,  247,  248,  836,  248,  248,  836,
      836,  248,  248,  250,  250,  250,  250,  329,  329,  329,
      329,  372,  372,  372,  372,  378,  378,  378,  378,  378,
      378,  381,  836,  836,  836,  381,  381,  381,  381,  381,
      455,  455,  455,  455,  455,  455,  457,  836,  836,  836,
      457,  457,  457,  457,  457,  501,  501,  501,  501,  501,
      501,  503,  836,  836,  836,  503,  503,  503,  503,  503,

      380,  836,  836,  836,  380,  380,  380,  380,  380,  510,
      836,  836,  510,  510,  510,  510,  510,  510,  513,  836,
      836,  836,  513,  513,  513,  513,  513,  518,  836,  836,
      836,  518,  518,  518,  518,  518,  578,  836,  836,  578,
      578,  578,  578,  578,  578,  580,  836,  836,  836,  580,
      580,  580,  580,  580,  585,  836,  836,  836,  585,  585,
      585,  585,  585,  619,  836,  836,  619,  619,  619,  619,
      619,  619,  621,  836,  836,  836,  621,  621,  621,  621,
      621,  626,  836,  836,  836,  626,  626,  626,  626,  626,
      512,  836,  836,  836,  512,  512,  512,  512,  512,  628,

      836,  836,  628,  628,  628,  628,  628,  628,  631,  836,
      836,  836,  631,  631,  631,  631,  631,  633,  836,  836,
      633,  633,  633,  633,  633,  633,  678,  836,  836,  678,
      678,  678,  678,  678,  678,  681,  836,  836,  836,  681,
      681,  681,  681,  681,  683,  836,  836,  683,  683,  683,
      683,  683,  683,  709,  836,  836,  709,  709,  709,  709,
      709,  709,  712,  836,  836,  836,  712,  712,  712,  712,
      712,  714,  836,  836,  714,  714,  714,  714,  714,  714,
      716,  836,  836,  716,  716,  716,  716,  716,  716,  745,
      836,  836,  745,  745,  745,  745,  745,  745,  767,  836,

      836,  767,  767,  767,  767,  767,  767,   13,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836
    } ;

static yyconst short int yy_chk[4664] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,   93,    5,    5,
        5,    5,   93,    5,    5,    5,  384,    5,    5,  626,
      384,    5,  246,    5,    5,    7,    7,  246,    7,    7,
        7,    8,    8,    5,    8,    8,    8,    9,  623,    9,
        9,   10,   15,   10,   10,  585,   15,   15,  103,  103,
      582,    5,    5,    6,    6,    6,    6,    6,    6,    6,
      518,    6,    6,    6,    6,   18,    6,    6,    6,   19,
        6,    6,   21,  515,    6,   21,    6,    6,   23,  509,
       18,   18,   24,   19,   23,   25,    6,   21,   21,  508,

      103,  103,  503,   23,   23,   28,   28,   24,   24,   28,
       25,   25,  502,   27,    6,    6,   11,   28,   11,   11,
       11,   11,  457,   52,   11,   11,   11,   26,   27,   27,
       30,  456,  381,  379,   29,   26,   26,   52,   11,   80,
       37,  377,   26,   26,   35,   30,   30,   28,   28,   29,
       29,  376,   29,   80,   29,   37,   37,  460,  237,   35,
       35,  460,   29,   35,   30,   37,  185,   11,   11,   31,
       11,   12,   51,   12,   12,   12,   12,  108,   35,   12,
       12,   12,  111,  112,   31,   31,   33,   51,   51,   31,
       32,  108,   54,   12,   36,   54,  111,   31,   31,   38,

       31,   33,   33,   31,  181,   32,   32,   54,   54,   36,
       36,   32,   13,   34,   38,   38,   43,   33,  181,   33,
       33,   32,   12,   12,   36,   12,   33,   32,   34,   34,
       38,   43,   43,   39,   38,  506,    0,    0,    0,  506,
       40,   34,   34,    0,   34,   42,    0,   34,   39,   39,
       39,   39,   44,   43,   39,   40,   40,   40,   39,   47,
       42,   42,   42,    0,   39,    0,    0,   44,   44,   44,
       46,   40,   55,   44,   47,   47,   42,   40,   41,   42,
       44,    0,   42,   58,   42,   46,   46,   55,   55,   47,
       45,    0,    0,   41,   41,   46,   41,    0,   58,   58,

       41,   48,    0,    0,   46,   45,   45,   41,   41,   49,
       41,   45,   41,   50,   45,    0,   48,   48,   48,    0,
       57,   45,   48,   60,   49,   49,   45,   45,   50,   50,
        0,   56,   57,   49,   49,   57,   57,   56,   60,   60,
       59,   59,   50,   56,   59,   62,   56,   56,   63,  106,
       50,   65,   59,  106,  106,  184,   64,    0,   60,   67,
       62,   62,    0,   63,   63,  233,   65,   65,   65,  184,
       62,   64,   64,    0,   67,   67,   68,   67,   63,  233,
       71,   63,   59,   59,   61,    0,   66,   64,   63,  236,
       64,   68,   68,   68,    0,   71,   71,   68,    0,   61,

       61,   66,   66,  236,    0,   61,   66,    0,   66,   69,
        0,   71,   61,   61,   71,   61,   66,   61,   61,   70,
       61,   66,   66,   76,   69,   69,   73,   69,    0,  251,
       69,   72,    0,   74,   70,   70,  330,   70,   76,   76,
       76,   73,   73,  251,   69,   75,   72,   72,   74,   74,
      330,   70,  373,   78,   74,   79,   72,   73,   73,   72,
       75,   75,   73,   73,   74,   78,  373,   84,   78,   78,
       79,   79,   82,   84,    0,   82,    0,    0,    0,    0,
       75,  378,   84,   84,   87,    0,   88,   82,   82,   85,
       85,   85,   85,   85,   85,  378,   85,    0,   86,   87,

       87,   88,   88,   90,   89,   89,   86,   86,   89,  107,
        0,   85,   85,   86,   86,  109,   89,    0,   90,   90,
        0,  110,  110,  110,  107,  107,  110,  121,    0,  113,
      109,  109,  113,   90,  110,  114,    0,  117,    0,    0,
      115,  114,  121,  121,  113,  113,   89,   89,  115,  115,
      114,  114,  117,  117,    0,  115,  115,  116,  116,  118,
        0,  116,  119,    0,  110,  110,    0,  120,  117,  116,
      122,    0,    0,    0,  118,  118,    0,  119,  119,  455,
      125,    0,  120,  120,    0,  122,  122,  119,  120,  123,
      119,  122,  124,  455,    0,  125,  125,  118,  126,  116,

      116,  125,  127,    0,  123,  123,    0,  124,  124,  123,
      128,    0,  129,  126,  126,  130,  126,  127,  127,    0,
      124,  124,  124,  501,    0,  128,  128,  129,  129,  124,
      130,  130,  131,  126,  129,    0,  132,  501,    0,  128,
        0,  133,    0,    0,  134,    0,  135,  131,  131,  136,
      130,  132,  132,  131,    0,  132,  133,  133,  133,  134,
      134,  135,  135,  137,  136,  136,  138,    0,    0,  139,
      136,  140,  132,    0,  141,  134,    0,  142,  137,  137,
      135,  138,  138,  138,  139,  139,  140,  140,  139,  141,
      141,  141,  142,  142,  143,    0,  144,    0,  145,    0,

      146,  140,  147,    0,  148,  141,    0,    0,  149,  143,
      143,  144,  144,  145,  145,  146,  146,  147,  147,  148,
      148,  150,  147,  149,  149,    0,    0,  145,  151,    0,
      143,  144,    0,  152,    0,    0,  150,  150,  148,    0,
      146,  153,  149,  151,  151,  154,    0,  155,  152,  152,
      150,    0,  156,    0,  151,  152,  153,  153,    0,  157,
      154,  154,  155,  155,  158,    0,    0,  156,  156,  159,
        0,  160,  153,  156,  157,  157,  162,    0,    0,  158,
      158,    0,  155,  161,  159,  159,  160,  160,    0,  163,
        0,  162,  162,  157,  159,  157,  158,  164,  161,  161,

      159,  162,    0,  161,  163,  163,  160,  165,    0,    0,
        0,  166,  164,  164,  167,    0,    0,  164,  168,    0,
        0,    0,  165,  165,    0,  163,  166,  166,  166,  167,
      167,    0,  164,  168,  168,  164,  164,    0,  169,  166,
        0,  171,  165,    0,    0,  167,  170,  166,    0,    0,
      172,    0,  168,  169,  169,  169,  171,  171,  173,  169,
        0,  170,  170,  174,  170,  172,  172,  172,    0,  175,
      171,  176,    0,  173,  173,  170,    0,    0,  174,  174,
      177,    0,    0,  173,  175,  175,  176,  176,  511,  178,
      511,  511,  176,  179,  511,  177,  177,  174,  180,    0,

        0,    0,  176,  175,  178,  178,  178,    0,  179,  179,
      182,    0,  186,  180,  180,  186,  177,  183,  183,  183,
        0,  188,  183,  179,  189,  182,  182,  186,  186,  187,
      183,    0,  191,    0,  193,  187,  188,  188,    0,  189,
      189,  192,  190,  190,  187,  187,  190,  191,  191,  193,
      193,  193,    0,  194,  190,    0,  192,  192,    0,    0,
      183,  183,  195,    0,  196,    0,  197,  191,  194,  194,
        0,  194,  198,    0,  192,    0,    0,  195,  195,  196,
      196,  197,  197,  199,  190,  190,  200,  198,  198,  201,
        0,  195,  195,  202,  197,    0,  203,    0,  199,  199,

      204,  200,  200,  198,  201,  201,  200,  205,  202,  202,
      207,  203,  203,    0,    0,  204,  204,    0,  206,  199,
        0,  208,  205,  205,  206,  207,  207,    0,  206,  202,
      203,  204,  209,  206,  206,  210,  208,  208,  211,  206,
      208,    0,  212,  205,    0,    0,  213,  209,  209,  214,
      210,  210,    0,  211,  211,  215,  210,  212,  212,  216,
      212,  213,  213,    0,  214,  214,    0,    0,  213,  211,
      215,  215,  217,    0,  216,  216,    0,  218,  212,  219,
        0,  221,  216,  218,  215,  220,    0,  217,  217,    0,
      215,    0,  218,  218,  219,  219,  221,  221,  217,  222,

      220,  220,  223,    0,  221,  224,  220,  219,  225,    0,
        0,    0,  218,  226,  222,  222,  220,  223,  223,  227,
      224,  224,  228,  225,  225,  229,  224,    0,  226,  226,
      230,  226,  231,    0,  227,  227,  223,  228,  228,  232,
      229,  229,  225,  234,    0,  230,  230,  231,  231,    0,
      229,    0,    0,  227,  232,  232,  244,    0,  234,  234,
      235,  235,  235,  238,  230,  235,  238,    0,  239,    0,
        0,  244,  244,  235,  239,    0,    0,    0,  238,  238,
        0,    0,    0,  239,  239,  240,  240,  240,  240,  240,
      240,  242,    0,  243,  243,  240,  250,  243,  240,  242,

      242,  255,    0,  235,  235,  243,  242,  242,  254,    0,
        0,  250,  250,  256,    0,    0,  255,  255,  257,  382,
        0,    0,  382,  254,  254,  382,  255,  382,  256,  256,
      256,    0,    0,  257,  257,  243,  243,  252,  258,    0,
      252,  382,  254,    0,    0,  252,  252,  252,  259,    0,
      252,  260,    0,  258,  258,  258,  261,  252,  252,  265,
      252,  252,  262,  259,  259,  259,  260,  260,  269,    0,
        0,  261,  261,    0,  265,  265,    0,  262,  262,  265,
      266,    0,    0,  269,  269,    0,  263,  261,  252,  252,
      253,  262,    0,  253,  262,  266,  266,    0,  253,  253,

      253,  263,  263,  253,  264,  263,  263,    0,  267,    0,
      253,  253,  268,  253,  253,  270,    0,  266,    0,  264,
      264,  271,  263,  267,  267,    0,    0,  268,  268,  267,
      270,  270,    0,  272,  264,  273,  271,  271,  274,    0,
        0,  253,  253,  275,  268,    0,    0,    0,  272,  272,
      273,  273,  276,  274,  274,  277,  273,  278,  275,  275,
      271,  272,  279,  275,  280,    0,    0,  276,  276,    0,
      277,  277,  278,  278,  274,    0,  281,  279,  279,  280,
      280,  276,  282,    0,  280,  283,    0,  284,    0,  278,
      279,  281,  281,  285,  277,  286,  281,  282,  282,    0,

      283,  283,  284,  284,  283,  287,    0,  288,  285,  285,
      286,  286,  291,    0,  282,  289,    0,  286,  290,    0,
      287,  287,  288,  288,  285,    0,    0,  291,  291,    0,
      289,  289,  292,  290,  290,  293,  290,  294,    0,    0,
        0,  288,  287,  295,  289,  296,    0,  292,  292,  297,
      293,  293,  294,  294,  298,  293,  299,    0,  295,  295,
      296,  296,  300,    0,  297,  297,  296,    0,    0,  298,
      298,  299,  299,  297,  298,  301,    0,  300,  300,  302,
      296,  303,  295,    0,  300,  304,  299,  305,    0,  306,
      301,  301,  307,    0,  302,  302,  303,  303,  300,  301,

      304,  304,  305,  305,  306,  306,  308,  307,  307,    0,
      304,    0,  309,  307,  310,    0,  311,  303,  312,    0,
      313,  308,  308,    0,  305,    0,  306,  309,  309,  310,
      310,  311,  311,  312,  312,  313,  313,  311,  314,    0,
      308,  315,    0,    0,    0,    0,  316,    0,  310,  317,
        0,  318,    0,  314,  314,    0,  315,  315,    0,  313,
      319,  316,  316,    0,  317,  317,  318,  318,    0,    0,
        0,  320,    0,  321,  314,  319,  319,  315,  316,    0,
      318,  319,  322,    0,  317,  319,  320,  320,  321,  321,
      320,  323,    0,    0,    0,  321,  324,  322,  322,  325,

        0,    0,    0,    0,  326,    0,  323,  323,  327,  323,
      328,  324,  324,    0,  325,  325,  329,  322,  333,  326,
      326,  334,    0,  327,  327,  328,  328,  325,  326,    0,
      324,  329,  329,  333,  333,  328,  334,  334,    0,    0,
        0,    0,    0,    0,  327,  331,  335,    0,  331,  333,
        0,    0,    0,  331,  331,  331,  334,  336,  331,  337,
        0,  335,  335,  338,    0,  331,  331,  340,  331,  331,
        0,    0,  336,  336,  337,  337,  339,    0,  338,  338,
        0,  337,  340,  340,  342,    0,  336,  579,    0,  579,
      579,  339,  339,  579,  337,    0,  331,  331,  332,  342,

      342,  332,    0,  340,    0,  342,  332,  332,  332,  341,
      339,  332,  343,    0,  344,    0,    0,  347,  332,  332,
      345,  332,  332,    0,  341,  341,    0,  343,  343,  344,
      344,  341,  347,  347,    0,  345,  345,  346,  341,  348,
      341,  343,  349,    0,  345,    0,    0,  350,    0,  332,
      332,  351,  346,  346,  348,  348,  344,  349,  349,  352,
        0,  346,  350,  350,    0,    0,  351,  351,  348,  348,
      349,  353,    0,  354,  352,  352,    0,    0,    0,  355,
      352,  350,  356,    0,  357,    0,  353,  353,  354,  354,
      358,    0,  353,    0,  355,  355,    0,  356,  356,  357,

      357,    0,    0,    0,    0,  358,  358,  359,    0,  354,
      355,  358,  360,    0,  361,    0,    0,  356,  362,  357,
      363,    0,  359,  359,  364,    0,  365,  360,  360,  361,
      361,  359,    0,  362,  362,  363,  363,  362,  366,  364,
      364,  365,  365,  367,  620,    0,  620,  620,  364,  368,
      620,  369,    0,  366,  366,  361,  363,  366,  367,  367,
      367,  370,  365,  371,  368,  368,  369,  369,  368,  629,
      372,  629,  629,    0,  386,  629,  370,  370,  371,  371,
      369,  387,    0,    0,  368,  372,  372,    0,  389,  386,
      386,  370,    0,    0,    0,    0,  387,  387,  371,  374,

        0,    0,  374,  389,  389,    0,    0,  374,  374,  374,
      386,  388,  374,  390,    0,  389,  387,  392,    0,  374,
      374,  394,  374,  374,  391,    0,  388,  388,  390,  390,
        0,    0,  392,  392,  392,    0,  394,  394,  393,  391,
      391,  395,  394,    0,    0,    0,  388,  390,    0,    0,
      374,  374,  375,  393,  393,  375,  395,  395,  391,    0,
      375,  375,  375,  393,  396,  375,  395,    0,  399,  393,
        0,  397,  375,  375,    0,  375,  375,    0,  400,  396,
      396,    0,  398,  399,  399,  396,  397,  397,    0,  396,
        0,  399,    0,  400,  400,  401,    0,  398,  398,    0,

        0,  402,    0,  375,  375,  383,  400,  397,  383,  403,
      401,  401,    0,  383,  383,  383,  402,  402,  383,  398,
        0,  404,    0,  405,  403,  403,  383,  406,  383,  383,
        0,    0,    0,    0,    0,  402,  404,  404,  405,  405,
        0,    0,  406,  406,  406,    0,  403,  409,    0,  407,
        0,  404,    0,    0,  408,    0,  383,  383,  385,  405,
      410,  385,  409,  409,  407,  407,  385,  385,  385,  408,
      408,  385,  411,    0,  412,  410,  410,  413,  408,  385,
        0,  385,  385,  407,  409,    0,    0,  411,  411,  412,
      412,  414,  413,  413,    0,  410,  415,    0,  416,    0,

      417,  413,  418,    0,    0,    0,  414,  414,  419,  385,
      385,  415,  415,  416,  416,  417,  417,  418,  418,  418,
      420,  415,  421,  419,  419,  422,  416,  423,    0,  419,
      424,  417,    0,    0,  425,  420,  420,  421,  421,    0,
      422,  422,  423,  423,  426,  424,  424,  427,  423,  425,
      425,    0,  428,    0,  429,  422,  421,    0,    0,  426,
      426,  430,  427,  427,    0,    0,  431,  428,  428,  429,
      429,  432,  427,  428,  429,    0,  430,  430,  433,    0,
      426,  431,  431,  434,    0,    0,  432,  432,  435,    0,
      432,    0,    0,  433,  433,  436,    0,  431,  434,  434,

      434,  437,    0,  435,  435,    0,  438,  433,  439,    0,
      436,  436,  440,  435,  436,  441,  437,  437,  442,    0,
      437,  438,  438,  439,  439,  443,    0,  440,  440,  444,
      441,  441,    0,  442,  442,  445,    0,  446,    0,    0,
      443,  443,  443,  439,  444,  444,  447,  440,  448,    0,
      445,  445,  446,  446,  442,  449,    0,  450,  446,  451,
        0,  447,  447,  448,  448,  445,  452,    0,    0,  453,
      449,  449,  450,  450,  451,  451,  454,    0,  450,  463,
      451,  452,  452,    0,  453,  453,  449,  447,  453,  462,
        0,  454,  454,  458,  463,  463,  458,  464,  454,  458,

        0,  458,  465,    0,  462,  462,  466,    0,  462,    0,
        0,    0,  464,  464,  463,  458,  459,  465,  465,  459,
      467,  466,  466,    0,  459,  459,  459,  465,  468,  459,
        0,  469,    0,  470,  464,  467,  467,  459,  473,  459,
      459,  471,  466,  468,  468,    0,  469,  469,  470,  470,
      472,    0,    0,  473,  473,  473,  471,  471,    0,  468,
      469,    0,    0,    0,    0,  472,  472,  459,  459,  461,
      471,  477,  461,  474,    0,    0,    0,  461,  461,  461,
      472,  475,  461,  476,    0,  479,  477,  477,  474,  474,
      461,  478,  461,  461,  474,  480,  475,  475,  476,  476,

      479,  479,  475,  477,    0,    0,  478,  478,  481,    0,
      480,  480,  480,  482,  476,  483,    0,  484,    0,  486,
      461,  461,  479,  481,  481,  485,    0,  478,  482,  482,
      483,  483,  484,  484,  486,  486,  481,    0,    0,  487,
      485,  485,  485,    0,  488,    0,    0,  489,    0,  490,
        0,  491,    0,  482,  487,  487,    0,    0,  487,  488,
      488,    0,  489,  489,  490,  490,  491,  491,  492,    0,
      490,  493,  491,  494,    0,  488,  489,  495,    0,  496,
        0,  497,    0,  492,  492,  498,  493,  493,  494,  494,
        0,  498,  495,  495,  496,  496,  497,  497,  494,  499,

      498,  498,  500,    0,  492,    0,  493,  496,    0,  520,
        0,    0,  497,  495,  499,  499,  524,  500,  500,    0,
      504,    0,  499,  504,  520,  520,  504,  510,  504,  522,
      510,  524,  524,  510,    0,  510,  517,  517,    0,    0,
      517,    0,  504,  505,  522,  522,  505,    0,  517,  510,
      522,  505,  505,  505,  514,  519,  505,  514,  519,  521,
      514,  519,  514,  519,  505,    0,  505,  505,  523,    0,
      525,    0,    0,    0,  521,  521,  514,  519,  517,  517,
      521,    0,  526,  523,  523,  525,  525,  527,  523,    0,
      521,    0,  528,    0,  505,  505,  507,  526,  526,  507,

        0,    0,  527,  527,  507,  507,  507,  528,  528,  507,
      529,    0,  526,    0,  530,  527,  531,  507,  533,  507,
      507,  532,  528,  534,    0,  529,  529,  529,  535,  530,
      530,  531,  531,  533,  533,    0,  532,  532,  534,  534,
        0,    0,  534,  535,  535,  536,    0,  507,  507,  513,
      530,  532,  513,  537,    0,    0,  531,  513,  513,  513,
      536,  536,  513,    0,  538,    0,  536,  539,  537,  537,
      513,    0,  513,  513,  540,    0,    0,  541,  537,  538,
      538,  542,  539,  539,  538,    0,    0,  539,  543,  540,
      540,    0,  541,  541,    0,  540,  542,  542,    0,    0,

      513,  513,  516,  543,  543,  516,  542,    0,    0,    0,
      516,  516,  516,  541,  544,  516,  545,    0,    0,    0,
      546,    0,  547,  516,  548,  516,  516,  549,    0,  544,
      544,  545,  545,  550,  544,  546,  546,  547,  547,  548,
      548,  551,  549,  549,  552,  548,    0,    0,  550,  550,
        0,    0,  553,  516,  516,  554,  551,  551,  555,  552,
      552,  550,  547,  556,    0,  557,  549,  553,  553,  552,
      554,  554,    0,  555,  555,  551,    0,  558,  556,  556,
      557,  557,  559,    0,  557,  560,    0,  553,  553,  561,
        0,  556,  558,  558,    0,    0,    0,  559,  559,  562,

      560,  560,  563,    0,  561,  561,  560,  564,    0,  565,
      561,    0,  559,  566,  562,  562,    0,  563,  563,  567,
        0,  568,  564,  564,  565,  565,  569,  562,  566,  566,
        0,  564,  570,    0,  567,  567,  568,  568,  563,    0,
        0,  569,  569,  571,    0,  565,  568,  570,  570,  572,
        0,  573,    0,  574,    0,  570,  575,    0,  571,  571,
      569,  576,    0,  577,  572,  572,  573,  573,  574,  574,
        0,  575,  575,    0,    0,    0,  576,  576,  577,  577,
        0,  578,    0,    0,  578,  576,  573,  578,  581,  578,
        0,  581,    0,    0,  581,    0,  581,  584,  584,    0,

        0,  584,    0,  578,  577,  580,    0,    0,  580,  584,
      581,    0,    0,  580,  580,  580,  586,  587,  580,  586,
      588,    0,  586,    0,  586,    0,  580,    0,  580,  580,
      590,    0,  587,  587,  589,  588,  588,    0,  586,  584,
      584,    0,  587,    0,  591,  590,  590,  592,    0,  589,
      589,    0,    0,  590,    0,    0,  580,  580,  583,  591,
      591,  583,  592,  592,    0,    0,  583,  583,  583,  593,
      589,  583,  594,    0,    0,  595,    0,    0,  591,  583,
      597,  583,  583,  596,  593,  593,  598,  594,  594,  599,
      595,  595,  594,    0,    0,  597,  597,    0,  596,  596,

      600,  598,  598,  601,  599,  599,  602,    0,    0,  583,
      583,  595,  603,  596,  597,  600,  600,  598,  601,  601,
      599,  602,  602,  601,  604,  600,    0,  603,  603,  605,
        0,  606,    0,  607,    0,  608,    0,    0,  609,  604,
      604,  610,  602,    0,  605,  605,  606,  606,  607,  607,
      608,  608,  605,  609,  609,  611,  610,  610,  609,  612,
      610,  613,    0,    0,  607,  614,  608,  606,  615,    0,
      611,  611,  616,    0,  612,  612,  613,  613,  613,  617,
      614,  614,  618,  615,  615,  615,  614,  616,  616,    0,
        0,    0,    0,  619,  617,  617,  619,  618,  618,  619,

        0,  619,    0,  617,    0,  622,  616,    0,  622,    0,
        0,  622,    0,  622,  627,  619,  621,  627,  635,  621,
      627,    0,  627,    0,  621,  621,  621,  622,    0,  621,
        0,  625,  625,  635,  635,  625,  627,  621,  628,  621,
      621,  628,  636,  625,  628,  634,  628,  634,  634,    0,
      637,  634,  630,  630,    0,  639,  630,  636,  636,    0,
      628,    0,    0,    0,  630,  637,  637,  621,  621,  624,
      639,  639,  624,  625,  625,  639,  636,  624,  624,  624,
      632,  633,  624,  632,  633,  637,  632,  633,  632,  633,
      624,  638,  624,  624,  630,  630,  640,    0,  641,    0,

      642,    0,  632,  633,    0,    0,  638,  638,  643,    0,
      644,  640,  640,  641,  641,  642,  642,  640,    0,  641,
      624,  624,  638,  643,  643,  644,  644,  645,  642,  646,
        0,    0,  647,  643,    0,    0,    0,  648,    0,  649,
        0,  650,  645,  645,  646,  646,  644,  647,  647,    0,
      646,  647,  648,  648,  649,  649,  650,  650,    0,  651,
      649,  652,    0,  653,  645,  654,    0,  655,    0,  656,
        0,    0,  657,  648,  651,  651,  652,  652,  653,  653,
      654,  654,  655,  655,  656,  656,  654,  657,  657,  651,
      658,    0,  659,    0,  660,    0,  661,    0,  662,  653,

        0,    0,  663,    0,  656,  658,  658,  659,  659,  660,
      660,  661,  661,  662,  662,  658,  664,  663,  663,  665,
        0,    0,  662,  663,  666,    0,  667,    0,  668,    0,
      660,  664,  664,  669,  665,  665,  665,    0,    0,  666,
      666,  667,  667,  668,  668,  670,    0,  671,  669,  669,
      672,    0,  664,  673,  669,  674,    0,  675,    0,  676,
      670,  670,  671,  671,  677,  672,  672,  687,  673,  673,
      674,  674,  675,  675,  676,  676,    0,    0,  675,  677,
      677,  678,  687,  687,  678,    0,  672,  678,    0,  678,
      679,    0,  679,  679,  673,    0,  679,  680,  680,  682,

        0,  680,  682,  678,  687,  682,    0,  682,  683,  680,
      685,  683,    0,  688,  683,    0,  683,  684,  686,  684,
      684,  682,  689,  684,    0,  685,  685,  685,  688,  688,
      683,    0,    0,  686,  686,  686,  690,  689,  689,  680,
      680,  691,    0,  692,    0,  693,    0,  689,  694,    0,
      688,  690,  690,  695,    0,  696,  691,  691,  692,  692,
      693,  693,  697,  694,  694,    0,  698,    0,  695,  695,
      696,  696,  693,    0,    0,  699,    0,  697,  697,  700,
      696,  698,  698,  697,  694,  701,    0,  698,  702,  695,
      699,  699,  703,    0,  700,  700,  704,    0,  705,    0,

      701,  701,  706,  702,  702,    0,  700,  703,  703,  702,
      707,  704,  704,  705,  705,    0,  708,  706,  706,  701,
        0,  705,    0,    0,  704,  707,  707,  709,  703,    0,
      709,  708,  708,  709,    0,  709,  710,  706,  710,  710,
      711,  711,  710,  719,  711,  713,  707,  708,  713,  709,
        0,  713,  711,  713,  714,    0,    0,  714,  719,  719,
      714,    0,  714,  715,    0,  715,  715,  713,    0,  715,
      718,  716,    0,  720,  716,  721,  714,  716,  717,  716,
      717,  717,  711,  711,  717,  718,  718,  722,  720,  720,
      721,  721,  723,  716,    0,  718,    0,    0,  724,    0,

      725,    0,  722,  722,  726,    0,  727,  723,  723,  721,
        0,  718,  720,  724,  724,  725,  725,  722,  728,  726,
      726,  727,  727,  729,    0,  726,  730,    0,    0,  724,
      731,    0,  732,  728,  728,    0,    0,    0,  729,  729,
      733,  730,  730,  734,  729,  731,  731,  732,  732,  735,
        0,  731,  736,  732,  728,  733,  733,    0,  734,  734,
      737,    0,  738,    0,  735,  735,    0,  736,  736,  739,
        0,  740,    0,  736,  741,  737,  737,  738,  738,  742,
        0,  737,  743,    0,  739,  739,  740,  740,  744,  741,
      741,  735,    0,    0,  742,  742,    0,  743,  743,  740,

        0,    0,  745,  744,  744,  745,  747,    0,  745,  746,
      745,  746,  746,  748,    0,  746,  742,  749,    0,  750,
        0,  747,  747,    0,  745,  751,    0,    0,  748,  748,
      752,    0,  749,  749,  750,  750,    0,  753,  750,    0,
      751,  751,  747,    0,  754,  752,  752,  755,    0,  748,
      756,  749,  753,  753,    0,  751,  757,    0,  753,  754,
      754,    0,  755,  755,  758,  756,  756,  759,    0,    0,
      756,  757,  757,  760,    0,  761,    0,  755,  762,  758,
      758,  763,  759,  759,    0,  754,  764,    0,  760,  760,
      761,  761,  765,  762,  762,  766,  763,  763,    0,  759,

      761,  764,  764,  760,    0,    0,  767,  765,  765,  767,
      766,  766,  767,  768,  767,  768,  768,  769,    0,  768,
      770,  764,  763,    0,  771,    0,  766,  765,  767,  772,
        0,  773,  769,  769,    0,  770,  770,  774,  769,  771,
      771,  775,    0,  776,  772,  772,  773,  773,  777,    0,
      770,  778,  774,  774,  779,    0,  775,  775,  776,  776,
        0,  773,  780,  777,  777,  772,  778,  778,  777,  779,
      779,  781,    0,  782,    0,  779,  783,  780,  780,  784,
        0,    0,  785,    0,  786,    0,  781,  781,  782,  782,
        0,  783,  783,  787,  784,  784,    0,  785,  785,  786,

      786,  786,  788,    0,  784,  789,  781,  785,  787,  787,
        0,    0,  783,    0,    0,    0,  790,  788,  788,    0,
      789,  789,  791,    0,  792,  788,  790,  793,    0,  787,
        0,  790,  790,  794,    0,  789,    0,  791,  791,  792,
      792,  795,  793,  793,  796,  791,  797,    0,  794,  794,
      798,  793,  794,  799,    0,    0,  795,  795,  800,  796,
      796,  797,  797,  801,    0,  798,  798,  797,  799,  799,
      802,  795,  803,  800,  800,  804,    0,    0,  801,  801,
      799,  805,    0,  806,    0,  802,  802,  803,  803,    0,
      804,  804,  807,  800,  808,    0,  805,  805,  806,  806,

      809,    0,    0,  810,  806,  802,  811,  807,  807,  808,
      808,  812,    0,  814,    0,  809,  809,  807,  810,  810,
      813,  811,  811,    0,    0,  815,  812,  812,  814,  814,
        0,    0,  808,    0,  814,  813,  813,  811,  809,  810,
      815,  815,  816,    0,  817,  813,  818,  812,  815,  819,
        0,  820,    0,  821,    0,  823,    0,  816,  816,  817,
      817,  818,  818,  822,  819,  819,  820,  820,  821,  821,
      823,  823,  820,    0,  821,  824,    0,  816,  822,  822,
      819,  818,  825,    0,  826,    0,    0,  827,  822,  823,
      824,  824,  828,    0,  829,    0,  830,  825,  825,  826,

      826,  825,  827,  827,  831,    0,    0,  828,  828,  829,
      829,  830,  830,  832,    0,  833,    0,  834,    0,  831,
      831,  835,  828,    0,    0,    0,    0,    0,  832,  832,
      833,  833,  834,  834,    0,  831,  835,  835,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  834,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  841,  841,    0,    0,  841,  842,
      842,  842,  842,  842,  842,  843,  843,    0,    0,  843,

      844,  844,  844,  844,  844,  844,  845,  845,    0,    0,
      845,  846,  846,  846,  846,  846,  846,  847,    0,    0,
        0,  847,  847,  847,  847,  847,  848,  848,    0,  848,
      848,  848,  848,  848,  848,  849,    0,  849,  849,    0,
        0,  849,  849,  850,  850,  850,  850,  851,  851,  851,
      851,  852,  852,  852,  852,  853,  853,  853,  853,  853,
      853,  854,    0,    0,    0,  854,  854,  854,  854,  854,
      855,  855,  855,  855,  855,  855,  856,    0,    0,    0,
      856,  856,  856,  856,  856,  857,  857,  857,  857,  857,
      857,  858,    0,    0,    0,  858,  858,  858,  858,  858,

      859,    0,    0,    0,  859,  859,  859,  859,  859,  860,
        0,    0,  860,  860,  860,  860,  860,  860,  861,    0,
        0,    0,  861,  861,  861,  861,  861,  862,    0,    0,
        0,  862,  862,  862,  862,  862,  863,    0,    0,  863,
      863,  863,  863,  863,  863,  864,    0,    0,    0,  864,
      864,  864,  864,  864,  865,    0,    0,    0,  865,  865,
      865,  865,  865,  866,    0,    0,  866,  866,  866,  866,
      866,  866,  867,    0,    0,    0,  867,  867,  867,  867,
      867,  868,    0,    0,    0,  868,  868,  868,  868,  868,
      869,    0,    0,    0,  869,  869,  869,  869,  869,  870,

        0,    0,  870,  870,  870,  870,  870,  870,  871,    0,
        0,    0,  871,  871,  871,  871,  871,  872,    0,    0,
      872,  872,  872,  872,  872,  872,  873,    0,    0,  873,
      873,  873,  873,  873,  873,  874,    0,    0,    0,  874,
      874,  874,  874,  874,  875,    0,    0,  875,  875,  875,
      875,  875,  875,  876,    0,    0,  876,  876,  876,  876,
      876,  876,  877,    0,    0,    0,  877,  877,  877,  877,
      877,  878,    0,    0,  878,  878,  878,  878,  878,  878,
      879,    0,    0,  879,  879,  879,  879,  879,  879,  880,
        0,    0,  880,  880,  880,  880,  880,  880,  881,    0,

        0,  881,  881,  881,  881,  881,  881,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
#define INITIAL 0
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "main.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

int braceCount;
int parenCount;
string latexCode;
#define ID_MODE 1

#define CMD_MODE 2

#define FILE_NAME_MODE 3

#define STRING_MODE 4

#define LATEX_MODE 5

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 83 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 837 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4608 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 87 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 91 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 97 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 98 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 102 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 106 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FMOD)  // needed for FileTable
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 107 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)   // needed for FileTable
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 108 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)   // needed for FileTable
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 109 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 110 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 111 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 112 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 113 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 114 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 115 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 116 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 117 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 119 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 120 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 121 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 124 "../../../src/Mixfix/lexer.ll"
return KW_OREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 126 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 130 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 131 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 132 "../../../src/Mixfix/lexer.ll"
return KW_XUNIFY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_CONTEXT;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_OPS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 95:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 99:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 255 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 256 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 260 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDFM)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDOM)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 270 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 271 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 272 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 273 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 274 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK


case 148:
YY_RULE_SETUP
#line 278 "../../../src/Mixfix/lexer.ll"
// eat white space
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 279 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 150:
YY_RULE_SETUP
#line 287 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 292 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 152:
YY_RULE_SETUP
#line 301 "../../../src/Mixfix/lexer.ll"
latexCode += yytext;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 302 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = latexCode.c_str();
						  return LATEX_STRING;
						}
					    }
					  latexCode += yytext;
					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  latexCode += yytext;
					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 333 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 336 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 342 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 343 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 344 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 349 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 837 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 837 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 836);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 349 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"
