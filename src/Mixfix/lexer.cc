/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 159
#define YY_END_OF_BUFFER 160
static yyconst short int yy_accept[828] =
    {   0,
      156,  156,  156,  156,  156,  156,  145,  145,  147,  147,
        0,    0,  160,  158,  156,  157,  157,   91,  158,   89,
       91,   91,   91,   89,   90,   90,   91,  158,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   15,   91,   91,   91,   91,   91,   91,   91,
      144,  158,  143,  143,  143,  144,  143,  144,  158,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,   95,  158,
       93,   95,   93,   95,   95,   94,   93,   95,  158,   95,
       95,  146,  145,  159,  147,  148,  155,  149,  154,  154,

      150,  151,  149,  152,  153,  156,   91,    0,   91,    0,
        0,    0,   91,   91,   90,    0,   91,   91,   91,   91,
       11,   91,   91,   91,   91,   91,   40,   91,   91,   69,
       91,   91,   91,   91,   91,   91,   58,   91,    5,   91,
       91,   14,   91,   68,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   35,   66,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   70,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,  144,
        0,  144,    0,    0,    0,  144,  144,  140,  141,    0,
      144,  144,  144,  144,  144,  134,  144,  144,  144,  144,

      133,  122,  144,  144,  144,  144,  121,  144,  120,  144,
      144,  144,  144,  131,  144,  144,  144,  127,  144,  122,
      144,  135,  144,  144,  144,  144,  144,   96,  122,  144,
      142,   95,    0,   95,    0,    0,    0,   95,   95,    0,
       92,   94,    0,    5,  146,  145,  147,  149,  149,   91,
        0,    2,    2,   91,   91,   91,   63,   91,   91,   62,
       91,   91,   91,   91,   91,   91,   91,   91,   16,   69,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   68,   91,   91,    7,   27,   91,   91,    6,
       36,   91,   66,   91,   91,   91,   91,   91,   91,   91,

       10,   91,   88,   19,   91,   91,   21,   70,   91,   91,
       33,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       67,   91,   91,   91,   91,   91,   91,  144,    0,    2,
        2,  144,  144,  132,  144,  144,  136,  144,  144,  144,
      144,  144,  144,  144,  144,  100,  144,  122,  144,  137,
      144,  144,  144,  144,  144,  115,  114,  144,  128,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  130,
       95,    0,    2,    2,    0,    0,    0,    0,    2,    2,
        2,    1,    2,    2,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   48,   26,   91,   20,   91,   91,   82,

       22,   91,   54,   91,   23,   91,   91,   91,    9,   25,
       91,    3,   91,   91,   91,   18,   91,    8,   24,   91,
       91,   85,   13,   91,   91,   91,   15,   91,   91,   91,
       91,   91,   91,   91,   34,   65,   91,   80,   91,   91,
       59,   91,   91,   91,   67,   91,   91,   91,   55,   91,
       91,    0,    0,    2,    2,    1,    2,    2,  144,  144,
       99,  144,  144,  110,  144,  144,  138,  137,  144,  144,
      144,  144,  144,  101,  144,  144,  102,  144,  144,  103,
        3,  144,  129,  144,  144,  109,  105,  144,  144,  123,
      144,  144,  144,  144,  144,  144,  130,    0,    0,    2,

        2,    1,    2,    2,    0,    0,    2,    2,    1,    1,
        1,    1,    1,    2,    2,    2,   79,   91,   57,   83,
       41,   51,   91,   91,   91,   91,   91,   91,   91,   74,
       91,   77,   91,   91,   91,   91,   91,   91,   52,   91,
       72,   28,   91,   91,   91,   91,   91,   91,   56,   17,
       50,   91,   12,   91,   91,   91,   91,   91,   91,   91,
       65,   60,   49,   91,   91,   37,   31,   91,   81,   43,
       91,   91,    2,    2,    1,    1,    1,    1,    2,    2,
        2,   98,  125,  144,  144,  144,  116,  139,  144,  144,
      144,  144,  144,  144,  144,  144,  144,   97,  111,  144,

      144,  144,  144,  144,  144,  104,  123,  144,  107,  144,
      144,  144,  122,    2,    2,    1,    1,    1,    1,    2,
        2,    2,    1,    1,    1,    1,    1,    2,    2,   38,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,    4,   91,   91,   53,   64,
       27,   91,   87,   91,   56,   91,   91,   91,   19,   78,
       47,   91,   30,   44,   91,   91,   61,   91,   29,   32,
        1,    1,    1,    1,    1,    2,    2,  144,  144,  113,
      144,  144,    4,  108,  106,  144,  144,  144,  144,  144,
      144,  114,  144,  144,  144,  144,  144,  144,  144,  144,

      144,    1,    1,    1,    1,    1,    2,    2,    1,    1,
       91,   57,   91,   73,   91,   46,   91,   42,   91,   20,
       91,   91,   76,   91,   91,   75,   91,   91,   91,   86,
       91,   21,   91,   71,   39,    1,    1,  144,  144,  144,
      144,  144,  117,  144,  144,  144,  144,  115,  118,  144,
      144,  144,  112,  144,  144,  124,  144,    1,    1,   91,
       91,   73,   91,   91,   26,   45,   22,   91,   23,   91,
       24,   91,   88,   91,  144,  144,  144,  144,  144,  144,
      144,  144,  102,  144,  144,  144,  107,  126,  124,  144,
       91,   84,   91,   48,   54,   18,   91,   91,  144,  144,

      144,  144,  144,  144,  144,  144,  144,  119,   91,   91,
      144,  144,  144,  144,  101,  144,  105,  126,   91,   98,
       99,  144,  109,   49,  144,  113,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   22,    8,   24,   25,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   13,   53,   54,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    6,    9,    9,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    5,    6
    } ;

static yyconst short int yy_base[873] =
    {   0,
        0,    0,   55,    0,  110,  163,  134,  140,  145,  149,
      216,  271,  313, 4527,  151, 4527, 4527,  167,  171, 4527,
      174, 4527,  180,  184,  187,  219,  205,  196,  226,  222,
      261,  282,  278,  305,  236,  286,  232,  291,  325,  332,
      370,  337,  308,  344,  382,  362,  351,  393,  401,  405,
      264,  215, 4527,  284,  364,  423,  412,  375,  431,  415,
      476,  437,  440,  448,  443,  478,  451,  468,  501,  511,
      472,  523,  518,  525,  537,  515, 4527,  545,  547,  231,
     4527,  564, 4527,  559,  588,  590,  576,  578,  595,  595,
     4527,    0,  116, 4527,    0, 4527, 4527,    0, 4527, 4527,

     4527, 4527,  149, 4527, 4527,  448,  601,  269,  607,  613,
      274,  281,  621,  627,  632,  648,  629,  651,  654,  659,
      619,  662,  681,  684,  672,  690,  694,  702,  704,  707,
      724,  728,  733,  736,  738,  741,  755,  758,  761,  763,
      766,  769,  786,  788,  790,  792,  794,  796,  800,  813,
      820,  825,  833,  837,  839,  844,  851,  856,  861,  863,
      875,  868,  881,  889,  899,  903,  906,  910,  930,  938,
      933,  942,  950,  955,  961,  963,  972,  981,  985,  990,
      296, 1002, 1009,  447,  264, 1004, 1021, 1013, 1016, 1033,
     1024, 1033, 1026, 1045, 1054, 1056, 1058, 1064, 1075, 1078,

     1081, 1085, 1088, 1092, 1099, 1110, 1102, 1113, 1124, 1127,
     1130, 1134, 1138, 1141, 1147, 1151, 1164, 1169, 1171, 1177,
     1173, 1191, 1194, 1197, 1200, 1205, 1211, 1214, 1217, 1222,
     1224, 1231,  457, 1235, 1252,  481,  256, 1255, 1260, 1284,
     4527, 1283, 1284, 1248,    0,  131,    0,    0, 4527, 1288,
      521, 1337, 1390, 1300, 1293, 1305, 1310, 1330, 1340, 1343,
     1348, 1354, 1378, 1396, 1351, 1372, 1400, 1404, 1360, 1407,
     1413, 1425, 1427, 1430, 1432, 1439, 1444, 1449, 1451, 1468,
     1457, 1475, 1470, 1480, 1482, 1487, 1492, 1499, 1501, 1505,
     1518, 1522, 1525, 1529, 1531, 1535, 1549, 1555, 1557, 1560,

     1562, 1567, 1574, 1580, 1586, 1591, 1593, 1598, 1600, 1604,
     1621, 1624, 1626, 1628, 1633, 1631, 1638, 1635, 1655, 1657,
     1661, 1668, 1675, 1678, 1687, 1682, 1685, 1689,  528, 1727,
     1780, 1692, 1699, 1720, 1730, 1733, 1737, 1750, 1741, 1747,
     1758, 1783, 1786, 1789, 1791, 1794, 1803, 1811, 1814, 1820,
     1822, 1825, 1834, 1842, 1844, 1847, 1851, 1853, 1865, 1871,
     1874, 1883, 1876, 1888, 1894, 1901, 1906, 1911, 1914, 1920,
     1923,  544, 1964, 2017,  240,  227,  573,  231,    0,  212,
     1319, 2070,  106, 2123, 1931, 1933, 1937, 1958, 1971, 1981,
     1945, 1975, 1978, 1988, 1995, 2021, 2026, 2023, 2028, 2034,

     2053, 2051, 2058, 2064, 2076, 2082, 2084, 2096, 2089, 2093,
     2117, 2119, 2127, 2129, 2140, 2146, 2149, 2153, 2158, 2160,
     2172, 2179, 2181, 2183, 2185, 2189, 2191, 2202, 2208, 2213,
     2215, 2220, 2222, 2234, 2239, 2243, 2246, 2248, 2251, 2256,
     2260, 2268, 2270, 2274, 2277, 2279, 2288, 2296, 2305, 2307,
     2313,  671,  229,  202, 2332, 2355,  237, 2408, 2318, 2338,
     2325, 2336, 2343, 2348, 2365, 2372, 2367, 2375, 2377, 2369,
     2411, 2414, 2402, 2422, 2425, 2428, 2431, 2434, 2442, 2453,
     2455, 2459, 2463, 2472, 2477, 2480, 2483, 2485, 2497, 2502,
     2505, 2507, 2510, 2516, 2529, 2534, 2524,  715,  210,  182,

     2556, 2579,  315, 2632,  188,  175, 2563,  988,    0, 2685,
     2590,  159, 2738, 2563,  150, 2591, 2587, 2597, 2593, 2600,
     2610, 2635, 2638, 2641, 2643, 2646, 2655, 2649, 2666, 2678,
     2688, 2695, 2697, 2699, 2705, 2716, 2719, 2741, 2744, 2747,
     2749, 2758, 2761, 2768, 2770, 2772, 2778, 2780, 2775, 2792,
     2798, 2802, 2804, 2806, 2816, 2823, 2825, 2827, 2833, 2835,
     2845, 2852, 2854, 2858, 2862, 2865, 2872, 2875, 2882, 2884,
     2889, 2886, 2911, 2156, 2936, 2920,  136, 2989, 2942,  135,
     2950, 2907, 2914, 2924, 2946, 2958, 2956, 2967, 2993, 2995,
     2999, 3001, 3003, 3006, 3023, 3025, 3027, 3036, 3044, 3046,

     3049, 3055, 3057, 3067, 3074, 3076, 3079, 3081, 3084, 3101,
     3104, 3106, 3108, 3115, 3133, 3147, 3145,  124, 3200, 3131,
      109, 3158, 3169, 3184, 3183,    0, 3173, 3211, 3225, 3214,
     3218, 3221, 3224, 3231, 3238, 3242, 3245, 3249, 3262, 3266,
     3268, 3271, 3276, 3279, 3293, 3299, 3301, 3304, 3306, 3311,
     3313, 3318, 3324, 3330, 3332, 3335, 3341, 3338, 3349, 3352,
     3358, 3360, 3363, 3369, 3371, 3377, 3380, 3382, 3389, 3394,
     3416, 3425, 3420,    0, 3434, 3443, 3452, 3436, 3439, 3412,
     3445, 3458, 3462, 3465, 3469, 3471, 3475, 3479, 3488, 3493,
     3501, 3505, 3510, 3512, 3518, 3529, 3532, 3535, 3538, 3540,

     3552, 3571, 3580, 3579,    0, 3595, 3596, 3605, 3606, 3613,
     3602, 3613, 3615, 3619, 3621, 3624, 3626, 3632, 3644, 3646,
     3652, 3655, 3658, 3663, 3666, 3675, 3677, 3680, 3683, 3694,
     3697, 3700, 3702, 3705, 3707, 3732, 3739, 3726, 3728, 3735,
     3738, 3740, 3745, 3752, 3759, 3763, 3765, 3771, 3776, 3782,
     3788, 3790, 3794, 3796, 3801, 3807, 3813, 3832, 3853, 3819,
     3838, 3841, 3843, 3850, 3855, 3860, 3862, 3867, 3869, 3873,
     3881, 3886, 3890, 3892, 3895, 3898, 3900, 3903, 3909, 3922,
     3926, 3930, 3933, 3935, 3947, 3940, 3957, 3960, 3964, 3967,
     3969, 3971, 3974, 3977, 3991, 3995, 3997, 3999, 4001, 4005,

     4019, 4022, 4025, 4029, 4031, 4033, 4042, 4050, 4059, 4064,
     4067, 4069, 4071, 4076, 4089, 4093, 4098, 4100, 4102, 4106,
     4111, 4119, 4123, 4125, 4128, 4130, 4527, 4167, 4176, 4185,
     4194, 4199, 4205, 4210, 4216, 4221, 4227, 4236, 4245, 4253,
     4258, 4262, 4266, 4271, 4280, 4286, 4295, 4301, 4310, 4319,
     4328, 4337, 4346, 4355, 4364, 4373, 4382, 4391, 4400, 4409,
     4418, 4427, 4436, 4445, 4454, 4463, 4472, 4481, 4490, 4499,
     4508, 4517
    } ;

static yyconst short int yy_def[873] =
    {   0,
      827,    1,  827,    3,  828,  828,  829,  829,  830,  830,
      831,  831,  827,  827,  827,  827,  827,  832,  833,  827,
      832,  827,  832,  832,  832,  832,  832,  827,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      834,  835,  827,  834,  834,  834,  834,  834,  827,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  827,  834,  836,  837,
      827,  836,  827,  836,  836,  836,  836,  836,  827,  836,
      827,  838,  827,  827,  839,  827,  827,  840,  827,  827,

      827,  827,  827,  827,  827,  827,  832,  833,  832,  841,
      833,  833,  832,  832,  832,  827,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  834,
      835,  834,  842,  835,  835,  834,  834,  834,  834,  827,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  836,  837,  836,  843,  837,  837,  836,  836,  827,
      827,  836,  827,  836,  838,  827,  839,  840,  827,  832,
      844,  845,  845,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  834,  846,  847,
      847,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      836,  848,  849,  849,  827,  827,  844,  844,  850,  253,
      851,  852,  253,  853,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  846,  846,  331,  854,  855,  331,  856,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  848,  848,  374,

      857,  858,  374,  859,  827,  827,  851,  851,  860,  852,
      861,  510,  862,  850,  253,  863,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  854,  854,  855,  864,  575,  865,  850,  331,
      866,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  857,  857,  858,  867,  616,  868,  850,
      374,  869,  861,  861,  860,  510,  870,  863,  863,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      864,  864,  860,  575,  871,  866,  866,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  867,  867,  860,  616,  872,  869,  869,  870,  870,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  871,  871,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  872,  872,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      832,  832,  832,  832,  832,  832,  832,  832,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  832,  832,
      834,  834,  834,  834,  834,  834,  834,  834,  832,  834,
      834,  834,  834,  832,  834,  834,    0,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827
    } ;

static yyconst short int yy_nxt[4583] =
    {   0,
       14,   15,   16,   14,   17,   15,   15,   18,   19,   20,
       20,   21,   18,   22,   23,   24,   25,   26,   18,   18,
       18,   20,   18,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   18,   36,   18,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   18,
       18,   22,   22,   18,   18,   14,   15,   16,   14,   17,
       15,   15,   51,   52,   53,   53,   54,   55,   53,   56,
       55,   51,   51,   55,   57,   51,   53,   51,   58,   59,
       60,   51,   61,   62,   63,   64,   65,   51,   66,   67,
       51,   68,   69,   51,   70,   71,   51,   72,   73,   74,

       75,   76,   51,   51,   51,   51,   77,   77,   78,   51,
       14,   15,   16,   14,   17,   15,   15,  246,   80,   81,
       81,   82,  246,   83,   84,   85,  380,   86,   87,  500,
      514,   81,  246,   88,   89,   93,   94,  246,   94,   94,
       93,   93,   94,   90,   94,   94,   93,   96,  704,   96,
       96,   96,  106,   96,   96,  454,  106,  106,  249,  249,
      673,   91,   91,   14,   15,   16,   14,   17,   15,   15,
      380,   80,   81,   81,   82,  108,   83,   84,   85,  107,
       86,   87,  108,  625,   81,  113,   88,   89,  108,  241,
      109,  110,  108,  112,  114,  108,   90,  109,  110,  241,

      249,  249,  500,  109,  110,  109,  109,  109,  110,  109,
      109,  110,  498,  108,   91,   91,   97,  109,   99,   97,
      100,   97,  454,  180,   97,  101,  102,  108,  109,  116,
      108,  452,  380,  377,  108,  115,  115,  185,  103,  232,
      108,  506,  109,  110,  108,  109,  110,  109,  109,  109,
      110,  505,  117,  237,  118,  109,  110,  454,  236,  109,
      110,  579,  119,  137,  120,  140,  184,  104,  105,  108,
       97,   97,  181,   99,   97,  100,   97,  107,  138,   97,
      101,  102,  107,  111,  109,  110,  108,  182,  183,  121,
      108,  112,  181,  103,  108,  186,  112,  122,  123,  108,

      124,  109,  110,  125,  180,  109,  110,  182,  183,  109,
      110,  126,  827,  108,  109,  110,  108,  129,  185,  130,
      131,  127,  104,  105,  139,   97,  132,  128,  109,  110,
      141,  109,  110,  108,  142,  500,  827,  827,  827,  620,
      108,  133,  134,  827,  135,  108,  827,  136,  109,  110,
      143,  144,  108,  162,  145,  109,  110,  148,  146,  108,
      109,  110,  157,  827,  147,  827,  827,  109,  110,  163,
      108,  149,  181,  164,  109,  110,  158,  150,  108,  159,
      165,  827,  160,  181,  161,  109,  110,  182,  183,  173,
      108,  827,  827,  109,  110,  171,  151,  827,  182,  190,

      152,  108,  827,  827,  172,  109,  110,  153,  154,  108,
      155,  166,  156,  108,  167,  827,  109,  110,  174,  827,
      181,  168,  175,  181,  109,  110,  169,  170,  109,  110,
      827,  181,  189,  176,  177,  182,  183,  187,  182,  183,
      182,  182,  178,  188,  182,  181,  182,  183,  181,  106,
      179,  181,  182,  106,  106,  180,  181,  827,  191,  181,
      182,  183,  827,  182,  183,  232,  182,  183,  205,  185,
      199,  182,  183,  827,  182,  183,  181,  211,  200,  237,
      181,  201,  182,  182,  181,  827,  181,  203,  202,  232,
      204,  182,  183,  212,  827,  182,  183,  213,  827,  182,

      183,  182,  183,  237,  827,  192,  206,  827,  207,  181,
      827,  219,  193,  194,  220,  195,  208,  196,  197,  181,
      198,  209,  210,  181,  182,  183,  181,  214,  827,  250,
      215,  181,  827,  181,  182,  183,  328,  217,  182,  183,
      230,  182,  183,  378,  216,  181,  182,  183,  182,  183,
      453,  218,  371,  181,  227,  233,  221,  223,  224,  222,
      182,  183,  225,  226,  228,  231,  499,  233,  182,  183,
      234,  235,  233,  239,  827,  238,  827,  827,  827,  827,
      229,  250,  234,  235,  233,  827,  233,  234,  235,  240,
      241,  240,  240,  240,  240,  378,  233,  827,  233,  234,

      235,  234,  243,  233,  234,  234,  242,  242,  234,  108,
      827,  234,  235,  234,  235,  108,  234,  827,  234,  235,
      827,  251,  109,  109,  109,  110,  109,  108,  827,  108,
      109,  116,  252,  244,  109,  108,  827,  108,  827,  827,
      108,  253,  109,  110,  109,  110,  234,  234,  115,  115,
      109,  110,  109,  110,  827,  109,  110,  109,  109,  108,
      827,  109,  108,  827,  109,  109,  827,  108,  254,  109,
      108,  827,  827,  827,  109,  110,  827,  109,  110,  328,
      108,  827,  109,  110,  827,  109,  110,  256,  258,  108,
      257,  259,  108,  453,  827,  109,  110,  255,  108,  109,

      109,  265,  108,  827,  109,  110,  827,  109,  110,  260,
      108,  827,  108,  109,  110,  108,  266,  109,  110,  827,
      261,  262,  263,  371,  827,  109,  110,  109,  110,  264,
      109,  110,  108,  267,  269,  827,  108,  499,  827,  268,
      827,  108,  827,  827,  108,  827,  108,  109,  110,  108,
      270,  109,  110,  271,  827,  272,  109,  110,  273,  109,
      110,  109,  110,  108,  109,  110,  108,  827,  827,  108,
      276,  108,  827,  827,  108,  274,  827,  108,  109,  110,
      275,  109,  110,  277,  109,  110,  109,  110,  278,  109,
      110,  280,  109,  110,  108,  827,  108,  827,  108,  827,

      108,  279,  108,  827,  108,  281,  827,  827,  108,  109,
      110,  109,  110,  109,  110,  109,  110,  109,  110,  109,
      110,  108,  286,  109,  110,  827,  827,  284,  108,  827,
      282,  283,  827,  108,  827,  827,  109,  110,  287,  827,
      285,  108,  288,  109,  110,  108,  827,  108,  109,  110,
      289,  827,  108,  827,  290,  291,  109,  110,  827,  108,
      109,  110,  109,  110,  108,  827,  827,  109,  110,  108,
      827,  108,  292,  294,  109,  110,  108,  827,  827,  109,
      110,  827,  293,  108,  109,  110,  109,  110,  827,  108,
      827,  109,  110,  295,  298,  296,  297,  108,  109,  110,

      299,  302,  827,  301,  109,  110,  300,  108,  827,  827,
      827,  108,  109,  110,  108,  827,  827,  304,  108,  827,
      827,  827,  109,  110,  827,  303,  109,  110,  309,  109,
      110,  827,  305,  109,  110,  306,  307,  827,  108,  310,
      827,  108,  308,  827,  827,  312,  108,  311,  827,  827,
      108,  827,  313,  109,  110,  314,  109,  110,  108,  315,
      827,  109,  110,  108,  316,  109,  110,  319,  827,  108,
      318,  108,  827,  109,  110,  317,  827,  827,  109,  110,
      108,  827,  827,  320,  109,  110,  109,  110,  379,  108,
      111,  379,  323,  108,  111,  109,  110,  321,  181,  827,

      827,  827,  324,  322,  109,  110,  326,  827,  109,  110,
      181,  827,  181,  182,  183,  330,  325,  329,  182,  182,
      827,  181,  182,  327,  181,  182,  190,  182,  183,  181,
      182,  827,  181,  827,  181,  331,  182,  183,  827,  182,
      183,  181,  182,  182,  182,  183,  182,  182,  183,  182,
      183,  333,  827,  181,  182,  827,  182,  183,  827,  827,
      182,  182,  181,  827,  181,  827,  181,  332,  182,  183,
      827,  334,  181,  827,  196,  827,  827,  182,  183,  182,
      183,  182,  183,  181,  182,  182,  181,  182,  183,  181,
      827,  335,  336,  181,  337,  827,  181,  827,  182,  183,

      181,  182,  183,  338,  182,  183,  340,  181,  182,  183,
      181,  182,  183,  827,  827,  182,  183,  827,  181,  339,
      827,  181,  182,  183,  345,  182,  183,  827,  346,  341,
      342,  343,  181,  182,  183,  181,  182,  183,  181,  347,
      348,  827,  181,  344,  827,  827,  181,  182,  183,  181,
      182,  183,  827,  182,  183,  181,  349,  182,  183,  181,
      351,  182,  183,  827,  182,  183,  827,  827,  353,  350,
      182,  183,  181,  827,  182,  183,  827,  181,  352,  181,
      827,  181,  356,  358,  354,  181,  827,  182,  183,  827,
      355,  827,  182,  183,  182,  183,  182,  183,  357,  181,

      182,  183,  181,  827,  363,  181,  361,  360,  181,  827,
      827,  827,  359,  181,  182,  183,  362,  182,  183,  181,
      182,  183,  181,  182,  183,  181,  365,  827,  182,  183,
      181,  367,  181,  827,  182,  183,  364,  182,  183,  233,
      182,  183,  366,  233,  827,  182,  183,  182,  183,  827,
      369,  827,  827,  368,  234,  235,  233,  827,  234,  243,
      372,  234,  234,  233,  370,  234,  373,  827,  233,  827,
      827,  234,  235,  234,  374,  827,  827,  827,  234,  235,
      827,  827,  827,  234,  235,  240,  241,  240,  240,  240,
      240,  233,  827,  234,  234,  375,  108,  234,  376,  242,

      242,  108,  827,  234,  234,  234,  234,  235,  108,  827,
      827,  109,  110,  108,  827,  827,  109,  110,  108,  379,
      827,  827,  379,  109,  110,  111,  386,  380,  109,  110,
      387,  827,  827,  109,  110,  234,  234,  379,  108,  827,
      379,  508,  385,  827,  827,  381,  379,  379,  108,  827,
      379,  108,  827,  109,  110,  388,  108,  382,  379,  108,
      383,  384,  108,  109,  110,  389,  109,  110,  108,  827,
      827,  109,  110,  827,  109,  110,  827,  109,  110,  397,
      108,  827,  827,  109,  110,  827,  108,  390,  379,  379,
      379,  391,  827,  379,  392,  109,  110,  827,  381,  379,

      379,  109,  110,  379,  108,  393,  394,  827,  108,  827,
      382,  379,  108,  383,  384,  108,  827,  398,  827,  109,
      110,  108,  395,  109,  110,  827,  827,  109,  110,  399,
      109,  110,  827,  108,  396,  108,  109,  110,  108,  827,
      108,  379,  379,  827,  400,  827,  827,  108,  109,  110,
      109,  110,  108,  109,  110,  109,  110,  108,  290,  108,
      401,  402,  109,  110,  827,  108,  827,  109,  110,  404,
      827,  403,  109,  110,  109,  110,  108,  827,  108,  408,
      109,  110,  827,  108,  406,  407,  405,  827,  108,  827,
      108,  109,  110,  109,  110,  108,  409,  410,  109,  110,

      108,  827,  411,  109,  110,  109,  110,  108,  827,  108,
      109,  110,  413,  108,  827,  109,  110,  827,  827,  412,
      827,  827,  109,  110,  109,  110,  108,  417,  109,  110,
      108,  827,  414,  108,  415,  827,  416,  108,  827,  108,
      827,  109,  110,  108,  827,  109,  110,  827,  109,  110,
      418,  827,  109,  110,  109,  110,  827,  108,  109,  110,
      420,  827,  827,  108,  827,  108,  827,  422,  108,  827,
      108,  827,  109,  110,  421,  108,  419,  423,  109,  110,
      109,  110,  108,  109,  110,  109,  110,  425,  108,  827,
      109,  110,  426,  424,  108,  827,  827,  109,  110,  108,

      827,  108,  827,  109,  110,  827,  108,  428,  108,  109,
      110,  427,  108,  827,  109,  110,  109,  110,  827,  827,
      431,  109,  110,  109,  110,  429,  827,  109,  110,  108,
      827,  430,  108,  434,  108,  432,  108,  827,  827,  108,
      827,  108,  433,  108,  109,  110,  108,  109,  110,  109,
      110,  109,  110,  827,  109,  110,  109,  110,  109,  110,
      827,  109,  110,  108,  441,  108,  827,  827,  442,  108,
      436,  435,  437,  438,  439,  440,  108,  827,  109,  110,
      109,  110,  443,  108,  109,  110,  108,  444,  827,  827,
      108,  109,  110,  108,  446,  108,  827,  181,  109,  110,

      181,  109,  110,  827,  445,  109,  110,  181,  109,  110,
      109,  110,  182,  183,  448,  182,  183,  447,  451,  449,
      827,  827,  182,  183,  827,  827,  450,  379,  181,  827,
      379,  459,  827,  827,  827,  455,  379,  379,  181,  827,
      379,  181,  460,  182,  183,  181,  827,  456,  379,  181,
      457,  458,  827,  182,  183,  181,  182,  183,  181,  827,
      182,  183,  827,  462,  182,  183,  181,  461,  827,  827,
      182,  183,  827,  182,  183,  827,  463,  466,  379,  379,
      379,  182,  183,  379,  467,  465,  468,  469,  455,  379,
      379,  181,  464,  379,  181,  827,  827,  181,  827,  181,

      456,  379,  181,  457,  458,  827,  182,  183,  827,  182,
      183,  181,  182,  183,  182,  183,  827,  182,  183,  181,
      470,  472,  181,  473,  827,  827,  182,  183,  181,  827,
      181,  379,  379,  181,  182,  183,  471,  182,  183,  827,
      474,  475,  181,  182,  183,  182,  183,  476,  182,  183,
      181,  478,  181,  827,  479,  181,  477,  182,  183,  181,
      827,  181,  827,  827,  827,  182,  183,  182,  183,  827,
      182,  183,  827,  181,  182,  183,  182,  183,  480,  181,
      484,  481,  181,  827,  181,  485,  827,  482,  182,  183,
      483,  181,  827,  827,  182,  183,  181,  182,  183,  182,

      183,  487,  181,  827,  827,  827,  182,  183,  489,  181,
      827,  182,  183,  827,  181,  827,  827,  182,  183,  181,
      486,  491,  181,  827,  182,  183,  492,  488,  181,  182,
      183,  233,  490,  493,  182,  183,  827,  182,  183,  108,
      827,  108,  827,  182,  183,  108,  234,  235,  495,  494,
      827,  827,  496,  108,  109,  110,  109,  110,  827,  827,
      109,  110,  827,  497,  379,  827,  108,  379,  109,  110,
      523,  827,  501,  379,  379,  517,  518,  379,  827,  108,
      519,  109,  110,  108,  502,  379,  108,  503,  504,  108,
      827,  827,  827,  520,  109,  110,  108,  827,  109,  110,

      827,  109,  110,  108,  109,  110,  827,  526,  524,  827,
      827,  109,  110,  521,  525,  379,  379,  379,  109,  110,
      379,  527,  827,  522,  528,  501,  379,  379,  529,  108,
      379,  108,  827,  827,  108,  827,  108,  502,  379,  827,
      503,  504,  108,  827,  109,  110,  109,  110,  827,  109,
      110,  109,  110,  827,  532,  827,  827,  109,  110,  108,
      827,  108,  827,  827,  533,  530,  108,  827,  379,  379,
      509,  531,  108,  509,  109,  110,  109,  110,  511,  509,
      509,  109,  110,  509,  108,  827,  827,  109,  110,  537,
      108,  509,  108,  512,  513,  534,  535,  108,  827,  109,

      110,  108,  536,  827,  108,  109,  110,  109,  110,  827,
      827,  827,  109,  110,  539,  827,  109,  110,  538,  109,
      110,  509,  509,  379,  827,  108,  379,  108,  827,  540,
      827,  516,  383,  383,  827,  108,  383,  108,  827,  541,
      109,  110,  109,  110,  383,  827,  379,  379,  108,  542,
      109,  110,  109,  110,  108,  827,  379,  108,  184,  379,
      543,  108,  184,  109,  110,  544,  108,  827,  108,  109,
      110,  546,  109,  110,  383,  383,  109,  110,  547,  545,
      108,  109,  110,  109,  110,  827,  827,  108,  827,  108,
      827,  108,  827,  108,  827,  109,  110,  108,  549,  108,

      548,  550,  109,  110,  109,  110,  109,  110,  109,  110,
      108,  827,  109,  110,  109,  110,  108,  553,  552,  827,
      827,  108,  827,  108,  827,  109,  110,  551,  108,  827,
      108,  109,  110,  827,  827,  555,  109,  110,  109,  110,
      557,  554,  108,  109,  110,  109,  110,  108,  827,  559,
      556,  108,  827,  558,  108,  827,  108,  109,  110,  108,
      827,  560,  109,  110,  108,  827,  109,  110,  108,  109,
      110,  109,  110,  827,  109,  110,  108,  827,  108,  109,
      110,  564,  108,  109,  110,  108,  561,  108,  827,  562,
      827,  109,  110,  109,  110,  563,  108,  109,  110,  566,

      109,  110,  109,  110,  108,  827,  565,  827,  827,  827,
      827,  109,  110,  108,  827,  108,  827,  569,  568,  109,
      110,  108,  827,  567,  827,  570,  181,  827,  109,  110,
      109,  110,  379,  181,  571,  379,  109,  110,  184,  827,
      454,  182,  183,  572,  181,  582,  181,  827,  182,  183,
      827,  181,  827,  827,  574,  509,  181,  827,  509,  182,
      183,  182,  183,  576,  509,  509,  182,  183,  509,  585,
      584,  182,  183,  181,  827,  181,  509,  181,  577,  578,
      181,  583,  827,  181,  827,  181,  827,  586,  182,  183,
      182,  183,  182,  183,  590,  182,  183,  827,  182,  183,

      182,  183,  827,  827,  587,  827,  509,  509,  379,  350,
      181,  379,  588,  827,  827,  589,  581,  457,  457,  181,
      827,  457,  181,  827,  827,  182,  183,  827,  827,  457,
      181,  379,  379,  181,  182,  183,  181,  182,  183,  181,
      591,  593,  181,  592,  827,  182,  183,  827,  182,  183,
      181,  182,  183,  827,  182,  183,  597,  182,  183,  457,
      457,  181,  594,  181,  827,  182,  183,  181,  827,  595,
      598,  181,  827,  596,  827,  827,  182,  183,  182,  183,
      181,  827,  182,  183,  600,  181,  182,  183,  181,  827,
      599,  181,  827,  181,  827,  182,  183,  827,  827,  601,

      182,  183,  827,  182,  183,  181,  182,  183,  182,  183,
      181,  827,  604,  181,  605,  181,  602,  603,  181,  827,
      182,  183,  827,  827,  181,  182,  183,  827,  182,  183,
      182,  183,  181,  182,  183,  827,  827,  181,  608,  182,
      183,  606,  181,  612,  827,  607,  610,  182,  183,  827,
      827,  609,  182,  183,  827,  611,  379,  182,  183,  379,
      827,  827,  236,  379,  500,  613,  379,  827,  827,  111,
      827,  380,  383,  383,  827,  827,  383,  827,  615,  509,
      827,  827,  509,  827,  383,  508,  827,  617,  509,  509,
      509,  379,  509,  509,  379,  108,  111,  377,  510,  515,

      509,  108,  618,  619,  827,  108,  827,  827,  108,  827,
      109,  110,  624,  629,  383,  383,  109,  110,  108,  827,
      109,  110,  632,  109,  110,  827,  630,  827,  633,  827,
      509,  509,  379,  109,  110,  379,  631,  827,  827,  827,
      622,  503,  503,  108,  827,  503,  108,  827,  827,  108,
      827,  108,  827,  503,  108,  379,  379,  108,  109,  110,
      827,  109,  110,  108,  109,  110,  109,  110,  827,  109,
      110,  637,  109,  110,  108,  827,  634,  635,  109,  110,
      827,  636,  827,  503,  503,  509,  108,  827,  509,  109,
      110,  827,  827,  511,  509,  509,  108,  639,  509,  638,

      827,  109,  110,  108,  640,  108,  509,  108,  512,  513,
      827,  109,  110,  108,  827,  641,  827,  827,  109,  110,
      109,  110,  109,  110,  108,  827,  642,  108,  109,  110,
      827,  827,  643,  644,  827,  827,  509,  509,  509,  109,
      110,  509,  109,  110,  827,  645,  627,  512,  512,  108,
      827,  512,  108,  827,  827,  108,  827,  108,  827,  512,
      827,  509,  509,  646,  109,  110,  108,  109,  110,  108,
      109,  110,  109,  110,  647,  648,  108,  827,  108,  827,
      108,  109,  110,  108,  109,  110,  108,  827,  108,  512,
      512,  109,  110,  109,  110,  109,  110,  650,  109,  110,

      108,  109,  110,  109,  110,  827,  108,  827,  652,  649,
      108,  827,  108,  654,  108,  109,  110,  651,  655,  656,
      653,  109,  110,  827,  108,  109,  110,  109,  110,  109,
      110,  108,  827,  108,  827,  108,  827,  827,  657,  109,
      110,  108,  827,  108,  658,  659,  109,  110,  109,  110,
      109,  110,  660,  108,  827,  827,  109,  110,  109,  110,
      108,  661,  108,  827,  827,  663,  108,  827,  109,  110,
      108,  662,  827,  108,  827,  109,  110,  109,  110,  664,
      108,  109,  110,  108,  827,  109,  110,  665,  109,  110,
      108,  827,  108,  667,  108,  109,  110,  108,  109,  110,

      666,  827,  827,  827,  827,  109,  110,  109,  110,  109,
      110,  379,  109,  110,  379,  181,  827,  184,  668,  454,
      509,  669,  181,  509,  827,  827,  184,  827,  575,  827,
      182,  183,  181,  574,  827,  670,  509,  182,  183,  509,
      678,  827,  672,  827,  576,  509,  509,  182,  183,  509,
      379,  457,  457,  379,  181,  457,  452,  509,  580,  577,
      578,  827,  827,  457,  181,  827,  181,  827,  679,  182,
      183,  827,  677,  827,  827,  181,  827,  680,  827,  182,
      183,  182,  183,  827,  827,  827,  827,  509,  509,  509,
      182,  183,  509,  457,  457,  827,  827,  675,  577,  577,

      681,  181,  577,  181,  827,  827,  827,  181,  827,  181,
      577,  181,  509,  509,  181,  827,  182,  183,  182,  183,
      827,  682,  182,  183,  182,  183,  182,  183,  827,  182,
      183,  181,  827,  181,  827,  181,  827,  684,  827,  683,
      577,  577,  686,  685,  181,  687,  182,  183,  182,  183,
      182,  183,  181,  689,  181,  827,  688,  181,  827,  182,
      183,  827,  827,  181,  827,  181,  827,  182,  183,  182,
      183,  690,  182,  183,  827,  181,  827,  691,  182,  183,
      182,  183,  181,  827,  181,  827,  827,  181,  827,  181,
      182,  183,  181,  692,  693,  695,  694,  182,  183,  182,

      183,  696,  182,  183,  182,  183,  697,  182,  183,  181,
      827,  827,  181,  698,  181,  379,  181,  827,  379,  827,
      827,  236,  827,  500,  182,  183,  699,  182,  183,  182,
      183,  182,  183,  379,  827,  236,  379,  615,  701,  236,
      503,  503,  827,  827,  503,  509,  700,  509,  509,  827,
      509,  236,  503,  616,  827,  617,  509,  509,  379,  827,
      509,  379,  827,  827,  498,  827,  621,  703,  509,  509,
      618,  619,  509,  509,  827,  111,  509,  510,  827,  377,
      708,  626,  503,  503,  509,  827,  111,  509,  827,  827,
      111,  624,  512,  512,  827,  710,  512,  827,  509,  509,

      509,  827,  827,  509,  512,  827,  827,  827,  706,  618,
      618,  379,  827,  618,  379,  827,  827,  377,  827,  515,
      827,  618,  108,  509,  509,  379,  108,  377,  379,  108,
      827,  377,  108,  629,  512,  512,  827,  109,  110,  108,
      827,  109,  110,  827,  109,  110,  108,  109,  110,  827,
      108,  618,  618,  108,  109,  110,  827,  108,  827,  260,
      711,  109,  110,  713,  712,  109,  110,  714,  109,  110,
      108,  715,  109,  110,  108,  827,  108,  827,  827,  108,
      827,  716,  717,  827,  108,  109,  110,  108,  827,  109,
      110,  109,  110,  827,  109,  110,  827,  720,  721,  109,

      110,  108,  109,  110,  827,  827,  718,  108,  723,  108,
      827,  719,  108,  827,  108,  827,  109,  110,  827,  108,
      722,  108,  109,  110,  109,  110,  108,  109,  110,  109,
      110,  724,  108,  726,  109,  110,  109,  110,  108,  827,
      108,  109,  110,  108,  827,  725,  108,  109,  110,  108,
      827,  727,  827,  109,  110,  109,  110,  108,  109,  110,
      108,  109,  110,  731,  109,  110,  108,  729,  108,  827,
      730,  108,  109,  110,  728,  109,  110,  108,  827,  108,
      827,  109,  110,  109,  110,  108,  109,  110,  108,  732,
      108,  827,  109,  110,  109,  110,  827,  108,  827,  827,

      109,  110,  108,  109,  110,  109,  110,  827,  827,  827,
      827,  735,  109,  110,  827,  733,  509,  109,  110,  509,
      181,  827,  184,  827,  575,  509,  734,  184,  509,  577,
      577,  184,  827,  577,  509,  182,  183,  509,  672,  827,
      452,  577,  674,  379,  181,  827,  379,  181,  827,  452,
      827,  580,  379,  181,  452,  379,  737,  740,  452,  182,
      183,  738,  182,  183,  739,  677,  181,  827,  182,  183,
      181,  577,  577,  181,  827,  827,  827,  181,  827,  181,
      827,  182,  183,  181,  827,  182,  183,  181,  182,  183,
      741,  742,  182,  183,  182,  183,  181,  827,  182,  183,

      827,  181,  182,  183,  827,  827,  743,  827,  827,  181,
      827,  182,  183,  181,  827,  827,  182,  183,  181,  744,
      181,  746,  747,  745,  182,  183,  181,  827,  182,  183,
      748,  827,  827,  182,  183,  182,  183,  181,  827,  827,
      181,  182,  183,  181,  827,  749,  181,  751,  181,  827,
      827,  827,  182,  183,  750,  182,  183,  827,  182,  183,
      181,  182,  183,  182,  183,  827,  754,  827,  753,  827,
      827,  509,  827,  752,  509,  182,  183,  236,  827,  616,
      509,  755,  236,  509,  756,  827,  236,  827,  618,  618,
      827,  757,  618,  703,  827,  509,  379,  827,  509,  379,

      618,  498,  498,  705,  621,  379,  509,  498,  379,  509,
      108,  498,  377,  509,  626,  377,  509,  759,  708,  377,
      827,  108,  827,  108,  827,  109,  110,  108,  710,  108,
      618,  618,  108,  827,  108,  760,  109,  110,  109,  110,
      108,  827,  109,  110,  109,  110,  827,  109,  110,  109,
      110,  630,  108,  827,  108,  109,  110,  827,  827,  763,
      108,  762,  761,  108,  827,  764,  108,  109,  110,  109,
      110,  108,  827,  765,  108,  109,  110,  827,  109,  110,
      827,  109,  110,  108,  767,  108,  109,  110,  108,  109,
      110,  108,  768,  827,  827,  769,  766,  827,  109,  110,

      109,  110,  108,  109,  110,  108,  109,  110,  108,  771,
      108,  827,  772,  108,  827,  108,  827,  109,  110,  827,
      109,  110,  827,  109,  110,  109,  110,  770,  109,  110,
      109,  110,  509,  773,  181,  509,  181,  827,  452,  509,
      674,  452,  509,  181,  827,  452,  181,  774,  181,  182,
      183,  182,  183,  181,  737,  827,  827,  827,  182,  183,
      181,  182,  183,  182,  183,  778,  827,  181,  182,  183,
      775,  181,  776,  181,  827,  182,  183,  777,  779,  181,
      827,  780,  182,  183,  181,  827,  182,  183,  182,  183,
      181,  827,  827,  783,  182,  183,  181,  827,  181,  182,

      183,  782,  181,  827,  181,  182,  183,  827,  781,  181,
      827,  182,  183,  182,  183,  181,  827,  182,  183,  182,
      183,  181,  784,  786,  182,  183,  785,  108,  827,  827,
      182,  183,  509,  827,  827,  509,  182,  183,  498,  827,
      705,  827,  109,  110,  788,  787,  108,  827,  791,  108,
      789,  108,  790,  509,  759,  498,  509,  827,  108,  498,
      827,  109,  110,  108,  109,  110,  109,  110,  108,  827,
      108,  827,  827,  109,  110,  108,  792,  108,  109,  110,
      827,  108,  827,  109,  110,  109,  110,  793,  794,  108,
      109,  110,  109,  110,  108,  795,  109,  110,  108,  827,

      108,  827,  796,  181,  109,  110,  181,  827,  181,  109,
      110,  181,  827,  109,  110,  109,  110,  181,  182,  183,
      827,  182,  183,  182,  183,  801,  182,  183,  799,  797,
      181,  800,  182,  183,  181,  827,  798,  827,  181,  827,
      613,  181,  827,  181,  346,  182,  183,  802,  181,  182,
      183,  827,  827,  182,  183,  181,  182,  183,  182,  183,
      803,  613,  827,  182,  183,  181,  827,  804,  181,  827,
      182,  183,  181,  827,  805,  181,  827,  108,  806,  108,
      182,  183,  108,  182,  183,  108,  827,  182,  183,  807,
      182,  183,  109,  110,  109,  110,  827,  109,  110,  108,

      109,  110,  808,  108,  827,  108,  827,  108,  827,  181,
      827,  827,  630,  181,  109,  110,  827,  541,  109,  110,
      109,  110,  109,  110,  182,  183,  809,  181,  182,  183,
      181,  827,  810,  181,  827,  827,  827,  181,  827,  181,
      827,  181,  182,  183,  827,  182,  183,  811,  182,  183,
      181,  812,  182,  183,  182,  183,  182,  183,  181,  827,
      817,  814,  816,  813,  613,  182,  183,  108,  827,  815,
      827,  827,  108,  182,  183,  181,  827,  181,  827,  181,
      827,  827,  109,  110,  181,  818,  827,  109,  110,  827,
      182,  183,  182,  183,  182,  183,  820,  181,  821,  182,

      183,  181,  655,  819,  822,  827,  181,  827,  181,  827,
      108,  827,  182,  183,  181,  827,  182,  183,  464,  181,
      823,  182,  183,  182,  183,  109,  110,  181,  827,  182,
      183,  181,  827,  108,  182,  183,  181,  827,  181,  827,
      824,  827,  182,  183,  827,  827,  182,  183,  109,  110,
      827,  182,  183,  182,  183,  827,  827,  827,  825,  827,
      827,  827,  827,  827,  827,  827,  826,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   98,   98,   98,   98,   98,   98,

       98,   98,   98,  107,  107,  827,  827,  107,  111,  111,
      111,  111,  111,  111,  180,  180,  827,  827,  180,  184,
      184,  184,  184,  184,  184,  232,  232,  827,  827,  232,
      236,  236,  236,  236,  236,  236,  245,  827,  827,  827,
      245,  245,  245,  245,  245,  247,  247,  827,  247,  247,
      247,  247,  247,  247,  248,  827,  248,  248,  827,  827,
      248,  248,  250,  250,  250,  250,  328,  328,  328,  328,
      371,  371,  371,  371,  377,  377,  377,  377,  377,  377,
      380,  827,  827,  827,  380,  380,  380,  380,  380,  452,
      452,  452,  452,  452,  452,  454,  827,  827,  827,  454,

      454,  454,  454,  454,  498,  498,  498,  498,  498,  498,
      500,  827,  827,  827,  500,  500,  500,  500,  500,  379,
      827,  827,  827,  379,  379,  379,  379,  379,  507,  827,
      827,  507,  507,  507,  507,  507,  507,  510,  827,  827,
      827,  510,  510,  510,  510,  510,  515,  827,  827,  827,
      515,  515,  515,  515,  515,  573,  827,  827,  573,  573,
      573,  573,  573,  573,  575,  827,  827,  827,  575,  575,
      575,  575,  575,  580,  827,  827,  827,  580,  580,  580,
      580,  580,  614,  827,  827,  614,  614,  614,  614,  614,
      614,  616,  827,  827,  827,  616,  616,  616,  616,  616,

      621,  827,  827,  827,  621,  621,  621,  621,  621,  509,
      827,  827,  827,  509,  509,  509,  509,  509,  623,  827,
      827,  623,  623,  623,  623,  623,  623,  626,  827,  827,
      827,  626,  626,  626,  626,  626,  628,  827,  827,  628,
      628,  628,  628,  628,  628,  671,  827,  827,  671,  671,
      671,  671,  671,  671,  674,  827,  827,  827,  674,  674,
      674,  674,  674,  676,  827,  827,  676,  676,  676,  676,
      676,  676,  702,  827,  827,  702,  702,  702,  702,  702,
      702,  705,  827,  827,  827,  705,  705,  705,  705,  705,
      707,  827,  827,  707,  707,  707,  707,  707,  707,  709,

      827,  827,  709,  709,  709,  709,  709,  709,  736,  827,
      827,  736,  736,  736,  736,  736,  736,  758,  827,  827,
      758,  758,  758,  758,  758,  758,   13,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827
    } ;

static yyconst short int yy_chk[4583] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,   93,    5,    5,
        5,    5,   93,    5,    5,    5,  383,    5,    5,  621,
      383,    5,  246,    5,    5,    7,    7,  246,    7,    7,
        7,    8,    8,    5,    8,    8,    8,    9,  618,    9,
        9,   10,   15,   10,   10,  580,   15,   15,  103,  103,
      577,    5,    5,    6,    6,    6,    6,    6,    6,    6,
      515,    6,    6,    6,    6,   18,    6,    6,    6,   19,
        6,    6,   21,  512,    6,   21,    6,    6,   23,  506,
       18,   18,   24,   19,   23,   25,    6,   21,   21,  505,

      103,  103,  500,   23,   23,   28,   28,   24,   24,   28,
       25,   25,  499,   27,    6,    6,   11,   28,   11,   11,
       11,   11,  454,   52,   11,   11,   11,   26,   27,   27,
       30,  453,  380,  378,   29,   26,   26,   52,   11,   80,
       37,  376,   26,   26,   35,   30,   30,   28,   28,   29,
       29,  375,   29,   80,   29,   37,   37,  457,  237,   35,
       35,  457,   29,   35,   30,   37,  185,   11,   11,   31,
       11,   12,   51,   12,   12,   12,   12,  108,   35,   12,
       12,   12,  111,  112,   31,   31,   33,   51,   51,   31,
       32,  108,   54,   12,   36,   54,  111,   31,   31,   38,

       31,   33,   33,   31,  181,   32,   32,   54,   54,   36,
       36,   32,   13,   34,   38,   38,   43,   33,  181,   33,
       33,   32,   12,   12,   36,   12,   33,   32,   34,   34,
       38,   43,   43,   39,   38,  503,    0,    0,    0,  503,
       40,   34,   34,    0,   34,   42,    0,   34,   39,   39,
       39,   39,   44,   43,   39,   40,   40,   40,   39,   47,
       42,   42,   42,    0,   39,    0,    0,   44,   44,   44,
       46,   40,   55,   44,   47,   47,   42,   40,   41,   42,
       44,    0,   42,   58,   42,   46,   46,   55,   55,   47,
       45,    0,    0,   41,   41,   46,   41,    0,   58,   58,

       41,   48,    0,    0,   46,   45,   45,   41,   41,   49,
       41,   45,   41,   50,   45,    0,   48,   48,   48,    0,
       57,   45,   48,   60,   49,   49,   45,   45,   50,   50,
        0,   56,   57,   49,   49,   57,   57,   56,   60,   60,
       59,   59,   50,   56,   59,   62,   56,   56,   63,  106,
       50,   65,   59,  106,  106,  184,   64,    0,   60,   67,
       62,   62,    0,   63,   63,  233,   65,   65,   65,  184,
       62,   64,   64,    0,   67,   67,   68,   67,   63,  233,
       71,   63,   59,   59,   61,    0,   66,   64,   63,  236,
       64,   68,   68,   68,    0,   71,   71,   68,    0,   61,

       61,   66,   66,  236,    0,   61,   66,    0,   66,   69,
        0,   71,   61,   61,   71,   61,   66,   61,   61,   70,
       61,   66,   66,   76,   69,   69,   73,   69,    0,  251,
       69,   72,    0,   74,   70,   70,  329,   70,   76,   76,
       76,   73,   73,  251,   69,   75,   72,   72,   74,   74,
      329,   70,  372,   78,   74,   79,   72,   73,   73,   72,
       75,   75,   73,   73,   74,   78,  372,   84,   78,   78,
       79,   79,   82,   84,    0,   82,    0,    0,    0,    0,
       75,  377,   84,   84,   87,    0,   88,   82,   82,   85,
       85,   85,   85,   85,   85,  377,   85,    0,   86,   87,

       87,   88,   88,   90,   89,   89,   86,   86,   89,  107,
        0,   85,   85,   86,   86,  109,   89,    0,   90,   90,
        0,  110,  110,  110,  107,  107,  110,  121,    0,  113,
      109,  109,  113,   90,  110,  114,    0,  117,    0,    0,
      115,  114,  121,  121,  113,  113,   89,   89,  115,  115,
      114,  114,  117,  117,    0,  115,  115,  116,  116,  118,
        0,  116,  119,    0,  110,  110,    0,  120,  117,  116,
      122,    0,    0,    0,  118,  118,    0,  119,  119,  452,
      125,    0,  120,  120,    0,  122,  122,  119,  120,  123,
      119,  122,  124,  452,    0,  125,  125,  118,  126,  116,

      116,  125,  127,    0,  123,  123,    0,  124,  124,  123,
      128,    0,  129,  126,  126,  130,  126,  127,  127,    0,
      124,  124,  124,  498,    0,  128,  128,  129,  129,  124,
      130,  130,  131,  126,  129,    0,  132,  498,    0,  128,
        0,  133,    0,    0,  134,    0,  135,  131,  131,  136,
      130,  132,  132,  131,    0,  132,  133,  133,  133,  134,
      134,  135,  135,  137,  136,  136,  138,    0,    0,  139,
      136,  140,    0,    0,  141,  134,    0,  142,  137,  137,
      135,  138,  138,  138,  139,  139,  140,  140,  139,  141,
      141,  141,  142,  142,  143,    0,  144,    0,  145,    0,

      146,  140,  147,    0,  148,  141,    0,    0,  149,  143,
      143,  144,  144,  145,  145,  146,  146,  147,  147,  148,
      148,  150,  147,  149,  149,    0,    0,  145,  151,    0,
      143,  144,    0,  152,    0,    0,  150,  150,  148,    0,
      146,  153,  149,  151,  151,  154,    0,  155,  152,  152,
      150,    0,  156,    0,  151,  152,  153,  153,    0,  157,
      154,  154,  155,  155,  158,    0,    0,  156,  156,  159,
        0,  160,  153,  156,  157,  157,  162,    0,    0,  158,
      158,    0,  155,  161,  159,  159,  160,  160,    0,  163,
        0,  162,  162,  157,  159,  157,  158,  164,  161,  161,

      159,  162,    0,  161,  163,  163,  160,  165,    0,    0,
        0,  166,  164,  164,  167,    0,    0,  164,  168,    0,
        0,    0,  165,  165,    0,  163,  166,  166,  166,  167,
      167,    0,  164,  168,  168,  164,  164,    0,  169,  166,
        0,  171,  165,    0,    0,  167,  170,  166,    0,    0,
      172,    0,  168,  169,  169,  169,  171,  171,  173,  169,
        0,  170,  170,  174,  170,  172,  172,  172,    0,  175,
      171,  176,    0,  173,  173,  170,    0,    0,  174,  174,
      177,    0,    0,  173,  175,  175,  176,  176,  508,  178,
      508,  508,  176,  179,  508,  177,  177,  174,  180,    0,

        0,    0,  176,  175,  178,  178,  178,    0,  179,  179,
      182,    0,  186,  180,  180,  186,  177,  183,  183,  183,
        0,  188,  183,  179,  189,  182,  182,  186,  186,  187,
      183,    0,  191,    0,  193,  187,  188,  188,    0,  189,
      189,  192,  190,  190,  187,  187,  190,  191,  191,  193,
      193,  193,    0,  194,  190,    0,  192,  192,    0,    0,
      183,  183,  195,    0,  196,    0,  197,  191,  194,  194,
        0,  194,  198,    0,  192,    0,    0,  195,  195,  196,
      196,  197,  197,  199,  190,  190,  200,  198,  198,  201,
        0,  195,  195,  202,  197,    0,  203,    0,  199,  199,

      204,  200,  200,  198,  201,  201,  200,  205,  202,  202,
      207,  203,  203,    0,    0,  204,  204,    0,  206,  199,
        0,  208,  205,  205,  206,  207,  207,    0,  206,  202,
      203,  204,  209,  206,  206,  210,  208,  208,  211,  206,
      208,    0,  212,  205,    0,    0,  213,  209,  209,  214,
      210,  210,    0,  211,  211,  215,  210,  212,  212,  216,
      212,  213,  213,    0,  214,  214,    0,    0,  213,  211,
      215,  215,  217,    0,  216,  216,    0,  218,  212,  219,
        0,  221,  216,  218,  215,  220,    0,  217,  217,    0,
      215,    0,  218,  218,  219,  219,  221,  221,  217,  222,

      220,  220,  223,    0,  221,  224,  220,  219,  225,    0,
        0,    0,  218,  226,  222,  222,  220,  223,  223,  227,
      224,  224,  228,  225,  225,  229,  224,    0,  226,  226,
      230,  226,  231,    0,  227,  227,  223,  228,  228,  232,
      229,  229,  225,  234,    0,  230,  230,  231,  231,    0,
      229,    0,    0,  227,  232,  232,  244,    0,  234,  234,
      235,  235,  235,  238,  230,  235,  238,    0,  239,    0,
        0,  244,  244,  235,  239,    0,    0,    0,  238,  238,
        0,    0,    0,  239,  239,  240,  240,  240,  240,  240,
      240,  242,    0,  243,  243,  240,  250,  243,  240,  242,

      242,  255,    0,  235,  235,  243,  242,  242,  254,    0,
        0,  250,  250,  256,    0,    0,  255,  255,  257,  381,
        0,    0,  381,  254,  254,  381,  255,  381,  256,  256,
      256,    0,    0,  257,  257,  243,  243,  252,  258,    0,
      252,  381,  254,    0,    0,  252,  252,  252,  259,    0,
      252,  260,    0,  258,  258,  258,  261,  252,  252,  265,
      252,  252,  262,  259,  259,  259,  260,  260,  269,    0,
        0,  261,  261,    0,  265,  265,    0,  262,  262,  265,
      266,    0,    0,  269,  269,    0,  263,  261,  252,  252,
      253,  262,    0,  253,  262,  266,  266,    0,  253,  253,

      253,  263,  263,  253,  264,  263,  263,    0,  267,    0,
      253,  253,  268,  253,  253,  270,    0,  266,    0,  264,
      264,  271,  263,  267,  267,    0,    0,  268,  268,  267,
      270,  270,    0,  272,  264,  273,  271,  271,  274,    0,
      275,  253,  253,    0,  268,    0,    0,  276,  272,  272,
      273,  273,  277,  274,  274,  275,  275,  278,  274,  279,
      271,  272,  276,  276,    0,  281,    0,  277,  277,  275,
        0,  273,  278,  278,  279,  279,  280,    0,  283,  279,
      281,  281,    0,  282,  277,  278,  276,    0,  284,    0,
      285,  280,  280,  283,  283,  286,  280,  281,  282,  282,

      287,    0,  282,  284,  284,  285,  285,  288,    0,  289,
      286,  286,  285,  290,    0,  287,  287,    0,    0,  284,
        0,    0,  288,  288,  289,  289,  291,  289,  290,  290,
      292,    0,  286,  293,  287,    0,  288,  294,    0,  295,
        0,  291,  291,  296,    0,  292,  292,    0,  293,  293,
      292,    0,  294,  294,  295,  295,    0,  297,  296,  296,
      295,    0,    0,  298,    0,  299,    0,  296,  300,    0,
      301,    0,  297,  297,  295,  302,  294,  297,  298,  298,
      299,  299,  303,  300,  300,  301,  301,  299,  304,    0,
      302,  302,  300,  298,  305,    0,    0,  303,  303,  306,

        0,  307,    0,  304,  304,    0,  308,  303,  309,  305,
      305,  302,  310,    0,  306,  306,  307,  307,    0,    0,
      306,  308,  308,  309,  309,  304,    0,  310,  310,  311,
        0,  305,  312,  310,  313,  307,  314,    0,    0,  316,
        0,  315,  309,  318,  311,  311,  317,  312,  312,  313,
      313,  314,  314,    0,  316,  316,  315,  315,  318,  318,
        0,  317,  317,  319,  318,  320,    0,    0,  318,  321,
      313,  312,  314,  315,  316,  317,  322,    0,  319,  319,
      320,  320,  319,  323,  321,  321,  324,  320,    0,    0,
      326,  322,  322,  327,  322,  325,    0,  328,  323,  323,

      332,  324,  324,    0,  321,  326,  326,  333,  327,  327,
      325,  325,  328,  328,  324,  332,  332,  323,  327,  325,
        0,    0,  333,  333,    0,    0,  326,  330,  334,    0,
      330,  332,    0,    0,    0,  330,  330,  330,  335,    0,
      330,  336,  333,  334,  334,  337,    0,  330,  330,  339,
      330,  330,    0,  335,  335,  340,  336,  336,  338,    0,
      337,  337,    0,  336,  339,  339,  341,  335,    0,    0,
      340,  340,    0,  338,  338,    0,  336,  340,  330,  330,
      331,  341,  341,  331,  340,  339,  340,  341,  331,  331,
      331,  342,  338,  331,  343,    0,    0,  344,    0,  345,

      331,  331,  346,  331,  331,    0,  342,  342,    0,  343,
      343,  347,  344,  344,  345,  345,    0,  346,  346,  348,
      342,  344,  349,  345,    0,    0,  347,  347,  350,    0,
      351,  331,  331,  352,  348,  348,  343,  349,  349,    0,
      347,  347,  353,  350,  350,  351,  351,  348,  352,  352,
      354,  351,  355,    0,  352,  356,  349,  353,  353,  357,
        0,  358,    0,    0,    0,  354,  354,  355,  355,    0,
      356,  356,    0,  359,  357,  357,  358,  358,  353,  360,
      357,  354,  361,    0,  363,  358,    0,  355,  359,  359,
      356,  362,    0,    0,  360,  360,  364,  361,  361,  363,

      363,  361,  365,    0,    0,    0,  362,  362,  363,  366,
        0,  364,  364,    0,  367,    0,    0,  365,  365,  368,
      360,  365,  369,    0,  366,  366,  366,  362,  370,  367,
      367,  371,  364,  367,  368,  368,    0,  369,  369,  385,
        0,  386,    0,  370,  370,  387,  371,  371,  368,  367,
        0,    0,  369,  391,  385,  385,  386,  386,    0,    0,
      387,  387,    0,  370,  373,    0,  388,  373,  391,  391,
      391,    0,  373,  373,  373,  385,  386,  373,    0,  389,
      387,  388,  388,  392,  373,  373,  393,  373,  373,  390,
        0,    0,    0,  388,  389,  389,  394,    0,  392,  392,

        0,  393,  393,  395,  390,  390,    0,  393,  392,    0,
        0,  394,  394,  389,  392,  373,  373,  374,  395,  395,
      374,  394,    0,  390,  395,  374,  374,  374,  395,  396,
      374,  398,    0,    0,  397,    0,  399,  374,  374,    0,
      374,  374,  400,    0,  396,  396,  398,  398,    0,  397,
      397,  399,  399,    0,  398,    0,    0,  400,  400,  402,
        0,  401,    0,    0,  399,  396,  403,    0,  374,  374,
      382,  397,  404,  382,  402,  402,  401,  401,  382,  382,
      382,  403,  403,  382,  405,    0,    0,  404,  404,  404,
      406,  382,  407,  382,  382,  401,  402,  409,    0,  405,

      405,  410,  403,    0,  408,  406,  406,  407,  407,    0,
        0,    0,  409,  409,  406,    0,  410,  410,  405,  408,
      408,  382,  382,  384,    0,  411,  384,  412,    0,  407,
        0,  384,  384,  384,    0,  413,  384,  414,    0,  408,
      411,  411,  412,  412,  384,    0,  384,  384,  415,  411,
      413,  413,  414,  414,  416,    0,  574,  417,  574,  574,
      413,  418,  574,  415,  415,  414,  419,    0,  420,  416,
      416,  416,  417,  417,  384,  384,  418,  418,  417,  415,
      421,  419,  419,  420,  420,    0,    0,  422,    0,  423,
        0,  424,    0,  425,    0,  421,  421,  426,  420,  427,

      419,  421,  422,  422,  423,  423,  424,  424,  425,  425,
      428,    0,  426,  426,  427,  427,  429,  426,  425,    0,
        0,  430,    0,  431,    0,  428,  428,  424,  432,    0,
      433,  429,  429,    0,    0,  429,  430,  430,  431,  431,
      431,  428,  434,  432,  432,  433,  433,  435,    0,  433,
      430,  436,    0,  432,  437,    0,  438,  434,  434,  439,
        0,  434,  435,  435,  440,    0,  436,  436,  441,  437,
      437,  438,  438,    0,  439,  439,  442,    0,  443,  440,
      440,  440,  444,  441,  441,  445,  436,  446,    0,  437,
        0,  442,  442,  443,  443,  439,  447,  444,  444,  443,

      445,  445,  446,  446,  448,    0,  442,    0,    0,    0,
        0,  447,  447,  449,    0,  450,    0,  447,  446,  448,
      448,  451,    0,  444,    0,  448,  459,    0,  449,  449,
      450,  450,  455,  461,  450,  455,  451,  451,  455,    0,
      455,  459,  459,  451,  462,  459,  460,    0,  461,  461,
        0,  463,    0,    0,  455,  456,  464,    0,  456,  462,
      462,  460,  460,  456,  456,  456,  463,  463,  456,  462,
      461,  464,  464,  465,    0,  467,  456,  470,  456,  456,
      466,  460,    0,  468,    0,  469,    0,  463,  465,  465,
      467,  467,  470,  470,  470,  466,  466,    0,  468,  468,

      469,  469,    0,    0,  465,    0,  456,  456,  458,  466,
      473,  458,  468,    0,    0,  469,  458,  458,  458,  471,
        0,  458,  472,    0,    0,  473,  473,    0,    0,  458,
      474,  458,  458,  475,  471,  471,  476,  472,  472,  477,
      471,  473,  478,  472,    0,  474,  474,    0,  475,  475,
      479,  476,  476,    0,  477,  477,  477,  478,  478,  458,
      458,  480,  474,  481,    0,  479,  479,  482,    0,  475,
      478,  483,    0,  476,    0,    0,  480,  480,  481,  481,
      484,    0,  482,  482,  482,  485,  483,  483,  486,    0,
      479,  487,    0,  488,    0,  484,  484,    0,    0,  484,

      485,  485,    0,  486,  486,  489,  487,  487,  488,  488,
      490,    0,  487,  491,  488,  492,  485,  486,  493,    0,
      489,  489,    0,    0,  494,  490,  490,    0,  491,  491,
      492,  492,  497,  493,  493,    0,    0,  495,  491,  494,
      494,  489,  496,  495,    0,  490,  493,  497,  497,    0,
        0,  492,  495,  495,    0,  494,  501,  496,  496,  501,
        0,    0,  501,  507,  501,  496,  507,    0,    0,  507,
        0,  507,  514,  514,    0,    0,  514,    0,  501,  502,
        0,    0,  502,    0,  514,  507,    0,  502,  502,  502,
      511,  516,  502,  511,  516,  517,  511,  516,  511,  516,

      502,  519,  502,  502,    0,  518,    0,    0,  520,    0,
      517,  517,  511,  516,  514,  514,  519,  519,  521,    0,
      518,  518,  519,  520,  520,    0,  518,    0,  520,    0,
      502,  502,  504,  521,  521,  504,  518,    0,    0,    0,
      504,  504,  504,  522,    0,  504,  523,    0,    0,  524,
        0,  525,    0,  504,  526,  504,  504,  528,  522,  522,
        0,  523,  523,  527,  524,  524,  525,  525,    0,  526,
      526,  526,  528,  528,  529,    0,  523,  524,  527,  527,
        0,  525,    0,  504,  504,  510,  530,    0,  510,  529,
      529,    0,    0,  510,  510,  510,  531,  528,  510,  527,

        0,  530,  530,  532,  529,  533,  510,  534,  510,  510,
        0,  531,  531,  535,    0,  531,    0,    0,  532,  532,
      533,  533,  534,  534,  536,    0,  533,  537,  535,  535,
        0,    0,  534,  535,    0,    0,  510,  510,  513,  536,
      536,  513,  537,  537,    0,  536,  513,  513,  513,  538,
        0,  513,  539,    0,    0,  540,    0,  541,    0,  513,
        0,  513,  513,  537,  538,  538,  542,  539,  539,  543,
      540,  540,  541,  541,  538,  540,  544,    0,  545,    0,
      546,  542,  542,  549,  543,  543,  547,    0,  548,  513,
      513,  544,  544,  545,  545,  546,  546,  544,  549,  549,

      550,  547,  547,  548,  548,    0,  551,    0,  546,  543,
      552,    0,  553,  548,  554,  550,  550,  545,  549,  549,
      547,  551,  551,    0,  555,  552,  552,  553,  553,  554,
      554,  556,    0,  557,    0,  558,    0,    0,  552,  555,
      555,  559,    0,  560,  554,  555,  556,  556,  557,  557,
      558,  558,  556,  561,    0,    0,  559,  559,  560,  560,
      562,  557,  563,    0,    0,  559,  564,    0,  561,  561,
      565,  558,    0,  566,    0,  562,  562,  563,  563,  560,
      567,  564,  564,  568,    0,  565,  565,  563,  566,  566,
      569,    0,  570,  565,  572,  567,  567,  571,  568,  568,

      564,    0,    0,    0,    0,  569,  569,  570,  570,  572,
      572,  573,  571,  571,  573,  582,    0,  573,  568,  573,
      576,  571,  583,  576,    0,    0,  576,    0,  576,    0,
      582,  582,  584,  573,    0,  572,  575,  583,  583,  575,
      582,    0,  576,    0,  575,  575,  575,  584,  584,  575,
      581,  579,  579,  581,  585,  579,  581,  575,  581,  575,
      575,    0,    0,  579,  587,    0,  586,    0,  584,  585,
      585,    0,  581,    0,    0,  588,    0,  585,    0,  587,
      587,  586,  586,    0,    0,    0,    0,  575,  575,  578,
      588,  588,  578,  579,  579,    0,    0,  578,  578,  578,

      586,  589,  578,  590,    0,    0,    0,  591,    0,  592,
      578,  593,  578,  578,  594,    0,  589,  589,  590,  590,
        0,  589,  591,  591,  592,  592,  593,  593,    0,  594,
      594,  595,    0,  596,    0,  597,    0,  591,    0,  590,
      578,  578,  593,  592,  598,  594,  595,  595,  596,  596,
      597,  597,  599,  596,  600,    0,  595,  601,    0,  598,
      598,    0,    0,  602,    0,  603,    0,  599,  599,  600,
      600,  597,  601,  601,    0,  604,    0,  600,  602,  602,
      603,  603,  605,    0,  606,    0,    0,  607,    0,  608,
      604,  604,  609,  601,  602,  604,  603,  605,  605,  606,

      606,  605,  607,  607,  608,  608,  608,  609,  609,  610,
        0,    0,  611,  609,  612,  614,  613,    0,  614,    0,
        0,  614,    0,  614,  610,  610,  610,  611,  611,  612,
      612,  613,  613,  615,    0,  615,  615,  614,  612,  615,
      620,  620,    0,    0,  620,  617,  611,  616,  617,    0,
      616,  617,  620,  617,    0,  616,  616,  616,  622,    0,
      616,  622,    0,    0,  622,    0,  622,  617,  616,  623,
      616,  616,  623,  627,    0,  623,  627,  623,    0,  627,
      622,  627,  620,  620,  624,    0,  624,  624,    0,    0,
      624,  623,  625,  625,    0,  627,  625,    0,  616,  616,

      619,    0,    0,  619,  625,    0,    0,    0,  619,  619,
      619,  628,    0,  619,  628,    0,    0,  628,    0,  628,
        0,  619,  630,  619,  619,  629,  631,  629,  629,  632,
        0,  629,  633,  628,  625,  625,    0,  630,  630,  634,
        0,  631,  631,    0,  632,  632,  635,  633,  633,    0,
      636,  619,  619,  637,  634,  634,    0,  638,    0,  634,
      631,  635,  635,  633,  632,  636,  636,  635,  637,  637,
      639,  636,  638,  638,  640,    0,  641,    0,    0,  642,
        0,  637,  638,    0,  643,  639,  639,  644,    0,  640,
      640,  641,  641,    0,  642,  642,    0,  641,  642,  643,

      643,  645,  644,  644,    0,    0,  639,  646,  644,  647,
        0,  640,  648,    0,  649,    0,  645,  645,    0,  650,
      643,  651,  646,  646,  647,  647,  652,  648,  648,  649,
      649,  645,  653,  648,  650,  650,  651,  651,  654,    0,
      655,  652,  652,  656,    0,  647,  658,  653,  653,  657,
        0,  652,    0,  654,  654,  655,  655,  659,  656,  656,
      660,  658,  658,  658,  657,  657,  661,  656,  662,    0,
      657,  663,  659,  659,  654,  660,  660,  664,    0,  665,
        0,  661,  661,  662,  662,  666,  663,  663,  667,  662,
      668,    0,  664,  664,  665,  665,    0,  669,    0,    0,

      666,  666,  670,  667,  667,  668,  668,    0,    0,    0,
        0,  668,  669,  669,    0,  665,  671,  670,  670,  671,
      680,    0,  671,    0,  671,  672,  666,  672,  672,  673,
      673,  672,    0,  673,  675,  680,  680,  675,  671,    0,
      675,  673,  675,  676,  678,    0,  676,  679,    0,  676,
        0,  676,  677,  681,  677,  677,  675,  680,  677,  678,
      678,  678,  679,  679,  679,  676,  682,    0,  681,  681,
      683,  673,  673,  684,    0,    0,    0,  685,    0,  686,
        0,  682,  682,  687,    0,  683,  683,  688,  684,  684,
      681,  682,  685,  685,  686,  686,  689,    0,  687,  687,

        0,  690,  688,  688,    0,    0,  686,    0,    0,  691,
        0,  689,  689,  692,    0,    0,  690,  690,  693,  687,
      694,  689,  690,  688,  691,  691,  695,    0,  692,  692,
      691,    0,    0,  693,  693,  694,  694,  696,    0,    0,
      697,  695,  695,  698,    0,  693,  699,  695,  700,    0,
        0,    0,  696,  696,  694,  697,  697,    0,  698,  698,
      701,  699,  699,  700,  700,    0,  698,    0,  697,    0,
        0,  702,    0,  696,  702,  701,  701,  702,    0,  702,
      703,  699,  703,  703,  700,    0,  703,    0,  704,  704,
        0,  701,  704,  702,    0,  706,  707,    0,  706,  707,

      704,  706,  707,  706,  707,  708,  709,  708,  708,  709,
      711,  708,  709,  710,  709,  710,  710,  706,  707,  710,
        0,  712,    0,  713,    0,  711,  711,  714,  709,  715,
      704,  704,  716,    0,  717,  711,  712,  712,  713,  713,
      718,    0,  714,  714,  715,  715,    0,  716,  716,  717,
      717,  711,  719,    0,  720,  718,  718,    0,    0,  715,
      721,  714,  713,  722,    0,  717,  723,  719,  719,  720,
      720,  724,    0,  719,  725,  721,  721,    0,  722,  722,
        0,  723,  723,  726,  722,  727,  724,  724,  728,  725,
      725,  729,  724,    0,    0,  725,  721,    0,  726,  726,

      727,  727,  730,  728,  728,  731,  729,  729,  732,  728,
      733,    0,  729,  734,    0,  735,    0,  730,  730,    0,
      731,  731,    0,  732,  732,  733,  733,  727,  734,  734,
      735,  735,  736,  731,  738,  736,  739,    0,  736,  737,
      736,  737,  737,  740,    0,  737,  741,  733,  742,  738,
      738,  739,  739,  743,  736,    0,    0,    0,  740,  740,
      744,  741,  741,  742,  742,  741,    0,  745,  743,  743,
      738,  746,  739,  747,    0,  744,  744,  740,  742,  748,
        0,  744,  745,  745,  749,    0,  746,  746,  747,  747,
      750,    0,    0,  747,  748,  748,  751,    0,  752,  749,

      749,  746,  753,    0,  754,  750,  750,    0,  745,  755,
        0,  751,  751,  752,  752,  756,    0,  753,  753,  754,
      754,  757,  750,  752,  755,  755,  751,  760,    0,    0,
      756,  756,  758,    0,    0,  758,  757,  757,  758,    0,
      758,    0,  760,  760,  755,  754,  761,    0,  760,  762,
      756,  763,  757,  759,  758,  759,  759,    0,  764,  759,
        0,  761,  761,  765,  762,  762,  763,  763,  766,    0,
      767,    0,    0,  764,  764,  768,  761,  769,  765,  765,
        0,  770,    0,  766,  766,  767,  767,  763,  764,  771,
      768,  768,  769,  769,  772,  768,  770,  770,  773,    0,

      774,    0,  770,  775,  771,  771,  776,    0,  777,  772,
      772,  778,    0,  773,  773,  774,  774,  779,  775,  775,
        0,  776,  776,  777,  777,  777,  778,  778,  775,  772,
      780,  776,  779,  779,  781,    0,  774,    0,  782,    0,
      779,  783,    0,  784,  781,  780,  780,  778,  786,  781,
      781,    0,    0,  782,  782,  785,  783,  783,  784,  784,
      780,  782,    0,  786,  786,  787,    0,  784,  788,    0,
      785,  785,  789,    0,  785,  790,    0,  791,  786,  792,
      787,  787,  793,  788,  788,  794,    0,  789,  789,  788,
      790,  790,  791,  791,  792,  792,    0,  793,  793,  795,

      794,  794,  790,  796,    0,  797,    0,  798,    0,  799,
        0,    0,  791,  800,  795,  795,    0,  793,  796,  796,
      797,  797,  798,  798,  799,  799,  797,  801,  800,  800,
      802,    0,  798,  803,    0,    0,    0,  804,    0,  805,
        0,  806,  801,  801,    0,  802,  802,  799,  803,  803,
      807,  800,  804,  804,  805,  805,  806,  806,  808,    0,
      805,  802,  804,  801,  806,  807,  807,  809,    0,  803,
        0,    0,  810,  808,  808,  811,    0,  812,    0,  813,
        0,    0,  809,  809,  814,  807,    0,  810,  810,    0,
      811,  811,  812,  812,  813,  813,  811,  815,  812,  814,

      814,  816,  809,  810,  813,    0,  817,    0,  818,    0,
      819,    0,  815,  815,  820,    0,  816,  816,  814,  821,
      816,  817,  817,  818,  818,  819,  819,  822,    0,  820,
      820,  823,    0,  824,  821,  821,  825,    0,  826,    0,
      819,    0,  822,  822,    0,    0,  823,  823,  824,  824,
        0,  825,  825,  826,  826,    0,    0,    0,  822,    0,
        0,    0,    0,    0,    0,    0,  825,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  831,  831,  831,  831,  831,  831,

      831,  831,  831,  832,  832,    0,    0,  832,  833,  833,
      833,  833,  833,  833,  834,  834,    0,    0,  834,  835,
      835,  835,  835,  835,  835,  836,  836,    0,    0,  836,
      837,  837,  837,  837,  837,  837,  838,    0,    0,    0,
      838,  838,  838,  838,  838,  839,  839,    0,  839,  839,
      839,  839,  839,  839,  840,    0,  840,  840,    0,    0,
      840,  840,  841,  841,  841,  841,  842,  842,  842,  842,
      843,  843,  843,  843,  844,  844,  844,  844,  844,  844,
      845,    0,    0,    0,  845,  845,  845,  845,  845,  846,
      846,  846,  846,  846,  846,  847,    0,    0,    0,  847,

      847,  847,  847,  847,  848,  848,  848,  848,  848,  848,
      849,    0,    0,    0,  849,  849,  849,  849,  849,  850,
        0,    0,    0,  850,  850,  850,  850,  850,  851,    0,
        0,  851,  851,  851,  851,  851,  851,  852,    0,    0,
        0,  852,  852,  852,  852,  852,  853,    0,    0,    0,
      853,  853,  853,  853,  853,  854,    0,    0,  854,  854,
      854,  854,  854,  854,  855,    0,    0,    0,  855,  855,
      855,  855,  855,  856,    0,    0,    0,  856,  856,  856,
      856,  856,  857,    0,    0,  857,  857,  857,  857,  857,
      857,  858,    0,    0,    0,  858,  858,  858,  858,  858,

      859,    0,    0,    0,  859,  859,  859,  859,  859,  860,
        0,    0,    0,  860,  860,  860,  860,  860,  861,    0,
        0,  861,  861,  861,  861,  861,  861,  862,    0,    0,
        0,  862,  862,  862,  862,  862,  863,    0,    0,  863,
      863,  863,  863,  863,  863,  864,    0,    0,  864,  864,
      864,  864,  864,  864,  865,    0,    0,    0,  865,  865,
      865,  865,  865,  866,    0,    0,  866,  866,  866,  866,
      866,  866,  867,    0,    0,  867,  867,  867,  867,  867,
      867,  868,    0,    0,    0,  868,  868,  868,  868,  868,
      869,    0,    0,  869,  869,  869,  869,  869,  869,  870,

        0,    0,  870,  870,  870,  870,  870,  870,  871,    0,
        0,  871,  871,  871,  871,  871,  871,  872,    0,    0,
      872,  872,  872,  872,  872,  872,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
#define INITIAL 0
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "main.hh"
#include "userLevelRewritingContext.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

int braceCount;
int parenCount;
string latexCode;
#define ID_MODE 1

#define CMD_MODE 2

#define FILE_NAME_MODE 3

#define STRING_MODE 4

#define LATEX_MODE 5

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 82 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 828 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4527 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 86 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 90 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 96 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 97 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 101 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 105 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FMOD)  // needed for FileTable
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 106 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)   // needed for FileTable
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 107 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)   // needed for FileTable
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 108 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 109 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 110 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 111 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 113 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 114 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 115 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 116 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 117 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 119 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 120 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 121 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
return KW_OREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 124 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 126 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 130 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 131 "../../../src/Mixfix/lexer.ll"
return KW_XUNIFY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 132 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_CONTEXT;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_OPS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 92:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 96:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 255 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 256 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 260 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDFM)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDOM)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 270 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK


case 145:
YY_RULE_SETUP
#line 274 "../../../src/Mixfix/lexer.ll"
// eat white space
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 275 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 147:
YY_RULE_SETUP
#line 283 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 288 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 149:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
latexCode += yytext;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 303 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = latexCode.c_str();
						  return LATEX_STRING;
						}
					    }
					  latexCode += yytext;
					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  latexCode += yytext;
					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 332 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 340 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 345 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 828 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 828 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 827);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 345 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"
