/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 201
#define YY_END_OF_BUFFER 202
static yyconst short int yy_accept[1243] =
    {   0,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,    0,    0,    0,    0,  189,  189,
        0,    0,  202,  200,  198,  199,  199,   97,  200,   95,
       97,   97,   97,   95,   96,   96,   97,  200,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   15,   97,   97,   97,   97,   97,   97,   97,
      157,  200,  155,  155,  155,  157,  155,  155,  157,  200,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  103,  200,
       99,  103,  103,  101,  100,   99,  103,  200,  103,  101,

      105,  105,  104,  105,  105,  105,  105,  172,  200,  167,
      168,  172,  159,  172,  170,  158,  162,  160,  161,  172,
      200,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  169,  177,  177,  177,  177,  177,
      175,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  198,  174,  200,  199,  183,  184,
      185,  178,  182,  187,  186,  188,  189,  190,  197,  191,
      196,  196,  192,  193,  191,  194,  195,  198,   97,    0,
       97,    0,    0,    0,   97,   97,   96,    0,   97,   97,
       97,   97,   97,   97,   11,   97,   97,   97,   97,   97,

       40,   97,   97,   72,   97,   97,   97,   97,   97,   97,
       97,   59,   97,    5,   97,   97,   97,   14,   97,   71,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   35,
       69,   97,   97,   97,   97,   97,   97,   97,   97,   73,
       97,   97,   97,   97,   97,   97,   97,   97,    6,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,  157,
        0,  156,  157,    0,    0,    0,  157,  157,  151,  154,
      152,    0,  157,  157,  157,  157,  157,  146,  157,  157,
      157,  157,  145,  134,  157,  157,  157,  157,  133,  157,
      132,  157,  157,  157,  157,  143,  157,  157,  157,  139,

      157,  134,  157,  147,  157,  157,  157,  157,  157,  106,
      134,  157,  153,  103,    0,  102,  103,    0,    0,    0,
      103,  103,    0,   98,  100,    0,    5,  198,  104,    0,
        0,    0,    0,    0,  172,    0,  171,  172,    0,    0,
        0,  172,  172,  163,    0,  172,  172,  172,  172,  172,
      172,  172,  172,  165,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  164,    0,    0,  176,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  173,
        0,    0,  173,    0,    0,    0,  173,  173,    0,    0,
      173,    0,  198,  174,    0,    0,    0,  183,  179,  180,

      181,  187,  189,  191,  191,   97,    0,    2,    2,   97,
       97,   97,   64,   97,   97,   97,   97,   63,   97,   97,
       97,   97,   97,   97,   97,   97,   16,   72,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   71,   97,   97,    6,   27,   97,   97,   36,
       97,   69,   97,   97,   97,   97,   97,   97,   10,   97,
       94,   19,   97,   97,   21,   73,   97,   97,   97,   33,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   70,   97,   97,   97,   97,   97,   97,   97,  157,
        0,    2,    2,  157,  157,  144,  157,  157,  148,  157,

      157,  157,  157,  157,  157,  157,  157,  111,  157,  134,
      157,  149,  157,  157,  157,  157,  157,  157,  127,  126,
      157,  140,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  142,  103,    0,    2,    2,    0,    0,    0,
        0,    2,    2,  172,    0,    2,    2,  172,  172,  172,
      172,  172,  172,  172,  172,  166,  172,  172,  172,  172,
      172,  172,  172,  166,  172,  172,  172,  172,  172,    0,
        0,    2,    2,    0,    0,    0,  173,  173,    0,    0,
        0,    0,  173,    0,    0,    0,    0,    2,    2,    2,
        1,    2,    2,   97,   97,   97,   42,   97,   97,   97,

       97,   97,   97,   97,   49,   26,   97,   20,   97,   97,
       87,   22,   97,   97,   55,   97,   23,   97,   97,   97,
       97,    9,   25,   97,    3,   97,   97,   97,   18,   97,
        7,   97,   97,   90,   13,   97,   97,   97,   97,   15,
       97,   97,   97,   97,   97,   73,   97,   97,   34,   68,
       24,   97,   85,   97,   97,   60,   97,   97,   97,   70,
       97,    8,   97,   97,   56,   97,   97,    0,    0,    2,
        2,    2,    1,    2,    2,  157,  157,  110,  157,  157,
      122,  157,  157,  149,  157,  157,  150,  157,  157,  107,
      157,  157,  157,  112,  157,  157,  113,  157,  157,  114,

        3,  157,  157,  141,  157,  157,  121,  116,  157,  157,
      135,  157,  157,  157,  157,  157,  157,  142,    0,    0,
        2,    2,    2,    1,    2,    2,    0,    0,    1,    0,
        0,    2,    2,    2,    1,    2,    2,  172,  166,  172,
      172,  172,  172,  172,  172,  166,  172,  166,  172,  172,
      172,  172,  166,  166,  172,  172,  172,    0,    0,    2,
        2,    2,    1,    2,    2,    0,    0,  173,  173,    0,
        0,    0,    0,    0,  173,    0,    0,    0,    2,    2,
        1,    1,    1,    1,    1,    2,    2,    2,   84,   97,
       58,   88,   97,   41,   52,   97,   97,   97,   97,   97,

       97,   77,   97,   82,   97,   97,   97,   97,   97,   97,
       97,   53,   97,   75,   91,   29,   97,   97,   97,   97,
       97,   57,   17,   51,   97,   97,   12,   97,   97,   97,
       97,   97,   97,   97,   68,   97,   61,   50,   97,   97,
       37,   32,   97,   67,   86,   44,   97,   97,    2,    2,
        1,    1,    1,    1,    1,    2,    2,    2,  109,  137,
      157,  157,  157,  128,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  108,  123,  157,  157,  157,  157,
      157,  157,  157,  115,  135,  157,  119,  157,  157,  157,
      134,    2,    2,    1,    1,    1,    1,    1,    2,    2,

        2,    2,    2,    1,    1,    1,    1,    1,    2,    2,
        2,  166,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  166,    2,    2,
        1,    1,    1,    1,    1,    2,    2,    2,  173,    0,
        0,    0,    0,    0,    0,    1,    1,    1,    1,    1,
        2,    2,   38,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   79,   97,    4,
       97,   97,   91,   54,   66,   27,   97,   93,   57,   97,
       97,   97,   97,   19,   83,   48,   97,   31,   45,   97,
       97,   97,   62,   97,   97,   30,    1,    1,    1,    1,

        1,    2,    2,  157,  157,  125,  157,  157,    4,  120,
      117,  157,  157,  157,  157,  157,  157,  157,  126,  157,
      157,  157,  157,  157,  157,  157,  157,  157,    1,    1,
        1,    1,    1,    2,    2,    1,    1,    1,    1,    1,
        2,    2,  172,  172,  166,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,    1,    1,    1,    1,    1,
        2,    2,    0,    0,    0,    0,    0,    0,    1,    1,
       97,   58,   97,   43,   76,   97,   47,   97,   97,   20,
       97,   97,   81,   97,   97,   80,   65,   97,   97,   92,
       78,   97,   21,   97,   97,   74,   39,   97,    1,    1,

      157,  157,  157,  157,  157,  129,  157,  157,  157,  157,
      127,  157,  130,  157,  157,  157,  124,  157,  157,  136,
      157,    1,    1,    1,    1,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,    1,    1,    0,    0,
        0,    0,  173,   97,   97,   76,   97,   97,   26,   46,
       22,   97,   23,   97,   97,   94,   24,   97,   97,  157,
      157,  157,  157,  157,  157,  157,  157,  113,  118,  157,
      157,  157,  119,  138,  136,  157,  172,  172,  172,  172,
      172,  172,  172,  172,    0,    0,    0,  173,   97,   89,
       97,   49,   55,   18,   97,   97,   28,  157,  157,  157,

      157,  157,  157,  157,  157,  157,  131,  172,  172,  172,
      172,  172,  172,  172,    0,    0,   97,   97,  157,  157,
      157,  157,  112,  157,  116,  138,  172,  172,  172,  172,
      172,   97,  109,  110,  157,  121,  172,   50,  157,  172,
      125,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst int yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static yyconst short int yy_base[1330] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  716, 8149,  174, 8149, 8149,  309,  317, 8149,
      341, 8149,  361,  371,  373,  375,  379,  392,  385,  411,
      423,  434,  445,  459,  447,  481,  457,  484,  487,  507,
      510,  514,  518,  542,  581,  550,  553,  561,  574,  572,
      521,  321, 8149,  605,  607,  620,  628,  634,  640,  647,
      654,  693,  658,  672,  666,  669,  731,  695,  717,  742,
      753,  766,  774,  777,  780,  729,  788,  811,  813,  324,
     8149,  819,  825,  850,  852,  817,  855,  872,  863, 8149,

     8149,  895, 8149,  909,  925,  696,  691,  925,  366, 8149,
     8149,  927, 8149,  929,  933,  947,  953, 8149, 8149,  951,
      970,  973,  979,  977,  991, 1012, 1017, 1025, 1039, 1050,
     1063, 1065, 1071, 1020, 8149, 8149, 1076,  372, 1094, 1096,
     1099, 1107, 1116, 1162,  400, 1119, 1125, 1130, 1138, 1151,
     1156, 1182, 1187, 1193, 1231, 8149, 1245, 1259,    0, 8149,
     8149, 8149,  595,    0, 8149, 8149,    0, 8149, 8149,    0,
     8149, 8149, 8149, 8149,  676, 8149, 8149,  188,  664,  403,
      740, 1231,  478,  702,  837, 1068, 1250, 1259,  865,  939,
     1148, 1159,  988,  883, 1073, 1190, 1201, 1263, 1268, 1270,

     1281, 1283, 1291, 1295, 1302, 1305, 1310, 1316, 1320, 1323,
     1334, 1330, 1344, 1349, 1341, 1354, 1363, 1367, 1374, 1376,
     1385, 1382, 1387, 1389, 1397, 1400, 1409, 1418, 1421, 1427,
     1429, 1431, 1439, 1454, 1433, 1442, 1457, 1460, 1475, 1462,
     1484, 1487, 1490, 1493, 1502, 1512, 1523, 1527, 1531, 1533,
     1535, 1538, 1542, 1556, 1562, 1565, 1569, 1583, 1576, 1588,
      485, 1596, 1601, 1609,  508,  665, 1616, 1620, 1628, 1631,
     1634, 1654, 1657, 1661, 1663, 1675, 1689, 1697, 1700, 1708,
     1711, 1726, 1734, 1737, 1745, 1739, 1759, 1772, 1770, 1783,
     1785, 1791, 1804, 1809, 1815, 1817, 1814, 1823, 1841, 1849,

     1853, 1864, 1867, 1872, 1887, 1890, 1892, 1898, 1913, 1916,
     1918, 1921, 1924, 1936,  548, 1942, 1947, 1960,  551,  661,
     1967, 1971, 1996, 8149, 2000, 1967, 1979, 2025, 8149, 2039,
      639,  627,  627,  604, 2039,  568, 2041, 2043, 2025,  601,
      610, 2061, 2065, 2067, 2074, 2085, 2093, 2088, 2090, 2096,
     2122, 2125, 2130, 2128, 2143, 2151, 2156, 2164, 2169, 2175,
     2189, 2197, 2208, 2220, 2222, 2228, 2233,  617, 2246, 2248,
     2266,  625,  600, 2269, 2277, 2286,  952, 2289, 2297, 2302,
     2308, 2322, 2328, 2333, 2341, 2347, 2352, 2360, 2374, 2378,
     2382, 2386, 2417, 8149, 2431,  589,  580,    0, 8149, 8149,

     8149,    0,    0,    0, 8149, 1649,  629, 2446, 2500, 1686,
     1998, 1859, 1671, 2161, 2098, 2401, 2243, 2117, 2258, 2419,
     2450, 2195, 2439, 2416, 2457, 2464, 2468, 2472, 2482, 2477,
     2503, 2510, 2507, 2518, 2514, 2533, 2536, 2521, 2539, 2541,
     2543, 2551, 2563, 2569, 2572, 2574, 2581, 2577, 2583, 2587,
     2592, 2605, 2610, 2614, 2617, 2619, 2624, 2628, 2642, 2648,
     2651, 2654, 2656, 2662, 2666, 2674, 2680, 2687, 2689, 2693,
     2698, 2700, 2707, 2712, 2718, 2720, 2725, 2730, 2732, 2750,
     2740, 2759, 2762, 2768, 2771, 2773, 2780, 2782, 2777, 2800,
      653, 2826, 2880, 2803, 2829, 2837, 2860, 2826, 2852, 2884,

     2898, 2881, 2916, 2927, 2929, 2948, 2951, 2953, 2971, 2974,
     2977, 2979, 2982, 3000, 3008, 3011, 3013, 3019, 3031, 3034,
     3046, 3052, 3057, 3065, 3070, 3076, 3088, 3096, 3102, 3110,
     3115, 3121, 3133, 3141,  694, 3178, 3232,  570,  557,  554,
      549,  535,  532, 3144,  704, 3286, 3340, 3155, 3147, 3181,
     3196, 3192, 3159, 3219, 3243, 3254, 3266, 3304, 3258, 3300,
     3306, 3308, 3343, 3312, 3351, 3362, 3364, 3370, 3388, 3391,
      705, 3417, 3471, 3420, 3517, 3394, 3428, 3431, 3442, 3453,
     3475, 3489, 3493,  533,  511,  737,  521,    0,  499, 1221,
     3565,  364, 3619, 3023, 3184, 3310, 2834, 3225, 3464, 3497,

     3502, 3397, 3526, 3522, 3349, 3545, 3559, 3383, 3240, 3423,
     3568, 3572, 3574, 3577, 3586, 3583, 3613, 3622, 3627, 3625,
     3633, 3637, 3640, 3651, 3655, 3658, 3666, 3669, 3673, 3677,
     3680, 3687, 3692, 3700, 3705, 3707, 3710, 3712, 3725, 3715,
     3733, 3735, 3737, 3740, 3743, 3745, 3763, 3768, 3770, 3773,
     3775, 3777, 3782, 3795, 3800, 3803, 3805, 3807, 3814, 3825,
     3827, 3833, 3835, 3838, 3845, 3847, 3858,  741,  499,  458,
     3881,  442, 3904,  448, 3958, 3870, 3891, 3885, 3915, 3918,
     3926, 3929, 3940, 3962, 3965, 3980, 3983, 3991, 3994, 4009,
     4013, 4017, 4021, 4040, 4042, 4044, 4048, 4067, 4069, 4071,

     4090, 4095, 4098, 4092, 4116, 4118, 4121, 4124, 4142, 4145,
     4153, 4167, 4171, 4156, 4179, 4197, 4199, 4202,  771,  454,
      430, 4229,  421, 4252,  478, 4306,  429,  404,    0,  775,
      415,  396, 4236,  388, 4360,  651, 4414, 4225, 4239, 4263,
     4266, 4278, 4274, 4309, 4313, 4337, 4332, 4340, 4371, 4374,
     4317, 4379, 4394, 4418, 4426, 4421, 4432,  807,  405,  386,
     4462,  362, 4485,  839, 4539, 4467, 1012, 4465, 4488, 4506,
     4508, 4542, 4510, 4521, 4546, 4550, 4561, 4564, 4594,  916,
        0, 4617, 4606,  332, 4671, 4598,  320, 4631, 3866, 4624,
     3872, 3968, 4015, 3897, 4046, 4271, 4368, 4574, 4621, 4175,

     4636, 4077, 4127, 4366, 4648, 4674, 4677, 4680, 4689, 4436,
     4692, 4703, 4707, 4710, 4713, 4717, 4721, 4725, 4735, 4739,
     4743, 4748, 4750, 4753, 4757, 4763, 4771, 4776, 4781, 4789,
     4796, 4799, 4801, 4804, 4814, 4822, 4827, 4829, 4833, 4835,
     4837, 4840, 4847, 4858, 4860, 4862, 4865, 4869, 4892, 1576,
     4915, 4904,    0,  313, 4969, 4896, 5023, 4929, 4919, 4937,
     4939, 4951, 4972, 4980, 4983, 4995, 5010, 5034, 5037, 5042,
     5045, 5063, 5066, 5069, 5081, 5084, 5092, 5095, 5103, 5107,
     5115, 5121, 5129, 5118, 5141, 5143, 5155, 5163, 5166, 5168,
     5187, 5006, 1648, 5213, 5197,    0,  306, 5267, 5197, 5321,

     5224, 5239, 2817, 5375, 5251, 5429,  296, 5483, 5273, 5537,
     5252, 5289, 5254, 5285, 5324, 5332, 5347, 5344, 5287, 5355,
     5386, 5389, 5394, 5400, 5432, 5440, 5451, 5443, 5281, 3533,
     5591, 5494, 5645,  289, 5699, 5382, 5753, 5495, 5455, 5497,
     5503, 5540, 5548, 5463, 5559, 5605, 4266, 5572, 5807, 5620,
     5629, 4320, 4872, 5174, 5563, 4933, 5518, 5329, 5609, 5622,
     5572, 4977, 5005, 5632, 5398, 5651, 5653, 5357, 5655, 5657,
     5665, 5663, 5676, 5703, 5705, 5707, 5709, 5711, 5713, 5717,
     5740, 5747, 5759, 5765, 5771, 5773, 5778, 5801, 5810, 5813,
     5816, 5819, 5821, 5825, 5828, 5839, 5848, 4499, 5863,    0,

     5874, 5875, 4687, 5877, 5880, 5883, 5885, 5903, 5909, 5911,
     5915, 5917, 5930, 5935, 5943, 5941, 5949, 5961, 5973, 5975,
     5979, 5993, 6001, 6004, 6006, 6012, 6024, 6027, 6054, 5037,
     6061,    0, 6055, 6072, 5989, 6083, 6090, 6088,    0, 6100,
     6104, 6115, 6108, 6112, 6120, 6131, 6134, 6139, 6145, 6157,
     6165, 6168, 6170, 6183, 6189, 6209, 6199, 6209,    0, 6233,
     6234, 6223, 6220, 6235, 6243, 6255, 6257, 6263, 6283, 6246,
     6268, 5938, 6249, 6143, 6282, 6287, 6290, 6295, 6308, 6305,
     6315, 6319, 6323, 6326, 6328, 6337, 6346, 6349, 6351, 6355,
     6358, 6360, 6364, 6369, 6378, 6382, 6384, 6387, 6410, 6417,

     6390, 6413, 6418, 6421, 6426, 6432, 6444, 6447, 6452, 6455,
     6458, 6470, 6478, 6484, 6490, 6492, 6496, 6498, 6516, 6519,
     6522, 6549, 6533, 6550, 6564, 6553, 6561, 6565, 6567, 6579,
     6592, 6597, 6603, 6615, 6623, 6626, 6593, 6643, 6629, 6649,
     6655, 6657, 6669, 6589, 6661, 6667, 6679, 6682, 6687, 6690,
     6694, 6701, 6708, 6712, 6714, 6719, 6721, 6723, 6726, 6741,
     6745, 6747, 6768, 6770, 6772, 6783, 6791, 6795, 6797, 6809,
     6820, 6822, 6828, 6841, 6843, 6849, 6854, 6862, 6867, 6875,
     6886, 6889, 6894, 6907, 6909, 6913, 6915, 6928, 6936, 6801,
     6938, 6830, 6881, 6940, 6942, 6949, 6951, 6962, 6970, 6973,

     6976, 6981, 6995, 7000, 7013, 7019, 7024, 7027, 7032, 7045,
     7047, 7051, 7069, 7074, 7077, 7092, 7087, 7089, 7100, 7113,
     7124, 7126, 7132, 7137, 7151, 7155, 7159, 7163, 7177, 7182,
     7188, 7190, 7202, 7213, 7215, 7226, 7228, 7056, 7234, 7239,
     7252, 8149, 7279, 7290, 7301, 7312, 7323, 7330, 7338, 7345,
     7353, 7360, 7368, 7375, 7383, 7390, 7398, 7409, 7420, 7431,
     7441, 7447, 7454, 7461, 7468, 7475, 7483, 7494, 7502, 7513,
     7521, 7532, 7543, 7551, 7562, 7570, 7581, 7592, 7603, 7614,
     7625, 7636, 7647, 7658, 7669, 7680, 7691, 7702, 7713, 7724,
     7735, 7746, 7757, 7768, 7779, 7790, 7801, 7812, 7823, 7834,

     7841, 7852, 7863, 7874, 7885, 7896, 7907, 7918, 7929, 7940,
     7951, 7958, 7969, 7980, 7991, 8002, 8013, 8024, 8031, 8042,
     8053, 8064, 8075, 8086, 8093, 8104, 8115, 8126, 8137
    } ;

static yyconst short int yy_def[1330] =
    {   0,
     1242,    1, 1242,    3, 1242,    5, 1243, 1243, 1242,    9,
     1242,   11,   11,   13, 1244, 1244, 1245, 1245, 1246, 1246,
     1247, 1247, 1242, 1242, 1242, 1242, 1242, 1248, 1249, 1242,
     1248, 1242, 1248, 1248, 1248, 1248, 1248, 1242, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1250, 1251, 1242, 1250, 1250, 1250, 1250, 1250, 1250, 1242,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1252, 1253,
     1242, 1252, 1252, 1252, 1252, 1252, 1252, 1242, 1252, 1242,

     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1254, 1255, 1242,
     1242, 1254, 1242, 1254, 1254, 1254, 1254, 1242, 1242, 1254,
     1242, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1242, 1242, 1256, 1257, 1256, 1256,
     1256, 1256, 1242, 1256,  144, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1242, 1242, 1242, 1242, 1258, 1242,
     1242, 1242, 1242, 1259, 1242, 1242, 1260, 1242, 1242, 1261,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1248, 1249,
     1248, 1262, 1249, 1249, 1248, 1248, 1248, 1242, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,

     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1250,
     1251, 1250, 1250, 1263, 1251, 1251, 1250, 1250, 1250, 1250,
     1250, 1242, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250,   77, 1250, 1250, 1250,

     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1252, 1253, 1252, 1252, 1264, 1253, 1253,
     1252, 1252, 1242, 1242, 1252, 1242, 1252, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1254, 1255, 1254, 1254, 1265, 1255,
     1255, 1254, 1254, 1254, 1242, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1256, 1257, 1256, 1256,
     1266, 1257, 1257, 1256, 1256, 1242,  144, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1242, 1242, 1242, 1242, 1242, 1258, 1242, 1242,

     1242, 1259, 1260, 1261, 1242, 1248, 1267, 1268, 1268, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1250,
     1269, 1270, 1270, 1250, 1250, 1250, 1250,   77, 1250, 1250,

     1250,   77, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1252, 1271, 1272, 1272, 1242, 1242, 1242,
     1242, 1273, 1273, 1254, 1274, 1275, 1275, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1256,
     1276, 1277, 1277, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1242, 1242, 1267, 1267, 1273,  409, 1278,
     1279,  409, 1280, 1248, 1248, 1248, 1248, 1248, 1248, 1248,

     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1269, 1269,  493,
     1281,  493, 1282,  493, 1283, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,

     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1271, 1271,
      537, 1284,  537, 1285,  537, 1286, 1242, 1242, 1287, 1274,
     1274,  547, 1288,  547, 1289,  547, 1290, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1276, 1276,  573,
     1291,  573, 1292,  573, 1293, 1256,  575, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1278, 1278,
     1287, 1279, 1294,  782, 1295, 1273,  409, 1296, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,

     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1281, 1281,
     1282, 1297,  851,  851, 1298, 1273, 1299, 1300, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1284, 1284, 1285, 1302,  894,  894, 1303, 1273, 1304,

     1305, 1306, 1306, 1307, 1308, 1307,  906, 1309, 1273, 1310,
     1311, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1313, 1313,
     1314, 1315, 1314,  933, 1316, 1273, 1317, 1318, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1320, 1320, 1321, 1322, 1323,
     1324, 1324, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1297, 1297, 1321,  851,

     1326, 1300, 1300, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1302, 1302,
     1321,  894, 1327, 1305, 1305, 1308, 1308, 1321,  906, 1328,
     1311, 1311, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1315, 1315, 1321,  933, 1329,
     1318, 1318, 1319, 1319, 1319, 1319, 1319, 1319, 1323, 1323,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1326, 1326,

     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1327, 1327, 1328, 1328, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1329, 1329, 1319, 1319,
     1319, 1319, 1319, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1319, 1319, 1319, 1319, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1301, 1301, 1301,

     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1319, 1319, 1325, 1325, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1312, 1312, 1312, 1312,
     1312, 1325, 1301, 1301, 1301, 1301, 1312, 1325, 1301, 1312,
     1301,    0, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,

     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242
    } ;

static yyconst short int yy_nxt[8206] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1058,  160,  161,  180,  161,  160,
      160, 1038,  162,  160,  161,  179,  161,  160,  160,  260,
      162, 1031,  314,  181,  182,  137,  163,  137,  999,  184,
      589,  137,  137,  266,  163,  137,  320,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166,  948,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  335,  186,  169,  173,  174,  180,
      367,  180,  760,  180,  589,  181,  182,  180,  341,  786,
      175,  187,  187,  180,  373,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181,  760,  758,  732,  181,
      182,  179,  189,  181,  190,  181,  732,  730,  324,  180,
      176,  177,  191,  169,  169,  184,  171,  169,  172,  169,
      367,  180,  169,  173,  174,  181,  182,  367,  367,  382,
      324,  721,  180,  367,  181,  181,  175,  181,  182,  383,
      721,  192,  195,  180,  193,  180,  719,  194,  181,  182,
      196,  197,  670,  198,  200,  180,  199,  180,  670,  181,
      182,  181,  182,  856,  201,  212,  176,  177,  670,  169,
      202,  181,  182,  181,  182,  203,  179,  204,  205,  180,
      213,  215,  180,  260,  206,  180,  207,  208,  721,  209,

      184,  668,  210,  899,  211,  181,  182,  266,  181,  182,
      216,  181,  182,  219,  220,  180,  260,  221,  180,  589,
      214,  222,  180,  586,  217,  394,  180,  223,  218,  261,
      266,  181,  182,  224,  181,  182,  262,  227,  181,  182,
      232,  228,  181,  182,  394,  263,  264,  225,  229,  230,
      180,  231,  729,  226,  233,  729,  314,  234,  180,  314,
      235,  180,  236,  329,  237,  329,  181,  182,  238,  180,
      320,  728,  239,  320,  181,  182,  335,  181,  182,  240,
      180,  727,  180,  249,  250,  181,  182,  253,  241,  180,
      341,  254,  252,  251,  585,  255,  181,  182,  181,  182,

      584,  399,  372,  400,  258,  181,  182,  256,  257,  335,
      259,  242,  340,  261,  243,  261,  267,  401,  543,  244,
      262,  245,  262,  341,  246,  367,  247,  248,  261,  263,
      264,  263,  264,  367,  268,  262,  261,  406,  542,  373,
      269,  541,  261,  262,  263,  264,  270,  373,  261,  262,
      540,  587,  263,  264,  271,  262,  263,  263,  263,  264,
      263,  490,  261,  319,  263,  272,  261,  265,  263,  262,
      263,  732,  180,  262,  261,  669,  909,  261,  263,  264,
      261,  262,  263,  264,  262,  405,  405,  262,  181,  182,
      263,  264,  281,  263,  264,  287,  263,  264,  273,  263,

      263,  261,  534,  261,  183,  334,  285,  333,  262,  286,
      262,  282,  544,  570,  283, 1242,  720,  263,  264,  263,
      264,  284,  293,  274, 1242,  261,  731,  759,  405,  405,
      275,  276,  262,  277, 1242,  278,  279,  261,  280,  261,
     1242,  263,  264,  294,  262,  406,  262,  295,  180,  490,
      261, 1242, 1242,  263,  264,  263,  264,  262, 1242,  587,
      288,  261,  289,  669,  181,  188,  263,  264,  262,  296,
      290, 1242,  297,  311,  261,  291,  292,  263,  264,  534,
      299,  262,  261,  544, 1242,  261,  298, 1242,  261,  262,
      263,  264,  262,  720,  300,  262,  261,  731,  263,  264,

     1242,  263,  264,  262,  263,  264,  301, 1242,  303,  302,
      309,  304,  263,  264,  312,  570, 1242,  305,  306,  261,
      310,  315,  307,  308, 1242,  315,  262,  315,  316,  759,
      321,  313,  316,  315,  316,  263,  264,  317,  318,  322,
      316,  317,  318,  317,  318,  180, 1242, 1242,  408,  317,
      318,  323,  324,  323,  323,  323,  323, 1242,  315,  760,
      315,  181,  182,  315,  936,  316, 1242,  316,  325,  325,
      316,  315, 1242,  180,  317,  318,  317,  318,  316,  317,
      326,  317,  317, 1242, 1242,  317, 1242,  317,  318,  181,
      182,  180, 1242,  317, 1242,  317,  328,  329,  330,  330,

      328,  328,  327, 1242, 1242,  410,  331,  181,  182,  332,
      330,  329,  330,  330,  330,  330,  588,  416,  183,  588,
      331, 1242,  183,  332,  317,  317,  330,  329,  330,  330,
      330,  330, 1242,  336, 1242,  336,  331,  336,  342,  332,
      337,  336,  337,  343,  337, 1242, 1242,  180,  337,  338,
      339,  338,  339,  338,  339,  336, 1242,  338,  339,  336,
     1242,  336,  337,  181,  182, 1242,  337, 1242,  337, 1242,
     1242,  338,  339,  344, 1242,  338,  345,  338,  339,  338,
      338,  336,  367,  338, 1242,  336,  411,  336,  337,  367,
      367,  338,  337,  338,  337,  367,  180,  338,  339,  336,

     1242,  338,  339,  338,  339, 1242,  337, 1242, 1242, 1242,
     1242,  349,  181,  182, 1242,  338,  339,  346,  415,  347,
      336, 1242,  338,  338,  348,  336, 1242,  337,  336, 1242,
     1242,  350,  337,  336,  351,  337,  338,  339,  352, 1242,
      337,  338,  339,  367,  338,  339,  353,  336,  354,  338,
      339,  356,  367, 1242,  337,  357,  367,  940,  336,  367,
      366, 1242,  355,  338,  339,  337, 1242, 1242, 1242,  358,
     1242,  336, 1242,  336,  338,  339,  180,  360,  337,  336,
      337,  180,  409,  359,  368, 1242,  337,  338,  339,  338,
      339,  369,  181,  182, 1242,  338,  339,  181,  182,  363,

      370,  371,  368,  361,  368,  374,  362,  368, 1242,  369,
      375,  369,  364, 1242,  369,  368,  365, 1242,  370,  371,
      370,  371,  369,  370,  371,  370,  370,  368, 1242,  370,
     1242,  370,  376,  368,  369, 1242, 1242,  370,  368,  370,
      369, 1242, 1242,  370,  371,  369,  368, 1242, 1242,  370,
      371, 1242,  385,  369,  370,  371,  180,  380,  384,  368,
     1242, 1242,  370,  371,  368, 1242,  369,  180,  370,  370,
      368,  369,  181,  182,  386,  370,  371,  369, 1242,  387,
      370,  371,  412,  181,  182,  413,  370,  371,  414, 1242,
      368, 1242,  377,  380,  388,  368, 1242,  369,  180,  378,

      379,  368,  369, 1242,  380,  381,  370,  371,  369,  180,
     1242,  370,  371, 1242,  181,  182, 1242,  370,  371,  392,
      417,  588,  389, 1242,  588,  181,  182,  183,  390,  589,
      418,  391,  393,  394,  395,  395,  393,  393, 1242,  407,
      181,  181,  396,  780,  181,  397,  395,  394,  395,  395,
      395,  395,  181, 1242,  181, 1242,  396, 1242,  180,  397,
      395,  394,  395,  395,  395,  395,  187,  187,  181,  181,
      396,  180,  181,  397,  181,  182,  180, 1242,  180, 1242,
      181, 1242,  181,  181,  181, 1242, 1242,  181,  182,  180,
     1242,  180,  181,  182,  181,  182, 1242,  424,  423,  180,

      419,  420,  421,  180, 1242,  181,  182,  181,  182,  422,
      180,  181,  181,  180,  425,  181,  182, 1242,  180,  181,
      182,  426,  427, 1242,  180, 1242,  181,  182,  180,  181,
      182,  180,  429,  430,  181,  182,  432, 1242,  180,  428,
      181,  182,  180, 1242,  181,  182, 1242,  181,  182,  180,
      431, 1242,  180,  435,  181,  182,  433,  180,  181,  182,
     1242, 1242,  180,  434, 1242,  181,  182,  249,  181,  182,
      436,  180, 1242,  181,  182,  180, 1242,  437,  181,  182,
      438,  439,  180, 1242,  180, 1242, 1242,  181,  182,  440,
      180,  181,  182,  180, 1242,  180, 1242,  180,  181,  182,

      181,  182, 1242,  441, 1242,  180,  181,  182,  180,  181,
      182,  181,  182,  181,  182, 1242,  446,  180, 1242,  442,
      443,  181,  182,  444,  181,  182,  180, 1242, 1242,  180,
     1242,  445,  447,  181,  182,  180, 1242,  180,  449,  180,
      448,  180,  181,  182,  249,  181,  182,  180, 1242,  450,
      180,  181,  182,  181,  182,  181,  182,  181,  182, 1242,
     1242,  451,  180,  181,  182,  180,  181,  182,  180, 1242,
      180,  459, 1242,  452,  453, 1242,  454,  458,  181,  182,
      455,  181,  182,  180,  181,  182,  181,  182,  456, 1242,
     1242,  460,  180, 1242,  457,  180, 1242, 1242,  180,  181,

      182,  180, 1242, 1242,  462,  461,  466, 1242,  181,  182,
      180,  181,  182,  468,  181,  182, 1242,  181,  182,  463,
      180,  467,  464,  465,  469, 1242,  181,  182, 1242, 1242,
      471,  180,  470,  472, 1242,  180,  181,  182, 1242,  180,
     1242,  180,  474,  180, 1242,  473,  180,  181,  182,  475,
      180,  181,  182,  476,  477,  181,  182,  181,  182,  181,
      182,  480,  181,  182,  180,  478,  181,  182, 1242, 1242,
      180,  479,  481,  180, 1242, 1242,  588,  180,  265,  588,
      181,  182,  265, 1242,  180,  482,  181,  182, 1242,  181,
      182,  180,  484,  181,  182,  485,  261,  488, 1242,  483,

      181,  182,  489,  262,  261,  486, 1242,  181,  182,  261,
     1242,  262,  263,  264,  487, 1242,  262,  491,  263,  263,
      263,  264,  263, 1242,  261,  263,  272,  492,  261, 1242,
      263,  262,  263, 1242,  493,  262,  261, 1242, 1242,  261,
      263,  264,  261,  262,  263,  264,  262, 1242,  588,  262,
      319,  588,  263,  264,  319,  263,  264,  180,  263,  264,
     1242,  263,  263,  263,  263,  261, 1242,  263, 1242,  261,
     1242,  261,  262,  181,  182,  263,  262,  263,  262,  180,
     1242,  263,  264,  261, 1242,  263,  264,  263,  264,  495,
      262, 1242, 1242, 1242,  180,  181,  182,  261, 1242,  263,

      264,  494,  496,  278,  262,  261,  263,  263,  261, 1242,
      181,  182,  262,  263,  264,  262,  261, 1242, 1242,  261,
     1242,  263,  264,  262,  263,  264,  262,  497,  498,  594,
     1242, 1242,  263,  264,  261,  263,  264,  499, 1242, 1242,
     1242,  262,  261, 1242, 1242,  261, 1242,  261,  500,  262,
      263,  264,  262,  261,  262,  502,  501, 1242,  263,  264,
      262,  263,  264,  263,  264, 1242, 1242,  261, 1242,  263,
      264, 1242, 1242, 1242,  262, 1242, 1242, 1242,  261,  505,
      261, 1242,  503,  263,  264,  262,  507,  262,  504, 1242,
      508,  261, 1242,  261,  263,  264,  263,  264,  262,  261,

      262, 1242,  509, 1242,  506, 1242,  262,  263,  264,  263,
      264,  510,  261, 1242, 1242,  263,  264,  261, 1242,  262,
     1242,  511, 1242,  261,  262,  261, 1242, 1242,  263,  264,
      262,  261,  262,  263,  264, 1242,  513, 1242,  262,  263,
      264,  263,  264,  260,  512,  260,  515,  263,  264,  261,
     1242, 1242,  516,  260,  514,  519,  262,  261,  517,  518,
     1242,  261, 1242,  521,  262,  263,  264,  180,  262, 1242,
     1242, 1242,  261,  263,  264,  261,  520,  263,  264,  262,
      261, 1242,  262,  181,  182,  596, 1242,  262,  263,  264,
      523,  263,  264,  522,  524,  261,  263,  264,  261,  526,

      261, 1242,  262, 1242,  525,  262,  261,  262, 1242, 1242,
     1242,  263,  264,  262,  263,  264,  263,  264, 1242, 1242,
      528,  261,  263,  264,  261,  530,  261, 1242,  262,  261,
      527,  262,  261,  262, 1242,  529,  262,  263,  264,  262,
      263,  264,  263,  264,  315,  263,  264, 1242,  263,  264,
      315,  316,  532, 1242, 1242,  315,  531,  316, 1242, 1242,
      317,  318,  316, 1242,  533, 1242,  317,  318,  535,  317,
      317,  317,  326,  317, 1242,  315,  317,  317,  536,  315,
      317,  317,  316,  317, 1242,  537,  316,  315,  317, 1242,
      317,  317,  318, 1242,  316,  317,  318,  323,  324,  323,

      323,  323,  323,  317,  318, 1242,  180,  538,  315, 1242,
      539, 1242,  317,  317, 1242,  316,  325,  325, 1242,  317,
      317, 1242,  181,  182,  317,  318,  328,  329,  330,  330,
      328,  328,  595,  545,  338,  338,  331, 1242,  338,  332,
      330,  329,  330,  330,  330,  330,  338,  336,  338,  336,
      331,  336, 1242,  332,  337, 1242,  337, 1242,  337, 1242,
     1242, 1242, 1242,  338,  339,  338,  339,  338,  345,  336,
     1242, 1242,  546,  336, 1242,  336,  337,  338,  338,  547,
      337, 1242,  337,  338,  338,  338,  339,  338, 1242,  338,
      339,  338,  339,  336, 1242,  338,  336,  338,  336, 1242,

      337,  336, 1242,  337,  336,  337,  180, 1242,  337,  338,
      339,  337,  338,  339,  338,  339, 1242,  338,  339, 1242,
      338,  339,  181,  182,  598,  180,  338,  338,  551,  548,
      336,  549,  550,  336, 1242,  552,  336,  337,  336,  553,
      337,  181,  182,  337, 1242,  337,  338,  339,  556,  338,
      339,  336,  338,  339,  338,  339, 1242, 1242,  337,  336,
      557, 1242,  554, 1242,  336, 1242,  337,  338,  339,  180,
      555,  337,  336,  558, 1242,  338,  339,  336, 1242,  337,
      338,  339, 1242,  336,  337,  181,  182,  560,  338,  339,
      337, 1242, 1242,  338,  339, 1242,  559,  336, 1242,  338,

      339,  556,  561,  180,  337,  336, 1242, 1242,  562,  563,
      564,  597,  337,  338,  339, 1242,  336, 1242, 1242,  181,
      182,  338,  339,  337, 1242, 1242,  565,  566,  336, 1242,
      336, 1242,  338,  339,  607,  337,  336,  337, 1242, 1242,
      567,  368, 1242,  337,  338,  339,  338,  339,  369, 1242,
      568,  180,  338,  339,  368, 1242,  368,  370,  371, 1242,
     1242,  369, 1242,  369, 1242,  569,  180,  181,  182,  600,
      370,  371,  370,  376,  571,  370,  370,  368, 1242,  370,
      572, 1242,  181,  182,  369,  368, 1242,  370, 1242,  370,
     1242,  573,  369,  370,  371,  370,  370,  368,  601,  370,

     1242,  370,  371, 1242,  369,  368, 1242,  370, 1242,  370,
      368, 1242,  369,  370,  371,  574,  368,  369,  370,  370,
     1242,  370,  371,  369,  380, 1242,  370,  371, 1242, 1242,
      368, 1242,  370,  371, 1242, 1242,  368,  369,  370,  370,
     1242,  368, 1242,  369, 1242,  380,  370,  371,  369,  368,
     1242,  575,  370,  371, 1242,  368,  369,  370,  371, 1242,
      368,  577,  369, 1242, 1242,  370,  371,  369,  368, 1242,
     1242,  370,  371,  576, 1242,  369,  370,  371, 1242,  578,
     1242,  380,  368, 1242,  370,  371,  368, 1242, 1242,  369,
      368, 1242, 1242,  369,  368, 1242,  380,  369,  370,  371,

      579,  369,  370,  371, 1242,  581,  370,  371, 1242,  180,
      370,  371, 1242, 1242, 1242, 1242,  582,  580,  393,  394,
      395,  395,  393,  393,  180,  181,  182,  180,  396,  583,
     1242,  397,  395,  394,  395,  395,  395,  395,  599, 1242,
      181,  182,  396,  181,  182,  397,  588,  180, 1242,  588,
     1242, 1242, 1242, 1242,  590,  588,  588,  602,  180,  588,
      603, 1242,  609,  181,  182,  180,  591,  588,  608,  588,
      592,  593,  180, 1242,  181,  182,  180, 1242,  604,  605,
      180,  181,  182, 1242, 1242,  180, 1242,  610,  181,  182,
      180, 1242,  181,  182, 1242,  606,  181,  182,  588,  588,

      588,  181,  182,  588, 1242,  611,  181,  182,  590,  588,
      588,  180, 1242,  588,  613,  180, 1242, 1242,  180, 1242,
      591,  588,  180,  588,  592,  593,  180,  181,  182,  180,
      612,  181,  182,  614,  181,  182,  249, 1242,  181,  182,
     1242,  180,  181,  182,  180,  181,  182,  180, 1242,  180,
      620,  180,  588,  588, 1242,  615,  616,  181,  182,  180,
      181,  182,  617,  181,  182,  181,  182,  181,  182,  621,
      622,  180, 1242,  619,  618,  181,  182,  180, 1242,  624,
      180, 1242,  180, 1242,  623,  180, 1242,  181,  182,  180,
     1242,  180, 1242,  181,  182,  180,  181,  182,  181,  182,

      180,  181,  182,  626, 1242,  181,  182,  181,  182,  625,
      630,  181,  182,  180, 1242,  629,  181,  182,  180, 1242,
      627,  631,  180, 1242,  628,  180, 1242,  180, 1242,  181,
      182, 1242,  180, 1242,  181,  182,  180, 1242,  181,  182,
      632,  181,  182,  181,  182, 1242,  635,  634,  181,  182,
      180, 1242,  181,  182,  633,  637,  180, 1242,  636,  180,
     1242,  639,  180, 1242,  180, 1242,  181,  182, 1242,  638,
      180, 1242,  181,  182,  180,  181,  182, 1242,  181,  182,
      181,  182,  180, 1242, 1242,  641,  181,  182,  180, 1242,
      181,  182,  644,  640, 1242,  180, 1242,  180,  181,  182,

      642,  180,  643, 1242,  181,  182,  180, 1242,  180,  645,
      646,  181,  182,  181,  182,  180, 1242,  181,  182,  648,
      180, 1242,  181,  182,  181,  182,  180, 1242,  180,  249,
      647,  181,  182,  180, 1242, 1242,  181,  182,  180, 1242,
      180, 1242,  181,  182,  181,  182,  649, 1242,  180,  181,
      182, 1242,  650, 1242,  181,  182,  181,  182,  180, 1242,
      651,  653,  656,  652,  181,  182,  657,  180,  655,  654,
      180,  659, 1242, 1242,  181,  182,  180, 1242,  658,  180,
     1242,  180, 1242,  181,  182,  180,  181,  182,  180,  661,
      180, 1242,  181,  182, 1242,  181,  182,  181,  182, 1242,

     1242,  181,  182,  660,  181,  182,  181,  182,  261, 1242,
      664,  261, 1242,  665,  663,  262,  662,  588,  262,  340,
      588,  666,  667,  340,  263,  264,  588,  263,  264,  588,
     1242, 1242, 1242, 1242,  671,  588,  588,  261, 1242,  588,
     1242,  672,  180,  676,  262,  261,  673,  588, 1242,  588,
      674,  675,  262,  263,  264,  260, 1242,  679,  181,  182,
      261,  263,  264, 1242, 1242,  260, 1242,  262,  261, 1242,
      680,  260, 1242,  677, 1242,  262,  263,  264,  588,  588,
      588, 1242, 1242,  588,  263,  264, 1242, 1242,  671,  588,
      588, 1242,  261,  588, 1242,  672, 1242, 1242,  678,  262,

      673,  588, 1242,  588,  674,  675,  261, 1242,  263,  264,
      260, 1242,  683,  262, 1242, 1242, 1242, 1242, 1242,  512,
      260,  684,  263,  264,  261,  685,  686,  681,  687, 1242,
     1242,  262,  588,  588, 1242,  261, 1242,  261, 1242, 1242,
      263,  264,  262,  682,  262, 1242,  688, 1242, 1242, 1242,
     1242,  263,  264,  263,  264, 1242,  261, 1242, 1242,  261,
     1242,  261, 1242,  262, 1242,  689,  262,  690,  262, 1242,
     1242, 1242,  263,  264, 1242,  263,  264,  263,  264,  261,
      691,  692,  261, 1242,  693,  261,  262,  261, 1242,  262,
      261, 1242,  262, 1242,  262,  263,  264,  262,  263,  264,

     1242,  263,  264,  263,  264, 1242,  263,  264,  261,  694,
      695,  696,  698, 1242, 1242,  262,  261, 1242, 1242,  261,
      697,  261, 1242,  262,  263,  264,  262,  261,  262, 1242,
      699,  180,  263,  264,  262,  263,  264,  263,  264,  261,
     1242, 1242,  261,  263,  264,  703,  262,  181,  182,  262,
     1242,  701, 1242,  700,  261,  263,  264,  702,  263,  264,
      261,  262, 1242, 1242,  705,  261, 1242,  262,  789, 1242,
      263,  264,  262,  261, 1242,  704,  263,  264,  261,  706,
      262,  263,  264, 1242,  261,  262, 1242, 1242, 1242,  263,
      264,  262, 1242,  708,  263,  264,  261, 1242, 1242, 1242,

      263,  264, 1242,  262,  261, 1242, 1242,  707, 1242,  710,
      261,  262,  263,  264, 1242,  709, 1242,  262,  261, 1242,
      263,  264, 1242,  261,  712,  262,  263,  264,  713,  261,
      262, 1242, 1242,  711,  263,  264,  262, 1242,  714,  263,
      264,  261, 1242, 1242, 1242,  263,  264, 1242,  262,  315,
     1242, 1242,  336,  716,  715,  336,  316,  263,  264,  337,
      717, 1242,  337,  336, 1242,  317,  318,  336,  338,  339,
      337,  338,  339, 1242,  337, 1242, 1242,  718,  588,  338,
      339,  588, 1242,  338,  339,  739,  722,  588,  588,  336,
     1242,  588,  180,  723, 1242,  738,  337,  743,  724,  588,

      336,  588,  725,  726,  336,  338,  339,  337,  181,  182,
     1242,  337,  740, 1242, 1242, 1242,  338,  339, 1242, 1242,
      338,  339, 1242, 1242, 1242,  741, 1242,  336,  790, 1242,
      588,  588,  588,  180,  337,  588, 1242,  742, 1242,  556,
      722,  588,  588,  338,  339,  588, 1242,  723,  180,  181,
      182,  336,  724,  588, 1242,  588,  725,  726,  337, 1242,
     1242,  792,  336, 1242,  181,  182,  336,  338,  339,  337,
      744, 1242,  804,  337,  336, 1242,  745, 1242,  338,  339,
     1242,  337,  338,  339,  588,  588,  588, 1242,  749,  588,
      338,  339, 1242, 1242,  733,  588,  588, 1242, 1242,  588,

     1242,  734, 1242, 1242,  746,  747,  735,  588,  336,  588,
      736,  737,  336, 1242,  336,  337,  336, 1242,  180,  337,
      336,  337, 1242,  337,  338,  339, 1242,  337,  338,  339,
      338,  339,  338,  339,  181,  182,  338,  339,  588,  588,
      588, 1242,  752,  588, 1242,  556,  556,  748,  733,  588,
      588,  336,  750,  588,  791,  734, 1242,  180,  337,  336,
      735,  588, 1242,  588,  736,  737,  337,  338,  339,  751,
      336, 1242,  336,  181,  182,  338,  339,  337,  336,  337,
     1242, 1242, 1242,  800, 1242,  337,  338,  339,  338,  339,
      754,  180,  588,  588,  338,  339,  336,  755,  756,  368,

     1242,  753,  368,  337, 1242,  180,  369,  181,  182,  369,
     1242, 1242,  338,  339,  757,  370,  371,  588,  370,  371,
      588,  181,  182,  796,  772,  761,  588,  588,  368,  803,
      588,  180,  762, 1242, 1242,  369,  368,  763,  588,  368,
      588,  764,  765,  369,  370,  371,  369,  181,  182, 1242,
      368, 1242,  370,  371, 1242,  370,  371,  369, 1242, 1242,
      805,  368, 1242, 1242,  766,  773,  370,  371,  369,  588,
      588,  588,  180, 1242,  588,  380, 1242,  370,  371,  761,
      588,  588, 1242,  368,  588, 1242,  762,  774,  181,  182,
      369,  763,  588, 1242,  588,  764,  765,  368,  775,  370,

      371,  368, 1242,  776,  369,  180, 1242, 1242,  369,  793,
      180, 1242, 1242,  370,  371, 1242, 1242,  370,  371,  777,
     1242,  181,  182,  588,  588,  368,  181,  182,  778, 1242,
      180, 1242,  369,  588,  180,  372,  588,  380, 1242,  372,
      794,  370,  371, 1242, 1242,  795,  181,  182,  767, 1242,
      181,  182,  799,  180, 1242,  768, 1242,  769, 1242, 1242,
      797,  770,  771, 1242,  768,  781,  798,  180,  781,  181,
      182, 1242, 1242,  783,  781,  781,  180, 1242,  781,  801,
      180, 1242,  180,  181,  182,  180,  781, 1242,  781,  784,
      785,  180,  181,  182,  180, 1242,  181,  182,  181,  182,

     1242,  181,  182, 1242,  802, 1242, 1242,  181,  182,  810,
      181,  182, 1242, 1242, 1242,  806,  808,  781,  781,  588,
      807,  180,  588, 1242, 1242, 1242, 1242,  788,  592,  592,
      180,  809,  592,  180, 1242,  180, 1242,  181,  182, 1242,
      592,  180,  592,  588,  588,  180,  181,  182,  180,  181,
      182,  181,  182, 1242, 1242,  812,  811,  181,  182,  180,
     1242,  181,  182,  180,  181,  182,  180, 1242, 1242,  814,
      815,  592,  592,  813,  180,  181,  182,  180, 1242,  181,
      182,  180,  181,  182,  816,  180, 1242, 1242,  180, 1242,
      181,  182,  817,  181,  182,  180, 1242,  181,  182,  820,

      180,  181,  182,  818,  181,  182, 1242,  821,  180,  819,
     1242,  181,  182,  180, 1242,  180,  181,  182,  180, 1242,
      180, 1242,  823,  180,  181,  182,  822, 1242, 1242,  181,
      182,  181,  182,  180,  181,  182,  181,  182, 1242,  181,
      182,  180,  826,  180,  825,  180, 1242, 1242,  180,  181,
      182,  180,  824,  180,  827, 1242, 1242,  181,  182,  181,
      182,  181,  182,  829,  181,  182,  831,  181,  182,  181,
      182,  180, 1242,  828, 1242,  830,  180,  832,  180, 1242,
     1242,  180, 1242,  180, 1242,  180, 1242,  181,  182,  466,
      180,  833,  181,  182,  181,  182,  834,  181,  182,  181,

      182,  181,  182,  180, 1242, 1242,  181,  182,  180, 1242,
     1242,  180, 1242,  180, 1242,  180, 1242,  835,  836,  181,
      182,  837,  180, 1242,  181,  182,  839,  181,  182,  181,
      182,  181,  182,  180, 1242,  180, 1242,  841,  181,  182,
      838,  180, 1242,  180,  840, 1242,  180, 1242, 1242,  181,
      182,  181,  182,  180, 1242,  180, 1242,  181,  182,  181,
      182, 1242,  181,  182,  842,  845,  180,  843,  846,  181,
      182,  181,  182,  847,  180, 1242, 1242,  844,  261, 1242,
      180,  588,  181,  182,  588,  262,  848,  265, 1242,  670,
      181,  182, 1242,  261,  263,  264,  181,  182,  859,  261,

      262, 1242,  955,  850,  781,  180,  262,  781, 1242,  263,
      264, 1242,  852,  781,  781,  263,  264,  781, 1242,  853,
     1242,  181,  182,  261, 1242,  781,  261,  781,  854,  855,
      262,  861, 1242,  262,  261,  860, 1242,  261, 1242,  263,
      264,  262,  263,  264,  262, 1242, 1242, 1242,  261,  862,
      263,  264, 1242,  263,  264,  262,  781,  781,  588, 1242,
     1242,  588, 1242,  863,  263,  264,  858,  674,  674,  864,
      261,  674, 1242,  261, 1242, 1242,  180,  262,  512,  674,
      262,  674,  588,  588, 1242,  865,  263,  264,  261,  263,
      264,  261,  181,  182, 1242,  262, 1242,  956,  262,  261,

      512, 1242,  261,  512,  263,  264,  262,  263,  264,  262,
      674,  674, 1242,  512, 1242,  263,  264,  261,  263,  264,
      867,  261, 1242,  180,  262,  261, 1242, 1242,  262,  261,
      866, 1242,  262,  263,  264, 1242,  262,  263,  264,  181,
      182,  263,  264,  868, 1242,  263,  264,  869,  261,  957,
      261, 1242,  261, 1242,  180,  262,  261,  262, 1242,  262,
     1242,  870, 1242,  262,  263,  264,  263,  264,  263,  264,
      181,  182,  263,  264,  874,  261, 1242,  261, 1242,  261,
     1242,  871,  262, 1242,  262,  180,  262,  872, 1242, 1242,
      873,  263,  264,  263,  264,  263,  264, 1242,  261, 1242,

      261,  181,  182,  261,  875,  262,  261,  262, 1242, 1242,
      262, 1242, 1242,  262,  263,  264,  263,  264,  876,  263,
      264,  877,  263,  264,  261, 1242,  261,  878, 1242,  261,
     1242,  262,  261,  262, 1242,  180,  262, 1242, 1242,  262,
      263,  264,  263,  264,  879,  263,  264, 1242,  263,  264,
      261,  181,  182,  261,  882,  964, 1242,  262,  880,  881,
      262,  261, 1242, 1242,  261, 1242,  263,  264,  262,  263,
      264,  262,  883, 1242, 1242,  261, 1242,  263,  264,  261,
      263,  264,  262,  180, 1242, 1242,  262,  261, 1242, 1242,
      884,  263,  264,  888,  262,  263,  264,  885, 1242,  181,

      182,  886, 1242,  263,  264,  261, 1242,  261, 1242, 1242,
      261,  890,  262, 1242,  262, 1242,  887,  262, 1242,  889,
      962,  263,  264,  263,  264, 1242,  263,  264, 1242,  588,
     1242,  891,  588,  336, 1242,  319,  588,  721, 1242,  588,
      337, 1242,  340, 1242,  732, 1242, 1242,  336, 1242,  338,
      339,  893,  781,  912,  337,  781, 1242, 1242,  903, 1242,
      895,  781,  781,  338,  339,  781,  781,  896,  183,  781,
     1242,  336,  183,  781,  336,  781,  897,  898,  337,  180,
     1242,  337,  336, 1242, 1242,  913,  336,  338,  339,  337,
      338,  339, 1242,  337, 1242,  181,  182,  914,  338,  339,

      916, 1242,  338,  339,  781,  781,  588, 1242, 1242,  588,
      958,  915, 1242, 1242,  901,  725,  725,  336,  556,  725,
      588,  336,  586,  588,  337,  336,  586,  725,  337,  725,
      588,  588,  337,  338,  339, 1242, 1242,  338,  339,  917,
      336,  338,  339,  918, 1242,  336,  923,  337,  336, 1242,
     1242, 1242,  337, 1242, 1242,  337,  338,  339,  725,  725,
      781,  338,  339,  781,  338,  339,  921, 1242,  905,  781,
      781, 1242, 1242,  781,  180,  906,  180,  920,  919,  336,
     1242,  781,  336,  781,  907,  908,  337,  336, 1242,  337,
      181,  182,  181,  182,  337,  338,  339, 1242,  338,  339,

      922, 1242,  336,  338,  339,  959, 1242,  924, 1242,  337,
     1242, 1242,  781,  781,  588, 1242, 1242,  588,  338,  339,
      556, 1242,  911,  736,  736, 1242,  336,  736, 1242,  336,
     1242, 1242,  925,  337,  336,  736,  337,  736,  588,  588,
      336,  337,  338,  339,  180,  338,  339,  337,  926, 1242,
      338,  339, 1242, 1242, 1242,  927,  338,  339, 1242, 1242,
      181,  182,  588, 1242, 1242,  588,  736,  736,  372, 1242,
      760,  556, 1242,  368, 1242,  368, 1242,  928, 1242, 1242,
      369,  970,  369, 1242,  930,  781, 1242, 1242,  781,  370,
      371,  370,  371,  932,  781,  781,  368, 1242,  781,  781,

      933,  265,  781,  369, 1242,  265,  781, 1242,  781,  934,
      935,  939,  370,  371,  368, 1242,  368, 1242,  368, 1242,
     1242,  369, 1242,  369, 1242,  369,  768, 1242, 1242,  368,
      370,  371,  370,  371,  370,  371,  369,  781,  781,  588,
     1242,  768,  588, 1242,  768,  370,  371,  938,  764,  764,
      368,  943,  764, 1242,  368, 1242,  942,  369,  368, 1242,
      764,  369,  764,  588,  588,  369,  370,  371, 1242,  368,
      370,  371,  368, 1242,  370,  371,  369, 1242, 1242,  369,
     1242,  941,  180, 1242, 1242,  370,  371,  944,  370,  371,
      380,  764,  764, 1242,  588, 1242,  380,  588,  181,  182,

      183,  945,  589, 1242, 1242, 1242,  781,  592,  592,  781,
     1242,  592,  183,  960,  782, 1242,  780,  781, 1242,  592,
      781,  592, 1242, 1242, 1242,  783,  781,  781,  947,  180,
      781,  588,  180, 1242,  588, 1242, 1242,  586,  781,  787,
      781,  784,  785, 1242,  180,  181,  182,  961,  181,  182,
      592,  592, 1242,  952,  953, 1242,  180, 1242, 1242, 1242,
      181,  182, 1242, 1242,  954, 1242, 1242, 1242, 1242,  781,
      781,  781,  181,  182,  781,  963, 1242, 1242,  965,  950,
      784,  784,  180, 1242,  784,  180, 1242,  588,  180,  668,
      588, 1242,  784,  668,  784,  781,  781,  180,  181,  182,

      180,  181,  182, 1242,  181,  182,  967, 1242,  966,  968,
     1242,  180, 1242,  181,  182,  180,  181,  182,  180,  969,
     1242,  180, 1242,  784,  784,  180,  971,  181,  182,  180,
     1242,  181,  182,  180,  181,  182,  972,  181,  182, 1242,
     1242,  181,  182,  180, 1242,  181,  182,  180, 1242,  181,
      182,  180, 1242, 1242, 1242,  975,  180,  973,  180,  181,
      182,  180, 1242,  181,  182,  180, 1242,  181,  182, 1242,
      974,  180,  181,  182,  181,  182,  977,  181,  182,  180,
     1242,  181,  182,  976,  180, 1242,  978,  181,  182,  180,
     1242,  982,  979,  980,  981,  181,  182,  180, 1242, 1242,

      181,  182, 1242, 1242,  180,  181,  182,  180, 1242,  180,
     1242,  984,  180,  181,  182,  983, 1242, 1242, 1242,  985,
      181,  182,  180,  181,  182,  181,  182, 1242,  181,  182,
      180, 1242, 1242,  986,  988,  180, 1242,  180,  181,  182,
     1242,  180, 1242,  180,  987,  180,  181,  182,  180,  989,
     1242,  181,  182,  181,  182,  180,  990,  181,  182,  181,
      182,  181,  182,  991,  181,  182,  180,  993,  180, 1242,
      180,  181,  182,  180, 1242, 1242,  992,  180, 1242, 1242,
      180, 1242,  181,  182,  181,  182,  181,  182, 1242,  181,
      182,  994,  588,  181,  182,  588,  181,  182,  265, 1242,

      670, 1242,  996, 1242,  781,  674,  674,  781,  995,  674,
      265, 1242,  851, 1242,  850,  781, 1242,  674,  781,  674,
     1242, 1242, 1242,  852,  781,  781,  998,  261,  781,  588,
      853, 1242,  588, 1242,  262,  668,  781,  857,  781,  854,
      855,  180, 1242,  263,  264,  261, 1242,  261,  674,  674,
     1242, 1003,  262, 1004,  262, 1242, 1242,  181,  182,  261,
     1242,  263,  264,  263,  264, 1242,  262,  781,  781,  781,
     1242, 1242,  781, 1073, 1242,  263,  264, 1001,  854,  854,
      261, 1242,  854, 1006, 1005,  180, 1242,  262,  261, 1242,
      854,  261,  854,  781,  781,  262,  263,  264,  262, 1242,

     1242,  181,  182,  261,  263,  264,  588,  263,  264,  588,
      262, 1078,  319,  180,  721, 1007,  512, 1242,  261,  263,
      264,  854,  854,  588, 1008,  262,  588, 1242,  893,  181,
      182,  671,  588,  588,  263,  264,  588,  781,  672,  319,
      781, 1242,  261,  319,  588,  261,  588,  674,  675,  262,
      261, 1079,  262,  261, 1242, 1009, 1242,  262,  263,  264,
      262,  263,  264, 1242, 1242, 1242,  263,  264, 1242,  263,
      264,  261, 1242, 1010,  261,  588,  588,  261,  262, 1242,
     1011,  262, 1012, 1242,  262, 1013, 1242,  263,  264,  261,
      263,  264,  261,  263,  264, 1015,  262, 1014, 1242,  262,

      261, 1242, 1242,  261, 1242,  263,  264,  262,  263,  264,
      262,  261, 1242, 1242, 1016,  261,  263,  264,  262,  263,
      264, 1018,  262,  261, 1017, 1242,  261,  263,  264,  261,
      262,  263,  264,  262, 1242, 1242,  262,  261, 1242,  263,
      264, 1242,  263,  264,  262,  263,  264, 1020, 1019,  261,
     1022,  261, 1242,  263,  264, 1021,  262, 1023,  262, 1242,
     1242, 1242, 1242,  261, 1242,  263,  264,  263,  264, 1024,
      262,  261, 1242, 1242,  261, 1242,  261, 1242,  262,  263,
      264,  262,  180,  262, 1242, 1025, 1242,  263,  264, 1026,
      263,  264,  263,  264, 1242,  261, 1242,  781,  181,  182,

      781, 1028,  262,  319, 1242,  894,  725,  725, 1242, 1027,
      725,  263,  264,  781, 1242, 1242,  781, 1071,  725, 1030,
      725,  895,  781,  781,  588, 1242,  781,  588,  896, 1242,
      719, 1242,  900, 1242,  781, 1242,  781,  897,  898,  588,
     1242, 1242,  588, 1242, 1242,  340, 1035,  732, 1242,  725,
      725,  781,  588, 1242,  781,  588, 1242,  340,  730,  904,
      910,  903,  336, 1242, 1242,  781,  781,  781, 1242,  337,
      781, 1242, 1242, 1037, 1042, 1033,  897,  897,  338,  339,
      897,  588,  736,  736,  588, 1242,  736,  372,  897,  760,
      897,  781,  781,  336,  736,  336,  736,  336, 1242, 1044,

      337, 1242,  337,  930,  337, 1242, 1242, 1242, 1242,  338,
      339,  338,  339,  338,  339, 1242, 1242, 1045, 1242,  897,
      897,  588, 1242, 1043,  588,  736,  736, 1047, 1242,  722,
      588,  588,  336, 1242,  588, 1242,  723,  180, 1242,  337,
      336, 1242,  588, 1242,  588,  725,  726,  337,  338,  339,
     1242, 1242,  336,  181,  182,  336,  338,  339,  418,  337,
     1242, 1242,  337,  336, 1242,  180, 1242, 1046,  338,  339,
      337,  338,  339,  588,  588,  781, 1242,  556,  781,  338,
      339,  181,  182,  905,  781,  781,  556,  556,  781, 1048,
      906,  764,  764, 1242,  336,  764,  781,  336,  781,  907,

      908,  337,  336,  764,  337,  764,  180, 1242,  336,  337,
      338,  339, 1242,  338,  339,  337, 1242, 1242,  338,  339,
     1051, 1050,  181,  182,  338,  339, 1081,  781,  781,  781,
     1242, 1049,  781, 1242,  764,  764, 1242,  905,  781,  781,
      336, 1242,  781, 1242,  906,  556, 1242,  337,  336, 1242,
      781,  336,  781,  907,  908,  337,  338,  339,  337,  336,
     1242, 1242, 1242,  368,  338,  339,  337,  338,  339, 1053,
      369,  368, 1052, 1055, 1242,  338,  339, 1054,  369,  370,
      371,  781,  781,  781, 1242, 1063,  781,  370,  371, 1067,
     1242, 1040,  907,  907,  781,  588,  907,  781,  588, 1242,

      372,  758,  931,  937,  907,  368,  907,  781,  781, 1242,
     1242,  368,  369, 1242, 1242, 1242, 1057, 1062,  369, 1242,
     1242,  370,  371, 1242, 1242, 1242,  180,  370,  371, 1242,
      768, 1242, 1064, 1242, 1242,  907,  907,  588, 1242, 1242,
      588, 1242,  181,  182, 1242,  733,  588,  588,  368, 1242,
      588, 1242,  734, 1242, 1242,  369,  368, 1074,  588, 1242,
      588,  736,  737,  369,  370,  371, 1242,  368, 1242, 1065,
     1242,  180,  370,  371,  369, 1242, 1066, 1242, 1242, 1242,
      180,  784,  784,  370,  371,  784, 1242,  181,  182,  588,
      588,  781, 1242,  784,  781,  784,  181,  182, 1242,  932,

      781,  781, 1068, 1242,  781,  781,  933, 1072,  781, 1077,
     1242,  183,  781,  782,  781,  934,  935,  180, 1242, 1242,
      781, 1242, 1242,  781,  784,  784,  586,  947,  949,  588,
      180, 1242,  588,  181,  182,  586, 1242,  787, 1242, 1075,
      180, 1242, 1070,  781,  781,  781,  181,  182,  781, 1242,
     1242,  952, 1076,  932,  781,  781,  181,  182,  781,  180,
      933,  180, 1080,  180, 1242,  180,  781, 1242,  781,  934,
      935,  180, 1242,  180, 1242,  181,  182,  181,  182,  181,
      182,  181,  182, 1083,  180, 1242, 1242,  181,  182,  181,
      182, 1242, 1242, 1086, 1084, 1242, 1082,  781,  781,  781,

      181,  182,  781, 1242, 1242, 1242, 1242, 1060,  934,  934,
     1085,  180,  934,  180, 1242,  180, 1242,  180, 1242,  180,
      934,  180,  934,  781,  781,  180, 1242,  181,  182,  181,
      182,  181,  182,  181,  182,  181,  182,  181,  182, 1242,
     1242,  181,  182, 1088, 1242, 1242, 1242, 1242,  180, 1087,
     1089,  934,  934,  588, 1242,  180,  588, 1242, 1242, 1242,
     1242,  761,  588,  588,  181,  182,  588,  180,  762, 1242,
     1090,  181,  182,  180,  588, 1242,  588,  764,  765,  180,
     1242,  180, 1242,  181,  182, 1092,  180, 1242, 1242,  181,
      182, 1242, 1091, 1242, 1242,  181,  182,  181,  182, 1242,

     1242, 1242,  181,  182, 1242,  588,  588,  781, 1093,  180,
      781, 1242, 1242, 1242, 1242,  783,  781,  781,  180, 1242,
      781,  180, 1242, 1242,  180,  181,  182,  180,  781,  180,
      781,  784,  785,  180,  181,  182,  180,  181,  182, 1242,
      181,  182, 1242,  181,  182,  181,  182,  180,  781,  181,
      182,  781,  181,  182,  265, 1097,  851, 1242, 1094,  781,
      781, 1095, 1242,  181,  182, 1242, 1242, 1242, 1242, 1096,
      998, 1098,  854,  854,  781,  588,  854,  781,  588, 1242,
      668,  668, 1000,  857,  854,  261,  854, 1242,  261, 1242,
     1242,  261,  262,  261, 1242,  262, 1100, 1003,  262, 1242,

      262,  263,  264, 1101,  263,  264, 1102,  263,  264,  263,
      264,  261, 1242, 1242, 1242,  854,  854,  261,  262,  261,
     1242, 1242, 1242,  261,  262,  261,  262,  263,  264, 1103,
      262, 1104,  262,  263,  264,  263,  264, 1105,  261,  263,
      264,  263,  264,  261, 1242,  262,  180, 1242, 1242,  261,
      262,  261, 1242, 1106,  263,  264,  262,  261,  262,  263,
      264, 1242,  181,  182,  262,  263,  264,  263,  264,  261,
     1242, 1110, 1242,  263,  264, 1107,  262, 1109, 1242, 1111,
     1108,  261, 1242,  261, 1242,  263,  264,  261,  262,  588,
      262,  719,  588, 1242,  262,  719, 1242,  263,  264,  263,

      264,  261, 1242,  263,  264, 1242, 1112, 1242,  262,  261,
     1242, 1113,  261, 1242,  261, 1242,  262,  263,  264,  262,
      261,  262, 1114, 1115, 1242,  263,  264,  262,  263,  264,
      263,  264,  261, 1242, 1242,  261,  263,  264, 1118,  262,
     1242, 1117,  262, 1242, 1242, 1242, 1116, 1242,  263,  264,
     1242,  263,  264, 1242,  781,  781, 1119,  781,  781, 1242,
      319,  719,  894, 1032, 1242, 1242, 1242, 1121, 1242, 1120,
      897,  897,  588, 1242,  897,  588, 1030, 1123,  719, 1242,
      900, 1242,  897,  781,  897, 1242,  781, 1242, 1242,  340,
      781,  904,  340,  781, 1035, 1242,  340,  907,  907, 1242,

      781,  907, 1242,  781,  588, 1037,  730,  588, 1039,  907,
      730,  907,  910,  897,  897,  588,  336,  730,  588, 1242,
      336,  730, 1125,  337, 1242, 1242, 1042,  337,  336, 1242,
     1242, 1242,  338,  339, 1126,  337,  338,  339, 1127,  336,
      907,  907,  336, 1242,  338,  339,  337,  336, 1242,  337,
     1242,  180, 1242,  336,  337,  338,  339, 1242,  338,  339,
      337, 1242, 1242,  338,  339,  336, 1128,  181,  182,  338,
      339, 1242,  337,  336, 1242, 1132,  336, 1129,  336, 1130,
      337,  338,  339,  337, 1131,  337, 1242,  556, 1242,  338,
      339,  336,  338,  339,  338,  339, 1242,  336,  337,  781,

     1135,  372,  781, 1242,  337,  372, 1242,  338,  339,  781,
     1133, 1134,  781,  338,  339,  372, 1242,  931,  934,  934,
      556, 1136,  934,  588, 1242,  758,  588, 1242,  368,  758,
      934, 1057,  934,  781,  588,  369,  781,  588, 1242,  758,
      758, 1059,  937,  368,  370,  371,  781, 1242,  586,  781,
      369,  368,  586, 1242, 1242, 1138, 1062,  180,  369,  370,
      371,  934,  934,  368,  380,  368, 1242,  370,  371, 1139,
      369,  368,  369,  181,  182, 1242,  180, 1140,  369,  370,
      371,  370,  371,  781, 1242, 1242,  781,  370,  371,  586,
      180,  949,  181,  182, 1242,  180, 1242, 1145,  180, 1242,

     1141, 1142, 1144,  180, 1242, 1070,  181,  182, 1143, 1242,
     1242,  181,  182,  180,  181,  182,  180, 1242,  953,  181,
      182, 1242, 1242,  180, 1242, 1146, 1147,  180, 1242,  181,
      182,  180,  181,  182,  180, 1148,  180, 1242, 1149,  181,
      182, 1242, 1242,  181,  182,  180, 1242,  181,  182, 1151,
      181,  182,  181,  182,  180, 1242, 1152,  180, 1153,  180,
     1150,  181,  182,  180, 1242, 1242,  180, 1242,  180, 1242,
      181,  182,  180,  181,  182,  181,  182,  180, 1242,  181,
      182, 1155,  181,  182,  181,  182,  180, 1242,  181,  182,
      180, 1242,  180,  181,  182,  180, 1242, 1156,  261, 1157,

     1154, 1242,  181,  182, 1242,  262,  181,  182,  181,  182,
      781,  181,  182,  781,  263,  264,  668,  781, 1000,  668,
      781,  261, 1242,  668, 1158, 1242,  261, 1159,  262,  261,
     1242, 1242, 1100,  262,  261, 1160,  262,  263,  264, 1242,
      261,  262,  263,  264, 1242,  263,  264,  262, 1242, 1163,
      263,  264,  261, 1242, 1242,  261,  263,  264, 1161,  262,
      261, 1162,  262,  261, 1242, 1164,  261,  262,  263,  264,
      262,  263,  264,  262, 1165, 1242,  263,  264,  261,  263,
      264, 1242,  263,  264, 1168,  262,  261, 1242, 1242, 1242,
     1242, 1167,  261,  262,  263,  264, 1169, 1166,  261,  262,

      261, 1242,  263,  264,  261,  262,  261,  262,  263,  264,
     1242,  262, 1242,  262,  263,  264,  263,  264, 1242, 1242,
      263,  264,  263,  264,  261, 1170, 1172,  261, 1242, 1171,
      261,  262, 1242,  781,  262,  719,  781,  262, 1242,  719,
      263,  264, 1242,  263,  264, 1242,  263,  264, 1173,  781,
      781, 1242,  781,  781, 1242,  719,  730, 1032, 1039, 1242,
     1174,  336, 1176, 1175,  781, 1242,  730,  781,  337,  336,
      730, 1123, 1125,  336, 1242,  336,  337,  338,  339, 1242,
      337, 1242,  337, 1242, 1242,  338,  339,  336, 1242,  338,
      339,  338,  339,  781,  337, 1180,  781,  180, 1177,  758,

      336, 1059, 1242,  338,  339,  336, 1178,  337, 1179, 1181,
     1242,  336,  337,  181,  182, 1138,  338,  339,  337, 1189,
     1242,  338,  339,  336, 1242, 1242,  556,  338,  339,  556,
      337,  336, 1242, 1242,  336, 1242, 1242,  368,  337,  338,
      339,  337, 1182,  781,  369,  758,  781,  338,  339,  758,
      338,  339, 1242,  370,  371, 1242, 1183,  368, 1242, 1242,
     1242, 1242, 1184,  368,  369,  368, 1242, 1242, 1185,  180,
      369, 1242,  369,  370,  371,  180,  556,  368, 1242,  370,
      371,  370,  371, 1242,  369,  181,  182,  180, 1186, 1187,
      180,  181,  182,  370,  371,  180, 1242, 1242,  180, 1242,

     1190, 1188,  180,  181,  182, 1242,  181,  182, 1242,  180,
     1242,  181,  182,  380,  181,  182,  180, 1242,  181,  182,
      180, 1192,  180, 1242, 1191,  181,  182,  180, 1242,  180,
     1193,  180,  181,  182,  180, 1242,  181,  182,  181,  182,
     1242, 1242, 1194,  181,  182,  181,  182,  181,  182,  261,
      181,  182, 1242,  261, 1242,  261,  262, 1242, 1195, 1242,
      262, 1242,  262, 1242, 1242,  263,  264, 1242, 1196,  263,
      264,  263,  264, 1200, 1197, 1198,  261, 1242,  261, 1199,
      261, 1242, 1242,  262, 1242,  262, 1242,  262, 1242, 1242,
     1242,  261,  263,  264,  263,  264,  263,  264,  262,  261,

     1242,  508,  891,  261, 1242,  261,  262,  263,  264,  180,
      262, 1202,  262, 1201, 1242,  263,  264,  261, 1242,  263,
      264,  263,  264,  891,  262,  181,  182, 1242,  261, 1242,
      261, 1242, 1242,  263,  264,  262,  261,  262,  180, 1242,
     1242, 1242, 1203,  262,  263,  264,  263,  264, 1204,  261,
     1242,  261,  263,  264,  181,  182,  262,  261,  262, 1242,
     1242, 1205,  336, 1242,  262,  263,  264,  263,  264,  337,
      336, 1206, 1242,  263,  264,  336, 1242,  337,  338,  339,
     1242, 1242,  337,  336, 1242, 1207,  338,  339, 1208,  180,
      337,  338,  339, 1210,  336, 1242, 1209,  336, 1242,  338,

      339,  337,  336, 1242,  337,  181,  182,  556, 1242,  337,
      338,  339, 1242,  338,  339,  336, 1242,  368,  338,  339,
     1211,  368,  337,  368,  369, 1212, 1242, 1213,  369, 1242,
      369,  338,  339,  370,  371, 1214,  368,  370,  371,  370,
      371,  380, 1242,  369,  180,  380,  180, 1242,  180, 1242,
      180, 1242,  370,  371, 1215, 1242, 1242,  180, 1216,  180,
      181,  182,  181,  182,  181,  182,  181,  182, 1242, 1242,
      261, 1242, 1217,  181,  182,  181,  182,  262,  261, 1242,
      953,  261,  814, 1218,  261,  262,  263,  264,  262,  261,
     1242,  262, 1242, 1242,  263,  264,  262,  263,  264, 1242,

      263,  264, 1242,  261, 1242,  263,  264, 1242,  261, 1219,
      262, 1242, 1242, 1242, 1242,  262, 1222, 1220, 1221,  263,
      264,  261, 1242, 1242,  263,  264, 1223,  261,  262, 1224,
     1225, 1242,  261, 1242,  262,  336, 1242,  263,  264,  262,
      336, 1242,  337,  263,  264,  891, 1242,  337,  263,  264,
     1242,  338,  339,  336, 1242,  336,  338,  339, 1242,  336,
      337, 1242,  337, 1226,  180, 1242,  337, 1242, 1242,  338,
      339,  338,  339, 1242, 1227,  338,  339,  336, 1242, 1228,
      181,  182,  336, 1242,  337,  368, 1242, 1230, 1242,  337,
     1229, 1242,  369,  338,  339,  180,  556,  180,  338,  339,

      368,  370,  371, 1231,  556, 1242, 1242,  369,  261,  380,
     1242,  181,  182,  181,  182,  262,  370,  371, 1242, 1242,
     1242,  261, 1242, 1242,  263,  264, 1242, 1242,  262, 1232,
     1233,  979,  261, 1242,  261, 1242,  380,  263,  264,  262,
      261,  262, 1242, 1234, 1242,  261, 1242,  262,  263,  264,
      263,  264,  262, 1242, 1242, 1242,  263,  264, 1235,  261,
     1242,  263,  264,  261, 1242, 1236,  262,  336, 1242,  681,
      262,  336, 1242, 1242,  337,  263,  264, 1242,  337,  263,
      264, 1242, 1242,  338,  339,  336, 1242,  338,  339,  556,
      336, 1242,  337,  556, 1242, 1242,  336,  337,  180, 1242,

     1242,  338,  339,  337, 1242, 1242,  338,  339, 1242, 1242,
      261, 1237,  338,  339,  181,  182,  556,  262, 1242, 1242,
     1242,  261, 1242,  261, 1242,  556,  263,  264,  262, 1238,
      262, 1242, 1242, 1242,  261, 1242,  336,  263,  264,  263,
      264,  262,  261,  337, 1242, 1242, 1242,  336, 1242,  262,
      263,  264,  338,  339,  337, 1239, 1242, 1242,  263,  264,
      261, 1242, 1242,  338,  339, 1242, 1242,  262, 1240, 1242,
     1242, 1242, 1242, 1241, 1242, 1242,  263,  264,  556,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  179,  179, 1242, 1242,  179,  179,
      179,  183,  183,  183,  183,  183,  183,  183,  183,  260,
      260, 1242, 1242,  260,  260,  260,  265,  265,  265,  265,
      265,  265,  265,  265,  314,  314, 1242, 1242,  314,  314,
      314,  319,  319,  319,  319,  319,  319,  319,  319,  335,
      335, 1242, 1242,  335,  335,  335,  340,  340,  340,  340,
      340,  340,  340,  340,  367,  367, 1242, 1242,  367,  367,

      367,  372,  372,  372,  372,  372,  372,  372,  372,  398,
     1242, 1242, 1242,  398, 1242,  398,  398, 1242,  398,  398,
      402, 1242, 1242,  402,  402, 1242,  402,  402,  402,  402,
      402,  403,  403, 1242,  403,  403,  403,  403,  403,  403,
      403,  403,  404, 1242,  404,  404, 1242, 1242,  404, 1242,
      404,  406,  406,  406,  406,  406, 1242,  406,  490,  490,
      490,  490,  490, 1242,  490,  534,  534,  534,  534,  534,
     1242,  534,  544,  544,  544,  544,  544, 1242,  544,  570,
      570,  570,  570,  570, 1242,  570,  586,  586,  586,  586,
      586,  586,  586,  586,  589, 1242, 1242, 1242,  589,  589,

      589,  589,  589,  589,  589,  668,  668,  668,  668,  668,
      668,  668,  668,  670, 1242, 1242, 1242,  670,  670,  670,
      670,  670,  670,  670,  719,  719,  719,  719,  719,  719,
      719,  719,  721, 1242, 1242, 1242,  721,  721,  721,  721,
      721,  721,  721,  588, 1242, 1242, 1242,  588,  588,  588,
      588,  588,  588,  588,  730,  730,  730,  730,  730,  730,
      730,  730,  732, 1242, 1242, 1242,  732,  732,  732,  732,
      732,  732,  732,  758,  758,  758,  758,  758,  758,  758,
      758,  760, 1242, 1242, 1242,  760,  760,  760,  760,  760,
      760,  760,  779, 1242, 1242,  779,  779,  779,  779,  779,

      779,  779,  779,  782, 1242, 1242, 1242,  782,  782,  782,
      782,  782,  782,  782,  787, 1242, 1242, 1242,  787,  787,
      787,  787,  787,  787,  787,  849, 1242, 1242,  849,  849,
      849,  849,  849,  849,  849,  849,  851, 1242, 1242, 1242,
      851,  851,  851,  851,  851,  851,  851,  857, 1242, 1242,
     1242,  857,  857,  857,  857,  857,  857,  857,  892, 1242,
     1242,  892,  892,  892,  892,  892,  892,  892,  892,  894,
     1242, 1242, 1242,  894,  894,  894,  894,  894,  894,  894,
      900, 1242, 1242, 1242,  900,  900,  900,  900,  900,  900,
      900,  781, 1242, 1242, 1242,  781,  781,  781,  781,  781,

      781,  781,  902, 1242, 1242,  902,  902,  902,  902,  902,
      902,  902,  902,  904, 1242, 1242, 1242,  904,  904,  904,
      904,  904,  904,  904,  910, 1242, 1242, 1242,  910,  910,
      910,  910,  910,  910,  910,  929, 1242, 1242,  929,  929,
      929,  929,  929,  929,  929,  929,  931, 1242, 1242, 1242,
      931,  931,  931,  931,  931,  931,  931,  937, 1242, 1242,
     1242,  937,  937,  937,  937,  937,  937,  937,  946, 1242,
     1242,  946,  946,  946,  946,  946,  946,  946,  946,  949,
     1242, 1242, 1242,  949,  949,  949,  949,  949,  949,  949,
      951, 1242, 1242,  951,  951,  951,  951,  951,  951,  951,

      951,  997, 1242, 1242,  997,  997,  997,  997,  997,  997,
      997,  997, 1000, 1242, 1242, 1242, 1000, 1000, 1000, 1000,
     1000, 1000, 1000,  670, 1242, 1242, 1242,  670,  670,  670,
      670,  670,  670,  670, 1002, 1242, 1242, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002,  260,  260, 1242, 1242,  260,
      260,  260, 1029, 1242, 1242, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1032, 1242, 1242, 1242, 1032, 1032, 1032,
     1032, 1032, 1032, 1032,  721, 1242, 1242, 1242,  721,  721,
      721,  721,  721,  721,  721, 1034, 1242, 1242, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034,  902, 1242, 1242,  902,

      902,  902,  902,  902,  902,  902,  902,  904, 1242, 1242,
     1242,  904,  904,  904,  904,  904,  904,  904, 1036, 1242,
     1242, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1039,
     1242, 1242, 1242, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
      732, 1242, 1242, 1242,  732,  732,  732,  732,  732,  732,
      732, 1041, 1242, 1242, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041,  335,  335, 1242, 1242,  335,  335,  335,  929,
     1242, 1242,  929,  929,  929,  929,  929,  929,  929,  929,
      931, 1242, 1242, 1242,  931,  931,  931,  931,  931,  931,
      931, 1056, 1242, 1242, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1059, 1242, 1242, 1242, 1059, 1059, 1059, 1059,
     1059, 1059, 1059,  760, 1242, 1242, 1242,  760,  760,  760,
      760,  760,  760,  760, 1061, 1242, 1242, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1061,  367,  367, 1242, 1242,  367,
      367,  367,  946, 1242, 1242,  946,  946,  946,  946,  946,
      946,  946,  946,  781, 1242, 1242, 1242,  781,  781,  781,
      781,  781,  781,  781,  782, 1242, 1242, 1242,  782,  782,
      782,  782,  782,  782,  782, 1069, 1242, 1242, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069,  951, 1242, 1242,  951,
      951,  951,  951,  951,  951,  951,  951,  179,  179, 1242,

     1242,  179,  179,  179, 1099, 1242, 1242, 1099, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1122, 1242, 1242, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1124, 1242, 1242, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1137, 1242, 1242,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,   23, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,

     1242, 1242, 1242, 1242, 1242
    } ;

static yyconst short int yy_chk[8206] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  934,   15,   15,   28,   15,   15,
       15,  907,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  897,   90,   28,   28,   13,   15,   13,  854,   29,
      787,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  784,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  762,   36,  592,   33,   33,   37,  109,  592,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  760,  759,  734,   39,
       39,  180,   39,   38,   39,   38,  732,  731,  728,   40,
       21,   21,   39,   21,   22,  180,   22,   22,   22,   22,
      145,   41,   22,   22,   22,   40,   40,  145,  145,  145,
      727,  723,   42,  145,   38,   38,   22,   41,   41,  145,
      721,   40,   41,   43,   40,   45,  720,   40,   42,   42,
       41,   41,  672,   41,   42,   47,   41,   44,  674,   43,
       43,   45,   45,  674,   42,   45,   22,   22,  670,   22,
       42,   47,   47,   44,   44,   43,  183,   43,   43,   46,
       45,   47,   48,  261,   43,   49,   44,   44,  725,   44,

      183,  669,   44,  725,   44,   46,   46,  261,   48,   48,
       48,   49,   49,   49,   49,   50,  265,   49,   51,  589,
       46,   49,   52,  587,   48,  585,   53,   49,   48,   61,
      265,   50,   50,   50,   51,   51,   61,   51,   52,   52,
       52,   51,   53,   53,  584,   61,   61,   50,   51,   51,
       54,   51,  543,   50,   52,  542,  315,   52,   56,  319,
       52,   57,   52,  541,   53,  540,   54,   54,   54,   58,
      315,  539,   54,  319,   56,   56,  336,   57,   57,   54,
       60,  538,   59,   56,   56,   58,   58,   58,   54,   55,
      336,   58,   57,   56,  397,   58,   60,   60,   59,   59,

      396,  163,  373,  163,   60,   55,   55,   59,   59,  340,
       60,   55,  341,   64,   55,   65,   64,  163,  334,   55,
       64,   55,   65,  340,   55,  368,   55,   55,   66,   64,
       64,   65,   65,  372,   66,   66,   67,  407,  333,  368,
       66,  332,   68,   67,   66,   66,   67,  372,   69,   68,
      331,  407,   67,   67,   68,   69,   70,   70,   68,   68,
       70,  491,   71,  320,   69,   69,   73,  266,   70,   71,
       70,  736,  179,   73,   75,  491,  736,   76,   71,   71,
       74,   75,   73,   73,   76,  175,  175,   74,  179,  179,
       75,   75,   73,   76,   76,   76,   74,   74,   71,   70,

       70,   72,  535,   78,  184,  107,   75,  106,   72,   75,
       78,   74,  545,  571,   74,   23,  535,   72,   72,   78,
       78,   74,   78,   72,    0,   79,  545,  571,  175,  175,
       72,   72,   79,   72,    0,   72,   72,   86,   72,   77,
        0,   79,   79,   79,   86,  586,   77,   79,  181,  668,
       80,    0,    0,   86,   86,   77,   77,   80,    0,  586,
       77,   81,   77,  668,  181,  181,   80,   80,   81,   80,
       77,    0,   80,   86,   82,   77,   77,   81,   81,  719,
       81,   82,   83,  730,    0,   84,   80,    0,   85,   83,
       82,   82,   84,  719,   81,   85,   87,  730,   83,   83,

        0,   84,   84,   87,   85,   85,   82,    0,   83,   82,
       85,   83,   87,   87,   87,  758,    0,   84,   84,   88,
       85,   89,   84,   84,    0,   96,   88,   92,   89,  758,
       92,   88,   96,   93,   92,   88,   88,   89,   89,   93,
       93,   96,   96,   92,   92,  185,    0,    0,  185,   93,
       93,   94,   94,   94,   94,   94,   94,    0,   94,  764,
       95,  185,  185,   97,  764,   94,    0,   95,   95,   95,
       97,   99,    0,  189,   94,   94,   95,   95,   99,   97,
       97,   98,   98,    0,    0,   98,    0,   99,   99,  189,
      189,  194,    0,   98,    0,   98,  102,  102,  102,  102,

      102,  102,   99,    0,    0,  189,  102,  194,  194,  102,
      104,  104,  104,  104,  104,  104,  780,  194,  780,  780,
      104,    0,  780,  104,   98,   98,  105,  105,  105,  105,
      105,  105,    0,  108,    0,  112,  105,  114,  112,  105,
      108,  115,  112,  114,  114,    0,    0,  190,  115,  108,
      108,  112,  112,  114,  114,  116,    0,  115,  115,  120,
        0,  117,  116,  190,  190,    0,  120,    0,  117,    0,
        0,  116,  116,  117,    0,  120,  120,  117,  117,  121,
      121,  122,  377,  121,    0,  124,  190,  123,  122,  377,
      377,  121,  124,  121,  123,  377,  193,  122,  122,  125,

        0,  124,  124,  123,  123,    0,  125,    0,    0,    0,
        0,  124,  193,  193,    0,  125,  125,  122,  193,  123,
      126,    0,  121,  121,  123,  127,    0,  126,  134,    0,
        0,  125,  127,  128,  125,  134,  126,  126,  126,    0,
      128,  127,  127,  767,  134,  134,  127,  129,  127,  128,
      128,  128,  767,    0,  129,  128,  767,  767,  130,  767,
      134,    0,  127,  129,  129,  130,    0,    0,    0,  129,
        0,  131,    0,  132,  130,  130,  186,  130,  131,  133,
      132,  195,  186,  129,  137,    0,  133,  131,  131,  132,
      132,  137,  186,  186,    0,  133,  133,  195,  195,  132,

      137,  137,  139,  131,  140,  139,  131,  141,    0,  139,
      140,  140,  133,    0,  141,  142,  133,    0,  139,  139,
      140,  140,  142,  141,  141,  143,  143,  146,    0,  143,
        0,  142,  142,  147,  146,    0,    0,  143,  148,  143,
      147,    0,    0,  146,  146,  148,  149,    0,    0,  147,
      147,    0,  147,  149,  148,  148,  191,  148,  146,  150,
        0,    0,  149,  149,  151,    0,  150,  192,  143,  143,
      144,  151,  191,  191,  148,  150,  150,  144,    0,  149,
      151,  151,  191,  192,  192,  191,  144,  144,  192,    0,
      152,    0,  144,  151,  150,  153,    0,  152,  196,  144,

      144,  154,  153,    0,  144,  144,  152,  152,  154,  197,
        0,  153,  153,    0,  196,  196,    0,  154,  154,  154,
      196,  590,  152,    0,  590,  197,  197,  590,  152,  590,
      197,  153,  155,  155,  155,  155,  155,  155,    0,  182,
      182,  182,  155,  590,  182,  155,  157,  157,  157,  157,
      157,  157,  182,    0,  182,    0,  157,    0,  187,  157,
      158,  158,  158,  158,  158,  158,  187,  187,  188,  188,
      158,  198,  188,  158,  187,  187,  199,    0,  200,    0,
      188,    0,  188,  182,  182,    0,    0,  198,  198,  201,
        0,  202,  199,  199,  200,  200,    0,  200,  199,  203,

      198,  198,  198,  204,    0,  201,  201,  202,  202,  198,
      205,  188,  188,  206,  200,  203,  203,    0,  207,  204,
      204,  202,  203,    0,  208,    0,  205,  205,  209,  206,
      206,  210,  205,  206,  207,  207,  207,    0,  212,  204,
      208,  208,  211,    0,  209,  209,    0,  210,  210,  215,
      206,    0,  213,  210,  212,  212,  208,  214,  211,  211,
        0,    0,  216,  209,    0,  215,  215,  211,  213,  213,
      213,  217,    0,  214,  214,  218,    0,  214,  216,  216,
      215,  216,  219,    0,  220,    0,    0,  217,  217,  217,
      222,  218,  218,  221,    0,  223,    0,  224,  219,  219,

      220,  220,    0,  217,    0,  225,  222,  222,  226,  221,
      221,  223,  223,  224,  224,    0,  223,  227,    0,  219,
      220,  225,  225,  221,  226,  226,  228,    0,    0,  229,
        0,  222,  224,  227,  227,  230,    0,  231,  226,  232,
      225,  235,  228,  228,  227,  229,  229,  233,    0,  228,
      236,  230,  230,  231,  231,  232,  232,  235,  235,    0,
        0,  229,  234,  233,  233,  237,  236,  236,  238,    0,
      240,  236,    0,  231,  232,    0,  232,  235,  234,  234,
      233,  237,  237,  239,  238,  238,  240,  240,  234,    0,
        0,  237,  241,    0,  234,  242,    0,    0,  243,  239,

      239,  244,    0,    0,  239,  238,  240,    0,  241,  241,
      245,  242,  242,  242,  243,  243,    0,  244,  244,  239,
      246,  241,  239,  239,  242,    0,  245,  245,    0,    0,
      243,  247,  242,  244,    0,  248,  246,  246,    0,  249,
        0,  250,  246,  251,    0,  245,  252,  247,  247,  247,
      253,  248,  248,  247,  248,  249,  249,  250,  250,  251,
      251,  251,  252,  252,  254,  248,  253,  253,    0,    0,
      255,  250,  252,  256,    0,    0,  850,  257,  850,  850,
      254,  254,  850,    0,  259,  253,  255,  255,    0,  256,
      256,  258,  255,  257,  257,  256,  260,  258,    0,  254,

      259,  259,  259,  260,  262,  256,    0,  258,  258,  263,
        0,  262,  260,  260,  257,    0,  263,  264,  264,  264,
      262,  262,  264,    0,  267,  263,  263,  267,  268,    0,
      264,  267,  264,    0,  268,  268,  269,    0,    0,  270,
      267,  267,  271,  269,  268,  268,  270,    0,  893,  271,
      893,  893,  269,  269,  893,  270,  270,  406,  271,  271,
        0,  264,  264,  272,  272,  273,    0,  272,    0,  274,
        0,  275,  273,  406,  406,  272,  274,  272,  275,  413,
        0,  273,  273,  276,    0,  274,  274,  275,  275,  275,
      276,    0,    0,    0,  410,  413,  413,  277,    0,  276,

      276,  273,  276,  274,  277,  278,  272,  272,  279,    0,
      410,  410,  278,  277,  277,  279,  280,    0,    0,  281,
        0,  278,  278,  280,  279,  279,  281,  277,  277,  410,
        0,    0,  280,  280,  282,  281,  281,  279,    0,    0,
        0,  282,  283,    0,    0,  284,    0,  286,  280,  283,
      282,  282,  284,  285,  286,  282,  281,    0,  283,  283,
      285,  284,  284,  286,  286,    0,    0,  287,    0,  285,
      285,    0,    0,    0,  287,    0,    0,    0,  289,  286,
      288,    0,  284,  287,  287,  289,  288,  288,  285,    0,
      288,  290,    0,  291,  289,  289,  288,  288,  290,  292,

      291,    0,  288,    0,  287,    0,  292,  290,  290,  291,
      291,  290,  293,    0,    0,  292,  292,  294,    0,  293,
        0,  292,    0,  295,  294,  296,    0,    0,  293,  293,
      295,  298,  296,  294,  294,    0,  294,    0,  298,  295,
      295,  296,  296,  297,  293,  297,  295,  298,  298,  299,
        0,    0,  297,  297,  294,  298,  299,  300,  297,  297,
        0,  301,    0,  300,  300,  299,  299,  412,  301,    0,
        0,    0,  302,  300,  300,  303,  299,  301,  301,  302,
      304,    0,  303,  412,  412,  412,    0,  304,  302,  302,
      301,  303,  303,  300,  302,  305,  304,  304,  306,  303,

      307,    0,  305,    0,  302,  306,  308,  307,    0,    0,
        0,  305,  305,  308,  306,  306,  307,  307,    0,    0,
      306,  309,  308,  308,  310,  308,  311,    0,  309,  312,
      305,  310,  313,  311,    0,  307,  312,  309,  309,  313,
      310,  310,  311,  311,  314,  312,  312,    0,  313,  313,
      316,  314,  311,    0,    0,  317,  309,  316,    0,    0,
      314,  314,  317,    0,  312,    0,  316,  316,  318,  318,
      318,  317,  317,  318,    0,  321,  326,  326,  321,  322,
      326,  318,  321,  318,    0,  322,  322,  327,  326,    0,
      326,  321,  321,    0,  327,  322,  322,  323,  323,  323,

      323,  323,  323,  327,  327,    0,  411,  323,  325,    0,
      323,    0,  318,  318,    0,  325,  325,  325,    0,  326,
      326,    0,  411,  411,  325,  325,  328,  328,  328,  328,
      328,  328,  411,  339,  339,  339,  328,    0,  339,  328,
      330,  330,  330,  330,  330,  330,  339,  335,  339,  337,
      330,  338,    0,  330,  335,    0,  337,    0,  338,    0,
        0,    0,    0,  335,  335,  337,  337,  338,  338,  342,
        0,    0,  342,  343,    0,  344,  342,  339,  339,  343,
      343,    0,  344,  345,  345,  342,  342,  345,    0,  343,
      343,  344,  344,  346,    0,  345,  348,  345,  349,    0,

      346,  347,    0,  348,  350,  349,  415,    0,  347,  346,
      346,  350,  348,  348,  349,  349,    0,  347,  347,    0,
      350,  350,  415,  415,  415,  418,  345,  345,  348,  346,
      351,  347,  347,  352,    0,  349,  354,  351,  353,  350,
      352,  418,  418,  354,    0,  353,  351,  351,  353,  352,
      352,  355,  354,  354,  353,  353,    0,    0,  355,  356,
      353,    0,  351,    0,  357,    0,  356,  355,  355,  414,
      352,  357,  358,  355,    0,  356,  356,  359,    0,  358,
      357,  357,    0,  360,  359,  414,  414,  357,  358,  358,
      360,    0,    0,  359,  359,    0,  356,  361,    0,  360,

      360,  359,  358,  422,  361,  362,    0,    0,  358,  358,
      360,  414,  362,  361,  361,    0,  363,    0,    0,  422,
      422,  362,  362,  363,    0,    0,  361,  362,  364,    0,
      365,    0,  363,  363,  422,  364,  366,  365,    0,    0,
      363,  367,    0,  366,  364,  364,  365,  365,  367,    0,
      364,  417,  366,  366,  369,    0,  370,  367,  367,    0,
        0,  369,    0,  370,    0,  365,  419,  417,  417,  417,
      369,  369,  370,  370,  371,  371,  371,  374,    0,  371,
      374,    0,  419,  419,  374,  375,    0,  371,    0,  371,
        0,  375,  375,  374,  374,  376,  376,  378,  419,  376,

        0,  375,  375,    0,  378,  379,    0,  376,    0,  376,
      380,    0,  379,  378,  378,  378,  381,  380,  371,  371,
        0,  379,  379,  381,  379,    0,  380,  380,    0,    0,
      382,    0,  381,  381,    0,    0,  383,  382,  376,  376,
        0,  384,    0,  383,    0,  381,  382,  382,  384,  385,
        0,  382,  383,  383,    0,  386,  385,  384,  384,    0,
      387,  384,  386,    0,    0,  385,  385,  387,  388,    0,
        0,  386,  386,  383,    0,  388,  387,  387,    0,  386,
        0,  385,  389,    0,  388,  388,  390,    0,    0,  389,
      391,    0,    0,  390,  392,    0,  387,  391,  389,  389,

      388,  392,  390,  390,    0,  390,  391,  391,    0,  416,
      392,  392,    0,    0,    0,    0,  391,  389,  393,  393,
      393,  393,  393,  393,  424,  416,  416,  420,  393,  392,
        0,  393,  395,  395,  395,  395,  395,  395,  416,    0,
      424,  424,  395,  420,  420,  395,  408,  423,    0,  408,
        0,    0,    0,    0,  408,  408,  408,  420,  421,  408,
      420,    0,  424,  423,  423,  425,  408,  408,  423,  408,
      408,  408,  426,    0,  421,  421,  427,    0,  421,  421,
      428,  425,  425,    0,    0,  430,    0,  425,  426,  426,
      429,    0,  427,  427,    0,  421,  428,  428,  408,  408,

      409,  430,  430,  409,    0,  426,  429,  429,  409,  409,
      409,  431,    0,  409,  430,  433,    0,    0,  432,    0,
      409,  409,  435,  409,  409,  409,  434,  431,  431,  438,
      429,  433,  433,  431,  432,  432,  433,    0,  435,  435,
        0,  436,  434,  434,  437,  438,  438,  439,    0,  440,
      438,  441,  409,  409,    0,  432,  434,  436,  436,  442,
      437,  437,  435,  439,  439,  440,  440,  441,  441,  439,
      440,  443,    0,  437,  436,  442,  442,  444,    0,  442,
      445,    0,  446,    0,  441,  448,    0,  443,  443,  447,
        0,  449,    0,  444,  444,  450,  445,  445,  446,  446,

      451,  448,  448,  445,    0,  447,  447,  449,  449,  444,
      449,  450,  450,  452,    0,  448,  451,  451,  453,    0,
      446,  451,  454,    0,  447,  455,    0,  456,    0,  452,
      452,    0,  457,    0,  453,  453,  458,    0,  454,  454,
      453,  455,  455,  456,  456,    0,  455,  454,  457,  457,
      459,    0,  458,  458,  453,  457,  460,    0,  456,  461,
        0,  458,  462,    0,  463,    0,  459,  459,    0,  457,
      464,    0,  460,  460,  465,  461,  461,    0,  462,  462,
      463,  463,  466,    0,    0,  461,  464,  464,  467,    0,
      465,  465,  464,  460,    0,  468,    0,  469,  466,  466,

      462,  470,  463,    0,  467,  467,  471,    0,  472,  465,
      467,  468,  468,  469,  469,  473,    0,  470,  470,  469,
      474,    0,  471,  471,  472,  472,  475,    0,  476,  472,
      468,  473,  473,  477,    0,    0,  474,  474,  478,    0,
      479,    0,  475,  475,  476,  476,  471,    0,  481,  477,
      477,    0,  473,    0,  478,  478,  479,  479,  480,    0,
      474,  476,  479,  475,  481,  481,  479,  482,  478,  477,
      483,  481,    0,    0,  480,  480,  484,    0,  480,  485,
        0,  486,    0,  482,  482,  489,  483,  483,  487,  483,
      488,    0,  484,  484,    0,  485,  485,  486,  486,    0,

        0,  489,  489,  482,  487,  487,  488,  488,  490,    0,
      486,  494,    0,  487,  485,  490,  484,  903,  494,  903,
      903,  488,  489,  903,  490,  490,  492,  494,  494,  492,
        0,    0,    0,    0,  492,  492,  492,  495,    0,  492,
        0,  492,  597,  494,  495,  496,  492,  492,    0,  492,
      492,  492,  496,  495,  495,  498,    0,  498,  597,  597,
      499,  496,  496,    0,    0,  498,    0,  499,  497,    0,
      498,  498,    0,  495,    0,  497,  499,  499,  492,  492,
      493,    0,    0,  493,  497,  497,    0,    0,  493,  493,
      493,    0,  500,  493,    0,  493,    0,    0,  497,  500,

      493,  493,    0,  493,  493,  493,  501,    0,  500,  500,
      502,    0,  502,  501,    0,    0,    0,    0,    0,  502,
      502,  502,  501,  501,  503,  502,  502,  500,  502,    0,
        0,  503,  493,  493,    0,  504,    0,  505,    0,    0,
      503,  503,  504,  501,  505,    0,  503,    0,    0,    0,
        0,  504,  504,  505,  505,    0,  506,    0,    0,  507,
        0,  508,    0,  506,    0,  504,  507,  505,  508,    0,
        0,    0,  506,  506,    0,  507,  507,  508,  508,  509,
      505,  506,  510,    0,  507,  511,  509,  512,    0,  510,
      513,    0,  511,    0,  512,  509,  509,  513,  510,  510,

        0,  511,  511,  512,  512,    0,  513,  513,  514,  509,
      509,  510,  513,    0,    0,  514,  515,    0,    0,  516,
      511,  517,    0,  515,  514,  514,  516,  518,  517,    0,
      514,  594,  515,  515,  518,  516,  516,  517,  517,  519,
        0,    0,  520,  518,  518,  518,  519,  594,  594,  520,
        0,  516,    0,  515,  521,  519,  519,  517,  520,  520,
      522,  521,    0,    0,  520,  523,    0,  522,  594,    0,
      521,  521,  523,  524,    0,  519,  522,  522,  525,  521,
      524,  523,  523,    0,  526,  525,    0,    0,    0,  524,
      524,  526,    0,  524,  525,  525,  527,    0,    0,    0,

      526,  526,    0,  527,  528,    0,    0,  523,    0,  526,
      529,  528,  527,  527,    0,  525,    0,  529,  530,    0,
      528,  528,    0,  531,  528,  530,  529,  529,  529,  532,
      531,    0,    0,  527,  530,  530,  532,    0,  530,  531,
      531,  533,    0,    0,    0,  532,  532,    0,  533,  534,
        0,    0,  544,  531,  530,  549,  534,  533,  533,  544,
      532,    0,  549,  548,    0,  534,  534,  553,  544,  544,
      548,  549,  549,    0,  553,    0,    0,  533,  536,  548,
      548,  536,    0,  553,  553,  549,  536,  536,  536,  550,
        0,  536,  595,  536,    0,  548,  550,  553,  536,  536,

      552,  536,  536,  536,  551,  550,  550,  552,  595,  595,
        0,  551,  550,    0,    0,    0,  552,  552,    0,    0,
      551,  551,    0,    0,    0,  550,    0,  554,  595,    0,
      536,  536,  537,  598,  554,  537,    0,  552,    0,  551,
      537,  537,  537,  554,  554,  537,    0,  537,  609,  598,
      598,  555,  537,  537,    0,  537,  537,  537,  555,    0,
        0,  598,  556,    0,  609,  609,  559,  555,  555,  556,
      554,    0,  609,  559,  557,    0,  555,    0,  556,  556,
        0,  557,  559,  559,  537,  537,  546,    0,  559,  546,
      557,  557,    0,    0,  546,  546,  546,    0,    0,  546,

        0,  546,    0,    0,  557,  557,  546,  546,  560,  546,
      546,  546,  558,    0,  561,  560,  562,    0,  596,  558,
      564,  561,    0,  562,  560,  560,    0,  564,  558,  558,
      561,  561,  562,  562,  596,  596,  564,  564,  546,  546,
      547,    0,  564,  547,    0,  560,  561,  558,  547,  547,
      547,  563,  562,  547,  596,  547,    0,  605,  563,  565,
      547,  547,    0,  547,  547,  547,  565,  563,  563,  563,
      566,    0,  567,  605,  605,  565,  565,  566,  568,  567,
        0,    0,    0,  605,    0,  568,  566,  566,  567,  567,
      566,  608,  547,  547,  568,  568,  569,  567,  568,  570,

        0,  565,  576,  569,    0,  602,  570,  608,  608,  576,
        0,    0,  569,  569,  569,  570,  570,  572,  576,  576,
      572,  602,  602,  602,  576,  572,  572,  572,  574,  608,
      572,  610,  572,    0,    0,  574,  577,  572,  572,  578,
      572,  572,  572,  577,  574,  574,  578,  610,  610,    0,
      579,    0,  577,  577,    0,  578,  578,  579,    0,    0,
      610,  580,    0,    0,  574,  577,  579,  579,  580,  572,
      572,  573,  599,    0,  573,  578,    0,  580,  580,  573,
      573,  573,    0,  581,  573,    0,  573,  579,  599,  599,
      581,  573,  573,    0,  573,  573,  573,  582,  580,  581,

      581,  583,    0,  581,  582,  600,    0,    0,  583,  599,
      601,    0,    0,  582,  582,    0,    0,  583,  583,  581,
        0,  600,  600,  573,  573,  575,  601,  601,  582,    0,
      604,    0,  575,  930,  603,  930,  930,  583,    0,  930,
      600,  575,  575,    0,    0,  601,  604,  604,  575,    0,
      603,  603,  604,  606,    0,  575,    0,  575,    0,    0,
      603,  575,  575,    0,  575,  591,  603,  607,  591,  606,
      606,    0,    0,  591,  591,  591,  611,    0,  591,  606,
      612,    0,  613,  607,  607,  614,  591,    0,  591,  591,
      591,  616,  611,  611,  615,    0,  612,  612,  613,  613,

        0,  614,  614,    0,  607,    0,    0,  616,  616,  616,
      615,  615,    0,    0,    0,  612,  614,  591,  591,  593,
      613,  617,  593,    0,    0,    0,    0,  593,  593,  593,
      618,  615,  593,  620,    0,  619,    0,  617,  617,    0,
      593,  621,  593,  593,  593,  622,  618,  618,  623,  620,
      620,  619,  619,    0,    0,  618,  617,  621,  621,  624,
        0,  622,  622,  625,  623,  623,  626,    0,    0,  620,
      621,  593,  593,  619,  627,  624,  624,  628,    0,  625,
      625,  629,  626,  626,  624,  630,    0,    0,  631,    0,
      627,  627,  626,  628,  628,  632,    0,  629,  629,  629,

      633,  630,  630,  627,  631,  631,    0,  630,  634,  628,
        0,  632,  632,  635,    0,  636,  633,  633,  637,    0,
      638,    0,  633,  640,  634,  634,  632,    0,    0,  635,
      635,  636,  636,  639,  637,  637,  638,  638,    0,  640,
      640,  641,  638,  642,  637,  643,    0,    0,  644,  639,
      639,  645,  636,  646,  639,    0,    0,  641,  641,  642,
      642,  643,  643,  642,  644,  644,  644,  645,  645,  646,
      646,  647,    0,  641,    0,  643,  648,  645,  649,    0,
        0,  650,    0,  651,    0,  652,    0,  647,  647,  646,
      653,  647,  648,  648,  649,  649,  648,  650,  650,  651,

      651,  652,  652,  654,    0,    0,  653,  653,  655,    0,
        0,  656,    0,  657,    0,  658,    0,  650,  651,  654,
      654,  652,  659,    0,  655,  655,  655,  656,  656,  657,
      657,  658,  658,  660,    0,  661,    0,  658,  659,  659,
      654,  662,    0,  663,  657,    0,  664,    0,    0,  660,
      660,  661,  661,  665,    0,  666,    0,  662,  662,  663,
      663,    0,  664,  664,  659,  663,  667,  661,  664,  665,
      665,  666,  666,  666,  789,    0,    0,  662,  676,    0,
      791,  671,  667,  667,  671,  676,  667,  671,    0,  671,
      789,  789,    0,  678,  676,  676,  791,  791,  676,  677,

      678,    0,  791,  671,  673,  794,  677,  673,    0,  678,
      678,    0,  673,  673,  673,  677,  677,  673,    0,  673,
        0,  794,  794,  679,    0,  673,  680,  673,  673,  673,
      679,  678,    0,  680,  681,  677,    0,  682,    0,  679,
      679,  681,  680,  680,  682,    0,    0,    0,  683,  679,
      681,  681,    0,  682,  682,  683,  673,  673,  675,    0,
        0,  675,    0,  680,  683,  683,  675,  675,  675,  682,
      684,  675,    0,  685,    0,    0,  792,  684,  683,  675,
      685,  675,  675,  675,    0,  683,  684,  684,  686,  685,
      685,  687,  792,  792,    0,  686,    0,  792,  687,  688,

      684,    0,  689,  685,  686,  686,  688,  687,  687,  689,
      675,  675,    0,  686,    0,  688,  688,  690,  689,  689,
      689,  691,    0,  793,  690,  692,    0,    0,  691,  693,
      688,    0,  692,  690,  690,    0,  693,  691,  691,  793,
      793,  692,  692,  691,    0,  693,  693,  692,  694,  793,
      695,    0,  696,    0,  795,  694,  697,  695,    0,  696,
        0,  693,    0,  697,  694,  694,  695,  695,  696,  696,
      795,  795,  697,  697,  697,  698,    0,  699,    0,  700,
        0,  694,  698,    0,  699,  802,  700,  695,    0,    0,
      696,  698,  698,  699,  699,  700,  700,    0,  701,    0,

      704,  802,  802,  702,  698,  701,  703,  704,    0,    0,
      702,    0,    0,  703,  701,  701,  704,  704,  699,  702,
      702,  702,  703,  703,  705,    0,  706,  703,    0,  707,
        0,  705,  708,  706,    0,  803,  707,    0,    0,  708,
      705,  705,  706,  706,  705,  707,  707,    0,  708,  708,
      709,  803,  803,  710,  708,  803,    0,  709,  706,  707,
      710,  711,    0,    0,  714,    0,  709,  709,  711,  710,
      710,  714,  709,    0,    0,  712,    0,  711,  711,  713,
      714,  714,  712,  800,    0,    0,  713,  715,    0,    0,
      710,  712,  712,  714,  715,  713,  713,  711,    0,  800,

      800,  712,    0,  715,  715,  716,    0,  717,    0,    0,
      718,  716,  716,    0,  717,    0,  713,  718,    0,  715,
      800,  716,  716,  717,  717,    0,  718,  718,    0,  722,
        0,  717,  722,  738,    0,  722,  733,  722,    0,  733,
      738,    0,  733,    0,  733,    0,    0,  739,    0,  738,
      738,  722,  724,  738,  739,  724,    0,    0,  733,    0,
      724,  724,  724,  739,  739,  724,  947,  724,  947,  947,
        0,  740,  947,  724,  741,  724,  724,  724,  740,  796,
        0,  741,  743,    0,    0,  739,  742,  740,  740,  743,
      741,  741,    0,  742,    0,  796,  796,  740,  743,  743,

      743,    0,  742,  742,  724,  724,  726,    0,    0,  726,
      796,  741,    0,    0,  726,  726,  726,  744,  742,  726,
      952,  745,  952,  952,  744,  751,  952,  726,  745,  726,
      726,  726,  751,  744,  744,    0,    0,  745,  745,  744,
      747,  751,  751,  745,    0,  746,  751,  747,  748,    0,
        0,    0,  746,    0,    0,  748,  747,  747,  726,  726,
      735,  746,  746,  735,  748,  748,  748,    0,  735,  735,
      735,    0,    0,  735,  804,  735,  797,  747,  746,  749,
        0,  735,  750,  735,  735,  735,  749,  752,    0,  750,
      804,  804,  797,  797,  752,  749,  749,    0,  750,  750,

      750,    0,  753,  752,  752,  797,    0,  752,    0,  753,
        0,    0,  735,  735,  737,    0,    0,  737,  753,  753,
      749,    0,  737,  737,  737,    0,  754,  737,    0,  756,
        0,    0,  753,  754,  755,  737,  756,  737,  737,  737,
      757,  755,  754,  754,  810,  756,  756,  757,  754,    0,
      755,  755,    0,    0,    0,  756,  757,  757,    0,    0,
      810,  810,  761,    0,    0,  761,  737,  737,  761,    0,
      761,  755,    0,  768,    0,  766,    0,  757,    0,    0,
      768,  810,  766,    0,  761,  763,    0,    0,  763,  768,
      768,  766,  766,  763,  763,  763,  769,    0,  763,  998,

      763,  998,  998,  769,    0,  998,  763,    0,  763,  763,
      763,  766,  769,  769,  770,    0,  771,    0,  773,    0,
        0,  770,    0,  771,    0,  773,  769,    0,    0,  774,
      770,  770,  771,  771,  773,  773,  774,  763,  763,  765,
        0,  771,  765,    0,  770,  774,  774,  765,  765,  765,
      772,  774,  765,    0,  775,    0,  773,  772,  776,    0,
      765,  775,  765,  765,  765,  776,  772,  772,    0,  777,
      775,  775,  778,    0,  776,  776,  777,    0,    0,  778,
        0,  772,  798,    0,    0,  777,  777,  776,  778,  778,
      775,  765,  765,    0,  779,    0,  778,  779,  798,  798,

      779,  777,  779,    0,    0,    0,  783,  786,  786,  783,
        0,  786,  783,  798,  783,    0,  779,  782,    0,  786,
      782,  786,    0,    0,    0,  782,  782,  782,  783,  799,
      782,  788,  790,    0,  788,    0,    0,  788,  782,  788,
      782,  782,  782,    0,  801,  799,  799,  799,  790,  790,
      786,  786,    0,  788,  790,    0,  805,    0,    0,    0,
      801,  801,    0,    0,  790,    0,    0,    0,    0,  782,
      782,  785,  805,  805,  785,  801,    0,    0,  805,  785,
      785,  785,  806,    0,  785,  807,    0, 1003,  808, 1003,
     1003,    0,  785, 1003,  785,  785,  785,  809,  806,  806,

      811,  807,  807,    0,  808,  808,  807,    0,  806,  808,
        0,  812,    0,  809,  809,  813,  811,  811,  814,  809,
        0,  815,    0,  785,  785,  816,  811,  812,  812,  817,
        0,  813,  813,  818,  814,  814,  813,  815,  815,    0,
        0,  816,  816,  819,    0,  817,  817,  820,    0,  818,
      818,  821,    0,    0,    0,  818,  822,  815,  823,  819,
      819,  824,    0,  820,  820,  825,    0,  821,  821,    0,
      817,  826,  822,  822,  823,  823,  820,  824,  824,  827,
        0,  825,  825,  819,  828,    0,  821,  826,  826,  829,
        0,  826,  822,  822,  825,  827,  827,  830,    0,    0,

      828,  828,    0,    0,  831,  829,  829,  832,    0,  833,
        0,  829,  834,  830,  830,  828,    0,    0,    0,  830,
      831,  831,  835,  832,  832,  833,  833,    0,  834,  834,
      836,    0,    0,  831,  833,  837,    0,  838,  835,  835,
        0,  839,    0,  840,  832,  841,  836,  836,  842,  834,
        0,  837,  837,  838,  838,  843,  836,  839,  839,  840,
      840,  841,  841,  838,  842,  842,  844,  840,  845,    0,
      846,  843,  843,  847,    0,    0,  839,  848,    0,    0,
      953,    0,  844,  844,  845,  845,  846,  846,    0,  847,
      847,  843,  849,  848,  848,  849,  953,  953,  849,    0,

      849,    0,  848,    0,  852,  856,  856,  852,  847,  856,
      852,    0,  852,    0,  849,  851,    0,  856,  851,  856,
        0,    0,    0,  851,  851,  851,  852,  859,  851,  858,
      851,    0,  858,    0,  859,  858,  851,  858,  851,  851,
      851,  956,    0,  859,  859,  860,    0,  861,  856,  856,
        0,  858,  860,  859,  861,    0,    0,  956,  956,  862,
        0,  860,  860,  861,  861,    0,  862,  851,  851,  855,
        0,    0,  855,  956,    0,  862,  862,  855,  855,  855,
      863,    0,  855,  862,  861,  962,    0,  863,  864,    0,
      855,  865,  855,  855,  855,  864,  863,  863,  865,    0,

        0,  962,  962,  866,  864,  864,  892,  865,  865,  892,
      866,  962,  892,  963,  892,  863,  865,    0,  867,  866,
      866,  855,  855,  857,  866,  867,  857,    0,  892,  963,
      963,  857,  857,  857,  867,  867,  857, 1030,  857, 1030,
     1030,    0,  868, 1030,  857,  869,  857,  857,  857,  868,
      870,  963,  869,  871,    0,  867,    0,  870,  868,  868,
      871,  869,  869,    0,    0,    0,  870,  870,    0,  871,
      871,  872,    0,  868,  873,  857,  857,  874,  872,    0,
      869,  873,  870,    0,  874,  871,    0,  872,  872,  875,
      873,  873,  876,  874,  874,  873,  875,  872,    0,  876,

      877,    0,    0,  878,    0,  875,  875,  877,  876,  876,
      878,  879,    0,    0,  874,  880,  877,  877,  879,  878,
      878,  878,  880,  881,  877,    0,  884,  879,  879,  882,
      881,  880,  880,  884,    0,    0,  882,  883,    0,  881,
      881,    0,  884,  884,  883,  882,  882,  880,  879,  885,
      882,  886,    0,  883,  883,  881,  885,  883,  886,    0,
        0,    0,    0,  887,    0,  885,  885,  886,  886,  886,
      887,  888,    0,    0,  889,    0,  890,    0,  888,  887,
      887,  889,  954,  890,    0,  887,    0,  888,  888,  888,
      889,  889,  890,  890,    0,  891,    0,  895,  954,  954,

      895,  890,  891,  895,    0,  895,  899,  899,    0,  889,
      899,  891,  891,  894,    0,    0,  894,  954,  899,  895,
      899,  894,  894,  894,  901,    0,  894,  901,  894,    0,
      901,    0,  901,    0,  894,    0,  894,  894,  894,  902,
        0,    0,  902,    0,    0,  902,  901,  902,    0,  899,
      899,  905,  911,    0,  905,  911,    0,  905,  911,  905,
      911,  902,  913,    0,    0,  894,  894,  898,    0,  913,
      898,    0,    0,  905,  911,  898,  898,  898,  913,  913,
      898,  929,  909,  909,  929,    0,  909,  929,  898,  929,
      898,  898,  898,  914,  909,  919,  909,  912,    0,  913,

      914,    0,  919,  929,  912,    0,    0,    0,    0,  914,
      914,  919,  919,  912,  912,    0,    0,  914,    0,  898,
      898,  900,    0,  912,  900,  909,  909,  919,    0,  900,
      900,  900,  915,    0,  900,    0,  900,  958,    0,  915,
      916,    0,  900,    0,  900,  900,  900,  916,  915,  915,
        0,    0,  918,  958,  958,  917,  916,  916,  958,  918,
        0,    0,  917,  920,    0,  968,    0,  915,  918,  918,
      920,  917,  917,  900,  900,  904,    0,  916,  904,  920,
      920,  968,  968,  904,  904,  904,  917,  918,  904,  920,
      904,  936,  936,    0,  921,  936,  904,  922,  904,  904,

      904,  921,  923,  936,  922,  936,  965,    0,  924,  923,
      921,  921,    0,  922,  922,  924,    0,    0,  923,  923,
      923,  922,  965,  965,  924,  924,  965,  904,  904,  906,
        0,  921,  906,    0,  936,  936,    0,  906,  906,  906,
      925,    0,  906,    0,  906,  924,    0,  925,  926,    0,
      906,  928,  906,  906,  906,  926,  925,  925,  928,  927,
        0,    0,    0,  939,  926,  926,  927,  928,  928,  926,
      939,  944,  925,  928,    0,  927,  927,  927,  944,  939,
      939,  906,  906,  908,    0,  939,  908,  944,  944,  944,
        0,  908,  908,  908,  932,  938,  908,  932,  938,    0,

      932,  938,  932,  938,  908,  940,  908,  908,  908,    0,
        0,  941,  940,    0,    0,    0,  932,  938,  941,    0,
        0,  940,  940,    0,    0,    0,  957,  941,  941,    0,
      940,    0,  941,    0,    0,  908,  908,  910,    0,    0,
      910,    0,  957,  957,    0,  910,  910,  910,  942,    0,
      910,    0,  910,    0,    0,  942,  943,  957,  910,    0,
      910,  910,  910,  943,  942,  942,    0,  945,    0,  942,
        0,  955,  943,  943,  945,    0,  943,    0,    0,    0,
      961,  948,  948,  945,  945,  948,    0,  955,  955,  910,
      910,  931,    0,  948,  931,  948,  961,  961,    0,  931,

      931,  931,  945,    0,  931,  946,  931,  955,  946,  961,
        0,  946,  931,  946,  931,  931,  931,  959,    0,    0,
      950,    0,    0,  950,  948,  948,  950,  946,  950,  951,
      960,    0,  951,  959,  959,  951,    0,  951,    0,  959,
      964,    0,  950,  931,  931,  933,  960,  960,  933,    0,
        0,  951,  960,  933,  933,  933,  964,  964,  933,  966,
      933,  967,  964,  969,    0,  970,  933,    0,  933,  933,
      933,  972,    0,  971,    0,  966,  966,  967,  967,  969,
      969,  970,  970,  967,  973,    0,    0,  972,  972,  971,
      971,    0,    0,  972,  969,    0,  966,  933,  933,  935,

      973,  973,  935,    0,    0,    0,    0,  935,  935,  935,
      971,  974,  935,  975,    0,  976,    0,  977,    0,  978,
      935,  979,  935,  935,  935,  980,    0,  974,  974,  975,
      975,  976,  976,  977,  977,  978,  978,  979,  979,    0,
        0,  980,  980,  977,    0,    0,    0,    0,  981,  975,
      980,  935,  935,  937,    0,  982,  937,    0,    0,    0,
        0,  937,  937,  937,  981,  981,  937,  983,  937,    0,
      981,  982,  982,  984,  937,    0,  937,  937,  937,  985,
        0,  986,    0,  983,  983,  983,  987,    0,    0,  984,
      984,    0,  982,    0,    0,  985,  985,  986,  986,    0,

        0,    0,  987,  987,    0,  937,  937,  949,  987,  988,
      949,    0,    0,    0,    0,  949,  949,  949,  989,    0,
      949,  990,    0,    0,  991,  988,  988,  992,  949,  993,
      949,  949,  949,  994,  989,  989,  995,  990,  990,    0,
      991,  991,    0,  992,  992,  993,  993,  996,  997,  994,
      994,  997,  995,  995,  997,  994,  997,    0,  990,  949,
      949,  991,    0,  996,  996,    0,    0,    0,    0,  992,
      997,  995,  999,  999, 1001, 1002,  999, 1001, 1002,    0,
     1001, 1002, 1001, 1002,  999, 1004,  999,    0, 1005,    0,
        0, 1006, 1004, 1007,    0, 1005, 1001, 1002, 1006,    0,

     1007, 1004, 1004, 1004, 1005, 1005, 1005, 1006, 1006, 1007,
     1007, 1008,    0,    0,    0,  999,  999, 1009, 1008, 1010,
        0,    0,    0, 1011, 1009, 1012, 1010, 1008, 1008, 1006,
     1011, 1007, 1012, 1009, 1009, 1010, 1010, 1008, 1013, 1011,
     1011, 1012, 1012, 1014,    0, 1013, 1072,    0,    0, 1016,
     1014, 1015,    0, 1012, 1013, 1013, 1016, 1017, 1015, 1014,
     1014,    0, 1072, 1072, 1017, 1016, 1016, 1015, 1015, 1018,
        0, 1016,    0, 1017, 1017, 1013, 1018, 1015,    0, 1017,
     1014, 1019,    0, 1020,    0, 1018, 1018, 1021, 1019, 1035,
     1020, 1035, 1035,    0, 1021, 1035,    0, 1019, 1019, 1020,

     1020, 1022,    0, 1021, 1021,    0, 1018,    0, 1022, 1023,
        0, 1020, 1024,    0, 1025,    0, 1023, 1022, 1022, 1024,
     1026, 1025, 1021, 1022,    0, 1023, 1023, 1026, 1024, 1024,
     1025, 1025, 1027,    0,    0, 1028, 1026, 1026, 1025, 1027,
        0, 1024, 1028,    0,    0,    0, 1023,    0, 1027, 1027,
        0, 1028, 1028,    0, 1029, 1033, 1026, 1029, 1033,    0,
     1029, 1033, 1029, 1033,    0,    0,    0, 1028,    0, 1027,
     1031, 1031, 1034,    0, 1031, 1034, 1029, 1033, 1034,    0,
     1034,    0, 1031, 1036, 1031,    0, 1036,    0,    0, 1036,
     1037, 1036, 1037, 1037, 1034,    0, 1037, 1038, 1038,    0,

     1040, 1038,    0, 1040, 1041, 1036, 1040, 1041, 1040, 1038,
     1041, 1038, 1041, 1031, 1031, 1042, 1043, 1042, 1042,    0,
     1044, 1042, 1040, 1043,    0,    0, 1041, 1044, 1045,    0,
        0,    0, 1043, 1043, 1043, 1045, 1044, 1044, 1044, 1046,
     1038, 1038, 1047,    0, 1045, 1045, 1046, 1048,    0, 1047,
        0, 1074,    0, 1049, 1048, 1046, 1046,    0, 1047, 1047,
     1049,    0,    0, 1048, 1048, 1050, 1045, 1074, 1074, 1049,
     1049,    0, 1050, 1051,    0, 1049, 1052, 1046, 1053, 1047,
     1051, 1050, 1050, 1052, 1048, 1053,    0, 1050,    0, 1051,
     1051, 1054, 1052, 1052, 1053, 1053,    0, 1055, 1054, 1057,

     1053, 1057, 1057,    0, 1055, 1057,    0, 1054, 1054, 1056,
     1051, 1052, 1056, 1055, 1055, 1056,    0, 1056, 1058, 1058,
     1054, 1055, 1058, 1062,    0, 1062, 1062,    0, 1063, 1062,
     1058, 1056, 1058, 1060, 1061, 1063, 1060, 1061,    0, 1060,
     1061, 1060, 1061, 1064, 1063, 1063, 1070,    0, 1070, 1070,
     1064, 1065, 1070,    0,    0, 1060, 1061, 1073, 1065, 1064,
     1064, 1058, 1058, 1066, 1063, 1067,    0, 1065, 1065, 1064,
     1066, 1068, 1067, 1073, 1073,    0, 1071, 1065, 1068, 1066,
     1066, 1067, 1067, 1069,    0,    0, 1069, 1068, 1068, 1069,
     1075, 1069, 1071, 1071,    0, 1076,    0, 1073, 1077,    0,

     1066, 1067, 1071, 1078,    0, 1069, 1075, 1075, 1068,    0,
        0, 1076, 1076, 1080, 1077, 1077, 1079,    0, 1071, 1078,
     1078,    0,    0, 1081,    0, 1075, 1076, 1082,    0, 1080,
     1080, 1083, 1079, 1079, 1084, 1078, 1085,    0, 1079, 1081,
     1081,    0,    0, 1082, 1082, 1086,    0, 1083, 1083, 1082,
     1084, 1084, 1085, 1085, 1087,    0, 1084, 1088, 1085, 1089,
     1081, 1086, 1086, 1090,    0,    0, 1091,    0, 1092,    0,
     1087, 1087, 1093, 1088, 1088, 1089, 1089, 1094,    0, 1090,
     1090, 1089, 1091, 1091, 1092, 1092, 1095,    0, 1093, 1093,
     1096,    0, 1097, 1094, 1094, 1098,    0, 1092, 1101, 1094,

     1088,    0, 1095, 1095,    0, 1101, 1096, 1096, 1097, 1097,
     1099, 1098, 1098, 1099, 1101, 1101, 1099, 1100, 1099, 1100,
     1100, 1102,    0, 1100, 1095,    0, 1103, 1098, 1102, 1104,
        0,    0, 1099, 1103, 1105, 1101, 1104, 1102, 1102,    0,
     1106, 1105, 1103, 1103,    0, 1104, 1104, 1106,    0, 1104,
     1105, 1105, 1107,    0,    0, 1108, 1106, 1106, 1102, 1107,
     1109, 1103, 1108, 1110,    0, 1105, 1111, 1109, 1107, 1107,
     1110, 1108, 1108, 1111, 1107,    0, 1109, 1109, 1112, 1110,
     1110,    0, 1111, 1111, 1110, 1112, 1113,    0,    0,    0,
        0, 1109, 1114, 1113, 1112, 1112, 1112, 1108, 1115, 1114,

     1116,    0, 1113, 1113, 1117, 1115, 1118, 1116, 1114, 1114,
        0, 1117,    0, 1118, 1115, 1115, 1116, 1116,    0,    0,
     1117, 1117, 1118, 1118, 1119, 1114, 1116, 1120,    0, 1115,
     1121, 1119,    0, 1123, 1120, 1123, 1123, 1121,    0, 1123,
     1119, 1119,    0, 1120, 1120,    0, 1121, 1121, 1118, 1122,
     1124,    0, 1122, 1124,    0, 1122, 1124, 1122, 1124,    0,
     1119, 1126, 1121, 1120, 1125,    0, 1125, 1125, 1126, 1127,
     1125, 1122, 1124, 1128,    0, 1129, 1127, 1126, 1126,    0,
     1128,    0, 1129,    0,    0, 1127, 1127, 1130,    0, 1128,
     1128, 1129, 1129, 1137, 1130, 1129, 1137, 1144, 1126, 1137,

     1131, 1137,    0, 1130, 1130, 1132, 1127, 1131, 1128, 1130,
        0, 1133, 1132, 1144, 1144, 1137, 1131, 1131, 1133, 1144,
        0, 1132, 1132, 1134,    0,    0, 1132, 1133, 1133, 1133,
     1134, 1135,    0,    0, 1136,    0,    0, 1139, 1135, 1134,
     1134, 1136, 1131, 1138, 1139, 1138, 1138, 1135, 1135, 1138,
     1136, 1136,    0, 1139, 1139,    0, 1134, 1140,    0,    0,
        0,    0, 1135, 1141, 1140, 1142,    0,    0, 1139, 1145,
     1141,    0, 1142, 1140, 1140, 1146, 1136, 1143,    0, 1141,
     1141, 1142, 1142,    0, 1143, 1145, 1145, 1147, 1140, 1141,
     1148, 1146, 1146, 1143, 1143, 1149,    0,    0, 1150,    0,

     1145, 1142, 1151, 1147, 1147,    0, 1148, 1148,    0, 1152,
        0, 1149, 1149, 1143, 1150, 1150, 1153,    0, 1151, 1151,
     1154, 1148, 1155,    0, 1147, 1152, 1152, 1156,    0, 1157,
     1152, 1158, 1153, 1153, 1159,    0, 1154, 1154, 1155, 1155,
        0,    0, 1154, 1156, 1156, 1157, 1157, 1158, 1158, 1160,
     1159, 1159,    0, 1161,    0, 1162, 1160,    0, 1155,    0,
     1161,    0, 1162,    0,    0, 1160, 1160,    0, 1158, 1161,
     1161, 1162, 1162, 1162, 1159, 1160, 1163,    0, 1164, 1161,
     1165,    0,    0, 1163,    0, 1164,    0, 1165,    0,    0,
        0, 1166, 1163, 1163, 1164, 1164, 1165, 1165, 1166, 1167,

        0, 1166, 1164, 1168,    0, 1169, 1167, 1166, 1166, 1190,
     1168, 1165, 1169, 1163,    0, 1167, 1167, 1170,    0, 1168,
     1168, 1169, 1169, 1167, 1170, 1190, 1190,    0, 1171,    0,
     1172,    0,    0, 1170, 1170, 1171, 1173, 1172, 1192,    0,
        0,    0, 1170, 1173, 1171, 1171, 1172, 1172, 1171, 1174,
        0, 1175, 1173, 1173, 1192, 1192, 1174, 1176, 1175,    0,
        0, 1172, 1177,    0, 1176, 1174, 1174, 1175, 1175, 1177,
     1178, 1174,    0, 1176, 1176, 1179,    0, 1178, 1177, 1177,
        0,    0, 1179, 1180,    0, 1176, 1178, 1178, 1177, 1193,
     1180, 1179, 1179, 1179, 1181,    0, 1178, 1182,    0, 1180,

     1180, 1181, 1183,    0, 1182, 1193, 1193, 1182,    0, 1183,
     1181, 1181,    0, 1182, 1182, 1184,    0, 1185, 1183, 1183,
     1180, 1186, 1184, 1187, 1185, 1181,    0, 1183, 1186,    0,
     1187, 1184, 1184, 1185, 1185, 1184, 1188, 1186, 1186, 1187,
     1187, 1185,    0, 1188, 1189, 1186, 1191,    0, 1194,    0,
     1195,    0, 1188, 1188, 1187,    0,    0, 1196, 1188, 1197,
     1189, 1189, 1191, 1191, 1194, 1194, 1195, 1195,    0,    0,
     1198,    0, 1195, 1196, 1196, 1197, 1197, 1198, 1199,    0,
     1189, 1200, 1191, 1196, 1201, 1199, 1198, 1198, 1200, 1202,
        0, 1201,    0,    0, 1199, 1199, 1202, 1200, 1200,    0,

     1201, 1201,    0, 1203,    0, 1202, 1202,    0, 1204, 1198,
     1203,    0,    0,    0,    0, 1204, 1201, 1199, 1200, 1203,
     1203, 1205,    0,    0, 1204, 1204, 1202, 1206, 1205, 1203,
     1204,    0, 1207,    0, 1206, 1208,    0, 1205, 1205, 1207,
     1209,    0, 1208, 1206, 1206, 1205,    0, 1209, 1207, 1207,
        0, 1208, 1208, 1210,    0, 1211, 1209, 1209,    0, 1212,
     1210,    0, 1211, 1206, 1238,    0, 1212,    0,    0, 1210,
     1210, 1211, 1211,    0, 1208, 1212, 1212, 1213,    0, 1209,
     1238, 1238, 1214,    0, 1213, 1215,    0, 1211,    0, 1214,
     1210,    0, 1215, 1213, 1213, 1217, 1212, 1218, 1214, 1214,

     1216, 1215, 1215, 1213, 1214,    0,    0, 1216, 1219, 1215,
        0, 1217, 1217, 1218, 1218, 1219, 1216, 1216,    0,    0,
        0, 1220,    0,    0, 1219, 1219,    0,    0, 1220, 1218,
     1219, 1217, 1221,    0, 1222,    0, 1216, 1220, 1220, 1221,
     1223, 1222,    0, 1220,    0, 1224,    0, 1223, 1221, 1221,
     1222, 1222, 1224,    0,    0,    0, 1223, 1223, 1221, 1225,
        0, 1224, 1224, 1226,    0, 1224, 1225, 1227,    0, 1222,
     1226, 1228,    0,    0, 1227, 1225, 1225,    0, 1228, 1226,
     1226,    0,    0, 1227, 1227, 1229,    0, 1228, 1228, 1227,
     1230,    0, 1229, 1228,    0,    0, 1231, 1230, 1232,    0,

        0, 1229, 1229, 1231,    0,    0, 1230, 1230,    0,    0,
     1233, 1229, 1231, 1231, 1232, 1232, 1231, 1233,    0,    0,
        0, 1234,    0, 1235,    0, 1230, 1233, 1233, 1234, 1232,
     1235,    0,    0,    0, 1236,    0, 1237, 1234, 1234, 1235,
     1235, 1236, 1239, 1237,    0,    0,    0, 1240,    0, 1239,
     1236, 1236, 1237, 1237, 1240, 1235,    0,    0, 1239, 1239,
     1241,    0,    0, 1240, 1240,    0,    0, 1241, 1237,    0,
        0,    0,    0, 1239,    0,    0, 1241, 1241, 1240, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,

     1244, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1248, 1248,    0,    0, 1248, 1248,
     1248, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1250,
     1250,    0,    0, 1250, 1250, 1250, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1252, 1252,    0,    0, 1252, 1252,
     1252, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1254,
     1254,    0,    0, 1254, 1254, 1254, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1256, 1256,    0,    0, 1256, 1256,

     1256, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1258,
        0,    0,    0, 1258,    0, 1258, 1258,    0, 1258, 1258,
     1259,    0,    0, 1259, 1259,    0, 1259, 1259, 1259, 1259,
     1259, 1260, 1260,    0, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1261,    0, 1261, 1261,    0,    0, 1261,    0,
     1261, 1262, 1262, 1262, 1262, 1262,    0, 1262, 1263, 1263,
     1263, 1263, 1263,    0, 1263, 1264, 1264, 1264, 1264, 1264,
        0, 1264, 1265, 1265, 1265, 1265, 1265,    0, 1265, 1266,
     1266, 1266, 1266, 1266,    0, 1266, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1268,    0,    0,    0, 1268, 1268,

     1268, 1268, 1268, 1268, 1268, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1270,    0,    0,    0, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1272,    0,    0,    0, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1273,    0,    0,    0, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1275,    0,    0,    0, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1277,    0,    0,    0, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1278,    0,    0, 1278, 1278, 1278, 1278, 1278,

     1278, 1278, 1278, 1279,    0,    0,    0, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1280,    0,    0,    0, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1281,    0,    0, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1282,    0,    0,    0,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1283,    0,    0,
        0, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1284,    0,
        0, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1285,
        0,    0,    0, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1286,    0,    0,    0, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1287,    0,    0,    0, 1287, 1287, 1287, 1287, 1287,

     1287, 1287, 1288,    0,    0, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1289,    0,    0,    0, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1290,    0,    0,    0, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1291,    0,    0, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1292,    0,    0,    0,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1293,    0,    0,
        0, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1294,    0,
        0, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1295,
        0,    0,    0, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1296,    0,    0, 1296, 1296, 1296, 1296, 1296, 1296, 1296,

     1296, 1297,    0,    0, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1298,    0,    0,    0, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1299,    0,    0,    0, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1300,    0,    0, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1301, 1301,    0,    0, 1301,
     1301, 1301, 1302,    0,    0, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1303,    0,    0,    0, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1304,    0,    0,    0, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1305,    0,    0, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1306,    0,    0, 1306,

     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1307,    0,    0,
        0, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1308,    0,
        0, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1309,
        0,    0,    0, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1310,    0,    0,    0, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1311,    0,    0, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1312, 1312,    0,    0, 1312, 1312, 1312, 1313,
        0,    0, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1314,    0,    0,    0, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1315,    0,    0, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1316,    0,    0,    0, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1317,    0,    0,    0, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1318,    0,    0, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1319, 1319,    0,    0, 1319,
     1319, 1319, 1320,    0,    0, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1321,    0,    0,    0, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1322,    0,    0,    0, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1323,    0,    0, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1324,    0,    0, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1325, 1325,    0,

        0, 1325, 1325, 1325, 1326,    0,    0, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1327,    0,    0, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1328,    0,    0, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1329,    0,    0,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,

     1242, 1242, 1242, 1242, 1242
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
#define INITIAL 0
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); DebugAdvisory("Stored " << t); }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); DebugAdvisory("Stored fixUp " << t); }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;
#define ID_MODE 1

#define CMD_MODE 2

#define SEEN_DOT 3

#define BUBBLE_MODE 4

#define END_STATEMENT_MODE 5

#define END_COMMAND_MODE 6

#define FILE_NAME_MODE 7

#define FILE_NAME_QUOTE_MODE 8

#define STRING_MODE 9

#define LATEX_MODE 10

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 114 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1243 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8149 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_OPS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 98:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 104:
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 106:
YY_RULE_SETUP
#line 278 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 279 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 280 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 281 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 282 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 283 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 284 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 285 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 286 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 287 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 288 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 289 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 290 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 291 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 292 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 293 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 294 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 295 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 296 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 299 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 300 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 301 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 302 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 303 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 304 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 158:
YY_RULE_SETUP
#line 336 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 342 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 348 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 354 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 360 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 366 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 372 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 378 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 384 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 393 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 397 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 408 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 409 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 420 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 431 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 173:
YY_RULE_SETUP
#line 440 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 174:
YY_RULE_SETUP
#line 448 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 175:
YY_RULE_SETUP
#line 456 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 460 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 464 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 178:
YY_RULE_SETUP
#line 472 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 478 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 479 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 480 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 481 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 482 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 483 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 492 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 186:
YY_RULE_SETUP
#line 501 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 507 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 508 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 189:
YY_RULE_SETUP
#line 517 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 522 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 191:
YY_RULE_SETUP
#line 531 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 532 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 537 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 551 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 555 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 559 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 563 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 566 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 572 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 573 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 574 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 579 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1243 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1243 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1242);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 579 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"
