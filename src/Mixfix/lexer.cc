
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 209
#define YY_END_OF_BUFFER 210
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1282] =
    {   0,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,    0,    0,    0,    0,  197,  197,
        0,    0,  210,  208,  206,  207,  207,  105,  208,  103,
      105,  105,  105,  103,  104,  104,  105,  208,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,   15,  105,  105,  105,  105,  105,  105,  105,
      165,  208,  163,  163,  163,  165,  163,  163,  165,  208,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  111,  208,
      107,  111,  111,  109,  108,  107,  111,  208,  111,  109,

      113,  113,  112,  113,  113,  113,  113,  180,  208,  175,
      176,  180,  167,  180,  178,  166,  170,  168,  169,  180,
      208,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  177,  185,  185,  185,  185,  185,
      183,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  206,  182,  208,  207,  191,  192,
      193,  186,  190,  195,  194,  196,  197,  198,  205,  199,
      204,  204,  200,  201,  199,  202,  203,  206,  105,    0,
      105,    0,    0,    0,  105,  105,  104,    0,  105,  105,
      105,  105,  105,  105,  105,   11,  105,  105,  105,  105,

      105,  105,   45,  105,  105,   79,  105,  105,  105,  105,
      105,  105,  105,   66,  105,  105,    5,  105,  105,  105,
      105,   14,  105,   78,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,   40,   76,  105,  105,  105,  105,
      105,  105,  105,  105,   80,  105,  105,  105,  105,  105,
      105,  105,  105,    6,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  165,    0,  164,  165,    0,    0,
        0,  165,  165,  159,  162,  160,    0,  165,  165,  165,
      165,  165,  154,  165,  165,  165,  165,  153,  142,  165,
      165,  165,  165,  141,  165,  140,  165,  165,  165,  165,

      151,  165,  165,  165,  147,  165,  142,  165,  155,  165,
      165,  165,  165,  165,  114,  142,  165,  161,  111,    0,
      110,  111,    0,    0,    0,  111,  111,    0,  106,  108,
        0,    5,  206,  112,    0,    0,    0,    0,    0,  180,
        0,  179,  180,    0,    0,    0,  180,  180,  171,    0,
      180,  180,  180,  180,  180,  180,  180,  180,  173,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      172,  185,    0,  184,  185,    0,    0,    0,  185,  185,
        0,  185,  185,  185,  181,  185,  185,  181,  185,  185,
      185,  181,  181,  185,  185,  181,  185,  206,  182,    0,

        0,    0,  191,  187,  188,  189,  195,  197,  199,  199,
      105,    0,    2,    2,  105,  105,  105,   71,  105,  105,
      105,  105,  105,  105,   70,  105,  105,  105,  105,  105,
      105,  105,  105,   16,   79,  105,  105,  105,  105,  105,
      105,  105,   31,  105,  105,  105,  105,  105,  105,  105,
      105,   78,  105,  105,    6,   29,  105,  105,  105,   41,
      105,   76,  105,  105,  105,  105,  105,  105,   10,  105,
      102,   19,  105,  105,   22,   80,  105,  105,  105,   38,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,   77,  105,  105,  105,  105,  105,  105,  105,  165,

        0,    2,    2,  165,  165,  152,  165,  165,  156,  165,
      165,  165,  165,  165,  165,  165,  165,  119,  165,  142,
      165,  157,  165,  165,  165,  165,  165,  165,  135,  134,
      165,  148,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  150,  111,    0,    2,    2,    0,    0,    0,
        0,    2,    2,  180,    0,    2,    2,  180,  180,  180,
      180,  180,  180,  180,  180,  174,  180,  180,  180,  180,
      180,  180,  180,  174,  180,  180,  180,  180,  180,  185,
        0,    2,    2,  185,  185,  185,  181,  181,  185,  185,
      185,  185,  181,    0,    0,    0,    0,    2,    2,    2,

        1,    2,    2,  105,  105,  105,   57,   47,  105,  105,
      105,  105,  105,  105,  105,  105,   54,   28,  105,   20,
      105,  105,   95,   23,  105,  105,   62,  105,   24,  105,
      105,  105,  105,  105,    9,   27,  105,    3,  105,  105,
      105,  105,   18,  105,    7,  105,  105,   98,   13,  105,
      105,  105,  105,   15,  105,  105,  105,  105,  105,   80,
      105,  105,   39,   75,   21,   25,  105,   93,  105,  105,
       67,  105,  105,  105,  105,   77,  105,    8,  105,  105,
       63,  105,  105,    0,    0,    2,    2,    2,    1,    2,
        2,  165,  165,  118,  165,  165,  130,  165,  165,  157,

      165,  165,  158,  165,  165,  115,  165,  165,  165,  120,
      165,  165,  121,  165,  165,  122,    3,  165,  165,  149,
      165,  165,  129,  124,  165,  165,  143,  165,  165,  165,
      165,  165,  165,  150,    0,    0,    2,    2,    2,    1,
        2,    2,    0,    0,    1,    0,    0,    2,    2,    2,
        1,    2,    2,  180,  174,  180,  180,  180,  180,  180,
      180,  174,  180,  174,  180,  180,  180,  180,  174,  174,
      180,  180,  180,    0,    0,    2,    2,    2,    1,    2,
        2,  185,  185,  181,  181,  185,  185,  185,  185,  185,
      181,  185,  185,  185,    2,    2,    1,    1,    1,    1,

        1,    2,    2,    2,   92,  105,   65,  105,   96,  105,
       26,   46,   59,  105,  105,  105,  105,  105,  105,   84,
      105,   89,  105,  105,  105,  105,  105,  105,  105,   60,
      105,  105,   82,   99,   34,  105,  105,  105,  105,  105,
      105,   64,   17,   56,  105,  105,   12,  105,  105,  105,
      105,  105,  105,  105,   75,  105,  105,   68,   55,  105,
      105,   42,   37,  105,  105,   74,   94,   49,  105,  105,
        2,    2,    1,    1,    1,    1,    1,    2,    2,    2,
      117,  145,  165,  165,  165,  136,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  116,  131,  165,  165,

      165,  165,  165,  165,  165,  123,  143,  165,  127,  165,
      165,  165,  142,    2,    2,    1,    1,    1,    1,    1,
        2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
        2,    2,    2,  174,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  174,
        2,    2,    1,    1,    1,    1,    1,    2,    2,    2,
      181,  185,  185,  185,  185,  185,  185,    1,    1,    1,
        1,    1,    2,    2,   43,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
       86,  105,    4,  105,  105,  105,   99,   61,   73,   29,

      105,  105,  101,   64,  105,  105,  105,  105,   19,   91,
       53,  105,   36,   50,  105,  105,  105,  105,   69,  105,
      105,  105,   35,    1,    1,    1,    1,    1,    2,    2,
      165,  165,  133,  165,  165,    4,  128,  125,  165,  165,
      165,  165,  165,  165,  165,  134,  165,  165,  165,  165,
      165,  165,  165,  165,  165,    1,    1,    1,    1,    1,
        2,    2,    1,    1,    1,    1,    1,    2,    2,  180,
      180,  174,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,    1,    1,    1,    1,    1,    2,    2,  185,
      185,  185,  185,  185,  185,    1,    1,  105,   65,  105,

      105,   48,   83,  105,   52,  105,  105,   20,  105,  105,
       88,  105,  105,   87,  105,   72,   58,  105,  105,  100,
       85,  105,   22,   21,  105,  105,   81,   33,   44,  105,
        1,    1,  165,  165,  165,  165,  165,  137,  165,  165,
      165,  165,  135,  165,  138,  165,  165,  165,  132,  165,
      165,  144,  165,    1,    1,    1,    1,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,    1,    1,
      185,  185,  185,  185,  181,  105,  105,  105,   83,  105,
      105,   28,   51,   23,  105,   24,  105,  105,  105,  102,
       25,  105,   32,  105,  165,  165,  165,  165,  165,  165,

      165,  165,  121,  126,  165,  165,  165,  127,  146,  144,
      165,  180,  180,  180,  180,  180,  180,  180,  180,  185,
      185,  185,  181,  105,   57,   97,  105,   54,   62,  105,
       18,  105,  105,   30,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  139,  180,  180,  180,  180,  180,  180,
      180,  185,  185,  105,  105,  105,  165,  165,  165,  165,
      120,  165,  124,  146,  180,  180,  180,  180,  180,   90,
      105,  117,  118,  165,  129,  180,   55,  165,  180,  133,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static yyconst flex_int16_t yy_base[1369] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  696, 8500,  174, 8500, 8500,  309,  317, 8500,
      341, 8500,  361,  371,  373,  375,  379,  392,  385,  411,
      472,  423,  441,  449,  431,  483,  494,  505,  508,  528,
      532,  536,  542,  561,  579,  556,  589,  570,  602,  607,
      496,  321, 8500,  622,  626,  634,  645,  647,  649,  666,
      653,  712,  675,  683,  686,  678,  750,  706,  736,  761,
      772,  785,  793,  796,  799,  748,  807,  830,  832,  324,
     8500,  838,  844,  869,  871,  836,  874,  725,  877, 8500,

     8500,  903, 8500,  917,  931,  677,  668,  931,  366, 8500,
     8500,  933, 8500,  935,  939,  953,  959, 8500, 8500,  957,
      917,  965,  977,  979,  983, 1003, 1006, 1017, 1025, 1037,
     1048, 1050, 1052, 1070, 8500, 8500,  991,  372, 1075, 1088,
     1090, 1093, 1110, 1156, 1091, 1117, 1128, 1143, 1151, 1164,
     1176, 1187, 1195, 1200, 1143, 8500, 1239, 1253,    0, 8500,
     8500, 8500,  492,    0, 8500, 8500,    0, 8500, 8500,    0,
     8500, 8500, 8500, 8500,  671, 8500, 8500,  188,  417,  430,
      688, 1208,  442,  405,  759, 1222, 1254, 1259,  840, 1114,
     1198, 1241, 1265, 1267, 1046, 1275, 1277, 1279, 1290, 1297,

     1300, 1302, 1308, 1315, 1320, 1323, 1330, 1333, 1344, 1341,
     1348, 1355, 1351, 1363, 1369, 1374, 1378, 1384, 1387, 1393,
     1397, 1405, 1407, 1411, 1416, 1420, 1434, 1425, 1440, 1448,
     1452, 1454, 1462, 1458, 1472, 1476, 1484, 1487, 1491, 1494,
     1497, 1499, 1522, 1524, 1526, 1532, 1536, 1534, 1555, 1558,
     1567, 1578, 1569, 1581, 1590, 1592, 1601, 1605, 1612, 1614,
     1616, 1625, 1637, 1634, 1639,  450, 1657, 1659, 1667,  463,
      415, 1678, 1683, 1670, 1691, 1697, 1704, 1715, 1718, 1720,
     1723, 1743, 1746, 1754, 1765, 1768, 1779, 1787, 1791, 1799,
     1810, 1802, 1814, 1833, 1837, 1845, 1848, 1851, 1856, 1869,

     1871, 1859, 1884, 1897, 1899, 1902, 1910, 1921, 1923, 1934,
     1936, 1947, 1949, 1955, 1960, 1978, 1980, 1984, 1986,  495,
     1992, 2005, 2018,  515,  466, 2010, 2028, 2043, 8500, 2043,
     2052, 2061, 2076, 8500, 2092,  645,  630,  629,  597, 2076,
      517, 2084, 2099, 2107,  519,  545, 2110, 2118, 2114, 2127,
     2137, 2139, 2143, 2141, 2167, 2179, 2181, 2193, 2205, 2207,
     2219, 2225, 2227, 2230, 2233, 2245, 2251, 2259, 2265, 2277,
     2279, 2285,  543, 2290, 2298, 2308,  584,  600, 2317, 2319,
     2326, 2308, 2340, 2344, 2348, 2359, 2362, 2373, 2377, 2385,
     2391, 2396, 2404, 2409, 2422, 2430, 2433, 2464, 8500, 2478,

      594,  589,    0, 8500, 8500, 8500,    0,    0,    0, 8500,
     1644,  621, 2493, 2547, 1741, 1957, 2145, 1728, 2253, 2149,
     2435, 2448, 2329, 2483, 1843, 2480, 2486, 2504, 2513, 2511,
     2064, 2518, 2550, 2553, 2555, 2557, 2561, 2565, 2568, 2579,
     2586, 2593, 2598, 2601, 2606, 2604, 2608, 2627, 2630, 2636,
     2638, 2640, 2645, 2648, 2650, 2659, 2663, 2668, 2670, 2674,
     2683, 2693, 2695, 2697, 2702, 2708, 2720, 2716, 2728, 2730,
     2734, 2738, 2742, 2748, 2752, 2756, 2761, 2774, 2779, 2781,
     2786, 2789, 2799, 2804, 2811, 2807, 2813, 2817, 2835, 2822,
     2837, 2846, 2850, 2858, 2864, 2868, 2870, 2873, 2876, 2894,

      630, 2922, 2976, 2909, 2933, 2936, 2944, 1993, 2947, 2979,
     2987, 2976, 3009, 3011, 3022, 3030, 3033, 3044, 3056, 3059,
     3062, 3064, 3067, 3085, 3093, 3096, 3098, 3104, 3116, 3119,
     3131, 3137, 3142, 3150, 3155, 3161, 3173, 3181, 3187, 3195,
     3200, 3206, 3218, 3226,  684, 3263, 3317,  582,  569,  564,
      541,  523,  504, 3229,  731, 3371, 3425, 3240, 3232, 3266,
     3281, 3277, 3244, 3304, 3328, 3339, 3351, 3389, 3343, 3385,
     3391, 3393, 3428, 3397, 3436, 3447, 3449, 3455, 3473, 3476,
      737, 3502, 3556, 3505, 3602, 3479, 3513, 3516, 3527, 3538,
     3560, 3574, 3578,  495,  485,  760,  619,    0,  475, 3615,

     3650,  364, 3704, 2891, 3129, 3269, 2956, 2902, 2942, 3549,
     3310, 2984, 3108, 3482, 3604, 3606, 3395, 3434, 3627, 3468,
     3325, 3508, 2915, 3582, 3631, 3637, 3640, 3658, 3662, 3673,
     3670, 3707, 3710, 3684, 3714, 3716, 3718, 3722, 3725, 3736,
     3740, 3744, 3750, 3747, 3758, 3762, 3773, 3771, 3780, 3782,
     3784, 3786, 3804, 3806, 3811, 3813, 3815, 3818, 3824, 3837,
     3839, 3844, 3846, 3849, 3851, 3858, 3870, 3878, 3880, 3882,
     3888, 3891, 3902, 3909, 3911, 3914, 3916, 3920, 3923, 3938,
     3941, 3946, 3949,  790,  664,  453, 3975,  442, 3998,  450,
     4052, 3971, 3985, 3979, 4009, 4012, 4020, 4023, 4034, 4056,

     4059, 4074, 4077, 4085, 4088, 4103, 4107, 4111, 4115, 4134,
     4136, 4138, 4142, 4161, 4163, 4165, 4184, 4189, 4192, 4186,
     4210, 4212, 4215, 4218, 4236, 4239, 4247, 4261, 4265, 4250,
     4273, 4291, 4293, 4296,  794,  683,  440, 4323,  423, 4346,
      468, 4400,  429,  423,    0,  859,  714,  398, 4335,  391,
     4454,  552, 4508, 4350, 4358, 4371, 4369, 4377, 4403, 4382,
     4407, 4418, 4426, 4457, 4431, 4476, 4480, 4495, 4519, 4522,
     4530, 4534, 4548,  868,  739,  388, 4576,  362, 4599,  598,
     4653, 4556, 1138, 4570, 4581, 4602, 4610, 4621, 4613, 4624,
     4656, 4660, 4664, 4678, 4708, 4717,    0, 4731, 4721,  332,

     4785, 4737,  320, 4764, 4045, 4436, 4140, 4269, 4109, 4171,
     4221, 4326, 4339, 4489, 4411, 4562, 4566, 4688, 4724, 4364,
     4462, 4516, 4749, 4633, 4737, 4751, 4788, 4779, 4791, 4542,
     4797, 4803, 4674, 4806, 4809, 4811, 4815, 4833, 4838, 4843,
     4840, 4845, 4847, 4851, 4870, 4874, 4876, 4879, 4884, 4897,
     4888, 4907, 4909, 4911, 4915, 4920, 4929, 4922, 4933, 4935,
     4941, 4947, 4956, 4960, 4962, 4966, 4968, 4971, 4980, 4986,
     5012, 5024, 5035, 5046,    0,  313, 5089, 5019, 5143, 5061,
     5066, 4992, 5070, 5093, 5096, 5055, 5111, 5108, 5130, 5154,
     5157, 5162, 5165, 5183, 5186, 5189, 5201, 5204, 5212, 5215,

     5223, 5227, 5235, 5241, 5249, 5238, 5261, 5263, 5275, 5283,
     5286, 5288, 5307, 5317, 5128, 5340, 5351,    0,  306, 5394,
     5324, 5448, 5366, 5378, 5408, 5502, 5420, 5556,  296, 5610,
     5422, 5664, 5433, 5452, 5311, 5374, 5470, 5473, 5429, 5506,
     5484, 5514, 5527, 5538, 5559, 5567, 5581, 5578, 5614, 5617,
     5643, 5598, 5718, 5653, 5772,  289, 5826, 5671, 5880, 5690,
     5689, 5721, 5732, 5740, 5775, 5752, 5790, 5700, 5806, 5807,
     5934, 5840, 5855, 5864, 5388, 5441, 5570, 5482, 5479, 5508,
     5512, 5844, 5867, 5536, 5603, 5727, 5886, 5658, 5786, 5888,
     5644, 5890, 5794, 5900, 5898, 5911, 5813, 5938, 5940, 5943,

     5945, 5948, 5952, 5966, 5970, 5972, 5975, 5980, 5984, 5990,
     5993, 5999, 6002, 6008, 6011, 6013, 6020, 6022, 6026, 6031,
     6044, 6035, 6046, 6079, 6061, 6079,    0, 6090, 6103, 6113,
     6102, 6114, 6122, 6126, 6128, 6134, 6140, 6146, 6152, 6158,
     6166, 6170, 6172, 6184, 6192, 6197, 6205, 6210, 6218, 6230,
     6232, 6236, 6255, 6257, 6263, 6283, 6292, 6287,    0, 6306,
     6315, 6324, 6335, 6344, 6339,    0, 6353, 6363, 6376, 6372,
     6375, 6343, 6378, 6380, 6398, 6402, 6404, 6406, 6425, 6429,
     6433, 6431, 6461, 6471, 6466,    0, 6485, 6494, 6503, 6500,
     6502, 6505, 6513, 6525, 6527, 6553, 6562, 6523, 6099, 6207,

     6242, 6309, 6552, 6457, 6558, 6562, 6566, 6573, 6576, 6580,
     6584, 6595, 6598, 6591, 6605, 6616, 6618, 6623, 6625, 6627,
     6629, 6636, 6638, 6651, 6656, 6658, 6660, 6663, 6669, 6671,
     6697, 6712, 6684, 6702, 6708, 6713, 6728, 6731, 6734, 6746,
     6754, 6757, 6760, 6765, 6779, 6784, 6787, 6790, 6792, 6798,
     6812, 6820, 6825, 6851, 6860, 6868, 6877, 6867, 6873, 6878,
     6881, 6886, 6899, 6905, 6907, 6911, 6929, 6931, 6942, 6957,
     6954, 6958, 6962, 6976, 6980, 6982, 6984, 6986, 6752, 6822,
     6991, 6994, 7009, 7013, 7015, 7018, 7021, 7024, 7027, 7033,
     7042, 7045, 7048, 7051, 7053, 7071, 7076, 7073, 7095, 7098,

     7106, 7101, 7120, 7124, 7126, 7128, 7139, 7147, 7150, 7152,
     7158, 7171, 7173, 7176, 7184, 7195, 7198, 7203, 7216, 7218,
     7222, 7224, 7237, 7245, 7247, 7249, 7251, 7256, 7258, 7260,
     7269, 7278, 7280, 7282, 7301, 7303, 7307, 7305, 7309, 7331,
     7334, 7336, 7354, 7358, 7362, 7366, 7377, 7380, 7391, 7399,
     7402, 7410, 7404, 7413, 7313, 7422, 7435, 7446, 7448, 7459,
     7470, 7472, 7483, 7491, 7495, 7497, 7509, 7515, 7520, 7311,
     7372, 7538, 7541, 7544, 7546, 7549, 7444, 7552, 7570, 7572,
     8500, 7610, 7621, 7632, 7643, 7654, 7661, 7671, 7678, 7688,
     7695, 7705, 7712, 7722, 7729, 7739, 7750, 7761, 7772, 7782,

     7788, 7795, 7802, 7809, 7816, 7826, 7837, 7847, 7858, 7868,
     7879, 7890, 7900, 7911, 7921, 7932, 7943, 7954, 7965, 7976,
     7987, 7998, 8009, 8020, 8031, 8042, 8053, 8064, 8075, 8086,
     8097, 8108, 8119, 8130, 8141, 8152, 8163, 8174, 8185, 8192,
     8203, 8214, 8225, 8236, 8247, 8258, 8269, 8280, 8291, 8302,
     8309, 8320, 8331, 8342, 8353, 8364, 8375, 8382, 8393, 8404,
     8415, 8426, 8437, 8444, 8455, 8466, 8477, 8488
    } ;

static yyconst flex_int16_t yy_def[1369] =
    {   0,
     1281,    1, 1281,    3, 1281,    5, 1282, 1282, 1281,    9,
     1281,   11,   11,   13, 1283, 1283, 1284, 1284, 1285, 1285,
     1286, 1286, 1281, 1281, 1281, 1281, 1281, 1287, 1288, 1281,
     1287, 1281, 1287, 1287, 1287, 1287, 1287, 1281, 1287, 1287,
     1287, 1287, 1287,   41, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287,   41, 1287, 1287, 1287, 1287, 1287,
     1289, 1290, 1281, 1289, 1289, 1289, 1289, 1289, 1289, 1281,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1291, 1292,
     1281, 1291, 1291, 1291, 1291, 1291, 1291, 1281, 1291, 1281,

     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1293, 1294, 1281,
     1281, 1293, 1281, 1293, 1293, 1293, 1293, 1281, 1281, 1293,
     1281, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1281, 1281, 1295, 1296, 1295, 1295,
     1295, 1295, 1281, 1295,  144, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1281, 1281, 1281, 1281, 1297, 1281,
     1281, 1281, 1281, 1298, 1281, 1281, 1299, 1281, 1281, 1300,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1287, 1288,
     1287, 1301, 1288, 1288, 1287, 1287, 1287, 1281, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,

     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1289, 1290, 1289, 1289, 1302, 1290,
     1290, 1289, 1289, 1289, 1289, 1289, 1281, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,

     1289,   77, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1291, 1292,
     1291, 1291, 1303, 1292, 1292, 1291, 1291, 1281, 1281, 1291,
     1281, 1291, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1293,
     1294, 1293, 1293, 1304, 1294, 1294, 1293, 1293, 1293, 1281,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1295, 1296, 1295, 1295, 1305, 1296, 1296, 1295, 1295,
     1281,  144, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1281, 1281, 1281,

     1281, 1281, 1297, 1281, 1281, 1281, 1298, 1299, 1300, 1281,
     1287, 1306, 1307, 1307, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1289,

     1308, 1309, 1309, 1289, 1289, 1289, 1289,   77, 1289, 1289,
     1289,   77, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1291, 1310, 1311, 1311, 1281, 1281, 1281,
     1281, 1312, 1312, 1293, 1313, 1314, 1314, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1295,
     1315, 1316, 1316, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1281, 1281, 1306, 1306, 1312,  414, 1317,

     1318,  414, 1319, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1308, 1308,  503, 1320,  503, 1321,  503,
     1322, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,

     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1310, 1310,  547, 1323,  547, 1324,
      547, 1325, 1281, 1281, 1326, 1313, 1313,  557, 1327,  557,
     1328,  557, 1329, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1315, 1315,  583, 1330,  583, 1331,  583,
     1332, 1295,  585, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1317, 1317, 1326, 1318, 1333,  798,

     1334, 1312,  414, 1335, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1320, 1320, 1321, 1336,  873,  873, 1337, 1312, 1338, 1339,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,

     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1323, 1323, 1324, 1341,  916,  916, 1342,
     1312, 1343, 1344, 1345, 1345, 1346, 1347, 1346,  928, 1348,
     1312, 1349, 1350, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1352, 1352, 1353, 1354, 1353,  955, 1355, 1312, 1356, 1357,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359, 1359, 1360,
     1361, 1362, 1363, 1363, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,

     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1336, 1336, 1360,  873, 1365, 1339, 1339,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1341, 1341, 1360,  916, 1366,
     1344, 1344, 1347, 1347, 1360,  928, 1367, 1350, 1350, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1354, 1354, 1360,  955, 1368, 1357, 1357, 1358,
     1358, 1358, 1358, 1358, 1358, 1362, 1362, 1364, 1364, 1364,

     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1365, 1365, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1366, 1366, 1367, 1367, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1368, 1368,
     1358, 1358, 1358, 1358, 1358, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1340, 1340, 1340, 1340, 1340, 1340,

     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1358,
     1358, 1358, 1358, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1358, 1358, 1364, 1364, 1364, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1351, 1351, 1351, 1351, 1351, 1364,
     1364, 1340, 1340, 1340, 1340, 1351, 1364, 1340, 1351, 1340,
        0, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,

     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281
    } ;

static yyconst flex_int16_t yy_nxt[8557] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1085,  160,  161,  180,  161,  160,
      160, 1065,  162,  160,  161,  179,  161,  160,  160,  265,
      162, 1058,  319,  181,  182,  137,  163,  137, 1026,  184,
      599,  137,  137,  271,  163,  137,  325,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166,  970,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  340,  186,  169,  173,  174,  180,
      372,  180,  776,  180,  599,  181,  182,  180,  346,  802,
      175,  187,  187,  180,  378,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181, 1281,  183,  776,  181,
      182,  748,  189,  181,  190,  181, 1281,  270,  748,  180,
      176,  177,  191,  169,  169,  180,  171,  169,  172,  169,
      192,  180,  169,  173,  174,  181,  182,  329,  179,  180,
      329,  181,  182,  737,  181,  181,  175,  181,  182,  180,
      179,  193,  184,  202,  194,  181,  182,  195,  265,  214,
      737,  215,  686,  203,  184,  181,  182, 1281,  324,  204,
      686,  265,  271,  686,  216,  878,  176,  177,  179,  169,
      180,  205,  179,  206,  207,  271,  209,  210,  737,  211,
      208,  180,  212,  921,  213,  599,  181,  182,  404,  399,

      405,  196,  180,  319,  266,  197,  399,  181,  182,  198,
      199,  267,  200,  180,  406,  201,  180,  325,  181,  182,
      268,  269,  217,  319,  745,  340,  218,  340,  219,  181,
      182,  220,  181,  182,  223,  224,  180,  325,  225,  346,
      180,  346,  226,  745,  180,  221, 1281,  345,  227,  222,
      180,  372,  181,  182,  228,  334,  181,  182,  229,  232,
      181,  182,  237,  233,  180,  378,  181,  182,  230,  180,
      234,  235,  748,  236,  231,  334,  238,  931,  180,  239,
      181,  182,  240,  744,  241,  181,  182,  243,  242,  254,
      255,  244,  372,  743,  181,  182,  258,  180,  245,  256,

      259, 1281,  377,  595,  260,  594,  378,  246,  179,  247,
      180,  553,  248,  181,  182,  180,  179,  249,  776,  250,
     1281,  596,  251,  958,  252,  253,  181,  182,  257,  411,
      266,  181,  182,  272,  266,  261,  262,  267,  500,  263,
      552,  267,  266,  597,  551,  264,  268,  269,  273,  267,
      268,  269,  685,  266,  274,  266,  550,  266,  268,  269,
      267,  266,  267,  275,  267, 1281,  684,  276,  267,  268,
      269,  268,  269,  268,  277,  268,  268,  268,  269,  268,
      410,  410,  339,  266, 1281,  735,  266,  268,  338,  268,
      267,  266,  544,  267,  266, 1281,  180,  278,  267,  268,

      269,  267,  268,  269,  292, 1281,  736,  268,  269,  286,
      268,  269,  181,  188,  266, 1281,  746, 1281,  268,  268,
      266,  267,  287,  410,  410,  288,  290,  267, 1281,  291,
      268,  269,  289,  298,  322,  322,  268,  269,  322,  554,
     1281,  774,  279, 1281,  266,  580,  322, 1281,  322,  280,
      281,  267,  282,  747,  283,  284,  266,  285,  266,  775,
      268,  269,  299,  267, 1281,  267,  300,  180,  411,  266,
      413, 1281,  268,  269,  268,  269,  267,  322,  322,  293,
      266,  294,  597,  181,  182,  268,  269,  267,  301,  295,
     1281,  302,  316,  266,  296,  297,  268,  269,  500,  304,

      267,  266,  544, 1281,  266,  303, 1281,  266,  267,  268,
      269,  267,  685,  305,  267,  266,  736,  268,  269, 1281,
      268,  269,  267,  268,  269,  306, 1281,  308,  307,  314,
      309,  268,  269,  317, 1281, 1281,  310,  311,  266,  315,
      320,  312,  313, 1281,  320,  267,  320,  321,  180,  326,
      318,  321,  320,  321,  268,  269,  322,  323,  327,  321,
      322,  323,  322,  323,  181,  182, 1281,  554,  322,  323,
      328,  329,  328,  328,  328,  328,  580,  320, 1281,  320,
      415,  747,  320, 1281,  321,  320,  321,  330,  330,  321,
      775, 1281,  321,  322,  323,  322,  323, 1281,  322,  331,

     1281,  322,  323, 1281,  333,  334,  335,  335,  333,  333,
     1281, 1281, 1281, 1281,  336, 1281,  332,  337,  335,  334,
      335,  335,  335,  335, 1281, 1281,  343,  343,  336, 1281,
      343,  337,  335,  334,  335,  335,  335,  335,  343,  341,
      343,  341,  336,  341,  347,  337,  342,  341,  342,  348,
      342, 1281, 1281, 1281,  342,  343,  344,  343,  344,  343,
      344,  341, 1281,  343,  344,  341, 1281,  341,  342,  343,
      343, 1281,  342,  341,  342, 1281, 1281,  343,  344,  349,
      342,  343,  350,  343,  344,  341, 1281,  341, 1281,  343,
      344,  341,  342, 1281,  342, 1281, 1281, 1281,  342,  373,

     1281,  343,  344,  343,  344, 1281,  374,  343,  344,  351,
     1281,  341, 1281,  354,  341,  375,  376,  352,  342, 1281,
     1281,  342,  353,  355, 1281,  341,  356,  343,  344,  357,
      343,  344,  342,  341, 1281,  358, 1281,  359, 1281, 1281,
      342,  343,  344,  361, 1281,  341, 1281,  362, 1281,  343,
      344,  360,  342, 1281,  180,  363,  341, 1281,  341, 1281,
      341,  343,  344,  342,  365,  342, 1281,  342, 1281,  364,
      181,  182,  343,  344,  343,  344,  343,  344,  341, 1281,
      422, 1281, 1281,  373,  368,  342,  379, 1281,  366, 1281,
      374,  367, 1281,  369,  343,  344,  373,  370,  373,  375,

      376,  373,  380,  374, 1281,  374, 1281, 1281,  374, 1281,
      371, 1281,  375,  376,  375,  376, 1281,  375,  381,  375,
      375,  372,  180,  375, 1281,  373, 1281, 1281,  372,  372,
      387,  375,  374,  375,  372, 1281,  373, 1281,  181,  182,
      388,  375,  376,  374,  398,  399,  400,  400,  398,  398,
     1281,  373,  375,  376,  401,  390,  389,  402,  374,  373,
     1281,  416,  375,  375,  373, 1281,  374,  375,  376,  372,
      385,  374,  373, 1281, 1281,  375,  376, 1281,  372,  374,
      375,  376,  372,  962,  373,  372,  382,  391,  375,  376,
     1281,  374,  392,  383,  384,  373, 1281, 1281,  385,  386,

      375,  376,  374,  373, 1281, 1281,  180,  393,  373, 1281,
      374,  375,  376,  385, 1281,  374,  412,  181,  181,  375,
      376,  181,  181,  182,  375,  376,  397,  394, 1281,  181,
      180,  181,  417,  395, 1281,  418,  414, 1281, 1281,  396,
      400,  399,  400,  400,  400,  400,  181,  182, 1281,  180,
      401, 1281, 1281,  402,  400,  399,  400,  400,  400,  400,
      181,  181,  180, 1281,  401,  181,  182,  402,  181,  181,
      187,  187,  181,  180, 1281,  180, 1281, 1281,  181,  182,
      181, 1281,  181,  180, 1281,  180,  419,  180, 1281,  181,
      182,  181,  182, 1281,  420, 1281, 1281,  421,  180,  181,

      182,  181,  182,  181,  182,  180, 1281,  423,  180,  424,
      180,  181,  181, 1281,  181,  182,  180, 1281, 1281,  425,
     1281,  181,  182,  180,  181,  182,  181,  182,  180,  431,
      430,  180,  181,  182,  426,  427,  428, 1281,  180,  181,
      182,  180, 1281,  429,  181,  182,  432,  181,  182,  180,
     1281,  434,  180,  433,  181,  182,  180,  181,  182,  180,
      436,  437, 1281,  180, 1281,  181,  182,  435,  181,  182,
      439,  180,  181,  182, 1281,  181,  182,  180,  438,  181,
      182,  440,  180, 1281,  254,  442,  180,  181,  182, 1281,
     1281,  441,  180,  181,  182,  180, 1281, 1281,  181,  182,

      444,  180,  181,  182, 1281,  180,  445, 1281,  181,  182,
     1281,  181,  182,  180,  443,  180, 1281,  181,  182,  180,
      448,  181,  182,  449,  180, 1281,  447,  446,  180,  181,
      182,  181,  182,  180, 1281,  181,  182,  450, 1281, 1281,
      181,  182,  180, 1281,  181,  182, 1281, 1281,  180,  181,
      182, 1281,  451, 1281,  453,  452,  180, 1281,  181,  182,
      180, 1281,  180,  455,  181,  182,  180, 1281,  456,  454,
      180, 1281,  181,  182, 1281, 1281,  181,  182,  181,  182,
      180, 1281,  181,  182,  180, 1281,  181,  182,  457,  254,
      459,  458,  180,  460, 1281,  180,  181,  182,  461,  180,

      181,  182,  180, 1281, 1281,  180, 1281,  180,  181,  182,
     1281,  181,  182, 1281, 1281,  181,  182, 1281,  181,  182,
      462,  181,  182,  181,  182,  466,  469,  463,  465,  464,
      180,  467,  180,  470,  180, 1281, 1281, 1281,  468, 1281,
      180, 1281,  180, 1281,  180, 1281,  181,  182,  181,  182,
      181,  182, 1281,  472, 1281, 1281,  181,  182,  181,  182,
      181,  182,  478,  180, 1281, 1281,  180,  471,  473,  477,
      476,  474,  475,  479,  481,  180, 1281,  180, 1281,  181,
      182,  480,  181,  182, 1281, 1281,  180, 1281, 1281,  180,
     1281,  181,  182,  181,  182,  482,  487,  484,  180, 1281,

      180,  483,  181,  182,  485,  181,  182,  488,  486,  180,
     1281, 1281, 1281,  180,  181,  182,  181,  182,  490, 1281,
      180, 1281,  180, 1281,  180,  181,  182, 1281,  489,  181,
      182, 1281, 1281,  180, 1281,  491,  181,  182,  181,  182,
      181,  182,  180, 1281,  494,  180,  495,  266,  492,  181,
      182,  498,  180, 1281,  267,  493,  496, 1281,  181,  182,
      499,  181,  182,  268,  269,  266, 1281,  266,  181,  182,
      497, 1281,  267, 1281,  267,  501,  268,  268,  266, 1281,
      268,  268,  269,  268,  277,  267,  266, 1281,  268,  502,
      268,  266, 1281,  267,  268,  269, 1281,  503,  267,  266,

     1281, 1281,  268,  269, 1281,  266,  267,  268,  269, 1281,
     1281, 1281,  267,  268,  268,  268,  269,  268, 1281,  268,
      268,  268,  269,  266, 1281,  268,  266,  268,  266, 1281,
      267,  266, 1281,  267, 1281,  267,  180, 1281,  267,  268,
      269, 1281,  268,  269,  268,  269,  505,  268,  269,  180,
      506,  266,  181,  182,  266, 1281,  268,  268,  267,  504,
      283,  267,  266, 1281, 1281,  181,  182,  268,  269,  267,
      268,  269, 1281,  266, 1281, 1281,  266, 1281,  268,  269,
      267,  507,  508,  267,  604, 1281, 1281,  266, 1281,  268,
      269,  509,  268,  269,  267,  266, 1281, 1281, 1281,  266,

     1281, 1281,  267,  268,  269,  510,  267,  266,  512, 1281,
      266,  268,  269,  511,  267,  268,  269,  267,  266, 1281,
     1281, 1281,  266,  268,  269,  267,  268,  269,  517,  267,
     1281, 1281,  518, 1281,  268,  269,  513, 1281,  268,  269,
     1281,  266,  514, 1281,  519,  266, 1281,  516,  267, 1281,
      515,  180,  267,  266, 1281, 1281,  266,  268,  269,  266,
      267,  268,  269,  267,  266,  520,  267,  181,  182,  268,
      269,  267,  268,  269, 1281,  268,  269,  266,  521,  266,
      268,  269, 1281,  523,  267, 1281,  267, 1281,  265, 1281,
      265,  522,  266,  268,  269,  268,  269,  526,  265,  267,

      525,  524, 1281,  527,  528,  266, 1281,  266,  268,  269,
      266, 1281,  267,  531,  267, 1281,  529,  267,  266, 1281,
     1281,  268,  269,  268,  269,  267,  268,  269, 1281,  266,
     1281,  266,  530, 1281,  268,  269,  267, 1281,  267,  533,
      534, 1281,  266,  532,  266,  268,  269,  268,  269,  267,
      535,  267, 1281,  536, 1281,  266, 1281,  266,  268,  269,
      268,  269,  267,  266,  267,  180,  538, 1281,  266, 1281,
      267,  268,  269,  268,  269,  267,  540,  537, 1281,  268,
      269,  181,  182, 1281,  268,  269,  266, 1281,  266, 1281,
      539,  605,  266,  267,  320,  267, 1281, 1281,  541,  267,

      320,  321,  268,  269,  268,  269, 1281,  321,  268,  269,
      322,  323,  542,  320, 1281, 1281,  322,  323,  320, 1281,
      321,  546,  265,  543,  695,  321,  545,  322,  322,  322,
      331,  322,  265, 1281,  322,  323,  320,  696,  265,  322,
     1281,  322,  547,  321,  328,  329,  328,  328,  328,  328,
     1281,  320,  322,  323,  548, 1281, 1281,  549,  321,  330,
      330,  322,  322, 1281, 1281,  322, 1281,  322,  323,  320,
      322,  322,  180,  322, 1281,  322,  321,  333,  334,  335,
      335,  333,  333, 1281,  341,  322,  323,  336,  181,  182,
      337,  342,  341,  335,  334,  335,  335,  335,  335,  342,

      343,  344, 1281,  336,  322,  322,  337,  341,  343,  344,
      621, 1281, 1281, 1281,  342,  555,  343,  343,  341, 1281,
      343,  556,  341,  343,  350,  342,  341, 1281,  343,  342,
      343, 1281,  557,  342,  343,  344,  343,  343,  343,  344,
      343, 1281,  343,  344, 1281,  341, 1281,  341,  343,  341,
      343,  341,  342,  180,  342, 1281,  342,  180,  342,  343,
      343,  343,  344,  343,  344,  343,  344,  343,  344,  181,
      182,  606, 1281,  181,  182,  341, 1281,  559,  560,  343,
      343,  558,  342,  561, 1281, 1281,  562,  341, 1281,  341,
     1281,  343,  344, 1281,  342, 1281,  342, 1281, 1281,  608,

     1281,  341, 1281,  343,  344,  343,  344, 1281,  342, 1281,
      563,  566, 1281,  341, 1281,  341, 1281,  343,  344,  564,
      342, 1281,  342,  567, 1281, 1281,  565,  341, 1281,  343,
      344,  343,  344,  341,  342,  341, 1281,  568,  341, 1281,
      342,  341,  342,  343,  344,  342, 1281, 1281,  342,  343,
      344,  343,  344,  341,  343,  344,  570,  343,  344,  341,
      342,  180,  566, 1281,  569,  571,  342,  341,  574,  343,
      344,  572,  573,  341,  342,  343,  344,  181,  182, 1281,
      342,  576,  575,  343,  344,  341, 1281,  341, 1281,  343,
      344,  577,  342,  373,  342,  578,  607, 1281,  373, 1281,

      374,  343,  344,  343,  344,  374,  373, 1281, 1281,  375,
      376, 1281, 1281,  374,  375,  376,  581,  375,  375, 1281,
      579,  375,  375,  381, 1281,  373, 1281,  373,  582,  375,
     1281,  375,  374,  583,  374,  375,  375,  180,  372,  375,
     1281,  375,  376,  375,  376,  372,  372,  375,  373,  375,
     1281,  372,  373,  181,  182,  374,  373,  611, 1281,  374,
      375,  375, 1281,  374,  375,  376,  584,  373,  375,  376,
      373,  385,  375,  376,  374, 1281, 1281,  374,  375,  375,
     1281,  373, 1281,  375,  376,  373,  375,  376,  374, 1281,
     1281,  585,  374,  373, 1281, 1281,  385,  375,  376,  373,

      374,  375,  376, 1281,  373,  587,  374, 1281, 1281,  375,
      376,  374,  373, 1281, 1281,  375,  376,  373,  586,  374,
      375,  376, 1281,  588,  374,  385, 1281, 1281,  375,  376,
      373, 1281, 1281,  375,  376, 1281, 1281,  374,  373, 1281,
      385,  373, 1281,  180,  589,  374,  375,  376,  374,  591,
     1281, 1281,  590, 1281,  375,  376,  180,  375,  376,  181,
      182,  609, 1281, 1281,  592,  398,  399,  400,  400,  398,
      398, 1281,  181,  182, 1281,  401,  593, 1281,  402,  400,
      399,  400,  400,  400,  400,  610, 1281, 1281,  180,  401,
     1281,  180,  402,  598,  180, 1281,  598, 1281, 1281, 1281,

     1281,  600,  598,  598,  181,  182,  598,  181,  182,  612,
      181,  182,  180,  601,  598, 1281,  598,  602,  603,  180,
      613,  180, 1281, 1281,  614, 1281,  180,  615,  181,  182,
     1281, 1281,  616,  617, 1281,  181,  182,  181,  182, 1281,
      620, 1281,  181,  182, 1281,  598,  598,  598,  622,  618,
      598, 1281,  619, 1281, 1281,  600,  598,  598,  180, 1281,
      598,  180, 1281,  180, 1281,  180, 1281,  601,  598,  180,
      598,  602,  603,  180,  181,  182,  180,  181,  182,  181,
      182,  181,  182, 1281, 1281,  181,  182,  180, 1281,  181,
      182,  623,  181,  182,  180,  626, 1281, 1281,  625,  598,

      598,  180, 1281,  181,  182,  624,  180, 1281,  254,  180,
      181,  182,  180,  627,  180, 1281,  180,  181,  182, 1281,
     1281, 1281,  181,  182,  628,  181,  182, 1281,  181,  182,
      181,  182,  181,  182,  632,  180, 1281,  633,  180, 1281,
     1281,  629,  630,  631,  180, 1281,  180, 1281,  180, 1281,
     1281,  181,  182,  180,  181,  182,  180,  634,  180,  635,
      181,  182,  181,  182,  181,  182,  637,  180, 1281,  181,
      182,  180,  181,  182,  181,  182,  180,  636,  180,  639,
     1281, 1281,  180,  181,  182,  638, 1281,  181,  182, 1281,
     1281,  180,  181,  182,  181,  182,  640,  644,  181,  182,

      642,  180,  641,  180, 1281,  180,  643,  181,  182, 1281,
      180, 1281,  645, 1281, 1281, 1281,  180,  181,  182,  181,
      182,  181,  182, 1281,  180,  646,  181,  182,  180, 1281,
      648,  649,  181,  182, 1281, 1281,  180, 1281,  180,  647,
      181,  182,  180, 1281,  181,  182,  180,  650, 1281,  653,
      180,  651,  181,  182,  181,  182,  180, 1281,  181,  182,
      180, 1281,  181,  182,  180,  652,  181,  182,  655,  180,
     1281, 1281,  181,  182, 1281,  654,  181,  182,  658, 1281,
      181,  182,  180, 1281,  656,  181,  182,  180,  657,  180,
     1281,  660, 1281, 1281,  180,  659, 1281,  180,  181,  182,

     1281, 1281, 1281,  181,  182,  181,  182,  180, 1281,  662,
      181,  182,  180,  181,  182,  180, 1281,  661,  254,  180,
     1281,  180, 1281,  181,  182,  180, 1281, 1281,  181,  182,
      180,  181,  182,  665,  663,  181,  182,  181,  182, 1281,
     1281,  181,  182,  180,  664,  180,  181,  182,  668, 1281,
      673, 1281,  666, 1281,  180,  670,  667,  669,  180,  181,
      182,  181,  182, 1281, 1281,  671,  180, 1281,  674,  672,
      181,  182,  180, 1281,  181,  182,  180,  677,  180, 1281,
      675,  180,  181,  182,  180, 1281, 1281, 1281,  181,  182,
      676, 1281,  181,  182,  181,  182, 1281,  181,  182,  180,

      181,  182,  266,  681, 1281,  680,  678,  679, 1281,  267,
      180, 1281,  682, 1281, 1281,  181,  182,  266,  268,  269,
     1281,  683,  598,  180,  267,  598,  181,  182, 1281, 1281,
      687,  598,  598,  268,  269,  598,  805,  688, 1281,  181,
      182,  266,  689,  598,  266,  598,  690,  691,  267,  692,
      180,  267,  266, 1281, 1281,  266, 1281,  268,  269,  267,
      268,  269,  267, 1281,  180, 1281,  181,  182,  268,  269,
     1281,  268,  269, 1281,  598,  598,  598,  693,  809,  598,
      181,  182,  694, 1281,  687,  598,  598,  266, 1281,  598,
      808,  688,  180, 1281,  267,  266,  689,  598, 1281,  598,

      690,  691,  267,  268,  269,  265, 1281,  699,  181,  182,
     1281,  268,  269, 1281,  522,  265,  700,  266, 1281,  266,
      701,  702,  697,  703,  267, 1281,  267,  812,  598,  598,
      266, 1281,  698,  268,  269,  268,  269,  267,  266,  704,
     1281,  266, 1281, 1281, 1281,  267,  268,  269,  267,  705,
     1281, 1281,  266, 1281,  268,  269, 1281,  268,  269,  267,
      706, 1281, 1281,  708,  266, 1281,  709,  266,  268,  269,
      266,  267,  266,  707,  267,  266, 1281,  267, 1281,  267,
      268,  269,  267,  268,  269, 1281,  268,  269,  268,  269,
     1281,  268,  269,  266,  710,  711,  712,  714, 1281, 1281,

      267,  266, 1281, 1281,  266,  713,  266, 1281,  267,  268,
      269,  267,  266,  267, 1281,  715,  180,  268,  269,  267,
      268,  269,  268,  269,  266, 1281, 1281,  266,  268,  269,
      719,  267,  181,  182,  267, 1281,  717,  180,  716,  266,
      268,  269,  718,  268,  269,  266,  267, 1281, 1281,  721,
      266,  813,  267,  181,  182,  268,  269,  267,  266, 1281,
      720,  268,  269,  266,  722,  267,  268,  269, 1281,  266,
      267, 1281, 1281,  806,  268,  269,  267, 1281,  724,  268,
      269,  266, 1281, 1281, 1281,  268,  269, 1281,  267,  266,
     1281, 1281,  723, 1281,  726,  266,  267,  268,  269, 1281,

      725, 1281,  267,  266, 1281,  268,  269, 1281,  266,  728,
      267,  268,  269,  729,  266,  267, 1281, 1281,  727,  268,
      269,  267, 1281,  730,  268,  269,  266, 1281, 1281, 1281,
      268,  269, 1281,  267,  320, 1281, 1281,  341,  732,  731,
      341,  321,  268,  269,  342,  733, 1281,  342,  341, 1281,
      322,  323,  341,  343,  344,  342,  343,  344, 1281,  342,
     1281, 1281,  734,  598,  343,  344,  598, 1281,  343,  344,
      755,  738,  598,  598,  341, 1281,  598,  180,  739, 1281,
      754,  342,  759,  740,  598,  341,  598,  741,  742,  341,
      343,  344,  342,  181,  182, 1281,  342,  756, 1281, 1281,

     1281,  343,  344, 1281, 1281,  343,  344, 1281, 1281, 1281,
      757, 1281,  341,  807, 1281,  598,  598,  598,  180,  342,
      598, 1281,  758, 1281,  566,  738,  598,  598,  343,  344,
      598, 1281,  739,  180,  181,  182,  341,  740,  598, 1281,
      598,  741,  742,  342, 1281, 1281,  811,  341, 1281,  181,
      182,  341,  343,  344,  342,  760, 1281,  822,  342,  341,
     1281,  761, 1281,  343,  344, 1281,  342,  343,  344,  598,
      598,  598, 1281,  765,  598,  343,  344, 1281, 1281,  749,
      598,  598, 1281, 1281,  598, 1281,  750, 1281, 1281,  762,
      763,  751,  598,  341,  598,  752,  753,  341, 1281,  341,

      342,  341, 1281,  180,  342,  341,  342, 1281,  342,  343,
      344, 1281,  342,  343,  344,  343,  344,  343,  344,  181,
      182,  343,  344,  598,  598,  598, 1281,  768,  598,  818,
      566,  566,  764,  749,  598,  598,  341,  766,  598, 1281,
      750, 1281,  180,  342,  341,  751,  598, 1281,  598,  752,
      753,  342,  343,  344,  767,  341, 1281,  341,  181,  182,
      343,  344,  342,  341,  342, 1281, 1281, 1281,  819, 1281,
      342,  343,  344,  343,  344,  770,  180,  598,  598,  343,
      344,  341,  771,  772,  373, 1281,  769,  373,  342, 1281,
      180,  374,  181,  182,  374, 1281, 1281,  343,  344,  773,

      375,  376,  598,  375,  376,  598,  181,  182,  814,  788,
      777,  598,  598,  373,  821,  598,  180,  778, 1281, 1281,
      374,  373,  779,  598,  373,  598,  780,  781,  374,  375,
      376,  374,  181,  182, 1281,  373, 1281,  375,  376, 1281,
      375,  376,  374, 1281, 1281,  823,  373, 1281, 1281,  782,
      789,  375,  376,  374,  598,  598,  598,  180, 1281,  598,
      385, 1281,  375,  376,  777,  598,  598, 1281,  373,  598,
     1281,  778,  790,  181,  182,  374,  779,  598, 1281,  598,
      780,  781,  373,  791,  375,  376,  373, 1281,  792,  374,
      180, 1281, 1281,  374,  810, 1281, 1281, 1281,  375,  376,

     1281, 1281,  375,  376,  793, 1281,  181,  182,  598,  598,
      373, 1281,  180,  794,  180,  598,  183,  374,  598, 1281,
     1281,  183,  385,  599, 1281,  824,  375,  376,  181,  182,
      181,  182, 1281,  783, 1281,  180,  817,  796,  815,  180,
      784, 1281,  785, 1281,  816,  180,  786,  787,  180,  784,
      797,  181,  182,  797, 1281,  181,  182, 1281,  799,  797,
      797,  181,  182,  797,  181,  182,  180, 1281, 1281, 1281,
      180,  797,  820,  797,  800,  801,  826,  825,  180, 1281,
     1281,  180,  181,  182,  828,  827,  181,  182, 1281, 1281,
     1281, 1281,  180, 1281,  181,  182, 1281,  181,  182, 1281,

     1281, 1281,  797,  797,  598,  829,  830,  598,  181,  182,
     1281, 1281,  804,  602,  602,  180,  831,  602,  180, 1281,
     1281,  834,  180, 1281,  180,  602,  180,  602,  598,  598,
      180,  181,  182,  180,  181,  182,  832, 1281,  181,  182,
      181,  182,  181,  182,  180, 1281,  181,  182,  180,  181,
      182,  835,  180, 1281,  833,  180,  602,  602,  180,  836,
      181,  182, 1281, 1281,  181,  182,  180, 1281,  181,  182,
      180,  181,  182,  837,  181,  182,  840,  841,  839,  180,
      838,  180,  181,  182, 1281, 1281,  181,  182,  180, 1281,
      180, 1281,  180, 1281,  180,  181,  182,  181,  182, 1281,

     1281,  842, 1281,  843,  181,  182,  181,  182,  181,  182,
      181,  182,  180, 1281,  180, 1281,  846, 1281,  845,  180,
     1281,  180, 1281,  180, 1281, 1281,  180,  844,  181,  182,
      181,  182,  180,  847, 1281,  181,  182,  181,  182,  181,
      182,  849,  181,  182,  851,  180, 1281,  180,  181,  182,
     1281,  848,  180,  850,  180, 1281, 1281,  180,  852,  180,
     1281,  181,  182,  181,  182, 1281,  180,  853,  181,  182,
      181,  182,  854,  181,  182,  181,  182, 1281,  180, 1281,
     1281,  476,  181,  182, 1281, 1281,  180, 1281,  180, 1281,
      180, 1281, 1281,  855,  181,  182,  180,  856, 1281,  180,

     1281,  857,  181,  182,  181,  182,  181,  182,  860, 1281,
      180, 1281,  181,  182,  858,  181,  182,  180, 1281,  180,
     1281, 1281,  180, 1281,  180,  859,  181,  182,  180, 1281,
      861,  180,  862,  181,  182,  181,  182,  864,  181,  182,
      181,  182, 1281, 1281,  181,  182,  180,  181,  182,  180,
     1281, 1281, 1281,  867,  180, 1281,  865,  180, 1281,  863,
     1281, 1281,  181,  182,  866,  181,  182, 1281,  868, 1281,
      181,  182,  869,  181,  182,  598,  270,  870,  598,  266,
     1281,  270, 1281,  686, 1281, 1281,  267,  266, 1281, 1281,
     1281, 1281, 1281,  266,  267,  268,  269,  872,  797,  881,

      267,  797, 1281,  268,  269, 1281,  874,  797,  797,  268,
      269,  797, 1281,  875, 1281, 1281, 1281,  266, 1281,  797,
      266,  797,  876,  877,  267,  883, 1281,  267,  266,  882,
     1281,  266, 1281,  268,  269,  267,  268,  269,  267, 1281,
     1281, 1281,  266,  884,  268,  269, 1281,  268,  269,  267,
      797,  797,  598,  180, 1281,  598, 1281,  885,  268,  269,
      880,  690,  690,  886,  266,  690, 1281,  266, 1281,  181,
      182,  267,  522,  690,  267,  690,  598,  598, 1281,  887,
      268,  269,  266,  268,  269,  266, 1281, 1281, 1281,  267,
     1281, 1281,  267,  266,  522, 1281,  266,  522,  268,  269,

      267,  268,  269,  267,  690,  690, 1281,  522, 1281,  268,
      269,  266,  268,  269,  889,  266, 1281,  180,  267,  266,
     1281, 1281,  267,  266,  888, 1281,  267,  268,  269, 1281,
      267,  268,  269,  181,  182,  268,  269,  890,  979,  268,
      269,  891,  266, 1281,  266, 1281,  266, 1281,  180,  267,
      266,  267, 1281,  267, 1281,  892, 1281,  267,  268,  269,
      268,  269,  268,  269,  181,  182,  268,  269,  896,  266,
      977,  266, 1281,  266, 1281,  893,  267, 1281,  267,  180,
      267,  894, 1281, 1281,  895,  268,  269,  268,  269,  268,
      269, 1281,  266, 1281,  266,  181,  182,  266,  897,  267,

      266,  267, 1281, 1281,  267,  980, 1281,  267,  268,  269,
      268,  269,  898,  268,  269,  899,  268,  269,  266, 1281,
      266,  900, 1281,  266, 1281,  267,  266,  267, 1281,  180,
      267, 1281, 1281,  267,  268,  269,  268,  269,  901,  268,
      269, 1281,  268,  269,  266,  181,  182,  266,  904, 1281,
     1281,  267,  902,  903,  267,  266, 1281, 1281,  266, 1281,
      268,  269,  267,  268,  269,  267,  905, 1281, 1281,  266,
     1281,  268,  269,  266,  268,  269,  267,  180, 1281, 1281,
      267,  266, 1281, 1281,  906,  268,  269,  910,  267,  268,
      269,  907, 1281,  181,  182,  908,  978,  268,  269,  266,

     1281,  266, 1281, 1281,  266,  912,  267, 1281,  267, 1281,
      909,  267, 1281,  911, 1281,  268,  269,  268,  269, 1281,
      268,  269, 1281,  598,  324,  913,  598, 1281, 1281,  324,
     1281,  737, 1281, 1281,  180,  598,  345, 1281,  598, 1281,
     1281,  345, 1281,  748, 1281,  915,  797,  180, 1281,  797,
      181,  182, 1281, 1281,  917,  797,  797,  925,  341,  797,
     1281,  918, 1281,  181,  182,  342,  341,  797, 1281,  797,
      919,  920,  180,  342,  343,  344, 1281,  341,  934,  341,
     1281, 1281,  343,  344,  342,  341,  342, 1281,  181,  182,
      341, 1281,  342,  343,  344,  343,  344,  342,  797,  797,

      598,  343,  344,  598,  935,  936,  343,  344,  923,  741,
      741,  341,  939,  741,  937,  341, 1281,  566,  342,  180,
     1281,  741,  342,  741,  598,  598,  341,  343,  344,  938,
     1281,  343,  344,  342,  341,  181,  182,  940, 1281,  341,
     1281,  342,  343,  344,  180, 1281,  342, 1281,  982, 1281,
      343,  344,  741,  741,  797,  343,  344,  797, 1281,  941,
      181,  182,  927,  797,  797,  341,  975,  797, 1281,  928,
      180,  942,  342, 1281, 1281,  797,  976,  797,  929,  930,
      566,  343,  344,  943,  341, 1281,  181,  182,  341, 1281,
      987,  342, 1281, 1281, 1281,  342, 1281,  180, 1281, 1281,

      343,  344,  944,  341,  343,  344,  797,  797,  598,  945,
      342,  598, 1281,  181,  182, 1281,  933,  752,  752,  343,
      344,  752, 1281,  946,  180, 1281, 1281,  341,  981,  752,
      341,  752,  598,  598,  342, 1281, 1281,  342,  341, 1281,
      181,  182,  341,  343,  344,  342,  343,  344, 1281,  342,
      180, 1281,  948, 1281,  343,  344,  341,  947,  343,  344,
      752,  752, 1281,  342,  373, 1281,  181,  182,  949, 1281,
      180,  374,  343,  344,  180,  566,  598,  377,  373,  598,
      375,  376,  377, 1281,  776,  374,  181,  182, 1281,  373,
      181,  182,  984,  950,  375,  376,  374, 1281,  952,  797,

      961,  983,  797, 1281, 1281,  375,  376,  954,  797,  797,
      373, 1281,  797, 1281,  955, 1281, 1281,  374,  373,  784,
      797,  373,  797,  956,  957,  374,  375,  376,  374,  373,
     1281, 1281,  373, 1281,  375,  376,  374,  375,  376,  374,
      784,  180, 1281,  784, 1281,  375,  376, 1281,  375,  376,
     1281,  797,  797,  598,  965, 1281,  598,  181,  182,  964,
      963,  960,  780,  780,  373, 1281,  780,  989,  373, 1281,
     1281,  374,  373, 1281,  780,  374,  780,  598,  598,  374,
      375,  376,  180, 1281,  375,  376,  373, 1281,  375,  376,
     1281, 1281, 1281,  374, 1281, 1281,  180,  966,  181,  182,

      385, 1281,  375,  376,  967,  780,  780, 1281,  598,  183,
      385,  598,  181,  182,  183, 1281,  599,  598, 1281,  183,
      598,  797,  183,  183,  797, 1281, 1281,  183, 1281,  798,
      796,  797,  180,  985,  797, 1281, 1281, 1281, 1281,  799,
      797,  797, 1281,  969,  797,  180,  602,  602,  181,  182,
      602, 1281,  797, 1281,  797,  800,  801,  180,  602,  180,
      602,  181,  182,  986,  598,  596,  990,  598, 1281, 1281,
      596, 1281,  803,  181,  182,  181,  182, 1281, 1281,  988,
      991, 1281, 1281,  797,  797,  797,  974,  180,  797,  602,
      602, 1281, 1281,  972,  800,  800,  180, 1281,  800,  180,

     1281, 1281, 1281,  181,  182,  180,  800, 1281,  800,  797,
      797,  180,  181,  182,  180,  181,  182,  180,  992,  180,
     1281,  181,  182,  180,  993,  994,  995,  181,  182, 1281,
      181,  182, 1281,  181,  182,  181,  182,  800,  800,  181,
      182,  180, 1281, 1281, 1281,  999,  180, 1281,  180,  996,
      997,  180, 1281,  180, 1281,  180, 1281,  181,  182,  180,
      998, 1281,  181,  182,  181,  182, 1281,  181,  182,  181,
      182,  181,  182, 1281, 1281,  181,  182, 1001,  180, 1281,
     1002, 1000,  180, 1003,  180, 1281, 1281,  180, 1281, 1004,
     1005, 1281,  180, 1281,  181,  182,  180, 1281,  181,  182,

      181,  182, 1007,  181,  182,  180, 1281, 1006,  181,  182,
     1281, 1281,  181,  182, 1009,  180, 1281,  180, 1008,  180,
     1281,  181,  182,  180, 1281, 1011, 1281, 1010,  180, 1281,
      180,  181,  182,  181,  182,  181,  182,  180, 1281,  181,
      182,  180, 1013,  180,  181,  182,  181,  182, 1015,  180,
     1281, 1281, 1012,  181,  182,  180, 1014,  181,  182,  181,
      182, 1281, 1281, 1016,  180,  181,  182, 1017,  180, 1281,
      180,  181,  182, 1019,  180, 1281,  180, 1281, 1018,  180,
      181,  182, 1281, 1281,  181,  182,  181,  182,  180, 1281,
      181,  182,  181,  182,  180,  181,  182, 1281, 1281, 1020,

      266, 1281, 1281, 1281,  181,  182, 1021,  267, 1281, 1281,
      181,  182,  598,  270, 1281,  598,  268,  269,  270, 1023,
      686, 1281, 1281, 1022,  598, 1281,  270,  598,  690,  690,
      270, 1281,  690, 1281,  872,  797, 1281, 1281,  797, 1281,
      690, 1281,  690,  874,  797,  797,  797,  270,  797,  797,
      875, 1281,  270, 1281,  873, 1281,  797, 1281,  797,  876,
      877,  598,  684,  266,  598, 1281, 1281,  684, 1025,  879,
      267,  690,  690, 1281,  266, 1281, 1281, 1281,  266,  268,
      269,  267, 1281, 1030, 1281,  267, 1281,  797,  797,  797,
      268,  269,  797, 1281,  268,  269, 1281, 1028,  876,  876,

     1031,  266,  876, 1281,  266, 1281, 1281, 1281,  267, 1281,
      876,  267,  876,  797,  797, 1032,  266,  268,  269,  266,
      268,  269, 1281,  267, 1281, 1033,  267, 1281,  598, 1281,
      324,  598,  268,  269,  324,  268,  269, 1035,  266, 1034,
     1281,  876,  876,  598,  522,  267,  598, 1281, 1281, 1281,
     1281,  687,  598,  598,  268,  269,  598, 1281,  688, 1281,
     1281, 1281,  266, 1281,  598,  266,  598,  690,  691,  267,
      266, 1281,  267,  266, 1281, 1036, 1281,  267,  268,  269,
      267,  268,  269, 1281, 1281, 1281,  268,  269, 1281,  268,
      269,  266, 1281, 1037,  266,  598,  598,  266,  267, 1281,

     1038,  267, 1039, 1281,  267, 1040, 1281,  268,  269,  266,
      268,  269,  266,  268,  269, 1042,  267, 1041, 1281,  267,
      266, 1281, 1281,  266, 1281,  268,  269,  267,  268,  269,
      267,  266, 1281, 1281, 1043,  266,  268,  269,  267,  268,
      269, 1045,  267,  266, 1044, 1281,  266,  268,  269,  266,
      267,  268,  269,  267, 1281, 1281,  267,  266, 1281,  268,
      269, 1281,  268,  269,  267,  268,  269, 1047, 1046,  266,
     1049,  266, 1281,  268,  269, 1048,  267, 1050,  267, 1281,
     1281, 1281, 1281,  266, 1281,  268,  269,  268,  269, 1051,
      267,  266, 1281, 1281,  266, 1281,  266, 1281,  267,  268,

      269,  267, 1281,  267, 1281, 1052, 1281,  268,  269, 1053,
      268,  269,  268,  269, 1281,  266, 1281,  598,  324,  341,
      598, 1055,  267,  324, 1281,  737,  342, 1281, 1281, 1054,
     1281,  268,  269,  741,  741,  343,  344,  741, 1281,  915,
      797, 1281, 1281,  797, 1281,  741, 1281,  741,  917,  797,
      797,  797,  324,  797,  797,  918, 1071,  324, 1281,  916,
     1281,  797, 1281,  797,  919,  920,  598,  735, 1281,  598,
     1281, 1281,  735, 1057,  922, 1281,  741,  741,  598,  345,
     1281,  598,  341, 1281,  345, 1281,  748, 1281, 1062,  342,
     1281, 1281,  797,  797,  797, 1281,  180,  797,  343,  344,

      925, 1281, 1060,  919,  919, 1281, 1072,  919,  598, 1281,
      345,  598,  181,  182,  345,  919, 1281,  919,  797,  797,
      797,  345, 1281,  797, 1281, 1281,  345, 1281,  926, 1281,
     1281,  752,  752,  598,  746,  752,  598,  341, 1281,  746,
     1281,  932, 1064,  752,  342,  752,  919,  919,  598,  180,
     1281,  598, 1281,  343,  344, 1069,  738,  598,  598, 1281,
      341,  598, 1281,  739, 1281,  181,  182,  342,  566,  598,
     1281,  598,  741,  742,  752,  752,  343,  344,  341, 1281,
     1281,  341, 1281, 1281, 1098,  342, 1070,  180,  342, 1281,
      180, 1281,  341, 1281,  343,  344, 1281,  343,  344,  342,

      598,  598,  797,  181,  182,  797,  181,  182,  343,  344,
      927,  797,  797, 1073,  341,  797,  180,  928,  566, 1101,
      180,  342,  341,  797, 1074,  797,  929,  930, 1100,  342,
      343,  344,  181,  182, 1281,  341,  181,  182,  343,  344,
     1281,  425,  342, 1281,  180, 1281,  341, 1102, 1075,  566,
     1281,  343,  344,  342,  797,  797,  797, 1281, 1281,  797,
      181,  182,  343,  344,  927,  797,  797,  341, 1281,  797,
     1077,  928, 1076, 1105,  342,  341, 1281,  797,  180,  797,
      929,  930,  342,  343,  344, 1078,  341, 1281, 1281,  341,
     1281,  343,  344,  342,  181,  182,  342, 1281,  598, 1281,

      377,  598,  343,  344,  377,  343,  344, 1080,  797,  797,
      797,  180,  566,  797, 1099, 1281, 1281, 1281, 1067,  929,
      929, 1079,  341,  929, 1281,  341, 1281,  181,  182,  342,
     1281,  929,  342,  929,  797,  797, 1281, 1106,  343,  344,
     1081,  343,  344,  598,  377, 1281,  598, 1082, 1281,  377,
     1281,  776,  180,  797,  377, 1281,  797, 1281, 1281,  377,
     1281,  953,  929,  929,  598,  952,  180,  598,  181,  182,
     1281, 1281,  749,  598,  598, 1084, 1281,  598, 1281,  750,
      780,  780,  181,  182,  780,  598, 1109,  598,  752,  753,
      598,  774,  780,  598,  780, 1281,  774,  373,  959, 1281,

      797,  183, 1281,  797,  374, 1281,  183, 1281,  798, 1281,
     1281, 1281, 1089,  375,  376, 1281,  598,  598,  797, 1090,
     1281,  797,  969,  780,  780, 1281,  954,  797,  797,  373,
     1281,  797, 1281,  955, 1281,  180,  374, 1281, 1281,  797,
      373,  797,  956,  957, 1281,  375,  376,  374,  373, 1281,
     1281,  181,  182, 1281,  784,  374,  375,  376, 1281, 1281,
      373, 1091, 1281, 1281,  375,  376, 1281,  374, 1281, 1092,
      797,  797,  797, 1107, 1281,  797,  375,  376, 1094, 1281,
      954,  797,  797,  373, 1281,  797, 1281,  955, 1281, 1281,
      374, 1281, 1281,  797,  180,  797,  956,  957,  373,  375,

      376, 1281,  180, 1093, 1281,  374,  797, 1281,  183,  797,
      181,  182,  183, 1281,  375,  376,  800,  800,  181,  182,
      800,  180, 1281, 1281,  797,  797,  797, 1281,  800,  797,
      800, 1110, 1281, 1095, 1087,  956,  956,  181,  182,  956,
      797,  596, 1281,  797, 1281, 1281,  596,  956,  971,  956,
      797,  797,  180, 1281, 1281,  598,  596, 1281,  598,  800,
      800,  596, 1097,  803,  598, 1281,  596,  598,  181,  182,
      596, 1281, 1281, 1281, 1103,  180, 1281,  974,  956,  956,
      598, 1281, 1281,  598, 1281, 1281, 1281, 1281,  777,  598,
      598,  181,  182,  598,  180,  778,  180, 1104,  180, 1281,

     1281,  598, 1281,  598,  780,  781,  180, 1281,  180, 1281,
      181,  182,  181,  182,  181,  182, 1108, 1281, 1111,  180,
     1281, 1281,  181,  182,  181,  182, 1281, 1281, 1114, 1112,
     1281, 1281,  598,  598,  797,  181,  182,  797, 1281, 1281,
     1281, 1281,  799,  797,  797, 1113,  180,  797,  180, 1281,
     1115,  180, 1281,  180, 1281,  797,  180,  797,  800,  801,
      180, 1281,  181,  182,  181,  182, 1281,  181,  182,  181,
      182, 1281,  181,  182,  180, 1117,  181,  182,  180, 1281,
      180, 1281, 1118,  180, 1116, 1281,  797,  797,  180, 1281,
      181,  182,  180, 1281,  181,  182,  181,  182,  180,  181,

      182,  180, 1120, 1119,  181,  182, 1122,  180,  181,  182,
      180, 1281, 1281, 1281,  181,  182,  180,  181,  182,  180,
     1121,  180, 1281,  181,  182, 1281,  181,  182,  180, 1123,
      180, 1281,  181,  182,  180,  181,  182,  181,  182,  180,
     1281, 1124, 1281,  180,  181,  182,  181,  182, 1281, 1281,
      181,  182,  180, 1281,  180,  181,  182, 1281, 1125,  181,
      182,  797, 1281,  270,  797, 1126, 1281,  270,  181,  182,
      181,  182, 1127, 1281, 1129, 1281, 1128, 1281, 1130,  797,
      270, 1281,  797, 1281, 1281,  270, 1281,  873,  876,  876,
      797,  684,  876,  797, 1281, 1281,  684, 1281, 1027, 1281,

      876, 1025,  876,  598,  684, 1281,  598,  180, 1281,  684,
      266,  879, 1132,  598, 1281,  684,  598,  267, 1281,  684,
     1281, 1281,  266,  181,  182, 1030,  268,  269, 1133,  267,
      266,  876,  876, 1281,  266, 1281,  266,  267,  268,  269,
     1134,  267,  266,  267, 1281, 1281,  268,  269,  266,  267,
      268,  269,  268,  269,  266,  267, 1281, 1281,  268,  269,
      266,  267, 1137, 1281,  268,  269,  266,  267, 1135, 1281,
      268,  269, 1136,  267,  266, 1281,  268,  269,  266, 1281,
      266,  267,  268,  269, 1281,  267, 1281,  267, 1138, 1281,
      268,  269,  266, 1281,  268,  269,  268,  269, 1281,  267,

      266, 1281, 1142, 1139, 1141,  266, 1281,  267,  268,  269,
     1281, 1140,  267,  266, 1143,  180,  268,  269,  266, 1281,
      267,  268,  269, 1281, 1281,  267,  266, 1281, 1281,  268,
      269,  181,  182,  267,  268,  269, 1281, 1144,  266, 1281,
      266, 1145,  268,  269,  266,  267, 1281,  267, 1147, 1281,
      180,  267, 1177, 1146,  268,  269,  268,  269, 1281, 1281,
      268,  269, 1281,  266, 1281,  266,  181,  182, 1150, 1149,
      267,  266,  267, 1281, 1281, 1148, 1281, 1281,  267,  268,
      269,  268,  269,  797,  324, 1281,  797,  268,  269,  324,
     1178,  916,  797, 1281,  324,  797,  919,  919,  324, 1151,

      919, 1281, 1152, 1153, 1281, 1057,  797,  735,  919,  797,
      919, 1281,  735, 1281, 1059,  598,  735,  180,  598, 1281,
     1281,  735, 1281,  922,  598, 1281,  735,  598, 1155, 1281,
      735, 1281, 1281,  181,  182,  797,  345, 1062,  797,  919,
      919,  345, 1281,  926,  797, 1281,  345,  797,  929,  929,
      345,  341,  929,  797,  746, 1281,  797, 1064,  342,  746,
      929, 1066,  929,  598,  746, 1281,  598,  343,  344,  746,
     1281,  932, 1281, 1281, 1281, 1157,  598, 1281,  746,  598,
      341, 1281,  746,  341, 1281, 1069,  341,  342,  341, 1160,
      342,  929,  929,  342, 1281,  342,  343,  344, 1158,  343,

      344, 1159,  343,  344,  343,  344,  341, 1281, 1281, 1281,
      341, 1281,  341,  342,  341, 1281, 1281,  342, 1281,  342,
     1281,  342,  343,  344, 1161, 1162,  343,  344,  343,  344,
      343,  344, 1164,  341,  566, 1281, 1281,  341, 1281,  341,
      342,  341, 1281, 1163,  342, 1281,  342, 1281,  342,  343,
      344, 1165, 1281,  343,  344,  343,  344,  343,  344, 1167,
     1281,  797,  377, 1168,  797,  180, 1281,  377, 1166,  953,
      566,  797, 1281,  377,  797,  956,  956,  377, 1281,  956,
     1281,  181,  182, 1084, 1281,  797,  774,  956,  797,  956,
     1281,  774, 1281, 1086,  598,  774, 1180,  598, 1281, 1281,

      774, 1281,  959,  598, 1281,  774,  598, 1170,  373,  774,
      373, 1281, 1281,  373, 1281,  374, 1089,  374,  956,  956,
      374,  373, 1281, 1281,  375,  376,  375,  376,  374,  375,
      376,  180, 1281,  373, 1281,  373, 1171,  375,  376, 1172,
      374, 1281,  374, 1281,  385, 1281, 1281,  181,  182,  375,
      376,  375,  376,  797,  596, 1281,  797, 1176, 1173,  596,
      180,  971,  797, 1281,  596,  797,  180, 1281,  596, 1174,
      180, 1281, 1175,  975,  180, 1097,  181,  182, 1281, 1281,
     1281,  180,  181,  182,  180, 1281,  181,  182,  180, 1281,
      181,  182,  180, 1281, 1281, 1179, 1182,  181,  182,  180,

      181,  182, 1181,  180,  181,  182,  180, 1281,  181,  182,
     1184, 1281, 1281,  180, 1281,  181,  182, 1281, 1281,  181,
      182, 1183,  181,  182,  180, 1185,  180, 1281, 1186,  181,
      182,  180, 1281,  180, 1187,  180, 1281,  180, 1281, 1281,
      181,  182,  181,  182,  180, 1281,  180,  181,  182,  181,
      182,  181,  182,  181,  182, 1189, 1281, 1281, 1281,  180,
      181,  182,  181,  182,  180, 1281,  180, 1281,  180, 1281,
     1281,  180, 1281, 1190, 1188,  181,  182,  180, 1281,  180,
      181,  182,  181,  182,  181,  182, 1191,  181,  182, 1281,
     1281, 1281,  266,  181,  182,  181,  182,  797,  684,  267,

      797, 1281, 1281,  684, 1192, 1027, 1281, 1193,  268,  269,
      266, 1194,  797, 1281,  684,  797,  266,  267,  684, 1132,
     1281,  266, 1281,  267, 1281, 1281,  268,  269,  267, 1195,
     1281, 1281,  268,  269, 1281, 1281,  266,  268,  269,  266,
     1281, 1198,  266,  267, 1281, 1281,  267, 1196, 1281,  267,
     1281, 1197,  268,  269,  266,  268,  269, 1281,  268,  269,
      180,  267,  266, 1281, 1200,  266, 1281, 1199,  266,  267,
      268,  269,  267,  266, 1281,  267,  181,  182,  268,  269,
      267,  268,  269, 1281,  268,  269, 1203,  266, 1281,  268,
      269, 1204,  266, 1202,  267,  266, 1201, 1281,  266,  267,

      266, 1281,  267,  268,  269,  267,  266,  267,  268,  269,
     1281,  268,  269,  267,  268,  269,  268,  269, 1281, 1281,
      266, 1281,  268,  269, 1207, 1205, 1206,  267,  266, 1281,
      180, 1281, 1281,  266, 1281,  267,  268,  269, 1281, 1281,
      267, 1281, 1281, 1281,  268,  269,  181,  182, 1208,  268,
      269,  797,  735, 1281,  797, 1281, 1209,  735, 1281, 1059,
      797, 1281,  735,  797, 1210, 1211,  735, 1227,  797,  746,
     1281,  797, 1281, 1155,  746,  341, 1066,  797, 1281,  746,
      797,  341,  342,  746, 1281, 1281,  341, 1281,  342,  341,
     1157,  343,  344,  342,  341, 1281,  342,  343,  344, 1281,

     1281,  342,  343,  344, 1281,  343,  344,  341, 1281, 1215,
      343,  344, 1212,  341,  342,  341, 1216, 1281, 1213,  341,
      342, 1214,  342,  343,  344, 1281,  342, 1281, 1281,  343,
      344,  343,  344,  566,  566,  343,  344,  341, 1281,  341,
     1281, 1281,  797,  774,  342,  797,  342, 1281,  774, 1217,
     1086, 1281, 1218,  343,  344,  343,  344,  797, 1281,  774,
      797, 1281,  373,  774, 1170, 1281,  373, 1281, 1219,  374,
      373, 1281, 1281,  374, 1281, 1281, 1281,  374,  375,  376,
     1281,  566,  375,  376,  373, 1281,  375,  376,  373, 1281,
      180,  374,  180, 1220,  180,  374, 1222, 1221, 1281,  180,

      375,  376,  180, 1281,  375,  376,  181,  182,  181,  182,
      181,  182, 1224, 1281, 1225,  181,  182,  180,  181,  182,
     1223,  180, 1281,  180,  385, 1226,  180, 1281, 1281,  180,
     1228, 1281,  180,  181,  182,  180, 1281,  181,  182,  181,
      182,  180,  181,  182, 1229,  181,  182, 1230,  181,  182,
      180,  181,  182,  180, 1231, 1281,  180,  181,  182,  180,
     1281,  266, 1281, 1281, 1281, 1281,  181,  182,  267,  181,
      182, 1232,  181,  182, 1281,  181,  182,  268,  269,  266,
     1281,  266, 1281, 1281,  266, 1281,  267, 1235,  267, 1281,
     1233,  267, 1281, 1281, 1281,  268,  269,  268,  269, 1234,

      268,  269, 1237,  266, 1281, 1236,  266, 1281, 1281,  266,
      267, 1281, 1281,  267,  266, 1281,  267, 1281, 1238,  268,
      269,  267,  268,  269,  518,  268,  269,  913,  266, 1281,
      268,  269,  266,  913,  266,  267,  266, 1239, 1281,  267,
     1281,  267, 1281,  267,  268,  269, 1281,  266,  268,  269,
      268,  269,  268,  269,  267,  266, 1241, 1281,  266, 1240,
      266, 1281,  267,  268,  269,  267,  266,  267, 1281, 1281,
     1281,  268,  269,  267,  268,  269,  268,  269, 1242,  341,
     1243,  341,  268,  269,  341, 1281,  342, 1281,  342, 1281,
     1281,  342,  341, 1281, 1244,  343,  344,  343,  344,  342,

      343,  344, 1247,  341, 1281, 1245,  341, 1246,  343,  344,
      342,  341, 1281,  342, 1281, 1281,  566, 1281,  342,  343,
      344, 1281,  343,  344,  341, 1281,  373,  343,  344, 1248,
      373,  342,  373,  374, 1249, 1281, 1250,  374, 1281,  374,
      343,  344,  375,  376, 1251,  373,  375,  376,  375,  376,
      385, 1281,  374,  180,  385,  180, 1281,  180, 1281,  180,
     1281,  375,  376, 1252,  180, 1281,  180, 1253,  180,  181,
      182,  181,  182,  181,  182,  181,  182,  180, 1281, 1281,
      181,  182,  181,  182,  181,  182,  180, 1281,  180,  975,
      180, 1281, 1281,  181,  182,  833, 1281, 1281, 1281, 1254,

     1281, 1281,  181,  182,  181,  182,  181,  182, 1255,  266,
     1281,  266, 1281,  266, 1256,  266,  267,  266,  267,  180,
      267,  180,  267, 1281,  267,  268,  269,  268,  269,  268,
      269,  268,  269,  268,  269,  181,  182,  181,  182,  266,
     1281, 1281,  266, 1281,  266, 1260,  267, 1281, 1257,  267,
     1258,  267, 1259, 1281, 1261,  268,  269, 1004,  268,  269,
      268,  269,  266, 1281, 1263, 1262,  266, 1281,  913,  267,
      341, 1281, 1281,  267,  341, 1281, 1281,  342,  268,  269,
      180,  342,  268,  269, 1281,  341,  343,  344,  341, 1281,
      343,  344,  342, 1281, 1281,  342,  181,  182, 1264,  341,

     1281,  343,  344, 1281,  343,  344,  342,  341, 1281, 1265,
      341, 1277,  373, 1266,  342,  343,  344,  342,  373,  374,
     1268,  180, 1267,  343,  344,  374,  343,  344,  375,  376,
      180, 1281,  566, 1269,  375,  376,  566,  181,  182, 1281,
     1281, 1281,  385,  266, 1281, 1281,  181,  182,  385, 1281,
      267, 1281,  180, 1281,  266, 1281,  266, 1281, 1270,  268,
      269,  267, 1271,  267, 1281, 1272, 1281,  266,  181,  182,
      268,  269,  268,  269,  267, 1281, 1273, 1281,  266, 1281,
      266, 1281, 1274,  268,  269,  267, 1281,  267, 1281, 1281,
     1281,  266, 1281, 1281,  268,  269,  268,  269,  267,  266,

     1275, 1281,  697,  341, 1281,  341,  267,  268,  269, 1281,
      342, 1281,  342, 1281, 1281,  268,  269,  341, 1281,  343,
      344,  343,  344,  341,  342,  566, 1281,  566,  341, 1281,
      342, 1281, 1281,  343,  344,  342, 1281, 1281, 1281,  343,
      344, 1281, 1281, 1276,  343,  344,  266, 1281,  566,  266,
     1281, 1281,  266,  267,  266, 1281,  267,  341,  566,  267,
      266,  267,  268,  269,  342,  268,  269,  267,  268,  269,
      268,  269, 1281,  343,  344, 1281,  268,  269,  341, 1281,
      266, 1281, 1281, 1281, 1278,  342, 1281,  267, 1281, 1279,
     1281, 1280, 1281, 1281,  343,  344,  268,  269, 1281, 1281,

     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,  566,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  179,  179, 1281, 1281,  179,
      179,  179,  183, 1281,  183,  183,  183,  183,  183,  183,
      183,  183,  265,  265, 1281, 1281,  265,  265,  265,  270,
     1281,  270,  270,  270,  270,  270,  270,  270,  270,  319,

      319, 1281, 1281,  319,  319,  319,  324, 1281,  324,  324,
      324,  324,  324,  324,  324,  324,  340,  340, 1281, 1281,
      340,  340,  340,  345, 1281,  345,  345,  345,  345,  345,
      345,  345,  345,  372,  372, 1281, 1281,  372,  372,  372,
      377, 1281,  377,  377,  377,  377,  377,  377,  377,  377,
      403, 1281, 1281, 1281,  403, 1281,  403,  403, 1281,  403,
      403,  407, 1281, 1281,  407,  407, 1281,  407,  407,  407,
      407,  407,  408,  408, 1281,  408,  408,  408,  408,  408,
      408,  408,  408,  409, 1281,  409,  409, 1281, 1281,  409,
     1281,  409,  411,  411,  411,  411,  411, 1281,  411,  500,

      500,  500,  500,  500, 1281,  500,  544,  544,  544,  544,
      544, 1281,  544,  554,  554,  554,  554,  554, 1281,  554,
      580,  580,  580,  580,  580, 1281,  580,  596, 1281,  596,
      596,  596,  596,  596,  596,  596,  596,  599, 1281, 1281,
     1281,  599,  599,  599,  599,  599,  599,  599,  684, 1281,
      684,  684,  684,  684,  684,  684,  684,  684,  686, 1281,
     1281, 1281,  686,  686,  686,  686,  686,  686,  686,  735,
     1281,  735,  735,  735,  735,  735,  735,  735,  735,  737,
     1281, 1281, 1281,  737,  737,  737,  737,  737,  737,  737,
      598, 1281, 1281, 1281,  598,  598,  598,  598,  598,  598,

      598,  746, 1281,  746,  746,  746,  746,  746,  746,  746,
      746,  748, 1281, 1281, 1281,  748,  748,  748,  748,  748,
      748,  748,  774, 1281,  774,  774,  774,  774,  774,  774,
      774,  774,  776, 1281, 1281, 1281,  776,  776,  776,  776,
      776,  776,  776,  795,  795, 1281,  795,  795,  795,  795,
      795,  795,  795,  795,  798, 1281, 1281, 1281,  798,  798,
      798,  798,  798,  798,  798,  803, 1281, 1281, 1281,  803,
      803,  803,  803,  803,  803,  803,  871,  871, 1281,  871,
      871,  871,  871,  871,  871,  871,  871,  873, 1281, 1281,
     1281,  873,  873,  873,  873,  873,  873,  873,  879, 1281,

     1281, 1281,  879,  879,  879,  879,  879,  879,  879,  914,
      914, 1281,  914,  914,  914,  914,  914,  914,  914,  914,
      916, 1281, 1281, 1281,  916,  916,  916,  916,  916,  916,
      916,  922, 1281, 1281, 1281,  922,  922,  922,  922,  922,
      922,  922,  797, 1281, 1281, 1281,  797,  797,  797,  797,
      797,  797,  797,  924,  924, 1281,  924,  924,  924,  924,
      924,  924,  924,  924,  926, 1281, 1281, 1281,  926,  926,
      926,  926,  926,  926,  926,  932, 1281, 1281, 1281,  932,
      932,  932,  932,  932,  932,  932,  951,  951, 1281,  951,
      951,  951,  951,  951,  951,  951,  951,  953, 1281, 1281,

     1281,  953,  953,  953,  953,  953,  953,  953,  959, 1281,
     1281, 1281,  959,  959,  959,  959,  959,  959,  959,  968,
      968, 1281,  968,  968,  968,  968,  968,  968,  968,  968,
      971, 1281, 1281, 1281,  971,  971,  971,  971,  971,  971,
      971,  973,  973, 1281,  973,  973,  973,  973,  973,  973,
      973,  973, 1024, 1024, 1281, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1027, 1281, 1281, 1281, 1027, 1027, 1027,
     1027, 1027, 1027, 1027,  686, 1281, 1281, 1281,  686,  686,
      686,  686,  686,  686,  686, 1029, 1029, 1281, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029,  265,  265, 1281, 1281,

      265,  265,  265, 1056, 1056, 1281, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1059, 1281, 1281, 1281, 1059, 1059,
     1059, 1059, 1059, 1059, 1059,  737, 1281, 1281, 1281,  737,
      737,  737,  737,  737,  737,  737, 1061, 1061, 1281, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1061,  924,  924, 1281,
      924,  924,  924,  924,  924,  924,  924,  924,  926, 1281,
     1281, 1281,  926,  926,  926,  926,  926,  926,  926, 1063,
     1063, 1281, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1066, 1281, 1281, 1281, 1066, 1066, 1066, 1066, 1066, 1066,
     1066,  748, 1281, 1281, 1281,  748,  748,  748,  748,  748,

      748,  748, 1068, 1068, 1281, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068,  340,  340, 1281, 1281,  340,  340,  340,
      951,  951, 1281,  951,  951,  951,  951,  951,  951,  951,
      951,  953, 1281, 1281, 1281,  953,  953,  953,  953,  953,
      953,  953, 1083, 1083, 1281, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1086, 1281, 1281, 1281, 1086, 1086, 1086,
     1086, 1086, 1086, 1086,  776, 1281, 1281, 1281,  776,  776,
      776,  776,  776,  776,  776, 1088, 1088, 1281, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088,  372,  372, 1281, 1281,
      372,  372,  372,  968,  968, 1281,  968,  968,  968,  968,

      968,  968,  968,  968,  797, 1281, 1281, 1281,  797,  797,
      797,  797,  797,  797,  797,  798, 1281, 1281, 1281,  798,
      798,  798,  798,  798,  798,  798, 1096, 1096, 1281, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,  973,  973, 1281,
      973,  973,  973,  973,  973,  973,  973,  973,  179,  179,
     1281, 1281,  179,  179,  179, 1131, 1131, 1281, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1154, 1154, 1281, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1156, 1156, 1281,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1169, 1169,
     1281, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,   23,

     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281
    } ;

static yyconst flex_int16_t yy_chk[8557] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  956,   15,   15,   28,   15,   15,
       15,  929,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  919,   90,   28,   28,   13,   15,   13,  876,   29,
      803,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  800,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  778,   36,  602,   33,   33,   37,  109,  602,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  184,  184,  776,   39,
       39,  750,   39,   38,   39,   38,  271,  271,  748,   40,
       21,   21,   39,   21,   22,  179,   22,   22,   22,   22,
       39,   42,   22,   22,   22,   40,   40,  744,  180,   45,
      743,  179,  179,  739,   38,   38,   22,   42,   42,   43,
      183,   40,  180,   42,   40,   45,   45,   40,  266,   45,
      737,   45,  688,   42,  183,   43,   43,  325,  325,   42,
      690,  270,  266,  686,   45,  690,   22,   22,   44,   22,
       41,   43,   44,   43,   43,  270,   44,   44,  741,   44,
       43,   46,   44,  741,   44,  599,   41,   41,  163,  595,

      163,   41,   47,  320,   61,   41,  594,   46,   46,   41,
       41,   61,   41,   48,  163,   41,   49,  320,   47,   47,
       61,   61,   46,  324,  553,  341,   46,  345,   47,   48,
       48,   48,   49,   49,   49,   49,   50,  324,   49,  341,
       51,  345,   49,  552,   52,   48,  346,  346,   49,   48,
       53,  373,   50,   50,   50,  551,   51,   51,   50,   51,
       52,   52,   52,   51,   56,  373,   53,   53,   50,   54,
       51,   51,  752,   51,   50,  550,   52,  752,   58,   52,
       56,   56,   52,  549,   52,   54,   54,   54,   53,   56,
       56,   54,  377,  548,   58,   58,   58,   57,   54,   56,

       58,  378,  378,  402,   58,  401,  377,   54,   55,   55,
       59,  339,   55,   57,   57,   60,   55,   55,  780,   55,
      597,  597,   55,  780,   55,   55,   59,   59,   57,  412,
       64,   60,   60,   64,   65,   59,   59,   64,  501,   60,
      338,   65,   66,  412,  337,   60,   64,   64,   66,   66,
       65,   65,  501,   67,   66,   68,  336,   69,   66,   66,
       67,   71,   68,   67,   69,  685,  685,   68,   71,   67,
       67,   68,   68,   69,   69,   70,   70,   71,   71,   70,
      175,  175,  107,   73,  736,  736,   76,   70,  106,   70,
       73,   74,  545,   76,   75,   23,  181,   71,   74,   73,

       73,   75,   76,   76,   76,    0,  545,   74,   74,   73,
       75,   75,  181,  181,   78,  747,  747,    0,   70,   70,
       72,   78,   74,  175,  175,   74,   75,   72,    0,   75,
       78,   78,   74,   78,   98,   98,   72,   72,   98,  555,
      775,  775,   72,    0,   79,  581,   98,    0,   98,   72,
       72,   79,   72,  555,   72,   72,   86,   72,   77,  581,
       79,   79,   79,   86,    0,   77,   79,  185,  596,   80,
      185,    0,   86,   86,   77,   77,   80,   98,   98,   77,
       81,   77,  596,  185,  185,   80,   80,   81,   80,   77,
        0,   80,   86,   82,   77,   77,   81,   81,  684,   81,

       82,   83,  735,    0,   84,   80,    0,   85,   83,   82,
       82,   84,  684,   81,   85,   87,  735,   83,   83,    0,
       84,   84,   87,   85,   85,   82,    0,   83,   82,   85,
       83,   87,   87,   87,    0,    0,   84,   84,   88,   85,
       89,   84,   84,    0,   96,   88,   92,   89,  189,   92,
       88,   96,   93,   92,   88,   88,   89,   89,   93,   93,
       96,   96,   92,   92,  189,  189,    0,  746,   93,   93,
       94,   94,   94,   94,   94,   94,  774,   94,    0,   95,
      189,  746,   97,    0,   94,   99,   95,   95,   95,   97,
      774,    0,   99,   94,   94,   95,   95,    0,   97,   97,

        0,   99,   99,    0,  102,  102,  102,  102,  102,  102,
        0,    0,    0,    0,  102,    0,   99,  102,  104,  104,
      104,  104,  104,  104,    0,    0,  121,  121,  104,    0,
      121,  104,  105,  105,  105,  105,  105,  105,  121,  108,
      121,  112,  105,  114,  112,  105,  108,  115,  112,  114,
      114,    0,    0,    0,  115,  108,  108,  112,  112,  114,
      114,  116,    0,  115,  115,  120,    0,  117,  116,  121,
      121,    0,  120,  122,  117,    0,    0,  116,  116,  117,
      122,  120,  120,  117,  117,  123,    0,  124,    0,  122,
      122,  125,  123,    0,  124,    0,    0,    0,  125,  137,

        0,  123,  123,  124,  124,    0,  137,  125,  125,  122,
        0,  126,    0,  124,  127,  137,  137,  123,  126,    0,
        0,  127,  123,  125,    0,  128,  125,  126,  126,  126,
      127,  127,  128,  129,    0,  127,    0,  127,    0,    0,
      129,  128,  128,  128,    0,  130,    0,  128,    0,  129,
      129,  127,  130,    0,  195,  129,  131,    0,  132,    0,
      133,  130,  130,  131,  130,  132,    0,  133,    0,  129,
      195,  195,  131,  131,  132,  132,  133,  133,  134,    0,
      195,    0,    0,  139,  132,  134,  139,    0,  131,    0,
      139,  131,    0,  133,  134,  134,  140,  133,  141,  139,

      139,  142,  140,  140,    0,  141,    0,    0,  142,    0,
      134,    0,  140,  140,  141,  141,    0,  142,  142,  143,
      143,  145,  190,  143,    0,  146,    0,    0,  145,  145,
      145,  143,  146,  143,  145,    0,  147,    0,  190,  190,
      145,  146,  146,  147,  155,  155,  155,  155,  155,  155,
        0,  148,  147,  147,  155,  147,  146,  155,  148,  149,
        0,  190,  143,  143,  144,    0,  149,  148,  148,  783,
      148,  144,  150,    0,    0,  149,  149,    0,  783,  150,
      144,  144,  783,  783,  151,  783,  144,  148,  150,  150,
        0,  151,  149,  144,  144,  152,    0,    0,  144,  144,

      151,  151,  152,  153,    0,    0,  191,  150,  154,    0,
      153,  152,  152,  151,    0,  154,  182,  182,  182,  153,
      153,  182,  191,  191,  154,  154,  154,  152,    0,  182,
      186,  182,  191,  152,    0,  191,  186,    0,    0,  153,
      157,  157,  157,  157,  157,  157,  186,  186,    0,  192,
      157,    0,    0,  157,  158,  158,  158,  158,  158,  158,
      182,  182,  187,    0,  158,  192,  192,  158,  188,  188,
      187,  187,  188,  193,    0,  194,    0,    0,  187,  187,
      188,    0,  188,  196,    0,  197,  192,  198,    0,  193,
      193,  194,  194,    0,  193,    0,    0,  194,  199,  196,

      196,  197,  197,  198,  198,  200,    0,  197,  201,  198,
      202,  188,  188,    0,  199,  199,  203,    0,    0,  199,
        0,  200,  200,  204,  201,  201,  202,  202,  205,  202,
      201,  206,  203,  203,  200,  200,  200,    0,  207,  204,
      204,  208,    0,  200,  205,  205,  202,  206,  206,  210,
        0,  205,  209,  204,  207,  207,  211,  208,  208,  213,
      207,  208,    0,  212,    0,  210,  210,  206,  209,  209,
      209,  214,  211,  211,    0,  213,  213,  215,  208,  212,
      212,  210,  216,    0,  213,  212,  217,  214,  214,    0,
        0,  211,  218,  215,  215,  219,    0,    0,  216,  216,

      216,  220,  217,  217,    0,  221,  217,    0,  218,  218,
        0,  219,  219,  222,  215,  223,    0,  220,  220,  224,
      220,  221,  221,  221,  225,    0,  219,  218,  226,  222,
      222,  223,  223,  228,    0,  224,  224,  221,    0,    0,
      225,  225,  227,    0,  226,  226,    0,    0,  229,  228,
      228,    0,  223,    0,  225,  224,  230,    0,  227,  227,
      231,    0,  232,  227,  229,  229,  234,    0,  228,  226,
      233,    0,  230,  230,    0,    0,  231,  231,  232,  232,
      235,    0,  234,  234,  236,    0,  233,  233,  229,  232,
      231,  230,  237,  233,    0,  238,  235,  235,  234,  239,

      236,  236,  240,    0,    0,  241,    0,  242,  237,  237,
        0,  238,  238,    0,    0,  239,  239,    0,  240,  240,
      236,  241,  241,  242,  242,  239,  241,  237,  238,  237,
      243,  239,  244,  242,  245,    0,    0,    0,  240,    0,
      246,    0,  248,    0,  247,    0,  243,  243,  244,  244,
      245,  245,    0,  244,    0,    0,  246,  246,  248,  248,
      247,  247,  247,  249,    0,    0,  250,  243,  244,  246,
      245,  244,  244,  247,  248,  251,    0,  253,    0,  249,
      249,  247,  250,  250,    0,    0,  252,    0,    0,  254,
        0,  251,  251,  253,  253,  249,  253,  251,  255,    0,

      256,  250,  252,  252,  252,  254,  254,  253,  252,  257,
        0,    0,    0,  258,  255,  255,  256,  256,  256,    0,
      259,    0,  260,    0,  261,  257,  257,    0,  255,  258,
      258,    0,    0,  262,    0,  257,  259,  259,  260,  260,
      261,  261,  264,    0,  260,  263,  261,  265,  258,  262,
      262,  263,  411,    0,  265,  259,  261,    0,  264,  264,
      264,  263,  263,  265,  265,  267,    0,  268,  411,  411,
      262,    0,  267,    0,  268,  269,  269,  269,  274,    0,
      269,  267,  267,  268,  268,  274,  272,    0,  269,  272,
      269,  273,    0,  272,  274,  274,    0,  273,  273,  275,

        0,    0,  272,  272,    0,  276,  275,  273,  273,    0,
        0,    0,  276,  277,  277,  275,  275,  277,    0,  269,
      269,  276,  276,  278,    0,  277,  279,  277,  280,    0,
      278,  281,    0,  279,    0,  280,  418,    0,  281,  278,
      278,    0,  279,  279,  280,  280,  280,  281,  281,  415,
      281,  282,  418,  418,  283,    0,  277,  277,  282,  278,
      279,  283,  284,    0,    0,  415,  415,  282,  282,  284,
      283,  283,    0,  285,    0,    0,  286,    0,  284,  284,
      285,  282,  282,  286,  415,    0,    0,  287,    0,  285,
      285,  284,  286,  286,  287,  288,    0,    0,    0,  289,

        0,    0,  288,  287,  287,  285,  289,  290,  287,    0,
      292,  288,  288,  286,  290,  289,  289,  292,  291,    0,
        0,    0,  293,  290,  290,  291,  292,  292,  293,  293,
        0,    0,  293,    0,  291,  291,  289,    0,  293,  293,
        0,  294,  290,    0,  293,  295,    0,  292,  294,    0,
      291,  425,  295,  296,    0,    0,  297,  294,  294,  298,
      296,  295,  295,  297,  299,  295,  298,  425,  425,  296,
      296,  299,  297,  297,    0,  298,  298,  300,  297,  301,
      299,  299,    0,  299,  300,    0,  301,    0,  302,    0,
      302,  298,  303,  300,  300,  301,  301,  302,  302,  303,

      300,  299,    0,  302,  302,  304,    0,  305,  303,  303,
      306,    0,  304,  305,  305,    0,  303,  306,  307,    0,
        0,  304,  304,  305,  305,  307,  306,  306,    0,  308,
        0,  309,  304,    0,  307,  307,  308,    0,  309,  306,
      307,    0,  310,  305,  311,  308,  308,  309,  309,  310,
      307,  311,    0,  308,    0,  312,    0,  313,  310,  310,
      311,  311,  312,  314,  313,  416,  311,    0,  315,    0,
      314,  312,  312,  313,  313,  315,  313,  310,    0,  314,
      314,  416,  416,    0,  315,  315,  316,    0,  317,    0,
      312,  416,  318,  316,  319,  317,    0,    0,  314,  318,

      321,  319,  316,  316,  317,  317,    0,  321,  318,  318,
      319,  319,  316,  322,    0,    0,  321,  321,  326,    0,
      322,  326,  508,  317,  508,  326,  323,  323,  323,  322,
      322,  323,  508,    0,  326,  326,  327,  508,  508,  323,
        0,  323,  327,  327,  328,  328,  328,  328,  328,  328,
        0,  330,  327,  327,  328,    0,    0,  328,  330,  330,
      330,  331,  331,    0,    0,  331,    0,  330,  330,  332,
      323,  323,  431,  331,    0,  331,  332,  333,  333,  333,
      333,  333,  333,    0,  340,  332,  332,  333,  431,  431,
      333,  340,  342,  335,  335,  335,  335,  335,  335,  342,

      340,  340,    0,  335,  331,  331,  335,  343,  342,  342,
      431,    0,    0,    0,  343,  344,  344,  344,  347,    0,
      344,  347,  349,  343,  343,  347,  348,    0,  344,  349,
      344,    0,  348,  348,  347,  347,  350,  350,  349,  349,
      350,    0,  348,  348,    0,  351,    0,  352,  350,  354,
      350,  353,  351,  417,  352,    0,  354,  420,  353,  344,
      344,  351,  351,  352,  352,  354,  354,  353,  353,  417,
      417,  417,    0,  420,  420,  355,    0,  352,  352,  350,
      350,  351,  355,  353,    0,    0,  354,  356,    0,  357,
        0,  355,  355,    0,  356,    0,  357,    0,    0,  420,

        0,  358,    0,  356,  356,  357,  357,    0,  358,    0,
      355,  358,    0,  359,    0,  360,    0,  358,  358,  356,
      359,    0,  360,  358,    0,    0,  357,  361,    0,  359,
      359,  360,  360,  362,  361,  363,    0,  360,  364,    0,
      362,  365,  363,  361,  361,  364,    0,    0,  365,  362,
      362,  363,  363,  366,  364,  364,  362,  365,  365,  367,
      366,  419,  364,    0,  361,  363,  367,  368,  365,  366,
      366,  363,  363,  369,  368,  367,  367,  419,  419,    0,
      369,  367,  366,  368,  368,  370,    0,  371,    0,  369,
      369,  368,  370,  372,  371,  369,  419,    0,  374,    0,

      372,  370,  370,  371,  371,  374,  375,    0,    0,  372,
      372,    0,    0,  375,  374,  374,  376,  376,  376,    0,
      370,  376,  375,  375,    0,  379,    0,  380,  379,  376,
        0,  376,  379,  380,  380,  381,  381,  423,  382,  381,
        0,  379,  379,  380,  380,  382,  382,  381,  383,  381,
        0,  382,  384,  423,  423,  383,  385,  423,    0,  384,
      376,  376,    0,  385,  383,  383,  383,  386,  384,  384,
      387,  384,  385,  385,  386,    0,    0,  387,  381,  381,
        0,  388,    0,  386,  386,  389,  387,  387,  388,    0,
        0,  387,  389,  390,    0,    0,  386,  388,  388,  391,

      390,  389,  389,    0,  392,  389,  391,    0,    0,  390,
      390,  392,  393,    0,    0,  391,  391,  394,  388,  393,
      392,  392,    0,  391,  394,  390,    0,    0,  393,  393,
      395,    0,    0,  394,  394,    0,    0,  395,  396,    0,
      392,  397,    0,  421,  393,  396,  395,  395,  397,  395,
        0,    0,  394,    0,  396,  396,  422,  397,  397,  421,
      421,  421,    0,    0,  396,  398,  398,  398,  398,  398,
      398,    0,  422,  422,    0,  398,  397,    0,  398,  400,
      400,  400,  400,  400,  400,  422,    0,    0,  426,  400,
        0,  424,  400,  413,  427,    0,  413,    0,    0,    0,

        0,  413,  413,  413,  426,  426,  413,  424,  424,  424,
      427,  427,  428,  413,  413,    0,  413,  413,  413,  430,
      426,  429,    0,    0,  427,    0,  432,  427,  428,  428,
        0,    0,  428,  428,    0,  430,  430,  429,  429,    0,
      430,    0,  432,  432,    0,  413,  413,  414,  432,  428,
      414,    0,  429,    0,    0,  414,  414,  414,  433,    0,
      414,  434,    0,  435,    0,  436,    0,  414,  414,  437,
      414,  414,  414,  438,  433,  433,  439,  434,  434,  435,
      435,  436,  436,    0,    0,  437,  437,  440,    0,  438,
      438,  433,  439,  439,  441,  438,    0,    0,  437,  414,

      414,  442,    0,  440,  440,  436,  443,    0,  440,  444,
      441,  441,  446,  439,  445,    0,  447,  442,  442,    0,
        0,    0,  443,  443,  441,  444,  444,    0,  446,  446,
      445,  445,  447,  447,  446,  448,    0,  447,  449,    0,
        0,  442,  444,  445,  450,    0,  451,    0,  452,    0,
        0,  448,  448,  453,  449,  449,  454,  448,  455,  449,
      450,  450,  451,  451,  452,  452,  451,  456,    0,  453,
      453,  457,  454,  454,  455,  455,  458,  450,  459,  454,
        0,    0,  460,  456,  456,  453,    0,  457,  457,    0,
        0,  461,  458,  458,  459,  459,  455,  459,  460,  460,

      457,  462,  456,  463,    0,  464,  458,  461,  461,    0,
      465,    0,  461,    0,    0,    0,  466,  462,  462,  463,
      463,  464,  464,    0,  468,  463,  465,  465,  467,    0,
      464,  465,  466,  466,    0,    0,  469,    0,  470,  463,
      468,  468,  471,    0,  467,  467,  472,  466,    0,  468,
      473,  467,  469,  469,  470,  470,  474,    0,  471,  471,
      475,    0,  472,  472,  476,  467,  473,  473,  471,  477,
        0,    0,  474,  474,    0,  470,  475,  475,  474,    0,
      476,  476,  478,    0,  472,  477,  477,  479,  473,  480,
        0,  477,    0,    0,  481,  475,    0,  482,  478,  478,

        0,    0,    0,  479,  479,  480,  480,  483,    0,  479,
      481,  481,  484,  482,  482,  486,    0,  478,  482,  485,
        0,  487,    0,  483,  483,  488,    0,    0,  484,  484,
      490,  486,  486,  484,  481,  485,  485,  487,  487,    0,
        0,  488,  488,  489,  483,  491,  490,  490,  486,    0,
      490,    0,  484,    0,  492,  488,  485,  487,  493,  489,
      489,  491,  491,    0,    0,  489,  494,    0,  491,  489,
      492,  492,  495,    0,  493,  493,  496,  493,  497,    0,
      492,  498,  494,  494,  499,    0,    0,    0,  495,  495,
      492,    0,  496,  496,  497,  497,    0,  498,  498,  604,

      499,  499,  500,  497,    0,  496,  494,  495,    0,  500,
      608,    0,  498,    0,    0,  604,  604,  504,  500,  500,
        0,  499,  502,  623,  504,  502,  608,  608,    0,    0,
      502,  502,  502,  504,  504,  502,  604,  502,    0,  623,
      623,  505,  502,  502,  506,  502,  502,  502,  505,  504,
      609,  506,  507,    0,    0,  509,    0,  505,  505,  507,
      506,  506,  509,    0,  607,    0,  609,  609,  507,  507,
        0,  509,  509,    0,  502,  502,  503,  505,  609,  503,
      607,  607,  507,    0,  503,  503,  503,  510,    0,  503,
      607,  503,  612,    0,  510,  511,  503,  503,    0,  503,

      503,  503,  511,  510,  510,  512,    0,  512,  612,  612,
        0,  511,  511,    0,  512,  512,  512,  513,    0,  514,
      512,  512,  510,  512,  513,    0,  514,  612,  503,  503,
      515,    0,  511,  513,  513,  514,  514,  515,  516,  513,
        0,  517,    0,    0,    0,  516,  515,  515,  517,  514,
        0,    0,  518,    0,  516,  516,    0,  517,  517,  518,
      515,    0,    0,  516,  519,    0,  517,  520,  518,  518,
      521,  519,  522,  515,  520,  523,    0,  521,    0,  522,
      519,  519,  523,  520,  520,    0,  521,  521,  522,  522,
        0,  523,  523,  524,  519,  519,  520,  523,    0,    0,

      524,  525,    0,    0,  526,  521,  527,    0,  525,  524,
      524,  526,  528,  527,    0,  524,  613,  525,  525,  528,
      526,  526,  527,  527,  529,    0,    0,  530,  528,  528,
      528,  529,  613,  613,  530,    0,  526,  605,  525,  531,
      529,  529,  527,  530,  530,  532,  531,    0,    0,  530,
      533,  613,  532,  605,  605,  531,  531,  533,  534,    0,
      529,  532,  532,  535,  531,  534,  533,  533,    0,  536,
      535,    0,    0,  605,  534,  534,  536,    0,  534,  535,
      535,  537,    0,    0,    0,  536,  536,    0,  537,  538,
        0,    0,  533,    0,  536,  539,  538,  537,  537,    0,

      535,    0,  539,  540,    0,  538,  538,    0,  541,  538,
      540,  539,  539,  539,  542,  541,    0,    0,  537,  540,
      540,  542,    0,  540,  541,  541,  543,    0,    0,    0,
      542,  542,    0,  543,  544,    0,    0,  554,  541,  540,
      559,  544,  543,  543,  554,  542,    0,  559,  558,    0,
      544,  544,  563,  554,  554,  558,  559,  559,    0,  563,
        0,    0,  543,  546,  558,  558,  546,    0,  563,  563,
      559,  546,  546,  546,  560,    0,  546,  606,  546,    0,
      558,  560,  563,  546,  546,  562,  546,  546,  546,  561,
      560,  560,  562,  606,  606,    0,  561,  560,    0,    0,

        0,  562,  562,    0,    0,  561,  561,    0,    0,    0,
      560,    0,  564,  606,    0,  546,  546,  547,  611,  564,
      547,    0,  562,    0,  561,  547,  547,  547,  564,  564,
      547,    0,  547,  621,  611,  611,  565,  547,  547,    0,
      547,  547,  547,  565,    0,    0,  611,  566,    0,  621,
      621,  569,  565,  565,  566,  564,    0,  621,  569,  567,
        0,  565,    0,  566,  566,    0,  567,  569,  569,  547,
      547,  556,    0,  569,  556,  567,  567,    0,    0,  556,
      556,  556,    0,    0,  556,    0,  556,    0,    0,  567,
      567,  556,  556,  570,  556,  556,  556,  568,    0,  571,

      570,  572,    0,  617,  568,  574,  571,    0,  572,  570,
      570,    0,  574,  568,  568,  571,  571,  572,  572,  617,
      617,  574,  574,  556,  556,  557,    0,  574,  557,  617,
      570,  571,  568,  557,  557,  557,  573,  572,  557,    0,
      557,    0,  618,  573,  575,  557,  557,    0,  557,  557,
      557,  575,  573,  573,  573,  576,    0,  577,  618,  618,
      575,  575,  576,  578,  577,    0,    0,    0,  618,    0,
      578,  576,  576,  577,  577,  576,  620,  557,  557,  578,
      578,  579,  577,  578,  580,    0,  575,  586,  579,    0,
      614,  580,  620,  620,  586,    0,    0,  579,  579,  579,

      580,  580,  582,  586,  586,  582,  614,  614,  614,  586,
      582,  582,  582,  584,  620,  582,  622,  582,    0,    0,
      584,  587,  582,  582,  588,  582,  582,  582,  587,  584,
      584,  588,  622,  622,    0,  589,    0,  587,  587,    0,
      588,  588,  589,    0,    0,  622,  590,    0,    0,  584,
      587,  589,  589,  590,  582,  582,  583,  610,    0,  583,
      588,    0,  590,  590,  583,  583,  583,    0,  591,  583,
        0,  583,  589,  610,  610,  591,  583,  583,    0,  583,
      583,  583,  592,  590,  591,  591,  593,    0,  591,  592,
      624,    0,    0,  593,  610,    0,    0,    0,  592,  592,

        0,    0,  593,  593,  591,    0,  624,  624,  583,  583,
      585,    0,  615,  592,  616,  600,  600,  585,  600,    0,
        0,  600,  593,  600,    0,  624,  585,  585,  615,  615,
      616,  616,    0,  585,    0,  619,  616,  600,  615,  625,
      585,    0,  585,    0,  615,  626,  585,  585,  627,  585,
      601,  619,  619,  601,    0,  625,  625,    0,  601,  601,
      601,  626,  626,  601,  627,  627,  628,    0,    0,    0,
      629,  601,  619,  601,  601,  601,  626,  625,  631,    0,
        0,  630,  628,  628,  628,  627,  629,  629,    0,    0,
        0,    0,  634,    0,  631,  631,    0,  630,  630,    0,

        0,    0,  601,  601,  603,  629,  630,  603,  634,  634,
        0,    0,  603,  603,  603,  632,  631,  603,  633,    0,
        0,  634,  635,    0,  636,  603,  637,  603,  603,  603,
      638,  632,  632,  639,  633,  633,  632,    0,  635,  635,
      636,  636,  637,  637,  640,    0,  638,  638,  641,  639,
      639,  637,  642,    0,  633,  644,  603,  603,  643,  639,
      640,  640,    0,    0,  641,  641,  645,    0,  642,  642,
      646,  644,  644,  640,  643,  643,  643,  644,  642,  648,
      641,  647,  645,  645,    0,    0,  646,  646,  649,    0,
      650,    0,  651,    0,  652,  648,  648,  647,  647,    0,

        0,  646,    0,  647,  649,  649,  650,  650,  651,  651,
      652,  652,  653,    0,  654,    0,  652,    0,  651,  655,
        0,  656,    0,  657,    0,    0,  658,  650,  653,  653,
      654,  654,  659,  653,    0,  655,  655,  656,  656,  657,
      657,  656,  658,  658,  658,  660,    0,  661,  659,  659,
        0,  655,  662,  657,  663,    0,    0,  664,  659,  665,
        0,  660,  660,  661,  661,    0,  666,  661,  662,  662,
      663,  663,  662,  664,  664,  665,  665,    0,  667,    0,
        0,  660,  666,  666,    0,    0,  668,    0,  669,    0,
      670,    0,    0,  664,  667,  667,  671,  665,    0,  672,

        0,  666,  668,  668,  669,  669,  670,  670,  670,    0,
      673,    0,  671,  671,  667,  672,  672,  674,    0,  675,
        0,    0,  676,    0,  677,  669,  673,  673,  678,    0,
      672,  679,  673,  674,  674,  675,  675,  675,  676,  676,
      677,  677,    0,    0,  678,  678,  680,  679,  679,  681,
        0,    0,    0,  679,  682,    0,  677,  683,    0,  674,
        0,    0,  680,  680,  678,  681,  681,    0,  680,    0,
      682,  682,  682,  683,  683,  687,  687,  683,  687,  692,
        0,  687,    0,  687,    0,    0,  692,  694,    0,    0,
        0,    0,    0,  693,  694,  692,  692,  687,  689,  692,

      693,  689,    0,  694,  694,    0,  689,  689,  689,  693,
      693,  689,    0,  689,    0,    0,    0,  695,    0,  689,
      696,  689,  689,  689,  695,  694,    0,  696,  697,  693,
        0,  698,    0,  695,  695,  697,  696,  696,  698,    0,
        0,    0,  699,  695,  697,  697,    0,  698,  698,  699,
      689,  689,  691,  805,    0,  691,    0,  696,  699,  699,
      691,  691,  691,  698,  700,  691,    0,  701,    0,  805,
      805,  700,  699,  691,  701,  691,  691,  691,    0,  699,
      700,  700,  702,  701,  701,  703,    0,    0,    0,  702,
        0,    0,  703,  704,  700,    0,  705,  701,  702,  702,

      704,  703,  703,  705,  691,  691,    0,  702,    0,  704,
      704,  706,  705,  705,  705,  707,    0,  809,  706,  708,
        0,    0,  707,  709,  704,    0,  708,  706,  706,    0,
      709,  707,  707,  809,  809,  708,  708,  707,  809,  709,
      709,  708,  710,    0,  711,    0,  712,    0,  807,  710,
      713,  711,    0,  712,    0,  709,    0,  713,  710,  710,
      711,  711,  712,  712,  807,  807,  713,  713,  713,  714,
      807,  715,    0,  716,    0,  710,  714,    0,  715,  810,
      716,  711,    0,    0,  712,  714,  714,  715,  715,  716,
      716,    0,  717,    0,  720,  810,  810,  718,  714,  717,

      719,  720,    0,    0,  718,  810,    0,  719,  717,  717,
      720,  720,  715,  718,  718,  718,  719,  719,  721,    0,
      722,  719,    0,  723,    0,  721,  724,  722,    0,  811,
      723,    0,    0,  724,  721,  721,  722,  722,  721,  723,
      723,    0,  724,  724,  725,  811,  811,  726,  724,    0,
        0,  725,  722,  723,  726,  727,    0,    0,  730,    0,
      725,  725,  727,  726,  726,  730,  725,    0,    0,  728,
        0,  727,  727,  729,  730,  730,  728,  808,    0,    0,
      729,  731,    0,    0,  726,  728,  728,  730,  731,  729,
      729,  727,    0,  808,  808,  728,  808,  731,  731,  732,

        0,  733,    0,    0,  734,  732,  732,    0,  733,    0,
      729,  734,    0,  731,    0,  732,  732,  733,  733,    0,
      734,  734,    0,  738,  738,  733,  738,    0,    0,  738,
        0,  738,    0,    0,  812,  749,  749,    0,  749,    0,
        0,  749,    0,  749,    0,  738,  740,  813,    0,  740,
      812,  812,    0,    0,  740,  740,  740,  749,  754,  740,
        0,  740,    0,  813,  813,  754,  755,  740,    0,  740,
      740,  740,  820,  755,  754,  754,    0,  757,  754,  756,
        0,    0,  755,  755,  757,  758,  756,    0,  820,  820,
      760,    0,  758,  757,  757,  756,  756,  760,  740,  740,

      742,  758,  758,  742,  755,  756,  760,  760,  742,  742,
      742,  759,  760,  742,  757,  761,    0,  758,  759,  815,
        0,  742,  761,  742,  742,  742,  762,  759,  759,  759,
        0,  761,  761,  762,  763,  815,  815,  761,    0,  765,
        0,  763,  762,  762,  806,    0,  765,    0,  815,    0,
      763,  763,  742,  742,  751,  765,  765,  751,    0,  762,
      806,  806,  751,  751,  751,  764,  806,  751,    0,  751,
      821,  763,  764,    0,    0,  751,  806,  751,  751,  751,
      765,  764,  764,  764,  766,    0,  821,  821,  767,    0,
      821,  766,    0,    0,    0,  767,    0,  814,    0,    0,

      766,  766,  766,  768,  767,  767,  751,  751,  753,  767,
      768,  753,    0,  814,  814,    0,  753,  753,  753,  768,
      768,  753,    0,  768,  822,    0,    0,  769,  814,  753,
      770,  753,  753,  753,  769,    0,    0,  770,  771,    0,
      822,  822,  772,  769,  769,  771,  770,  770,    0,  772,
      830,    0,  770,    0,  771,  771,  773,  769,  772,  772,
      753,  753,    0,  773,  782,    0,  830,  830,  772,    0,
      816,  782,  773,  773,  817,  771,  777,  777,  784,  777,
      782,  782,  777,    0,  777,  784,  816,  816,    0,  785,
      817,  817,  817,  773,  784,  784,  785,    0,  777,  779,

      782,  816,  779,    0,    0,  785,  785,  779,  779,  779,
      786,    0,  779,    0,  779,    0,    0,  786,  787,  785,
      779,  789,  779,  779,  779,  787,  786,  786,  789,  788,
        0,    0,  790,    0,  787,  787,  788,  789,  789,  790,
      786,  824,    0,  787,    0,  788,  788,    0,  790,  790,
        0,  779,  779,  781,  790,    0,  781,  824,  824,  789,
      788,  781,  781,  781,  791,    0,  781,  824,  792,    0,
        0,  791,  793,    0,  781,  792,  781,  781,  781,  793,
      791,  791,  833,    0,  792,  792,  794,    0,  793,  793,
        0,    0,    0,  794,    0,    0,  818,  792,  833,  833,

      791,    0,  794,  794,  793,  781,  781,    0,  795,  795,
      794,  795,  818,  818,  795,    0,  795,  796,  796,  796,
      796,  799,  799,  796,  799,    0,    0,  799,    0,  799,
      795,  798,  819,  818,  798,    0,    0,    0,    0,  798,
      798,  798,    0,  799,  798,  825,  802,  802,  819,  819,
      802,    0,  798,    0,  798,  798,  798,  823,  802,  826,
      802,  825,  825,  819,  804,  804,  825,  804,    0,    0,
      804,    0,  804,  823,  823,  826,  826,    0,    0,  823,
      826,    0,    0,  798,  798,  801,  804,  828,  801,  802,
      802,    0,    0,  801,  801,  801,  827,    0,  801,  829,

        0,    0,    0,  828,  828,  831,  801,    0,  801,  801,
      801,  832,  827,  827,  834,  829,  829,  835,  827,  836,
        0,  831,  831,  837,  828,  829,  831,  832,  832,    0,
      834,  834,    0,  835,  835,  836,  836,  801,  801,  837,
      837,  838,    0,    0,    0,  837,  839,    0,  841,  832,
      834,  840,    0,  842,    0,  843,    0,  838,  838,  844,
      836,    0,  839,  839,  841,  841,    0,  840,  840,  842,
      842,  843,  843,    0,    0,  844,  844,  839,  845,    0,
      840,  838,  846,  841,  847,    0,    0,  848,    0,  842,
      842,    0,  849,    0,  845,  845,  851,    0,  846,  846,

      847,  847,  846,  848,  848,  850,    0,  845,  849,  849,
        0,    0,  851,  851,  849,  852,    0,  853,  848,  854,
        0,  850,  850,  855,    0,  851,    0,  850,  856,    0,
      858,  852,  852,  853,  853,  854,  854,  857,    0,  855,
      855,  859,  853,  860,  856,  856,  858,  858,  856,  861,
        0,    0,  852,  857,  857,  862,  854,  859,  859,  860,
      860,    0,    0,  857,  863,  861,  861,  859,  864,    0,
      865,  862,  862,  861,  866,    0,  867,    0,  860,  868,
      863,  863,    0,    0,  864,  864,  865,  865,  869,    0,
      866,  866,  867,  867,  870,  868,  868,    0,    0,  864,

      882,    0,    0,    0,  869,  869,  865,  882,    0,    0,
      870,  870,  871,  871,    0,  871,  882,  882,  871,  870,
      871,    0,    0,  869,  872,  872,  872,  872,  878,  878,
      872,    0,  878,    0,  871,  873,    0,    0,  873,    0,
      878,    0,  878,  873,  873,  873,  874,  874,  873,  874,
      873,    0,  874,    0,  874,    0,  873,    0,  873,  873,
      873,  880,  880,  886,  880,    0,    0,  880,  874,  880,
      886,  878,  878,    0,  881,    0,    0,    0,  883,  886,
      886,  881,    0,  880,    0,  883,    0,  873,  873,  877,
      881,  881,  877,    0,  883,  883,    0,  877,  877,  877,

      881,  884,  877,    0,  885,    0,    0,    0,  884,    0,
      877,  885,  877,  877,  877,  883,  888,  884,  884,  887,
      885,  885,    0,  888,    0,  884,  887,    0,  915,  915,
      915,  915,  888,  888,  915,  887,  887,  888,  889,  885,
        0,  877,  877,  879,  887,  889,  879,    0,    0,    0,
        0,  879,  879,  879,  889,  889,  879,    0,  879,    0,
        0,    0,  890,    0,  879,  891,  879,  879,  879,  890,
      892,    0,  891,  893,    0,  889,    0,  892,  890,  890,
      893,  891,  891,    0,    0,    0,  892,  892,    0,  893,
      893,  894,    0,  890,  895,  879,  879,  896,  894,    0,

      891,  895,  892,    0,  896,  893,    0,  894,  894,  897,
      895,  895,  898,  896,  896,  895,  897,  894,    0,  898,
      899,    0,    0,  900,    0,  897,  897,  899,  898,  898,
      900,  901,    0,    0,  896,  902,  899,  899,  901,  900,
      900,  900,  902,  903,  899,    0,  906,  901,  901,  904,
      903,  902,  902,  906,    0,    0,  904,  905,    0,  903,
      903,    0,  906,  906,  905,  904,  904,  902,  901,  907,
      904,  908,    0,  905,  905,  903,  907,  905,  908,    0,
        0,    0,    0,  909,    0,  907,  907,  908,  908,  908,
      909,  910,    0,    0,  911,    0,  912,    0,  910,  909,

      909,  911,    0,  912,    0,  909,    0,  910,  910,  910,
      911,  911,  912,  912,    0,  913,    0,  914,  914,  935,
      914,  912,  913,  914,    0,  914,  935,    0,    0,  911,
        0,  913,  913,  921,  921,  935,  935,  921,    0,  914,
      916,    0,    0,  916,    0,  921,    0,  921,  916,  916,
      916,  917,  917,  916,  917,  916,  935,  917,    0,  917,
        0,  916,    0,  916,  916,  916,  923,  923,    0,  923,
        0,    0,  923,  917,  923,    0,  921,  921,  924,  924,
        0,  924,  936,    0,  924,    0,  924,    0,  923,  936,
        0,    0,  916,  916,  920,    0,  975,  920,  936,  936,

      924,    0,  920,  920,  920,    0,  936,  920,  925,  925,
      925,  925,  975,  975,  925,  920,    0,  920,  920,  920,
      927,  927,    0,  927,    0,    0,  927,    0,  927,    0,
        0,  931,  931,  933,  933,  931,  933,  939,    0,  933,
        0,  933,  927,  931,  939,  931,  920,  920,  922,  976,
        0,  922,    0,  939,  939,  933,  922,  922,  922,    0,
      934,  922,    0,  922,    0,  976,  976,  934,  939,  922,
        0,  922,  922,  922,  931,  931,  934,  934,  937,    0,
        0,  938,    0,    0,  976,  937,  934,  979,  938,    0,
      978,    0,  941,    0,  937,  937,    0,  938,  938,  941,

      922,  922,  926,  979,  979,  926,  978,  978,  941,  941,
      926,  926,  926,  937,  940,  926,  980,  926,  938,  979,
      981,  940,  942,  926,  941,  926,  926,  926,  978,  942,
      940,  940,  980,  980,    0,  943,  981,  981,  942,  942,
        0,  981,  943,    0,  984,    0,  944,  980,  942,  940,
        0,  943,  943,  944,  926,  926,  928,    0,    0,  928,
      984,  984,  944,  944,  928,  928,  928,  945,    0,  928,
      944,  928,  943,  984,  945,  946,    0,  928,  977,  928,
      928,  928,  946,  945,  945,  945,  948,    0,    0,  947,
        0,  946,  946,  948,  977,  977,  947,    0,  952,  952,

      952,  952,  948,  948,  952,  947,  947,  948,  928,  928,
      930,  985,  946,  930,  977,    0,    0,    0,  930,  930,
      930,  947,  949,  930,    0,  950,    0,  985,  985,  949,
        0,  930,  950,  930,  930,  930,    0,  985,  949,  949,
      949,  950,  950,  951,  951,    0,  951,  950,    0,  951,
        0,  951,  991,  954,  954,    0,  954,    0,    0,  954,
        0,  954,  930,  930,  932,  951,  988,  932,  991,  991,
        0,    0,  932,  932,  932,  954,    0,  932,    0,  932,
      958,  958,  988,  988,  958,  932,  988,  932,  932,  932,
      960,  960,  958,  960,  958,    0,  960,  961,  960,    0,

      968,  968,    0,  968,  961,    0,  968,    0,  968,    0,
        0,    0,  960,  961,  961,    0,  932,  932,  953,  961,
        0,  953,  968,  958,  958,    0,  953,  953,  953,  962,
        0,  953,    0,  953,    0,  986,  962,    0,    0,  953,
      963,  953,  953,  953,    0,  962,  962,  963,  964,    0,
        0,  986,  986,    0,  962,  964,  963,  963,    0,    0,
      966,  963,    0,    0,  964,  964,    0,  966,    0,  964,
      953,  953,  955,  986,    0,  955,  966,  966,  966,    0,
      955,  955,  955,  965,    0,  955,    0,  955,    0,    0,
      965,    0,    0,  955,  989,  955,  955,  955,  967,  965,

      965,    0,  993,  965,    0,  967,  969,  969,  969,  969,
      989,  989,  969,    0,  967,  967,  970,  970,  993,  993,
      970,  997,    0,    0,  955,  955,  957,    0,  970,  957,
      970,  989,    0,  967,  957,  957,  957,  997,  997,  957,
      972,  972,    0,  972,    0,    0,  972,  957,  972,  957,
      957,  957,  982,    0,    0,  973,  973,    0,  973,  970,
      970,  973,  972,  973,  974,  974,  974,  974,  982,  982,
      974,    0,    0,    0,  982,  983,    0,  973,  957,  957,
      959,    0,    0,  959,    0,    0,    0,    0,  959,  959,
      959,  983,  983,  959,  987,  959,  990,  983,  992,    0,

        0,  959,    0,  959,  959,  959,  995,    0,  994,    0,
      987,  987,  990,  990,  992,  992,  987,    0,  990,  996,
        0,    0,  995,  995,  994,  994,    0,    0,  995,  992,
        0,    0,  959,  959,  971,  996,  996,  971,    0,    0,
        0,    0,  971,  971,  971,  994,  998,  971,  999,    0,
      996, 1000,    0, 1001,    0,  971, 1002,  971,  971,  971,
     1003,    0,  998,  998,  999,  999,    0, 1000, 1000, 1001,
     1001,    0, 1002, 1002, 1004, 1001, 1003, 1003, 1005,    0,
     1006,    0, 1002, 1007,  999,    0,  971,  971, 1008,    0,
     1004, 1004, 1009,    0, 1005, 1005, 1006, 1006, 1010, 1007,

     1007, 1011, 1006, 1005, 1008, 1008, 1008, 1012, 1009, 1009,
     1013,    0,    0,    0, 1010, 1010, 1014, 1011, 1011, 1015,
     1007, 1016,    0, 1012, 1012,    0, 1013, 1013, 1017, 1012,
     1018,    0, 1014, 1014, 1019, 1015, 1015, 1016, 1016, 1020,
        0, 1015,    0, 1022, 1017, 1017, 1018, 1018,    0,    0,
     1019, 1019, 1021,    0, 1023, 1020, 1020,    0, 1016, 1022,
     1022, 1025, 1025, 1025, 1025, 1017,    0, 1025, 1021, 1021,
     1023, 1023, 1018,    0, 1021,    0, 1020,    0, 1022, 1024,
     1024,    0, 1024,    0,    0, 1024,    0, 1024, 1026, 1026,
     1028, 1028, 1026, 1028,    0,    0, 1028,    0, 1028,    0,

     1026, 1024, 1026, 1029, 1029,    0, 1029, 1099,    0, 1029,
     1031, 1029, 1028, 1030, 1030, 1030, 1030, 1031,    0, 1030,
        0,    0, 1032, 1099, 1099, 1029, 1031, 1031, 1031, 1032,
     1033, 1026, 1026,    0, 1034,    0, 1035, 1033, 1032, 1032,
     1032, 1034, 1036, 1035,    0,    0, 1033, 1033, 1037, 1036,
     1034, 1034, 1035, 1035, 1038, 1037,    0,    0, 1036, 1036,
     1039, 1038, 1035,    0, 1037, 1037, 1040, 1039, 1033,    0,
     1038, 1038, 1034, 1040, 1041,    0, 1039, 1039, 1042,    0,
     1043, 1041, 1040, 1040,    0, 1042,    0, 1043, 1039,    0,
     1041, 1041, 1044,    0, 1042, 1042, 1043, 1043,    0, 1044,

     1045,    0, 1043, 1040, 1042, 1046,    0, 1045, 1044, 1044,
        0, 1041, 1046, 1047, 1044, 1100, 1045, 1045, 1048,    0,
     1047, 1046, 1046,    0,    0, 1048, 1049,    0,    0, 1047,
     1047, 1100, 1100, 1049, 1048, 1048,    0, 1045, 1050,    0,
     1051, 1047, 1049, 1049, 1052, 1050,    0, 1051, 1049,    0,
     1101, 1052, 1100, 1048, 1050, 1050, 1051, 1051,    0,    0,
     1052, 1052,    0, 1053,    0, 1054, 1101, 1101, 1052, 1051,
     1053, 1055, 1054,    0,    0, 1050,    0,    0, 1055, 1053,
     1053, 1054, 1054, 1056, 1056,    0, 1056, 1055, 1055, 1056,
     1101, 1056, 1057, 1057, 1057, 1057, 1058, 1058, 1057, 1053,

     1058,    0, 1054, 1055,    0, 1056, 1060, 1060, 1058, 1060,
     1058,    0, 1060,    0, 1060, 1061, 1061, 1102, 1061,    0,
        0, 1061,    0, 1061, 1062, 1062, 1062, 1062, 1060,    0,
     1062,    0,    0, 1102, 1102, 1063, 1063, 1061, 1063, 1058,
     1058, 1063,    0, 1063, 1064, 1064, 1064, 1064, 1065, 1065,
     1064, 1072, 1065, 1067, 1067,    0, 1067, 1063, 1072, 1067,
     1065, 1067, 1065, 1068, 1068,    0, 1068, 1072, 1072, 1068,
        0, 1068,    0,    0,    0, 1067, 1069, 1069, 1069, 1069,
     1070,    0, 1069, 1071,    0, 1068, 1073, 1070, 1074, 1072,
     1071, 1065, 1065, 1073,    0, 1074, 1070, 1070, 1070, 1071,

     1071, 1071, 1073, 1073, 1074, 1074, 1075,    0,    0,    0,
     1076,    0, 1077, 1075, 1078,    0,    0, 1076,    0, 1077,
        0, 1078, 1075, 1075, 1073, 1074, 1076, 1076, 1077, 1077,
     1078, 1078, 1076, 1079, 1077,    0,    0, 1080,    0, 1082,
     1079, 1081,    0, 1075, 1080,    0, 1082,    0, 1081, 1079,
     1079, 1078,    0, 1080, 1080, 1082, 1082, 1081, 1081, 1080,
        0, 1083, 1083, 1082, 1083, 1104,    0, 1083, 1079, 1083,
     1081, 1084, 1084, 1084, 1084, 1085, 1085, 1084,    0, 1085,
        0, 1104, 1104, 1083,    0, 1087, 1087, 1085, 1087, 1085,
        0, 1087,    0, 1087, 1088, 1088, 1104, 1088,    0,    0,

     1088,    0, 1088, 1089, 1089, 1089, 1089, 1087, 1090, 1089,
     1091,    0,    0, 1092,    0, 1090, 1088, 1091, 1085, 1085,
     1092, 1093,    0,    0, 1090, 1090, 1091, 1091, 1093, 1092,
     1092, 1098,    0, 1094,    0, 1095, 1091, 1093, 1093, 1092,
     1094,    0, 1095,    0, 1090,    0,    0, 1098, 1098, 1094,
     1094, 1095, 1095, 1096, 1096,    0, 1096, 1098, 1093, 1096,
     1103, 1096, 1097, 1097, 1097, 1097, 1105,    0, 1097, 1094,
     1106,    0, 1095, 1098, 1107, 1096, 1103, 1103,    0,    0,
        0, 1108, 1105, 1105, 1109,    0, 1106, 1106, 1110,    0,
     1107, 1107, 1111,    0,    0, 1103, 1107, 1108, 1108, 1114,

     1109, 1109, 1106, 1112, 1110, 1110, 1113,    0, 1111, 1111,
     1110,    0,    0, 1115,    0, 1114, 1114,    0,    0, 1112,
     1112, 1109, 1113, 1113, 1116, 1112, 1117,    0, 1113, 1115,
     1115, 1118,    0, 1119, 1115, 1120,    0, 1121,    0,    0,
     1116, 1116, 1117, 1117, 1122,    0, 1123, 1118, 1118, 1119,
     1119, 1120, 1120, 1121, 1121, 1119,    0,    0,    0, 1124,
     1122, 1122, 1123, 1123, 1125,    0, 1126,    0, 1127,    0,
        0, 1128,    0, 1122, 1118, 1124, 1124, 1129,    0, 1130,
     1125, 1125, 1126, 1126, 1127, 1127, 1125, 1128, 1128,    0,
        0,    0, 1133, 1129, 1129, 1130, 1130, 1131, 1131, 1133,

     1131,    0,    0, 1131, 1126, 1131,    0, 1128, 1133, 1133,
     1134, 1130, 1132, 1132, 1132, 1132, 1135, 1134, 1132, 1131,
        0, 1136,    0, 1135,    0,    0, 1134, 1134, 1136, 1133,
        0,    0, 1135, 1135,    0,    0, 1137, 1136, 1136, 1138,
        0, 1136, 1139, 1137,    0,    0, 1138, 1134,    0, 1139,
        0, 1135, 1137, 1137, 1140, 1138, 1138,    0, 1139, 1139,
     1179, 1140, 1141,    0, 1139, 1142,    0, 1137, 1143, 1141,
     1140, 1140, 1142, 1144,    0, 1143, 1179, 1179, 1141, 1141,
     1144, 1142, 1142,    0, 1143, 1143, 1142, 1145,    0, 1144,
     1144, 1144, 1146, 1141, 1145, 1147, 1140,    0, 1148, 1146,

     1149,    0, 1147, 1145, 1145, 1148, 1150, 1149, 1146, 1146,
        0, 1147, 1147, 1150, 1148, 1148, 1149, 1149,    0,    0,
     1151,    0, 1150, 1150, 1148, 1146, 1147, 1151, 1152,    0,
     1180,    0,    0, 1153,    0, 1152, 1151, 1151,    0,    0,
     1153,    0,    0,    0, 1152, 1152, 1180, 1180, 1150, 1153,
     1153, 1154, 1154,    0, 1154,    0, 1151, 1154,    0, 1154,
     1155, 1155, 1155, 1155, 1152, 1153, 1155, 1180, 1156, 1156,
        0, 1156,    0, 1154, 1156, 1158, 1156, 1157, 1157, 1157,
     1157, 1159, 1158, 1157,    0,    0, 1160,    0, 1159, 1161,
     1156, 1158, 1158, 1160, 1162,    0, 1161, 1159, 1159,    0,

        0, 1162, 1160, 1160,    0, 1161, 1161, 1163,    0, 1161,
     1162, 1162, 1158, 1164, 1163, 1165, 1162,    0, 1159, 1166,
     1164, 1160, 1165, 1163, 1163,    0, 1166,    0,    0, 1164,
     1164, 1165, 1165, 1165, 1164, 1166, 1166, 1167,    0, 1168,
        0,    0, 1169, 1169, 1167, 1169, 1168,    0, 1169, 1163,
     1169,    0, 1166, 1167, 1167, 1168, 1168, 1170, 1170, 1170,
     1170,    0, 1171, 1170, 1169,    0, 1172,    0, 1167, 1171,
     1173,    0,    0, 1172,    0,    0,    0, 1173, 1171, 1171,
        0, 1168, 1172, 1172, 1174,    0, 1173, 1173, 1175,    0,
     1176, 1174, 1177, 1171, 1178, 1175, 1173, 1172,    0, 1181,

     1174, 1174, 1182,    0, 1175, 1175, 1176, 1176, 1177, 1177,
     1178, 1178, 1176,    0, 1177, 1181, 1181, 1183, 1182, 1182,
     1174, 1184,    0, 1185, 1175, 1178, 1186,    0,    0, 1187,
     1181,    0, 1188, 1183, 1183, 1189,    0, 1184, 1184, 1185,
     1185, 1190, 1186, 1186, 1185, 1187, 1187, 1187, 1188, 1188,
     1191, 1189, 1189, 1192, 1188,    0, 1193, 1190, 1190, 1194,
        0, 1195,    0,    0,    0,    0, 1191, 1191, 1195, 1192,
     1192, 1189, 1193, 1193,    0, 1194, 1194, 1195, 1195, 1196,
        0, 1198,    0,    0, 1197,    0, 1196, 1195, 1198,    0,
     1192, 1197,    0,    0,    0, 1196, 1196, 1198, 1198, 1194,

     1197, 1197, 1197, 1199,    0, 1196, 1200,    0,    0, 1202,
     1199,    0,    0, 1200, 1201,    0, 1202,    0, 1198, 1199,
     1199, 1201, 1200, 1200, 1201, 1202, 1202, 1199, 1203,    0,
     1201, 1201, 1204, 1202, 1205, 1203, 1206, 1200,    0, 1204,
        0, 1205,    0, 1206, 1203, 1203,    0, 1207, 1204, 1204,
     1205, 1205, 1206, 1206, 1207, 1208, 1206,    0, 1209, 1205,
     1210,    0, 1208, 1207, 1207, 1209, 1211, 1210,    0,    0,
        0, 1208, 1208, 1211, 1209, 1209, 1210, 1210, 1207, 1212,
     1209, 1213, 1211, 1211, 1214,    0, 1212,    0, 1213,    0,
        0, 1214, 1215,    0, 1211, 1212, 1212, 1213, 1213, 1215,

     1214, 1214, 1214, 1216,    0, 1212, 1217, 1213, 1215, 1215,
     1216, 1218,    0, 1217,    0,    0, 1217,    0, 1218, 1216,
     1216,    0, 1217, 1217, 1219,    0, 1220, 1218, 1218, 1215,
     1221, 1219, 1222, 1220, 1216,    0, 1218, 1221,    0, 1222,
     1219, 1219, 1220, 1220, 1219, 1223, 1221, 1221, 1222, 1222,
     1220,    0, 1223, 1224, 1221, 1225,    0, 1226,    0, 1227,
        0, 1223, 1223, 1222, 1228,    0, 1229, 1223, 1230, 1224,
     1224, 1225, 1225, 1226, 1226, 1227, 1227, 1231,    0,    0,
     1228, 1228, 1229, 1229, 1230, 1230, 1232,    0, 1233, 1224,
     1234,    0,    0, 1231, 1231, 1227,    0,    0,    0, 1230,

        0,    0, 1232, 1232, 1233, 1233, 1234, 1234, 1232, 1235,
        0, 1236,    0, 1238, 1233, 1237, 1235, 1239, 1236, 1270,
     1238, 1255, 1237,    0, 1239, 1235, 1235, 1236, 1236, 1238,
     1238, 1237, 1237, 1239, 1239, 1270, 1270, 1255, 1255, 1240,
        0,    0, 1241,    0, 1242, 1238, 1240,    0, 1235, 1241,
     1236, 1242, 1237,    0, 1239, 1240, 1240, 1255, 1241, 1241,
     1242, 1242, 1243,    0, 1241, 1240, 1244,    0, 1242, 1243,
     1245,    0,    0, 1244, 1246,    0,    0, 1245, 1243, 1243,
     1271, 1246, 1244, 1244,    0, 1247, 1245, 1245, 1248,    0,
     1246, 1246, 1247,    0,    0, 1248, 1271, 1271, 1243, 1249,

        0, 1247, 1247,    0, 1248, 1248, 1249, 1250,    0, 1245,
     1251, 1271, 1253, 1246, 1250, 1249, 1249, 1251, 1252, 1253,
     1248, 1254, 1247, 1250, 1250, 1252, 1251, 1251, 1253, 1253,
     1256,    0, 1251, 1250, 1252, 1252, 1249, 1254, 1254,    0,
        0,    0, 1252, 1257,    0,    0, 1256, 1256, 1253,    0,
     1257,    0, 1277,    0, 1258,    0, 1259,    0, 1254, 1257,
     1257, 1258, 1256, 1259,    0, 1257,    0, 1260, 1277, 1277,
     1258, 1258, 1259, 1259, 1260,    0, 1258,    0, 1261,    0,
     1262,    0, 1259, 1260, 1260, 1261,    0, 1262,    0,    0,
        0, 1263,    0,    0, 1261, 1261, 1262, 1262, 1263, 1264,

     1262,    0, 1260, 1265,    0, 1266, 1264, 1263, 1263,    0,
     1265,    0, 1266,    0,    0, 1264, 1264, 1267,    0, 1265,
     1265, 1266, 1266, 1268, 1267, 1265,    0, 1266, 1269,    0,
     1268,    0,    0, 1267, 1267, 1269,    0,    0,    0, 1268,
     1268,    0,    0, 1267, 1269, 1269, 1272,    0, 1269, 1273,
        0,    0, 1274, 1272, 1275,    0, 1273, 1276, 1268, 1274,
     1278, 1275, 1272, 1272, 1276, 1273, 1273, 1278, 1274, 1274,
     1275, 1275,    0, 1276, 1276,    0, 1278, 1278, 1279,    0,
     1280,    0,    0,    0, 1274, 1279,    0, 1280,    0, 1276,
        0, 1278,    0,    0, 1279, 1279, 1280, 1280,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1279,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1287, 1287,    0,    0, 1287,
     1287, 1287, 1288,    0, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1289, 1289,    0,    0, 1289, 1289, 1289, 1290,
        0, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1291,

     1291,    0,    0, 1291, 1291, 1291, 1292,    0, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1293, 1293,    0,    0,
     1293, 1293, 1293, 1294,    0, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1295, 1295,    0,    0, 1295, 1295, 1295,
     1296,    0, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1297,    0,    0,    0, 1297,    0, 1297, 1297,    0, 1297,
     1297, 1298,    0,    0, 1298, 1298,    0, 1298, 1298, 1298,
     1298, 1298, 1299, 1299,    0, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1300,    0, 1300, 1300,    0,    0, 1300,
        0, 1300, 1301, 1301, 1301, 1301, 1301,    0, 1301, 1302,

     1302, 1302, 1302, 1302,    0, 1302, 1303, 1303, 1303, 1303,
     1303,    0, 1303, 1304, 1304, 1304, 1304, 1304,    0, 1304,
     1305, 1305, 1305, 1305, 1305,    0, 1305, 1306,    0, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1307,    0,    0,
        0, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1308,    0,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1309,    0,
        0,    0, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1310,
        0, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1311,
        0,    0,    0, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1312,    0,    0,    0, 1312, 1312, 1312, 1312, 1312, 1312,

     1312, 1313,    0, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1314,    0,    0,    0, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1315,    0, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1316,    0,    0,    0, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1317, 1317,    0, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1318,    0,    0,    0, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1319,    0,    0,    0, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1320, 1320,    0, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1321,    0,    0,
        0, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1322,    0,

        0,    0, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1323,
     1323,    0, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1324,    0,    0,    0, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1325,    0,    0,    0, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1326,    0,    0,    0, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1327, 1327,    0, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1328,    0,    0,    0, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1329,    0,    0,    0, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1330, 1330,    0, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1331,    0,    0,

        0, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1332,    0,
        0,    0, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1333,
     1333,    0, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1334,    0,    0,    0, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1335, 1335,    0, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1336, 1336,    0, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1337,    0,    0,    0, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1338,    0,    0,    0, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1339, 1339,    0, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1340, 1340,    0,    0,

     1340, 1340, 1340, 1341, 1341,    0, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1342,    0,    0,    0, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1343,    0,    0,    0, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1344, 1344,    0, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1345, 1345,    0,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1346,    0,
        0,    0, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1347,
     1347,    0, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1348,    0,    0,    0, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1349,    0,    0,    0, 1349, 1349, 1349, 1349, 1349,

     1349, 1349, 1350, 1350,    0, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1351, 1351,    0,    0, 1351, 1351, 1351,
     1352, 1352,    0, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1353,    0,    0,    0, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1354, 1354,    0, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1355,    0,    0,    0, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1356,    0,    0,    0, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1357, 1357,    0, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358,    0,    0,
     1358, 1358, 1358, 1359, 1359,    0, 1359, 1359, 1359, 1359,

     1359, 1359, 1359, 1359, 1360,    0,    0,    0, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1361,    0,    0,    0, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1362, 1362,    0, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1363, 1363,    0,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1364, 1364,
        0,    0, 1364, 1364, 1364, 1365, 1365,    0, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1366, 1366,    0, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1367, 1367,    0,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1368, 1368,
        0, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1281,

     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2010 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

void getInput(char* buf, yy_size_t& result, yy_size_t max_size);
//
//	result might be an int or a yy_size_t depending on flex version, so we use a temporary.
//
#define YY_INPUT(buf, result, max_size) \
  { yy_size_t safeResult; getInput(buf, safeResult, max_size); result = safeResult; }

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;










#line 2889 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 119 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3101 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1282 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8500 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_CHECK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_GET;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_VARIANTS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_VARIANT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_OPS2;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return KW_IRREDUNDANT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 270 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 274 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 279 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 114:
YY_RULE_SETUP
#line 291 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 292 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 293 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 294 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 295 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 296 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 299 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 300 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 301 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 302 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 303 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 304 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 333 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 334 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 335 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 336 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 337 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 340 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 341 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 342 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 166:
YY_RULE_SETUP
#line 349 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 355 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 361 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 367 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 373 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 379 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 385 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 391 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 397 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 406 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 410 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 421 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 422 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 433 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 444 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 181:
YY_RULE_SETUP
#line 453 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 461 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 183:
YY_RULE_SETUP
#line 469 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 473 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 477 "../../../src/Mixfix/lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 186:
YY_RULE_SETUP
#line 489 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 495 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 496 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 497 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 498 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 499 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 500 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 509 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 194:
YY_RULE_SETUP
#line 518 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 524 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 525 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 197:
YY_RULE_SETUP
#line 534 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 539 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 199:
YY_RULE_SETUP
#line 548 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 549 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 554 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 568 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 572 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 576 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 580 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 583 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 589 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 590 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 591 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 596 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK
#line 4507 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1282 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1282 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1281);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 596 "../../../src/Mixfix/lexer.ll"



#include "lexerAux.cc"

