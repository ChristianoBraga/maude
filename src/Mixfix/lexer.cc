/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 158
#define YY_END_OF_BUFFER 159
static yyconst short int yy_accept[818] =
    {   0,
      155,  155,  155,  155,  155,  155,  144,  144,  146,  146,
        0,    0,  159,  157,  155,  156,  156,   91,  157,   89,
       91,   91,   91,   89,   90,   90,   91,  157,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   15,   91,   91,   91,   91,   91,   91,   91,
      143,  157,  142,  142,  142,  143,  142,  143,  157,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,   95,  157,
       93,   95,   93,   95,   95,   94,   93,   95,  157,   95,
       95,  145,  144,  158,  146,  147,  154,  148,  153,  153,

      149,  150,  148,  151,  152,  155,   91,    0,   91,    0,
        0,    0,   91,   91,   90,    0,   91,   91,   91,   91,
       11,   91,   91,   91,   91,   91,   40,   91,   91,   69,
       91,   91,   91,   91,   91,   91,   58,   91,    5,   91,
       91,   14,   91,   68,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   35,   66,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   70,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,  143,
        0,  143,    0,    0,    0,  143,  143,  139,  140,    0,
      143,  143,  143,  143,  143,  133,  143,  143,  143,  143,

      132,  121,  143,  143,  143,  143,  120,  143,  119,  143,
      143,  143,  143,  130,  143,  143,  143,  126,  121,  143,
      134,  143,  143,  143,  143,  143,   96,  121,  143,  141,
       95,    0,   95,    0,    0,    0,   95,   95,    0,   92,
       94,    0,    5,  145,  144,  146,  148,  148,   91,    0,
        2,    2,   91,   91,   91,   63,   91,   91,   62,   91,
       91,   91,   91,   91,   91,   91,   91,   16,   69,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   68,   91,   91,    7,   27,   91,   91,    6,   36,
       91,   66,   91,   91,   91,   91,   91,   91,   91,   10,

       91,   88,   19,   91,   91,   21,   70,   91,   91,   33,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   67,
       91,   91,   91,   91,   91,   91,  143,    0,    2,    2,
      143,  143,  131,  143,  143,  135,  143,  143,  143,  143,
      143,  143,  143,  143,  100,  143,  121,  143,  136,  143,
      143,  143,  143,  143,  114,  113,  143,  127,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  129,   95,    0,
        2,    2,    0,    0,    0,    0,    2,    2,    2,    1,
        2,    2,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   48,   26,   91,   20,   91,   91,   82,   22,   91,

       54,   91,   23,   91,   91,   91,    9,   25,   91,    3,
       91,   91,   91,   18,   91,    8,   24,   91,   91,   85,
       13,   91,   91,   91,   15,   91,   91,   91,   91,   91,
       91,   91,   34,   65,   91,   80,   91,   91,   59,   91,
       91,   91,   67,   91,   91,   91,   55,   91,   91,    0,
        0,    2,    2,    1,    2,    2,  143,  143,   99,  143,
      143,  109,  143,  143,  137,  136,  143,  143,  143,  143,
      143,  101,  143,  143,  102,  143,  143,  103,    3,  143,
      128,  143,  143,  105,  143,  143,  122,  143,  143,  143,
      143,  143,  143,  129,    0,    0,    2,    2,    1,    2,

        2,    0,    0,    2,    2,    1,    1,    1,    1,    1,
        2,    2,    2,   79,   91,   57,   83,   41,   51,   91,
       91,   91,   91,   91,   91,   91,   74,   91,   77,   91,
       91,   91,   91,   91,   91,   52,   91,   72,   28,   91,
       91,   91,   91,   91,   91,   56,   17,   50,   91,   12,
       91,   91,   91,   91,   91,   91,   91,   65,   60,   49,
       91,   91,   37,   31,   91,   81,   43,   91,   91,    2,
        2,    1,    1,    1,    1,    2,    2,    2,   98,  124,
      143,  143,  143,  115,  138,  143,  143,  143,  143,  143,
      143,  143,  143,  143,   97,  110,  143,  143,  143,  143,

      143,  104,  122,  143,  107,  143,  143,  143,  121,    2,
        2,    1,    1,    1,    1,    2,    2,    2,    1,    1,
        1,    1,    1,    2,    2,   38,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,    4,   91,   91,   53,   64,   27,   91,   87,   91,
       56,   91,   91,   91,   19,   78,   47,   91,   30,   44,
       91,   91,   61,   91,   29,   32,    1,    1,    1,    1,
        1,    2,    2,  143,  143,  112,  143,  143,    4,  108,
      106,  143,  143,  143,  143,  143,  143,  113,  143,  143,
      143,  143,  143,  143,  143,  143,    1,    1,    1,    1,

        1,    2,    2,    1,    1,   91,   57,   91,   73,   91,
       46,   91,   42,   91,   20,   91,   91,   76,   91,   91,
       75,   91,   91,   91,   86,   91,   21,   91,   71,   39,
        1,    1,  143,  143,  143,  143,  143,  116,  143,  143,
      143,  143,  114,  117,  143,  143,  111,  143,  143,  123,
      143,    1,    1,   91,   91,   73,   91,   91,   26,   45,
       22,   91,   23,   91,   24,   91,   88,   91,  143,  143,
      143,  143,  143,  143,  143,  143,  102,  143,  143,  107,
      125,  123,  143,   91,   84,   91,   48,   54,   18,   91,
       91,  143,  143,  143,  143,  143,  143,  143,  143,  118,

       91,   91,  143,  143,  143,  143,  101,  105,  125,   91,
       98,   99,  143,   49,  143,  112,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   22,    8,   24,   25,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   13,   53,   54,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    6,    9,    9,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    5,    6
    } ;

static yyconst short int yy_base[863] =
    {   0,
        0,    0,   55,    0,  110,  163,  134,  140,  145,  149,
      216,  271,  313, 4456,  151, 4456, 4456,  167,  171, 4456,
      174, 4456,  180,  184,  187,  219,  205,  196,  226,  222,
      261,  282,  278,  305,  236,  286,  232,  291,  325,  332,
      370,  337,  308,  344,  382,  362,  351,  393,  401,  405,
      264,  215, 4456,  284,  364,  423,  412,  375,  431,  415,
      476,  437,  440,  448,  443,  478,  451,  468,  501,  511,
      472,  523,  518,  525,  537,  515, 4456,  545,  547,  231,
     4456,  564, 4456,  559,  588,  590,  576,  578,  595,  595,
     4456,    0,  116, 4456,    0, 4456, 4456,    0, 4456, 4456,

     4456, 4456,  149, 4456, 4456,  448,  601,  269,  607,  613,
      274,  281,  621,  627,  632,  648,  629,  651,  654,  659,
      619,  662,  681,  684,  672,  690,  694,  702,  704,  707,
      724,  728,  733,  736,  738,  741,  755,  758,  761,  763,
      766,  769,  786,  788,  790,  792,  794,  796,  800,  813,
      820,  825,  833,  837,  839,  844,  851,  856,  861,  863,
      875,  868,  881,  889,  899,  903,  906,  910,  930,  938,
      933,  942,  950,  955,  961,  963,  972,  981,  985,  990,
      296, 1002, 1009,  447,  264, 1004, 1021, 1013, 1016, 1033,
     1024, 1033, 1026, 1045, 1054, 1056, 1058, 1064, 1075, 1078,

     1081, 1085, 1088, 1092, 1099, 1110, 1102, 1113, 1124, 1127,
     1130, 1134, 1138, 1141, 1147, 1151, 1164, 1169, 1171, 1173,
     1178, 1183, 1191, 1195, 1200, 1205, 1208, 1219, 1222, 1225,
     1227,  457, 1230, 1247,  481,  256, 1250, 1255, 1279, 4456,
     1278, 1279, 1283,    0,  131,    0,    0, 4456, 1288,  521,
     1332, 1385, 1295, 1300, 1297, 1302, 1326, 1335, 1305, 1338,
     1349, 1373, 1340, 1346, 1367, 1391, 1379, 1399, 1402, 1405,
     1408, 1410, 1419, 1416, 1422, 1427, 1440, 1433, 1447, 1450,
     1454, 1460, 1464, 1471, 1474, 1481, 1483, 1485, 1491, 1494,
     1502, 1504, 1508, 1513, 1516, 1521, 1527, 1530, 1535, 1538,

     1549, 1555, 1558, 1560, 1562, 1566, 1572, 1586, 1589, 1591,
     1593, 1598, 1603, 1596, 1615, 1622, 1627, 1625, 1645, 1647,
     1653, 1649, 1657, 1674, 1676, 1678, 1680,  528, 1721, 1774,
     1684, 1704, 1686, 1709, 1727, 1714, 1744, 1731, 1741, 1777,
     1768, 1780, 1785, 1788, 1735, 1791, 1799, 1808, 1810, 1813,
     1816, 1830, 1833, 1835, 1838, 1840, 1843, 1847, 1860, 1865,
     1868, 1871, 1874, 1882, 1894, 1888, 1896, 1900, 1905,  544,
     1944, 1997,  240,  227,  573,  231,    0,  212, 1927, 2050,
      106, 2103, 1918, 1908, 1932, 1937, 1950, 1961, 1955, 1975,
     1958, 1978, 2001, 2008, 2019, 2005, 2015, 2032, 2038, 2046,

     2060, 2064, 2058, 2085, 2091, 2097, 2071, 2099, 2110, 2120,
     2123, 2127, 2129, 2137, 2141, 2149, 2151, 2158, 2161, 2163,
     2168, 2171, 2175, 2181, 2189, 2193, 2195, 2202, 2206, 2212,
     2219, 2225, 2230, 2232, 2236, 2239, 2242, 2249, 2253, 2259,
     2261, 2270, 2272, 2279, 2281, 2283, 2290, 2293, 2300,  671,
      229,  202, 2325, 2348,  237, 2401, 2313, 2303, 2321, 2326,
     2330, 2344, 2352, 2355, 2357, 2365, 2374, 2362, 2397, 2405,
     2407, 2395, 2415, 2409, 2419, 2432, 2437, 2439, 2441, 2449,
     2443, 2463, 2468, 2470, 2472, 2474, 2480, 2492, 2497, 2503,
     2505, 2522, 2509, 2511,  715,  210,  182, 2547, 2570,  315,

     2623,  188,  175, 2554,  988,    0, 2676, 2581,  159, 2729,
     2554,  150, 2582, 2514, 2578, 2548, 2587, 2535, 2589, 2601,
     2606, 2611, 2629, 2633, 2635, 2640, 2637, 2642, 2647, 2664,
     2672, 2683, 2686, 2690, 2693, 2695, 2712, 2700, 2722, 2725,
     2733, 2735, 2743, 2746, 2752, 2760, 2763, 2766, 2769, 2783,
     2786, 2788, 2790, 2792, 2810, 2812, 2814, 2817, 2819, 2822,
     2824, 2841, 2844, 2851, 2853, 2855, 2861, 2863, 2865, 2891,
     1365, 2915, 2898,  136, 2968, 2898,  135, 2926, 2919, 2922,
     2936, 2932, 2946, 2949, 2971, 2974, 2977, 2985, 2982, 2988,
     2991, 3002, 3005, 3008, 3014, 3026, 3031, 3033, 3035, 3037,

     3040, 3045, 3058, 3062, 3065, 3067, 3072, 3075, 3085, 3097,
     1713, 3120, 3110,  124, 3173, 3126,  109, 3134, 3145, 1760,
     3148,    0, 3146, 3184, 1988, 3098, 3151, 3142, 3156, 3103,
     3180, 3190, 3193, 3197, 3199, 3203, 3210, 3223, 3228, 3230,
     3232, 3234, 3237, 3254, 3241, 3261, 3263, 3265, 3267, 3271,
     3284, 3288, 3293, 3301, 3295, 3305, 3313, 3315, 3319, 3322,
     3324, 3326, 3332, 3343, 3346, 3350, 3357, 2506, 3367,    0,
     3378, 3387, 3396, 3381, 3389, 3384, 3393, 3402, 3407, 3413,
     3416, 3419, 3424, 3426, 3433, 3436, 3438, 3450, 3455, 3463,
     3461, 3472, 3475, 3480, 3486, 3489, 3511, 3518, 3516,    0,

     3532, 3536, 3543, 3547, 3557, 3548, 3492, 3553, 3556, 3565,
     3562, 3567, 3570, 3584, 3587, 3591, 3593, 3596, 3601, 3604,
     3613, 3615, 3618, 3621, 3632, 3635, 3638, 3640, 3643, 3645,
     3670, 3677, 3664, 3666, 3673, 3676, 3678, 3683, 3690, 3697,
     3701, 3703, 3709, 3714, 3720, 3726, 3728, 3732, 3737, 3739,
     3745, 3764, 3771, 3767, 3770, 3775, 3777, 3779, 3781, 3787,
     3789, 3799, 3801, 3806, 3808, 3810, 3818, 3820, 3828, 3832,
     3846, 3839, 3849, 3851, 3858, 3869, 3871, 3878, 3880, 3883,
     3888, 3890, 3900, 3902, 3907, 3913, 3919, 3924, 3926, 3930,
     3938, 3943, 3949, 3952, 3955, 3957, 3961, 3969, 3974, 3979,

     3983, 3991, 3996, 4000, 4004, 4008, 4010, 4028, 4030, 4032,
     4034, 4036, 4038, 4040, 4057, 4059, 4456, 4096, 4105, 4114,
     4123, 4128, 4134, 4139, 4145, 4150, 4156, 4165, 4174, 4182,
     4187, 4191, 4195, 4200, 4209, 4215, 4224, 4230, 4239, 4248,
     4257, 4266, 4275, 4284, 4293, 4302, 4311, 4320, 4329, 4338,
     4347, 4356, 4365, 4374, 4383, 4392, 4401, 4410, 4419, 4428,
     4437, 4446
    } ;

static yyconst short int yy_def[863] =
    {   0,
      817,    1,  817,    3,  818,  818,  819,  819,  820,  820,
      821,  821,  817,  817,  817,  817,  817,  822,  823,  817,
      822,  817,  822,  822,  822,  822,  822,  817,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      824,  825,  817,  824,  824,  824,  824,  824,  817,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  817,  824,  826,  827,
      817,  826,  817,  826,  826,  826,  826,  826,  817,  826,
      817,  828,  817,  817,  829,  817,  817,  830,  817,  817,

      817,  817,  817,  817,  817,  817,  822,  823,  822,  831,
      823,  823,  822,  822,  822,  817,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  824,
      825,  824,  832,  825,  825,  824,  824,  824,  824,  817,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      826,  827,  826,  833,  827,  827,  826,  826,  817,  817,
      826,  817,  826,  828,  817,  829,  830,  817,  822,  834,
      835,  835,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,

      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  824,  836,  837,  837,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  826,  838,
      839,  839,  817,  817,  834,  834,  840,  252,  841,  842,
      252,  843,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,

      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  836,
      836,  330,  844,  845,  330,  846,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  838,  838,  372,  847,  848,  372,

      849,  817,  817,  841,  841,  850,  842,  851,  507,  852,
      840,  252,  853,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  844,
      844,  845,  854,  572,  855,  840,  330,  856,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  847,
      847,  848,  857,  612,  858,  840,  372,  859,  851,  851,
      850,  507,  860,  853,  853,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  854,  854,  850,  572,
      861,  856,  856,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  857,  857,  850,  612,

      862,  859,  859,  860,  860,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      861,  861,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  862,  862,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  822,  822,  822,  822,  822,  822,  822,
      822,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      822,  822,  824,  824,  824,  824,  824,  824,  824,  822,
      824,  824,  824,  822,  824,  824,    0,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817
    } ;

static yyconst short int yy_nxt[4512] =
    {   0,
       14,   15,   16,   14,   17,   15,   15,   18,   19,   20,
       20,   21,   18,   22,   23,   24,   25,   26,   18,   18,
       18,   20,   18,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   18,   36,   18,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   18,
       18,   22,   22,   18,   18,   14,   15,   16,   14,   17,
       15,   15,   51,   52,   53,   53,   54,   55,   53,   56,
       55,   51,   51,   55,   57,   51,   53,   51,   58,   59,
       60,   51,   61,   62,   63,   64,   65,   51,   66,   67,
       51,   68,   69,   51,   70,   71,   51,   72,   73,   74,

       75,   76,   51,   51,   51,   51,   77,   77,   78,   51,
       14,   15,   16,   14,   17,   15,   15,  245,   80,   81,
       81,   82,  245,   83,   84,   85,  378,   86,   87,  497,
      511,   81,  245,   88,   89,   93,   94,  245,   94,   94,
       93,   93,   94,   90,   94,   94,   93,   96,  699,   96,
       96,   96,  106,   96,   96,  452,  106,  106,  248,  248,
      669,   91,   91,   14,   15,   16,   14,   17,   15,   15,
      378,   80,   81,   81,   82,  108,   83,   84,   85,  107,
       86,   87,  108,  621,   81,  113,   88,   89,  108,  240,
      109,  110,  108,  112,  114,  108,   90,  109,  110,  240,

      248,  248,  497,  109,  110,  109,  109,  109,  110,  109,
      109,  110,  495,  108,   91,   91,   97,  109,   99,   97,
      100,   97,  452,  180,   97,  101,  102,  108,  109,  116,
      108,  450,  378,  375,  108,  115,  115,  185,  103,  231,
      108,  503,  109,  110,  108,  109,  110,  109,  109,  109,
      110,  502,  117,  236,  118,  109,  110,  452,  235,  109,
      110,  576,  119,  137,  120,  140,  184,  104,  105,  108,
       97,   97,  181,   99,   97,  100,   97,  107,  138,   97,
      101,  102,  107,  111,  109,  110,  108,  182,  183,  121,
      108,  112,  181,  103,  108,  186,  112,  122,  123,  108,

      124,  109,  110,  125,  180,  109,  110,  182,  183,  109,
      110,  126,  817,  108,  109,  110,  108,  129,  185,  130,
      131,  127,  104,  105,  139,   97,  132,  128,  109,  110,
      141,  109,  110,  108,  142,  497,  817,  817,  817,  616,
      108,  133,  134,  817,  135,  108,  817,  136,  109,  110,
      143,  144,  108,  162,  145,  109,  110,  148,  146,  108,
      109,  110,  157,  817,  147,  817,  817,  109,  110,  163,
      108,  149,  181,  164,  109,  110,  158,  150,  108,  159,
      165,  817,  160,  181,  161,  109,  110,  182,  183,  173,
      108,  817,  817,  109,  110,  171,  151,  817,  182,  190,

      152,  108,  817,  817,  172,  109,  110,  153,  154,  108,
      155,  166,  156,  108,  167,  817,  109,  110,  174,  817,
      181,  168,  175,  181,  109,  110,  169,  170,  109,  110,
      817,  181,  189,  176,  177,  182,  183,  187,  182,  183,
      182,  182,  178,  188,  182,  181,  182,  183,  181,  106,
      179,  181,  182,  106,  106,  180,  181,  817,  191,  181,
      182,  183,  817,  182,  183,  231,  182,  183,  205,  185,
      199,  182,  183,  817,  182,  183,  181,  211,  200,  236,
      181,  201,  182,  182,  181,  817,  181,  203,  202,  231,
      204,  182,  183,  212,  817,  182,  183,  213,  817,  182,

      183,  182,  183,  236,  817,  192,  206,  817,  207,  181,
      817,  817,  193,  194,  219,  195,  208,  196,  197,  181,
      198,  209,  210,  181,  182,  183,  181,  214,  817,  249,
      215,  181,  817,  181,  182,  183,  327,  217,  182,  183,
      229,  182,  183,  376,  216,  181,  182,  183,  182,  183,
      451,  218,  369,  181,  226,  232,  220,  222,  223,  221,
      182,  183,  224,  225,  227,  230,  496,  232,  182,  183,
      233,  234,  232,  238,  817,  237,  817,  817,  817,  817,
      228,  249,  233,  234,  232,  817,  232,  233,  234,  239,
      240,  239,  239,  239,  239,  376,  232,  817,  232,  233,

      234,  233,  242,  232,  233,  233,  241,  241,  233,  108,
      817,  233,  234,  233,  234,  108,  233,  817,  233,  234,
      817,  250,  109,  109,  109,  110,  109,  108,  817,  108,
      109,  116,  251,  243,  109,  108,  817,  108,  817,  817,
      108,  252,  109,  110,  109,  110,  233,  233,  115,  115,
      109,  110,  109,  110,  817,  109,  110,  109,  109,  108,
      817,  109,  108,  817,  109,  109,  817,  108,  253,  109,
      108,  817,  817,  817,  109,  110,  817,  109,  110,  327,
      108,  817,  109,  110,  817,  109,  110,  255,  257,  108,
      256,  258,  108,  451,  817,  109,  110,  254,  108,  109,

      109,  264,  108,  817,  109,  110,  817,  109,  110,  259,
      108,  817,  108,  109,  110,  108,  265,  109,  110,  817,
      260,  261,  262,  369,  817,  109,  110,  109,  110,  263,
      109,  110,  108,  266,  268,  817,  108,  496,  817,  267,
      817,  108,  817,  817,  108,  817,  108,  109,  110,  108,
      269,  109,  110,  270,  817,  271,  109,  110,  272,  109,
      110,  109,  110,  108,  109,  110,  108,  817,  817,  108,
      275,  108,  817,  817,  108,  273,  817,  108,  109,  110,
      274,  109,  110,  276,  109,  110,  109,  110,  277,  109,
      110,  279,  109,  110,  108,  817,  108,  817,  108,  817,

      108,  278,  108,  817,  108,  280,  817,  817,  108,  109,
      110,  109,  110,  109,  110,  109,  110,  109,  110,  109,
      110,  108,  285,  109,  110,  817,  817,  283,  108,  817,
      281,  282,  817,  108,  817,  817,  109,  110,  286,  817,
      284,  108,  287,  109,  110,  108,  817,  108,  109,  110,
      288,  817,  108,  817,  289,  290,  109,  110,  817,  108,
      109,  110,  109,  110,  108,  817,  817,  109,  110,  108,
      817,  108,  291,  293,  109,  110,  108,  817,  817,  109,
      110,  817,  292,  108,  109,  110,  109,  110,  817,  108,
      817,  109,  110,  294,  297,  295,  296,  108,  109,  110,

      298,  301,  817,  300,  109,  110,  299,  108,  817,  817,
      817,  108,  109,  110,  108,  817,  817,  303,  108,  817,
      817,  817,  109,  110,  817,  302,  109,  110,  308,  109,
      110,  817,  304,  109,  110,  305,  306,  817,  108,  309,
      817,  108,  307,  817,  817,  311,  108,  310,  817,  817,
      108,  817,  312,  109,  110,  313,  109,  110,  108,  314,
      817,  109,  110,  108,  315,  109,  110,  318,  817,  108,
      317,  108,  817,  109,  110,  316,  817,  817,  109,  110,
      108,  817,  817,  319,  109,  110,  109,  110,  377,  108,
      111,  377,  322,  108,  111,  109,  110,  320,  181,  817,

      817,  817,  323,  321,  109,  110,  325,  817,  109,  110,
      181,  817,  181,  182,  183,  329,  324,  328,  182,  182,
      817,  181,  182,  326,  181,  182,  190,  182,  183,  181,
      182,  817,  181,  817,  181,  330,  182,  183,  817,  182,
      183,  181,  182,  182,  182,  183,  182,  182,  183,  182,
      183,  332,  817,  181,  182,  817,  182,  183,  817,  817,
      182,  182,  181,  817,  181,  817,  181,  331,  182,  183,
      817,  333,  181,  817,  196,  817,  817,  182,  183,  182,
      183,  182,  183,  181,  182,  182,  181,  182,  183,  181,
      817,  334,  335,  181,  336,  817,  181,  817,  182,  183,

      181,  182,  183,  337,  182,  183,  339,  181,  182,  183,
      181,  182,  183,  817,  817,  182,  183,  817,  181,  338,
      817,  181,  182,  183,  344,  182,  183,  817,  345,  340,
      341,  342,  181,  182,  183,  181,  182,  183,  181,  346,
      347,  817,  181,  343,  817,  817,  181,  182,  183,  181,
      182,  183,  817,  182,  183,  181,  348,  182,  183,  181,
      350,  182,  183,  817,  182,  183,  817,  817,  352,  349,
      182,  183,  181,  817,  182,  183,  817,  181,  351,  181,
      817,  181,  355,  357,  353,  817,  181,  182,  183,  817,
      354,  181,  182,  183,  182,  183,  182,  183,  356,  181,

      359,  182,  183,  181,  361,  817,  182,  183,  181,  817,
      360,  817,  358,  181,  182,  183,  181,  817,  182,  183,
      363,  817,  817,  182,  183,  362,  365,  181,  182,  183,
      181,  182,  183,  181,  817,  232,  817,  364,  232,  817,
      817,  817,  182,  183,  817,  182,  183,  366,  182,  183,
      233,  234,  367,  233,  242,  370,  233,  233,  232,  817,
      233,  371,  817,  232,  368,  817,  817,  817,  233,  372,
      817,  817,  817,  233,  234,  817,  817,  817,  233,  234,
      239,  240,  239,  239,  239,  239,  232,  817,  233,  233,
      373,  232,  233,  374,  241,  241,  108,  817,  233,  233,

      233,  233,  234,  108,  817,  108,  233,  234,  108,  817,
      108,  109,  110,  108,  817,  817,  817,  817,  109,  110,
      109,  110,  385,  109,  110,  109,  110,  817,  109,  110,
      233,  233,  377,  384,  108,  377,  817,  383,  817,  817,
      379,  377,  377,  108,  817,  377,  108,  817,  108,  109,
      110,  386,  380,  377,  108,  381,  382,  108,  109,  110,
      387,  109,  110,  109,  110,  377,  817,  184,  377,  109,
      110,  184,  109,  110,  395,  108,  817,  388,  394,  817,
      817,  108,  817,  377,  377,  377,  389,  108,  377,  390,
      109,  110,  817,  379,  377,  377,  109,  110,  377,  108,

      391,  392,  109,  110,  817,  380,  377,  108,  381,  382,
      108,  817,  396,  108,  109,  110,  108,  393,  108,  398,
      397,  817,  109,  110,  108,  109,  110,  108,  109,  110,
      108,  109,  110,  109,  110,  108,  377,  377,  817,  109,
      110,  108,  109,  110,  400,  109,  110,  289,  108,  817,
      109,  110,  399,  402,  401,  108,  109,  110,  108,  817,
      817,  406,  108,  109,  110,  817,  817,  404,  108,  403,
      109,  110,  108,  109,  110,  407,  405,  109,  110,  108,
      817,  409,  108,  109,  110,  817,  817,  109,  110,  108,
      408,  108,  817,  108,  109,  110,  817,  109,  110,  108,

      817,  411,  108,  410,  109,  110,  109,  110,  109,  110,
      108,  415,  108,  817,  109,  110,  108,  109,  110,  412,
      414,  108,  817,  413,  108,  109,  110,  109,  110,  108,
      416,  109,  110,  817,  817,  108,  109,  110,  108,  109,
      110,  817,  418,  108,  109,  110,  108,  817,  420,  421,
      109,  110,  817,  109,  110,  417,  419,  108,  109,  110,
      423,  109,  110,  108,  817,  422,  108,  424,  108,  817,
      108,  817,  109,  110,  108,  817,  817,  817,  109,  110,
      108,  109,  110,  109,  110,  109,  110,  817,  426,  109,
      110,  429,  817,  425,  108,  109,  110,  108,  817,  108,

      817,  108,  817,  427,  108,  428,  108,  817,  430,  109,
      110,  108,  109,  110,  109,  110,  109,  110,  432,  109,
      110,  109,  110,  108,  817,  817,  109,  110,  431,  817,
      108,  817,  817,  108,  817,  108,  436,  817,  109,  110,
      433,  817,  434,  817,  817,  109,  110,  435,  109,  110,
      109,  110,  441,  108,  817,  108,  439,  108,  437,  438,
      440,  108,  817,  817,  817,  108,  817,  817,  109,  110,
      109,  110,  109,  110,  817,  442,  109,  110,  817,  444,
      109,  110,  108,  817,  108,  817,  108,  817,  181,  817,
      443,  445,  181,  446,  181,  817,  817,  109,  110,  109,

      110,  109,  110,  182,  183,  817,  447,  182,  183,  182,
      183,  449,  181,  377,  817,  235,  377,  181,  817,  235,
      448,  377,  181,  457,  377,  817,  817,  182,  183,  453,
      377,  377,  182,  183,  377,  181,  817,  182,  183,  181,
      817,  454,  377,  181,  455,  456,  459,  458,  817,  181,
      182,  183,  181,  817,  182,  183,  817,  460,  182,  183,
      506,  817,  111,  506,  182,  183,  111,  182,  183,  817,
      461,  464,  377,  377,  377,  463,  181,  377,  465,  817,
      466,  817,  453,  377,  377,  181,  462,  377,  181,  817,
      817,  182,  183,  181,  454,  377,  181,  455,  456,  181,

      182,  183,  817,  182,  183,  468,  467,  181,  182,  183,
      817,  182,  183,  817,  182,  183,  181,  470,  181,  817,
      471,  181,  182,  183,  181,  377,  377,  817,  472,  473,
      469,  182,  183,  182,  183,  474,  182,  183,  181,  182,
      183,  181,  476,  181,  817,  477,  181,  817,  181,  817,
      475,  181,  817,  182,  183,  181,  182,  183,  182,  183,
      817,  182,  183,  182,  183,  817,  182,  183,  181,  482,
      182,  183,  479,  181,  478,  483,  181,  817,  480,  181,
      817,  481,  181,  182,  183,  817,  817,  484,  182,  183,
      181,  182,  183,  817,  182,  183,  181,  182,  183,  817,

      486,  488,  181,  817,  181,  182,  183,  489,  181,  485,
      817,  182,  183,  232,  817,  487,  108,  182,  183,  182,
      183,  490,  817,  182,  183,  492,  108,  377,  233,  234,
      377,  109,  110,  111,  493,  378,  817,  491,  817,  817,
      108,  109,  110,  494,  377,  108,  817,  377,  817,  505,
      817,  515,  498,  377,  377,  109,  110,  377,  108,  817,
      109,  110,  514,  108,  499,  377,  108,  500,  501,  108,
      817,  817,  517,  109,  110,  516,  817,  817,  109,  110,
      520,  109,  110,  108,  109,  110,  108,  523,  377,  817,
      375,  377,  518,  817,  375,  377,  377,  377,  109,  110,

      377,  109,  110,  519,  817,  498,  377,  377,  521,  108,
      377,  524,  817,  108,  522,  817,  108,  499,  377,  817,
      500,  501,  817,  108,  109,  110,  817,  108,  109,  110,
      525,  109,  110,  817,  526,  817,  529,  817,  109,  110,
      108,  817,  109,  110,  817,  817,  108,  817,  377,  377,
      506,  530,  527,  506,  108,  109,  110,  817,  508,  506,
      506,  109,  110,  506,  528,  817,  108,  817,  108,  109,
      110,  506,  108,  509,  510,  817,  817,  817,  817,  108,
      531,  109,  110,  109,  110,  817,  817,  109,  110,  534,
      817,  532,  817,  108,  109,  110,  817,  817,  817,  108,

      535,  506,  506,  377,  533,  108,  377,  108,  109,  110,
      817,  513,  381,  381,  109,  110,  381,  536,  108,  817,
      109,  110,  109,  110,  381,  817,  377,  377,  108,  817,
      817,  108,  817,  109,  110,  108,  537,  108,  817,  817,
      538,  817,  539,  109,  110,  108,  109,  110,  817,  108,
      109,  110,  109,  110,  381,  381,  540,  108,  817,  108,
      109,  110,  543,  541,  109,  110,  108,  817,  542,  108,
      544,  108,  109,  110,  109,  110,  108,  817,  817,  108,
      817,  109,  110,  108,  109,  110,  109,  110,  817,  108,
      547,  109,  110,  545,  109,  110,  546,  108,  109,  110,

      817,  108,  817,  108,  109,  110,  817,  817,  549,  550,
      108,  817,  109,  110,  108,  548,  109,  110,  109,  110,
      108,  817,  552,  817,  817,  109,  110,  108,  817,  109,
      110,  554,  551,  108,  817,  109,  110,  817,  108,  553,
      108,  817,  109,  110,  108,  555,  556,  108,  109,  110,
      108,  817,  557,  109,  110,  109,  110,  108,  817,  109,
      110,  108,  109,  110,  817,  109,  110,  108,  817,  108,
      817,  817,  109,  110,  561,  558,  109,  110,  108,  559,
      108,  817,  109,  110,  109,  110,  560,  108,  817,  108,
      563,  108,  817,  109,  110,  109,  110,  562,  108,  817,

      817,  108,  109,  110,  109,  110,  109,  110,  108,  817,
      566,  181,  567,  109,  110,  817,  109,  110,  565,  564,
      568,  181,  817,  109,  110,  377,  182,  183,  377,  181,
      569,  184,  817,  452,  181,  817,  182,  183,  181,  817,
      579,  817,  817,  817,  182,  183,  580,  571,  506,  182,
      183,  506,  181,  182,  183,  817,  573,  506,  506,  582,
      181,  506,  817,  181,  817,  181,  581,  182,  183,  506,
      181,  574,  575,  181,  583,  182,  183,  817,  182,  183,
      182,  183,  181,  817,  817,  182,  183,  587,  182,  183,
      817,  584,  349,  817,  817,  817,  817,  182,  183,  506,

      506,  377,  585,  181,  377,  181,  817,  817,  817,  578,
      455,  455,  586,  181,  455,  181,  817,  181,  182,  183,
      182,  183,  455,  181,  377,  377,  588,  181,  182,  183,
      182,  183,  182,  183,  589,  591,  817,  817,  182,  183,
      181,  817,  182,  183,  594,  181,  590,  181,  817,  181,
      817,  181,  455,  455,  593,  182,  183,  181,  817,  592,
      182,  183,  182,  183,  182,  183,  182,  183,  595,  817,
      817,  181,  182,  183,  597,  817,  181,  817,  181,  817,
      181,  817,  181,  817,  817,  596,  182,  183,  181,  817,
      598,  182,  183,  182,  183,  182,  183,  182,  183,  600,

      181,  601,  817,  182,  183,  181,  506,  599,  184,  506,
      817,  181,  184,  181,  817,  182,  183,  181,  602,  181,
      182,  183,  108,  603,  817,  604,  182,  183,  182,  183,
      181,  817,  182,  183,  182,  183,  608,  109,  110,  606,
      609,  605,  817,  108,  607,  182,  183,  377,  817,  817,
      377,  817,  817,  235,  377,  497,  108,  377,  109,  110,
      111,  817,  378,  381,  381,  817,  817,  381,  817,  611,
      506,  109,  110,  506,  817,  381,  505,  628,  613,  506,
      506,  506,  377,  506,  506,  377,  108,  111,  375,  507,
      512,  506,  817,  614,  615,  108,  817,  108,  817,  817,

      817,  109,  110,  620,  625,  381,  381,  626,  817,  108,
      109,  110,  109,  110,  108,  629,  817,  627,  817,  108,
      817,  506,  506,  377,  109,  110,  377,  817,  817,  109,
      110,  618,  500,  500,  109,  110,  500,  108,  817,  630,
      817,  108,  631,  108,  500,  108,  377,  377,  108,  632,
      108,  817,  109,  110,  633,  108,  109,  110,  109,  110,
      109,  110,  817,  109,  110,  109,  110,  817,  817,  637,
      109,  110,  108,  817,  500,  500,  506,  634,  636,  506,
      108,  817,  817,  635,  508,  506,  506,  109,  110,  506,
      817,  108,  817,  638,  108,  109,  110,  506,  108,  509,

      510,  108,  817,  108,  817,  639,  109,  110,  108,  109,
      110,  640,  817,  109,  110,  641,  109,  110,  109,  110,
      108,  817,  817,  109,  110,  817,  643,  506,  506,  506,
      108,  817,  506,  108,  642,  109,  110,  623,  509,  509,
      644,  108,  509,  108,  817,  109,  110,  817,  109,  110,
      509,  108,  506,  506,  108,  817,  109,  110,  109,  110,
      108,  817,  646,  817,  817,  817,  109,  110,  108,  109,
      110,  108,  817,  645,  108,  109,  110,  108,  817,  648,
      509,  509,  647,  109,  110,  650,  109,  110,  649,  109,
      110,  108,  109,  110,  108,  817,  108,  817,  108,  817,

      108,  817,  817,  651,  652,  653,  109,  110,  817,  109,
      110,  109,  110,  109,  110,  109,  110,  655,  108,  656,
      108,  817,  108,  817,  654,  108,  817,  108,  657,  817,
      108,  817,  108,  109,  110,  109,  110,  109,  110,  817,
      109,  110,  109,  110,  659,  109,  110,  109,  110,  108,
      817,  817,  108,  817,  658,  661,  817,  817,  660,  108,
      817,  108,  817,  108,  109,  110,  662,  109,  110,  108,
      817,  108,  663,  108,  109,  110,  109,  110,  109,  110,
      817,  817,  817,  817,  109,  110,  109,  110,  109,  110,
      817,  377,  817,  817,  377,  665,  664,  184,  506,  452,

      817,  506,  817,  817,  184,  817,  572,  455,  455,  817,
      817,  455,  817,  571,  666,  506,  817,  817,  506,  455,
      668,  817,  817,  573,  506,  506,  377,  181,  506,  377,
      181,  817,  450,  817,  577,  817,  506,  817,  574,  575,
      181,  817,  182,  183,  181,  182,  183,  817,  673,  455,
      455,  817,  674,  817,  181,  182,  183,  181,  817,  182,
      183,  817,  817,  676,  817,  817,  506,  506,  506,  182,
      183,  506,  182,  183,  817,  817,  671,  574,  574,  181,
      675,  574,  181,  817,  817,  181,  817,  817,  677,  574,
      181,  506,  506,  181,  182,  183,  181,  182,  183,  181,

      182,  183,  678,  817,  817,  182,  183,  817,  182,  183,
      181,  182,  183,  181,  182,  183,  181,  817,  817,  574,
      574,  679,  181,  680,  681,  182,  183,  682,  182,  183,
      683,  182,  183,  685,  181,  684,  817,  182,  183,  181,
      817,  181,  817,  181,  817,  181,  817,  817,  181,  182,
      183,  817,  686,  181,  182,  183,  182,  183,  182,  183,
      182,  183,  687,  182,  183,  690,  181,  691,  182,  183,
      181,  817,  817,  181,  689,  181,  817,  688,  817,  817,
      181,  182,  183,  181,  817,  182,  183,  692,  182,  183,
      182,  183,  694,  181,  693,  182,  183,  377,  182,  183,

      377,  817,  817,  235,  817,  497,  108,  696,  182,  183,
      506,  108,  817,  506,  695,  817,  235,  817,  612,  611,
      506,  109,  110,  506,  817,  817,  109,  110,  613,  506,
      506,  259,  698,  506,  377,  500,  500,  377,  817,  500,
      495,  506,  617,  614,  615,  506,  506,  500,  506,  506,
      108,  111,  375,  507,  622,  817,  703,  509,  509,  108,
      817,  509,  817,  817,  108,  109,  110,  620,  705,  509,
      817,  506,  506,  506,  109,  110,  506,  500,  500,  109,
      110,  701,  614,  614,  377,  707,  614,  377,  108,  817,
      375,  817,  512,  706,  614,  708,  506,  506,  108,  509,

      509,  108,  817,  109,  110,  108,  625,  108,  817,  709,
      817,  108,  817,  109,  110,  817,  109,  110,  108,  710,
      109,  110,  109,  110,  614,  614,  109,  110,  817,  711,
      712,  108,  817,  109,  110,  817,  108,  817,  108,  715,
      108,  817,  108,  713,  817,  108,  109,  110,  714,  108,
      716,  109,  110,  109,  110,  109,  110,  109,  110,  718,
      109,  110,  108,  817,  109,  110,  817,  817,  817,  108,
      719,  108,  717,  108,  817,  108,  817,  109,  110,  108,
      817,  720,  817,  721,  109,  110,  109,  110,  109,  110,
      109,  110,  108,  817,  109,  110,  108,  817,  722,  817,

      817,  108,  817,  108,  817,  817,  817,  109,  110,  108,
      817,  109,  110,  108,  817,  723,  109,  110,  109,  110,
      724,  108,  725,  108,  109,  110,  726,  108,  109,  110,
      108,  817,  108,  817,  108,  817,  109,  110,  109,  110,
      108,  817,  109,  110,  727,  109,  110,  109,  110,  109,
      110,  108,  817,  817,  108,  109,  110,  506,  108,  817,
      506,  817,  817,  184,  817,  572,  109,  110,  728,  109,
      110,  817,  730,  109,  110,  729,  574,  574,  506,  668,
      574,  506,  817,  817,  450,  817,  670,  377,  574,  181,
      377,  817,  181,  450,  817,  577,  377,  181,  450,  377,

      732,  181,  450,  817,  182,  183,  733,  182,  183,  673,
      181,  817,  182,  183,  734,  181,  182,  183,  574,  574,
      817,  181,  817,  817,  181,  182,  183,  181,  817,  735,
      182,  183,  181,  817,  181,  737,  182,  183,  736,  182,
      183,  181,  182,  183,  181,  817,  181,  182,  183,  182,
      183,  817,  817,  817,  738,  817,  182,  183,  181,  182,
      183,  182,  183,  181,  817,  742,  741,  743,  739,  181,
      740,  181,  817,  182,  183,  817,  817,  817,  182,  183,
      181,  817,  817,  181,  182,  183,  182,  183,  181,  817,
      744,  817,  745,  817,  181,  182,  183,  181,  182,  183,

      108,  817,  817,  182,  183,  746,  748,  817,  747,  182,
      183,  506,  182,  183,  506,  109,  110,  235,  506,  612,
      235,  506,  817,  749,  235,  614,  614,  817,  751,  614,
      750,  817,  506,  698,  817,  506,  377,  614,  495,  377,
      700,  817,  495,  377,  617,  495,  377,  506,  817,  495,
      506,  817,  817,  375,  753,  622,  108,  506,  703,  375,
      506,  108,  817,  375,  108,  817,  817,  614,  614,  705,
      108,  109,  110,  108,  817,  108,  109,  110,  108,  109,
      110,  754,  817,  817,  817,  109,  110,  817,  109,  110,
      109,  110,  108,  109,  110,  108,  817,  626,  756,  108,

      755,  108,  817,  757,  108,  817,  758,  109,  110,  108,
      109,  110,  108,  759,  109,  110,  109,  110,  817,  109,
      110,  108,  761,  108,  109,  110,  108,  109,  110,  108,
      762,  817,  817,  763,  817,  760,  109,  110,  109,  110,
      108,  109,  110,  108,  109,  110,  108,  765,  108,  817,
      766,  108,  817,  108,  817,  109,  110,  817,  109,  110,
      817,  109,  110,  109,  110,  764,  109,  110,  109,  110,
      506,  767,  181,  506,  181,  817,  450,  506,  670,  450,
      506,  181,  817,  450,  181,  768,  181,  182,  183,  182,
      183,  181,  732,  817,  817,  817,  182,  183,  181,  182,

      183,  182,  183,  772,  817,  181,  182,  183,  769,  181,
      770,  181,  817,  182,  183,  771,  773,  181,  817,  774,
      182,  183,  181,  817,  182,  183,  182,  183,  181,  817,
      817,  777,  182,  183,  181,  817,  181,  182,  183,  776,
      181,  817,  817,  182,  183,  181,  775,  181,  817,  182,
      183,  182,  183,  181,  817,  182,  183,  817,  778,  779,
      182,  183,  182,  183,  506,  817,  817,  506,  182,  183,
      495,  506,  700,  495,  506,  108,  817,  495,  108,  817,
      781,  780,  782,  108,  783,  108,  753,  108,  817,  108,
      109,  110,  817,  109,  110,  108,  784,  108,  109,  110,

      109,  110,  109,  110,  109,  110,  817,  108,  785,  108,
      109,  110,  109,  110,  108,  817,  108,  787,  108,  817,
      817,  786,  109,  110,  109,  110,  108,  788,  108,  109,
      110,  109,  110,  109,  110,  789,  181,  817,  817,  817,
      181,  109,  110,  109,  110,  817,  817,  181,  817,  817,
      817,  182,  183,  790,  181,  182,  183,  181,  817,  181,
      817,  792,  182,  183,  791,  793,  181,  817,  817,  182,
      183,  794,  182,  183,  182,  183,  345,  181,  817,  181,
      609,  182,  183,  795,  817,  817,  181,  817,  181,  796,
      817,  181,  182,  183,  182,  183,  181,  817,  181,  817,

      609,  182,  183,  182,  183,  797,  182,  183,  181,  817,
      108,  182,  183,  182,  183,  108,  817,  799,  798,  817,
      817,  108,  817,  182,  183,  109,  110,  108,  817,  817,
      109,  110,  108,  817,  108,  800,  109,  110,  108,  817,
      817,  817,  109,  110,  817,  626,  108,  109,  110,  109,
      110,  181,  817,  109,  110,  817,  538,  181,  817,  801,
      181,  109,  110,  181,  817,  181,  182,  183,  817,  181,
      817,  802,  182,  183,  817,  182,  183,  181,  182,  183,
      182,  183,  181,  817,  182,  183,  817,  181,  817,  803,
      808,  108,  182,  183,  806,  804,  805,  182,  183,  108,

      609,  807,  182,  183,  181,  817,  109,  110,  181,  817,
      817,  817,  181,  817,  109,  110,  181,  809,  181,  182,
      183,  817,  817,  182,  183,  811,  651,  182,  183,  812,
      810,  182,  183,  182,  183,  817,  181,  813,  181,  817,
      108,  817,  181,  817,  181,  817,  181,  817,  108,  817,
      462,  182,  183,  182,  183,  109,  110,  182,  183,  182,
      183,  182,  183,  109,  110,  181,  817,  181,  817,  817,
      814,  817,  817,  817,  817,  817,  817,  815,  817,  817,
      182,  183,  182,  183,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  816,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  107,  107,  817,  817,  107,  111,  111,  111,
      111,  111,  111,  180,  180,  817,  817,  180,  184,  184,
      184,  184,  184,  184,  231,  231,  817,  817,  231,  235,
      235,  235,  235,  235,  235,  244,  817,  817,  817,  244,
      244,  244,  244,  244,  246,  246,  817,  246,  246,  246,
      246,  246,  246,  247,  817,  247,  247,  817,  817,  247,
      247,  249,  249,  249,  249,  327,  327,  327,  327,  369,

      369,  369,  369,  375,  375,  375,  375,  375,  375,  378,
      817,  817,  817,  378,  378,  378,  378,  378,  450,  450,
      450,  450,  450,  450,  452,  817,  817,  817,  452,  452,
      452,  452,  452,  495,  495,  495,  495,  495,  495,  497,
      817,  817,  817,  497,  497,  497,  497,  497,  377,  817,
      817,  817,  377,  377,  377,  377,  377,  504,  817,  817,
      504,  504,  504,  504,  504,  504,  507,  817,  817,  817,
      507,  507,  507,  507,  507,  512,  817,  817,  817,  512,
      512,  512,  512,  512,  570,  817,  817,  570,  570,  570,
      570,  570,  570,  572,  817,  817,  817,  572,  572,  572,

      572,  572,  577,  817,  817,  817,  577,  577,  577,  577,
      577,  610,  817,  817,  610,  610,  610,  610,  610,  610,
      612,  817,  817,  817,  612,  612,  612,  612,  612,  617,
      817,  817,  817,  617,  617,  617,  617,  617,  506,  817,
      817,  817,  506,  506,  506,  506,  506,  619,  817,  817,
      619,  619,  619,  619,  619,  619,  622,  817,  817,  817,
      622,  622,  622,  622,  622,  624,  817,  817,  624,  624,
      624,  624,  624,  624,  667,  817,  817,  667,  667,  667,
      667,  667,  667,  670,  817,  817,  817,  670,  670,  670,
      670,  670,  672,  817,  817,  672,  672,  672,  672,  672,

      672,  697,  817,  817,  697,  697,  697,  697,  697,  697,
      700,  817,  817,  817,  700,  700,  700,  700,  700,  702,
      817,  817,  702,  702,  702,  702,  702,  702,  704,  817,
      817,  704,  704,  704,  704,  704,  704,  731,  817,  817,
      731,  731,  731,  731,  731,  731,  752,  817,  817,  752,
      752,  752,  752,  752,  752,   13,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817
    } ;

static yyconst short int yy_chk[4512] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,   93,    5,    5,
        5,    5,   93,    5,    5,    5,  381,    5,    5,  617,
      381,    5,  245,    5,    5,    7,    7,  245,    7,    7,
        7,    8,    8,    5,    8,    8,    8,    9,  614,    9,
        9,   10,   15,   10,   10,  577,   15,   15,  103,  103,
      574,    5,    5,    6,    6,    6,    6,    6,    6,    6,
      512,    6,    6,    6,    6,   18,    6,    6,    6,   19,
        6,    6,   21,  509,    6,   21,    6,    6,   23,  503,
       18,   18,   24,   19,   23,   25,    6,   21,   21,  502,

      103,  103,  497,   23,   23,   28,   28,   24,   24,   28,
       25,   25,  496,   27,    6,    6,   11,   28,   11,   11,
       11,   11,  452,   52,   11,   11,   11,   26,   27,   27,
       30,  451,  378,  376,   29,   26,   26,   52,   11,   80,
       37,  374,   26,   26,   35,   30,   30,   28,   28,   29,
       29,  373,   29,   80,   29,   37,   37,  455,  236,   35,
       35,  455,   29,   35,   30,   37,  185,   11,   11,   31,
       11,   12,   51,   12,   12,   12,   12,  108,   35,   12,
       12,   12,  111,  112,   31,   31,   33,   51,   51,   31,
       32,  108,   54,   12,   36,   54,  111,   31,   31,   38,

       31,   33,   33,   31,  181,   32,   32,   54,   54,   36,
       36,   32,   13,   34,   38,   38,   43,   33,  181,   33,
       33,   32,   12,   12,   36,   12,   33,   32,   34,   34,
       38,   43,   43,   39,   38,  500,    0,    0,    0,  500,
       40,   34,   34,    0,   34,   42,    0,   34,   39,   39,
       39,   39,   44,   43,   39,   40,   40,   40,   39,   47,
       42,   42,   42,    0,   39,    0,    0,   44,   44,   44,
       46,   40,   55,   44,   47,   47,   42,   40,   41,   42,
       44,    0,   42,   58,   42,   46,   46,   55,   55,   47,
       45,    0,    0,   41,   41,   46,   41,    0,   58,   58,

       41,   48,    0,    0,   46,   45,   45,   41,   41,   49,
       41,   45,   41,   50,   45,    0,   48,   48,   48,    0,
       57,   45,   48,   60,   49,   49,   45,   45,   50,   50,
        0,   56,   57,   49,   49,   57,   57,   56,   60,   60,
       59,   59,   50,   56,   59,   62,   56,   56,   63,  106,
       50,   65,   59,  106,  106,  184,   64,    0,   60,   67,
       62,   62,    0,   63,   63,  232,   65,   65,   65,  184,
       62,   64,   64,    0,   67,   67,   68,   67,   63,  232,
       71,   63,   59,   59,   61,    0,   66,   64,   63,  235,
       64,   68,   68,   68,    0,   71,   71,   68,    0,   61,

       61,   66,   66,  235,    0,   61,   66,    0,   66,   69,
        0,    0,   61,   61,   71,   61,   66,   61,   61,   70,
       61,   66,   66,   76,   69,   69,   73,   69,    0,  250,
       69,   72,    0,   74,   70,   70,  328,   70,   76,   76,
       76,   73,   73,  250,   69,   75,   72,   72,   74,   74,
      328,   70,  370,   78,   74,   79,   72,   73,   73,   72,
       75,   75,   73,   73,   74,   78,  370,   84,   78,   78,
       79,   79,   82,   84,    0,   82,    0,    0,    0,    0,
       75,  375,   84,   84,   87,    0,   88,   82,   82,   85,
       85,   85,   85,   85,   85,  375,   85,    0,   86,   87,

       87,   88,   88,   90,   89,   89,   86,   86,   89,  107,
        0,   85,   85,   86,   86,  109,   89,    0,   90,   90,
        0,  110,  110,  110,  107,  107,  110,  121,    0,  113,
      109,  109,  113,   90,  110,  114,    0,  117,    0,    0,
      115,  114,  121,  121,  113,  113,   89,   89,  115,  115,
      114,  114,  117,  117,    0,  115,  115,  116,  116,  118,
        0,  116,  119,    0,  110,  110,    0,  120,  117,  116,
      122,    0,    0,    0,  118,  118,    0,  119,  119,  450,
      125,    0,  120,  120,    0,  122,  122,  119,  120,  123,
      119,  122,  124,  450,    0,  125,  125,  118,  126,  116,

      116,  125,  127,    0,  123,  123,    0,  124,  124,  123,
      128,    0,  129,  126,  126,  130,  126,  127,  127,    0,
      124,  124,  124,  495,    0,  128,  128,  129,  129,  124,
      130,  130,  131,  126,  129,    0,  132,  495,    0,  128,
        0,  133,    0,    0,  134,    0,  135,  131,  131,  136,
      130,  132,  132,  131,    0,  132,  133,  133,  133,  134,
      134,  135,  135,  137,  136,  136,  138,    0,    0,  139,
      136,  140,    0,    0,  141,  134,    0,  142,  137,  137,
      135,  138,  138,  138,  139,  139,  140,  140,  139,  141,
      141,  141,  142,  142,  143,    0,  144,    0,  145,    0,

      146,  140,  147,    0,  148,  141,    0,    0,  149,  143,
      143,  144,  144,  145,  145,  146,  146,  147,  147,  148,
      148,  150,  147,  149,  149,    0,    0,  145,  151,    0,
      143,  144,    0,  152,    0,    0,  150,  150,  148,    0,
      146,  153,  149,  151,  151,  154,    0,  155,  152,  152,
      150,    0,  156,    0,  151,  152,  153,  153,    0,  157,
      154,  154,  155,  155,  158,    0,    0,  156,  156,  159,
        0,  160,  153,  156,  157,  157,  162,    0,    0,  158,
      158,    0,  155,  161,  159,  159,  160,  160,    0,  163,
        0,  162,  162,  157,  159,  157,  158,  164,  161,  161,

      159,  162,    0,  161,  163,  163,  160,  165,    0,    0,
        0,  166,  164,  164,  167,    0,    0,  164,  168,    0,
        0,    0,  165,  165,    0,  163,  166,  166,  166,  167,
      167,    0,  164,  168,  168,  164,  164,    0,  169,  166,
        0,  171,  165,    0,    0,  167,  170,  166,    0,    0,
      172,    0,  168,  169,  169,  169,  171,  171,  173,  169,
        0,  170,  170,  174,  170,  172,  172,  172,    0,  175,
      171,  176,    0,  173,  173,  170,    0,    0,  174,  174,
      177,    0,    0,  173,  175,  175,  176,  176,  505,  178,
      505,  505,  176,  179,  505,  177,  177,  174,  180,    0,

        0,    0,  176,  175,  178,  178,  178,    0,  179,  179,
      182,    0,  186,  180,  180,  186,  177,  183,  183,  183,
        0,  188,  183,  179,  189,  182,  182,  186,  186,  187,
      183,    0,  191,    0,  193,  187,  188,  188,    0,  189,
      189,  192,  190,  190,  187,  187,  190,  191,  191,  193,
      193,  193,    0,  194,  190,    0,  192,  192,    0,    0,
      183,  183,  195,    0,  196,    0,  197,  191,  194,  194,
        0,  194,  198,    0,  192,    0,    0,  195,  195,  196,
      196,  197,  197,  199,  190,  190,  200,  198,  198,  201,
        0,  195,  195,  202,  197,    0,  203,    0,  199,  199,

      204,  200,  200,  198,  201,  201,  200,  205,  202,  202,
      207,  203,  203,    0,    0,  204,  204,    0,  206,  199,
        0,  208,  205,  205,  206,  207,  207,    0,  206,  202,
      203,  204,  209,  206,  206,  210,  208,  208,  211,  206,
      208,    0,  212,  205,    0,    0,  213,  209,  209,  214,
      210,  210,    0,  211,  211,  215,  210,  212,  212,  216,
      212,  213,  213,    0,  214,  214,    0,    0,  213,  211,
      215,  215,  217,    0,  216,  216,    0,  218,  212,  219,
        0,  220,  216,  218,  215,    0,  221,  217,  217,    0,
      215,  222,  218,  218,  219,  219,  220,  220,  217,  223,

      219,  221,  221,  224,  220,    0,  222,  222,  225,    0,
      219,    0,  218,  226,  223,  223,  227,    0,  224,  224,
      223,    0,    0,  225,  225,  222,  225,  228,  226,  226,
      229,  227,  227,  230,    0,  231,    0,  224,  233,    0,
        0,    0,  228,  228,    0,  229,  229,  226,  230,  230,
      231,  231,  228,  233,  233,  234,  234,  234,  237,    0,
      234,  237,    0,  238,  229,    0,    0,    0,  234,  238,
        0,    0,    0,  237,  237,    0,    0,    0,  238,  238,
      239,  239,  239,  239,  239,  239,  241,    0,  242,  242,
      239,  243,  242,  239,  241,  241,  249,    0,  234,  234,

      242,  241,  241,  253,    0,  255,  243,  243,  254,    0,
      256,  249,  249,  259,    0,    0,    0,    0,  253,  253,
      255,  255,  255,  254,  254,  256,  256,    0,  259,  259,
      242,  242,  251,  254,  257,  251,    0,  253,    0,    0,
      251,  251,  251,  258,    0,  251,  260,    0,  263,  257,
      257,  257,  251,  251,  264,  251,  251,  261,  258,  258,
      258,  260,  260,  263,  263,  571,    0,  571,  571,  264,
      264,  571,  261,  261,  264,  265,    0,  260,  263,    0,
        0,  262,    0,  251,  251,  252,  261,  267,  252,  261,
      265,  265,    0,  252,  252,  252,  262,  262,  252,  266,

      262,  262,  267,  267,    0,  252,  252,  268,  252,  252,
      269,    0,  265,  270,  266,  266,  271,  262,  272,  267,
      266,    0,  268,  268,  274,  269,  269,  273,  270,  270,
      275,  271,  271,  272,  272,  276,  252,  252,    0,  274,
      274,  278,  273,  273,  271,  275,  275,  273,  277,    0,
      276,  276,  270,  274,  272,  279,  278,  278,  280,    0,
        0,  278,  281,  277,  277,    0,    0,  276,  282,  275,
      279,  279,  283,  280,  280,  279,  277,  281,  281,  284,
        0,  281,  285,  282,  282,    0,    0,  283,  283,  286,
      280,  287,    0,  288,  284,  284,    0,  285,  285,  289,

        0,  284,  290,  283,  286,  286,  287,  287,  288,  288,
      291,  288,  292,    0,  289,  289,  293,  290,  290,  285,
      287,  294,    0,  286,  295,  291,  291,  292,  292,  296,
      291,  293,  293,    0,    0,  297,  294,  294,  298,  295,
      295,    0,  294,  299,  296,  296,  300,    0,  295,  296,
      297,  297,    0,  298,  298,  293,  294,  301,  299,  299,
      298,  300,  300,  302,    0,  297,  303,  299,  304,    0,
      305,    0,  301,  301,  306,    0,    0,    0,  302,  302,
      307,  303,  303,  304,  304,  305,  305,    0,  302,  306,
      306,  305,    0,  301,  308,  307,  307,  309,    0,  310,

        0,  311,    0,  303,  314,  304,  312,    0,  306,  308,
      308,  313,  309,  309,  310,  310,  311,  311,  309,  314,
      314,  312,  312,  315,    0,    0,  313,  313,  308,    0,
      316,    0,    0,  318,    0,  317,  314,    0,  315,  315,
      311,    0,  312,    0,    0,  316,  316,  313,  318,  318,
      317,  317,  318,  319,    0,  320,  317,  322,  315,  316,
      317,  321,    0,    0,    0,  323,    0,    0,  319,  319,
      320,  320,  322,  322,    0,  319,  321,  321,    0,  321,
      323,  323,  324,    0,  325,    0,  326,    0,  327,    0,
      320,  322,  331,  323,  333,    0,    0,  324,  324,  325,

      325,  326,  326,  327,  327,    0,  324,  331,  331,  333,
      333,  326,  332,  611,    0,  611,  611,  334,    0,  611,
      325,  329,  336,  331,  329,    0,    0,  332,  332,  329,
      329,  329,  334,  334,  329,  335,    0,  336,  336,  338,
        0,  329,  329,  345,  329,  329,  334,  332,    0,  339,
      335,  335,  337,    0,  338,  338,    0,  335,  345,  345,
      620,    0,  620,  620,  339,  339,  620,  337,  337,    0,
      335,  339,  329,  329,  330,  338,  341,  330,  339,    0,
      339,    0,  330,  330,  330,  340,  337,  330,  342,    0,
        0,  341,  341,  343,  330,  330,  344,  330,  330,  346,

      340,  340,    0,  342,  342,  341,  340,  347,  343,  343,
        0,  344,  344,    0,  346,  346,  348,  343,  349,    0,
      344,  350,  347,  347,  351,  330,  330,    0,  346,  346,
      342,  348,  348,  349,  349,  347,  350,  350,  352,  351,
      351,  353,  350,  354,    0,  351,  355,    0,  356,    0,
      348,  357,    0,  352,  352,  358,  353,  353,  354,  354,
        0,  355,  355,  356,  356,    0,  357,  357,  359,  356,
      358,  358,  353,  360,  352,  357,  361,    0,  354,  362,
        0,  355,  363,  359,  359,    0,    0,  359,  360,  360,
      364,  361,  361,    0,  362,  362,  366,  363,  363,    0,

      361,  363,  365,    0,  367,  364,  364,  364,  368,  360,
        0,  366,  366,  369,    0,  362,  384,  365,  365,  367,
      367,  365,    0,  368,  368,  366,  383,  379,  369,  369,
      379,  384,  384,  379,  367,  379,    0,  365,    0,    0,
      385,  383,  383,  368,  371,  386,    0,  371,    0,  379,
        0,  384,  371,  371,  371,  385,  385,  371,  387,    0,
      386,  386,  383,  389,  371,  371,  391,  371,  371,  388,
        0,    0,  386,  387,  387,  385,    0,    0,  389,  389,
      389,  391,  391,  390,  388,  388,  392,  391,  625,    0,
      625,  625,  387,    0,  625,  371,  371,  372,  390,  390,

      372,  392,  392,  388,    0,  372,  372,  372,  390,  393,
      372,  392,    0,  396,  390,    0,  394,  372,  372,    0,
      372,  372,    0,  397,  393,  393,    0,  395,  396,  396,
      393,  394,  394,    0,  393,    0,  396,    0,  397,  397,
      398,    0,  395,  395,    0,    0,  399,    0,  372,  372,
      380,  397,  394,  380,  400,  398,  398,    0,  380,  380,
      380,  399,  399,  380,  395,    0,  403,    0,  401,  400,
      400,  380,  402,  380,  380,    0,    0,    0,    0,  407,
      399,  403,  403,  401,  401,    0,    0,  402,  402,  402,
        0,  400,    0,  404,  407,  407,    0,    0,    0,  405,

      403,  380,  380,  382,  401,  406,  382,  408,  404,  404,
        0,  382,  382,  382,  405,  405,  382,  404,  409,    0,
      406,  406,  408,  408,  382,    0,  382,  382,  410,    0,
        0,  411,    0,  409,  409,  412,  405,  413,    0,    0,
      406,    0,  409,  410,  410,  414,  411,  411,    0,  415,
      412,  412,  413,  413,  382,  382,  411,  416,    0,  417,
      414,  414,  414,  412,  415,  415,  418,    0,  413,  419,
      415,  420,  416,  416,  417,  417,  421,    0,    0,  422,
        0,  418,  418,  423,  419,  419,  420,  420,    0,  424,
      419,  421,  421,  417,  422,  422,  418,  425,  423,  423,

        0,  426,    0,  427,  424,  424,    0,    0,  423,  424,
      428,    0,  425,  425,  429,  422,  426,  426,  427,  427,
      430,    0,  427,    0,    0,  428,  428,  431,    0,  429,
      429,  429,  426,  432,    0,  430,  430,    0,  433,  428,
      434,    0,  431,  431,  435,  430,  431,  436,  432,  432,
      437,    0,  432,  433,  433,  434,  434,  438,    0,  435,
      435,  439,  436,  436,    0,  437,  437,  440,    0,  441,
        0,    0,  438,  438,  438,  434,  439,  439,  442,  435,
      443,    0,  440,  440,  441,  441,  437,  444,    0,  445,
      441,  446,    0,  442,  442,  443,  443,  440,  447,    0,

        0,  448,  444,  444,  445,  445,  446,  446,  449,    0,
      445,  458,  446,  447,  447,    0,  448,  448,  444,  442,
      448,  457,    0,  449,  449,  453,  458,  458,  453,  459,
      449,  453,    0,  453,  460,    0,  457,  457,  461,    0,
      457,    0,    0,    0,  459,  459,  458,  453,  454,  460,
      460,  454,  462,  461,  461,    0,  454,  454,  454,  460,
      463,  454,    0,  464,    0,  465,  459,  462,  462,  454,
      468,  454,  454,  466,  461,  463,  463,    0,  464,  464,
      465,  465,  467,    0,    0,  468,  468,  468,  466,  466,
        0,  463,  464,    0,    0,    0,    0,  467,  467,  454,

      454,  456,  466,  472,  456,  469,    0,    0,    0,  456,
      456,  456,  467,  470,  456,  471,    0,  474,  472,  472,
      469,  469,  456,  473,  456,  456,  469,  475,  470,  470,
      471,  471,  474,  474,  470,  472,    0,    0,  473,  473,
      476,    0,  475,  475,  475,  477,  471,  478,    0,  479,
        0,  481,  456,  456,  474,  476,  476,  480,    0,  473,
      477,  477,  478,  478,  479,  479,  481,  481,  476,    0,
        0,  482,  480,  480,  480,    0,  483,    0,  484,    0,
      485,    0,  486,    0,    0,  477,  482,  482,  487,    0,
      482,  483,  483,  484,  484,  485,  485,  486,  486,  484,

      488,  485,    0,  487,  487,  489,  668,  483,  668,  668,
        0,  490,  668,  491,    0,  488,  488,  493,  486,  494,
      489,  489,  514,  487,    0,  488,  490,  490,  491,  491,
      492,    0,  493,  493,  494,  494,  492,  514,  514,  490,
      493,  489,    0,  518,  491,  492,  492,  498,    0,    0,
      498,    0,    0,  498,  504,  498,  516,  504,  518,  518,
      504,    0,  504,  511,  511,    0,    0,  511,    0,  498,
      499,  516,  516,  499,    0,  511,  504,  516,  499,  499,
      499,  508,  513,  499,  508,  513,  515,  508,  513,  508,
      513,  499,    0,  499,  499,  517,    0,  519,    0,    0,

        0,  515,  515,  508,  513,  511,  511,  515,    0,  520,
      517,  517,  519,  519,  521,  517,    0,  515,    0,  522,
        0,  499,  499,  501,  520,  520,  501,    0,    0,  521,
      521,  501,  501,  501,  522,  522,  501,  523,    0,  520,
        0,  524,  521,  525,  501,  527,  501,  501,  526,  522,
      528,    0,  523,  523,  523,  529,  524,  524,  525,  525,
      527,  527,    0,  526,  526,  528,  528,    0,    0,  528,
      529,  529,  530,    0,  501,  501,  507,  524,  526,  507,
      531,    0,    0,  525,  507,  507,  507,  530,  530,  507,
        0,  532,    0,  530,  533,  531,  531,  507,  534,  507,

      507,  535,    0,  536,    0,  531,  532,  532,  538,  533,
      533,  532,    0,  534,  534,  533,  535,  535,  536,  536,
      537,    0,    0,  538,  538,    0,  535,  507,  507,  510,
      539,    0,  510,  540,  534,  537,  537,  510,  510,  510,
      537,  541,  510,  542,    0,  539,  539,    0,  540,  540,
      510,  543,  510,  510,  544,    0,  541,  541,  542,  542,
      545,    0,  541,    0,    0,    0,  543,  543,  546,  544,
      544,  547,    0,  540,  548,  545,  545,  549,    0,  543,
      510,  510,  542,  546,  546,  545,  547,  547,  544,  548,
      548,  550,  549,  549,  551,    0,  552,    0,  553,    0,

      554,    0,    0,  546,  546,  549,  550,  550,    0,  551,
      551,  552,  552,  553,  553,  554,  554,  552,  555,  553,
      556,    0,  557,    0,  551,  558,    0,  559,  554,    0,
      560,    0,  561,  555,  555,  556,  556,  557,  557,    0,
      558,  558,  559,  559,  556,  560,  560,  561,  561,  562,
        0,    0,  563,    0,  555,  560,    0,    0,  557,  564,
        0,  565,    0,  566,  562,  562,  561,  563,  563,  567,
        0,  568,  562,  569,  564,  564,  565,  565,  566,  566,
        0,    0,    0,    0,  567,  567,  568,  568,  569,  569,
        0,  570,    0,    0,  570,  568,  565,  570,  573,  570,

        0,  573,    0,    0,  573,    0,  573,  576,  576,    0,
        0,  576,    0,  570,  569,  572,    0,    0,  572,  576,
      573,    0,    0,  572,  572,  572,  578,  579,  572,  578,
      580,    0,  578,    0,  578,    0,  572,    0,  572,  572,
      582,    0,  579,  579,  581,  580,  580,    0,  578,  576,
      576,    0,  579,    0,  583,  582,  582,  584,    0,  581,
      581,    0,    0,  582,    0,    0,  572,  572,  575,  583,
      583,  575,  584,  584,    0,    0,  575,  575,  575,  585,
      581,  575,  586,    0,    0,  587,    0,    0,  583,  575,
      589,  575,  575,  588,  585,  585,  590,  586,  586,  591,

      587,  587,  586,    0,    0,  589,  589,    0,  588,  588,
      592,  590,  590,  593,  591,  591,  594,    0,    0,  575,
      575,  587,  595,  588,  589,  592,  592,  590,  593,  593,
      591,  594,  594,  593,  596,  592,    0,  595,  595,  597,
        0,  598,    0,  599,    0,  600,    0,    0,  601,  596,
      596,    0,  594,  602,  597,  597,  598,  598,  599,  599,
      600,  600,  597,  601,  601,  600,  603,  601,  602,  602,
      604,    0,    0,  605,  599,  606,    0,  598,    0,    0,
      607,  603,  603,  608,    0,  604,  604,  604,  605,  605,
      606,  606,  606,  609,  605,  607,  607,  610,  608,  608,

      610,    0,    0,  610,    0,  610,  626,  608,  609,  609,
      613,  630,    0,  613,  607,    0,  613,    0,  613,  610,
      612,  626,  626,  612,    0,    0,  630,  630,  612,  612,
      612,  630,  613,  612,  618,  616,  616,  618,    0,  616,
      618,  612,  618,  612,  612,  619,  623,  616,  619,  623,
      628,  619,  623,  619,  623,    0,  618,  621,  621,  627,
        0,  621,    0,    0,  629,  628,  628,  619,  623,  621,
        0,  612,  612,  615,  627,  627,  615,  616,  616,  629,
      629,  615,  615,  615,  624,  628,  615,  624,  631,    0,
      624,    0,  624,  627,  615,  629,  615,  615,  632,  621,

      621,  633,    0,  631,  631,  634,  624,  635,    0,  631,
        0,  636,    0,  632,  632,    0,  633,  633,  637,  632,
      634,  634,  635,  635,  615,  615,  636,  636,    0,  633,
      634,  638,    0,  637,  637,    0,  639,    0,  640,  637,
      641,    0,  642,  635,    0,  643,  638,  638,  636,  645,
      638,  639,  639,  640,  640,  641,  641,  642,  642,  640,
      643,  643,  644,    0,  645,  645,    0,    0,    0,  646,
      641,  647,  639,  648,    0,  649,    0,  644,  644,  650,
        0,  643,    0,  644,  646,  646,  647,  647,  648,  648,
      649,  649,  651,    0,  650,  650,  652,    0,  648,    0,

        0,  653,    0,  655,    0,    0,    0,  651,  651,  654,
        0,  652,  652,  656,    0,  650,  653,  653,  655,  655,
      652,  657,  653,  658,  654,  654,  654,  659,  656,  656,
      660,    0,  661,    0,  662,    0,  657,  657,  658,  658,
      663,    0,  659,  659,  658,  660,  660,  661,  661,  662,
      662,  664,    0,    0,  665,  663,  663,  667,  666,    0,
      667,    0,    0,  667,    0,  667,  664,  664,  661,  665,
      665,    0,  664,  666,  666,  662,  669,  669,  671,  667,
      669,  671,    0,    0,  671,    0,  671,  672,  669,  674,
      672,    0,  676,  672,    0,  672,  673,  675,  673,  673,

      671,  677,  673,    0,  674,  674,  674,  676,  676,  672,
      678,    0,  675,  675,  675,  679,  677,  677,  669,  669,
        0,  680,    0,    0,  681,  678,  678,  682,    0,  676,
      679,  679,  683,    0,  684,  678,  680,  680,  677,  681,
      681,  685,  682,  682,  686,    0,  687,  683,  683,  684,
      684,    0,    0,    0,  682,    0,  685,  685,  688,  686,
      686,  687,  687,  689,    0,  686,  685,  687,  683,  691,
      684,  690,    0,  688,  688,    0,    0,    0,  689,  689,
      692,    0,    0,  693,  691,  691,  690,  690,  694,    0,
      689,    0,  690,    0,  695,  692,  692,  696,  693,  693,

      707,    0,    0,  694,  694,  691,  693,    0,  692,  695,
      695,  697,  696,  696,  697,  707,  707,  697,  698,  697,
      698,  698,    0,  694,  698,  699,  699,    0,  696,  699,
      695,    0,  701,  697,    0,  701,  702,  699,  701,  702,
      701,    0,  702,  703,  702,  703,  703,  704,    0,  703,
      704,    0,    0,  704,  701,  704,  706,  705,  702,  705,
      705,  708,    0,  705,  709,    0,    0,  699,  699,  704,
      711,  706,  706,  710,    0,  712,  708,  708,  713,  709,
      709,  706,    0,    0,    0,  711,  711,    0,  710,  710,
      712,  712,  714,  713,  713,  715,    0,  706,  709,  716,

      708,  717,    0,  710,  718,    0,  712,  714,  714,  719,
      715,  715,  720,  714,  716,  716,  717,  717,    0,  718,
      718,  721,  717,  722,  719,  719,  723,  720,  720,  724,
      719,    0,    0,  720,    0,  716,  721,  721,  722,  722,
      725,  723,  723,  726,  724,  724,  727,  723,  728,    0,
      724,  729,    0,  730,    0,  725,  725,    0,  726,  726,
        0,  727,  727,  728,  728,  722,  729,  729,  730,  730,
      731,  726,  733,  731,  734,    0,  731,  732,  731,  732,
      732,  735,    0,  732,  736,  728,  737,  733,  733,  734,
      734,  738,  731,    0,    0,    0,  735,  735,  739,  736,

      736,  737,  737,  736,    0,  740,  738,  738,  733,  741,
      734,  742,    0,  739,  739,  735,  737,  743,    0,  739,
      740,  740,  744,    0,  741,  741,  742,  742,  745,    0,
        0,  742,  743,  743,  746,    0,  747,  744,  744,  741,
      748,    0,    0,  745,  745,  749,  740,  750,    0,  746,
      746,  747,  747,  751,    0,  748,  748,    0,  745,  746,
      749,  749,  750,  750,  752,    0,    0,  752,  751,  751,
      752,  753,  752,  753,  753,  754,    0,  753,  755,    0,
      749,  748,  750,  756,  751,  757,  752,  758,    0,  759,
      754,  754,    0,  755,  755,  760,  754,  761,  756,  756,

      757,  757,  758,  758,  759,  759,    0,  762,  755,  763,
      760,  760,  761,  761,  764,    0,  765,  758,  766,    0,
        0,  757,  762,  762,  763,  763,  767,  762,  768,  764,
      764,  765,  765,  766,  766,  764,  769,    0,    0,    0,
      770,  767,  767,  768,  768,    0,    0,  772,    0,    0,
        0,  769,  769,  766,  771,  770,  770,  773,    0,  774,
        0,  769,  772,  772,  768,  770,  775,    0,    0,  771,
      771,  771,  773,  773,  774,  774,  775,  776,    0,  777,
      773,  775,  775,  772,    0,    0,  778,    0,  779,  774,
        0,  780,  776,  776,  777,  777,  781,    0,  782,    0,

      776,  778,  778,  779,  779,  778,  780,  780,  783,    0,
      784,  781,  781,  782,  782,  785,    0,  781,  779,    0,
        0,  786,    0,  783,  783,  784,  784,  787,    0,    0,
      785,  785,  788,    0,  789,  783,  786,  786,  790,    0,
        0,    0,  787,  787,    0,  784,  791,  788,  788,  789,
      789,  792,    0,  790,  790,    0,  786,  793,    0,  790,
      794,  791,  791,  795,    0,  796,  792,  792,    0,  797,
        0,  791,  793,  793,    0,  794,  794,  798,  795,  795,
      796,  796,  799,    0,  797,  797,    0,  800,    0,  792,
      797,  801,  798,  798,  795,  793,  794,  799,  799,  802,

      798,  796,  800,  800,  803,    0,  801,  801,  804,    0,
        0,    0,  805,    0,  802,  802,  806,  799,  807,  803,
      803,    0,    0,  804,  804,  803,  801,  805,  805,  804,
      802,  806,  806,  807,  807,    0,  808,  805,  809,    0,
      810,    0,  811,    0,  812,    0,  813,    0,  814,    0,
      806,  808,  808,  809,  809,  810,  810,  811,  811,  812,
      812,  813,  813,  814,  814,  815,    0,  816,    0,    0,
      810,    0,    0,    0,    0,    0,    0,  813,    0,    0,
      815,  815,  816,  816,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  815,  818,  818,  818,  818,

      818,  818,  818,  818,  818,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  822,  822,    0,    0,  822,  823,  823,  823,
      823,  823,  823,  824,  824,    0,    0,  824,  825,  825,
      825,  825,  825,  825,  826,  826,    0,    0,  826,  827,
      827,  827,  827,  827,  827,  828,    0,    0,    0,  828,
      828,  828,  828,  828,  829,  829,    0,  829,  829,  829,
      829,  829,  829,  830,    0,  830,  830,    0,    0,  830,
      830,  831,  831,  831,  831,  832,  832,  832,  832,  833,

      833,  833,  833,  834,  834,  834,  834,  834,  834,  835,
        0,    0,    0,  835,  835,  835,  835,  835,  836,  836,
      836,  836,  836,  836,  837,    0,    0,    0,  837,  837,
      837,  837,  837,  838,  838,  838,  838,  838,  838,  839,
        0,    0,    0,  839,  839,  839,  839,  839,  840,    0,
        0,    0,  840,  840,  840,  840,  840,  841,    0,    0,
      841,  841,  841,  841,  841,  841,  842,    0,    0,    0,
      842,  842,  842,  842,  842,  843,    0,    0,    0,  843,
      843,  843,  843,  843,  844,    0,    0,  844,  844,  844,
      844,  844,  844,  845,    0,    0,    0,  845,  845,  845,

      845,  845,  846,    0,    0,    0,  846,  846,  846,  846,
      846,  847,    0,    0,  847,  847,  847,  847,  847,  847,
      848,    0,    0,    0,  848,  848,  848,  848,  848,  849,
        0,    0,    0,  849,  849,  849,  849,  849,  850,    0,
        0,    0,  850,  850,  850,  850,  850,  851,    0,    0,
      851,  851,  851,  851,  851,  851,  852,    0,    0,    0,
      852,  852,  852,  852,  852,  853,    0,    0,  853,  853,
      853,  853,  853,  853,  854,    0,    0,  854,  854,  854,
      854,  854,  854,  855,    0,    0,    0,  855,  855,  855,
      855,  855,  856,    0,    0,  856,  856,  856,  856,  856,

      856,  857,    0,    0,  857,  857,  857,  857,  857,  857,
      858,    0,    0,    0,  858,  858,  858,  858,  858,  859,
        0,    0,  859,  859,  859,  859,  859,  859,  860,    0,
        0,  860,  860,  860,  860,  860,  860,  861,    0,    0,
      861,  861,  861,  861,  861,  861,  862,    0,    0,  862,
      862,  862,  862,  862,  862,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
#define INITIAL 0
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "main.hh"
#include "userLevelRewritingContext.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

int braceCount;
int parenCount;
string latexCode;
#define ID_MODE 1

#define CMD_MODE 2

#define FILE_NAME_MODE 3

#define STRING_MODE 4

#define LATEX_MODE 5

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 82 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 818 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4456 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 86 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 90 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 96 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 97 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 101 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 105 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FMOD)  // needed for FileTable
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 106 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)   // needed for FileTable
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 107 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)   // needed for FileTable
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 108 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 109 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 110 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 111 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 113 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 114 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 115 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 116 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 117 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 119 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 120 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 121 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
return KW_OREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 124 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 126 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 130 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 131 "../../../src/Mixfix/lexer.ll"
return KW_XUNIFY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 132 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_CONTEXT;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_OPS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 92:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 96:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 255 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 256 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 260 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDFM)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDOM)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK


case 144:
YY_RULE_SETUP
#line 273 "../../../src/Mixfix/lexer.ll"
// eat white space
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 274 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 146:
YY_RULE_SETUP
#line 282 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 287 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 148:
YY_RULE_SETUP
#line 296 "../../../src/Mixfix/lexer.ll"
latexCode += yytext;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 302 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = latexCode.c_str();
						  return LATEX_STRING;
						}
					    }
					  latexCode += yytext;
					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  latexCode += yytext;
					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 331 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 337 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 344 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 818 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 818 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 817);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 344 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"
