/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 167
#define YY_END_OF_BUFFER 168
static yyconst short int yy_accept[862] =
    {   0,
      164,  164,  164,  164,  164,  164,  153,  153,  155,  155,
        0,    0,  168,  166,  164,  165,  165,   96,  166,   94,
       96,   96,   96,   94,   95,   95,   96,  166,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   15,   96,   96,   96,   96,   96,   96,   96,
      152,  166,  150,  150,  150,  152,  150,  150,  152,  166,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  100,  166,
       98,  100,   98,  100,  100,   99,   98,  100,  166,  100,
      100,  154,  153,  167,  155,  156,  163,  157,  162,  162,

      158,  159,  157,  160,  161,  164,   96,    0,   96,    0,
        0,    0,   96,   96,   95,    0,   96,   96,   96,   96,
       96,   11,   96,   96,   96,   96,   96,   40,   96,   96,
       71,   96,   96,   96,   96,   96,   96,   96,   58,   96,
        5,   96,   96,   96,   14,   96,   70,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   35,   68,   96,   96,
       96,   96,   96,   96,   96,   96,   72,   96,   96,   96,
       96,   96,   96,   96,    6,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,  152,    0,  151,  152,    0,
        0,    0,  152,  152,  146,  149,  147,    0,  152,  152,

      152,  152,  152,  141,  152,  152,  152,  152,  140,  129,
      152,  152,  152,  152,  128,  152,  127,  152,  152,  152,
      152,  138,  152,  152,  152,  134,  152,  129,  152,  142,
      152,  152,  152,  152,  152,  101,  129,  152,  148,  100,
        0,  100,    0,    0,    0,  100,  100,    0,   97,   99,
        0,    5,  154,  153,  155,  157,  157,   96,    0,    2,
        2,   96,   96,   96,   63,   96,   96,   96,   62,   96,
       96,   96,   96,   96,   96,   96,   96,   16,   71,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   70,   96,   96,    6,   27,   96,   96,

       36,   96,   68,   96,   96,   96,   96,   96,   96,   10,
       96,   93,   19,   96,   96,   21,   72,   96,   96,   96,
       33,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   69,   96,   96,   96,   96,   96,   96,   96,  152,
        0,    2,    2,  152,  152,  139,  152,  152,  143,  152,
      152,  152,  152,  152,  152,  152,  152,  106,  152,  129,
      152,  144,  152,  152,  152,  152,  152,  152,  122,  121,
      152,  135,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  137,  100,    0,    2,    2,    0,    0,    0,
        0,    2,    2,    2,    1,    2,    2,   96,   96,   96,

       42,   96,   96,   96,   96,   96,   96,   48,   26,   96,
       20,   96,   96,   86,   22,   96,   96,   54,   96,   23,
       96,   96,   96,   96,    9,   25,   96,    3,   96,   96,
       96,   18,   96,    7,   96,   96,   89,   13,   96,   96,
       96,   96,   15,   96,   96,   96,   96,   96,   72,   96,
       96,   34,   67,   24,   96,   84,   96,   96,   59,   96,
       96,   96,   69,   96,    8,   96,   96,   55,   96,   96,
        0,    0,    2,    2,    2,    1,    2,    2,  152,  152,
      105,  152,  152,  117,  152,  152,  144,  152,  145,  152,
      152,  102,  152,  152,  152,  107,  152,  152,  108,  152,

      152,  109,    3,  152,  152,  136,  152,  152,  116,  111,
      152,  152,  130,  152,  152,  152,  152,  152,  152,  137,
        0,    0,    2,    2,    1,    2,    2,    0,    0,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,   83,
       96,   57,   87,   41,   51,   96,   96,   96,   96,   96,
       96,   76,   96,   81,   96,   96,   96,   96,   96,   96,
       96,   52,   96,   74,   90,   28,   96,   96,   96,   96,
       96,   56,   17,   50,   96,   96,   12,   96,   96,   96,
       96,   96,   96,   96,   67,   96,   60,   49,   96,   96,
       37,   31,   96,   66,   85,   43,   96,   96,    2,    2,

        1,    1,    1,    1,    1,    2,    2,    2,  104,  132,
      152,  152,  152,  123,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  103,  118,  152,  152,  152,  152,
      152,  152,  152,  110,  130,  152,  114,  152,  152,  152,
      129,    2,    2,    1,    1,    1,    1,    2,    2,    2,
        1,    1,    1,    1,    1,    2,    2,   38,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   78,   96,    4,   96,   96,   90,   53,   65,   27,
       96,   92,   56,   96,   96,   96,   96,   19,   82,   47,
       96,   30,   44,   96,   96,   96,   61,   96,   29,   32,

        1,    1,    1,    1,    1,    2,    2,  152,  152,  120,
      152,  152,    4,  115,  112,  152,  152,  152,  152,  152,
      152,  152,  121,  152,  152,  152,  152,  152,  152,  152,
      152,  152,    1,    1,    1,    1,    1,    2,    2,    1,
        1,   96,   57,   96,   75,   96,   46,   96,   96,   20,
       96,   96,   80,   96,   96,   79,   64,   96,   96,   91,
       77,   96,   21,   96,   96,   73,   39,    1,    1,  152,
      152,  152,  152,  152,  124,  152,  152,  152,  152,  122,
      152,  125,  152,  152,  152,  119,  152,  152,  131,  152,
        1,    1,   96,   96,   75,   96,   96,   26,   45,   22,

       96,   23,   96,   96,   93,   24,   96,  152,  152,  152,
      152,  152,  152,  152,  152,  108,  113,  152,  152,  152,
      114,  133,  131,  152,   96,   88,   96,   48,   54,   18,
       96,   96,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  126,   96,   96,  152,  152,  152,  152,  107,  152,
      111,  133,   96,  104,  105,  152,  116,   49,  152,  120,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   22,    8,   24,   25,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   13,   53,   54,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    6,    9,    9,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    5,    6
    } ;

static yyconst short int yy_base[907] =
    {   0,
        0,    0,   55,    0,  110,  163,  134,  140,  145,  149,
      216,  271,  313, 5208,  151, 5208, 5208,  167,  171, 5208,
      174, 5208,  180,  184,  187,  219,  205,  196,  226,  222,
      261,  282,  278,  305,  236,  286,  232,  291,  327,  338,
      349,  346,  335,  373,  411,  382,  384,  387,  405,  409,
      434,  215, 5208,  436,  453,  455,  465,  476,  478,  485,
      489,  530,  495,  501,  540,  506,  575,  562,  572,  585,
      607,  602,  612,  631,  634,  644,  654,  666,  264,  231,
     5208,  284, 5208,  458,  690,  527,  376,  484,  651,  503,
     5208,    0,  116, 5208,    0, 5208, 5208,    0, 5208, 5208,

     5208, 5208,  149, 5208, 5208,  331,  538,  269,  552,  691,
      274,  281,  583,  642,  699,  696,  702,  710,  713,  716,
      730,  727,  737,  744,  747,  750,  754,  767,  778,  780,
      785,  788,  797,  806,  799,  810,  819,  827,  831,  837,
      841,  848,  850,  855,  858,  861,  867,  869,  875,  879,
      888,  892,  896,  901,  913,  905,  918,  923,  930,  937,
      932,  940,  961,  967,  944,  970,  972,  978,  984,  995,
      998, 1002, 1019, 1015, 1022, 1027, 1045, 1039, 1050, 1052,
     1057, 1059, 1076, 1079, 1083, 1093,  296, 1103, 1107, 1115,
      323,  264, 1124, 1126, 1129, 1146, 1148,  785, 1150, 1160,

     1171, 1174, 1184, 1194, 1196, 1215, 1218, 1220, 1232, 1237,
     1242, 1255, 1259, 1272, 1283, 1285, 1296, 1302, 1306, 1320,
     1324, 1326, 1323, 1347, 1350, 1367, 1364, 1378, 1381, 1391,
     1401, 1403, 1405, 1415, 1425, 1427, 1429, 1446, 1448, 1089,
      356, 1154, 1465,  360,  256, 1265, 1245, 1478, 5208, 1477,
     1455, 1182,    0,  131,    0,    0, 5208, 1314,  417, 1518,
     1571, 1487, 1479, 1490, 1496, 1500, 1522, 1527, 1532, 1536,
     1549, 1574, 1540, 1580, 1582, 1588, 1553, 1591, 1601, 1605,
     1608, 1611, 1613, 1618, 1625, 1630, 1635, 1637, 1642, 1655,
     1648, 1659, 1666, 1672, 1677, 1679, 1683, 1689, 1696, 1700,

     1706, 1713, 1719, 1724, 1726, 1731, 1737, 1748, 1756, 1758,
     1760, 1762, 1766, 1779, 1783, 1785, 1790, 1792, 1802, 1809,
     1811, 1822, 1828, 1831, 1833, 1835, 1839, 1842, 1860, 1863,
     1868, 1872, 1877, 1886, 1889, 1894, 1896, 1898, 1903, 1917,
      419, 1943, 1996, 1946, 1957, 1960, 1978, 1980, 1974, 2013,
     2017, 2014, 2041, 2051, 2054, 2071, 2074, 2077, 2094, 2097,
     2099, 2111, 2121, 2131, 2134, 2144, 2148, 2161, 2158, 2179,
     2181, 2191, 2201, 2203, 2213, 2223, 2225, 2236, 2250, 2253,
     2263, 2274, 2280, 1900,  423, 2324, 2377,  246,  237,  440,
      239,    0,  213, 2299, 2430,  106, 2483, 1968, 1936, 2169,

     1926, 2199, 2156, 2286, 2006, 2060, 2293, 1954, 2306, 2312,
     2317, 2330, 2334, 2341, 2360, 2343, 2355, 2381, 2383, 2395,
     2388, 2386, 2391, 2424, 2418, 2438, 2441, 2444, 2447, 2451,
     2455, 2476, 2487, 2489, 2494, 2497, 2500, 2506, 2514, 2517,
     2519, 2523, 2531, 2536, 2541, 2548, 2553, 2558, 2565, 2571,
     2576, 2578, 2582, 2588, 2596, 2599, 2605, 2608, 2613, 2618,
     2630, 2627, 2637, 2639, 2644, 2650, 2657, 2647, 2661, 2667,
      463,  230,  211, 2692,  202, 2715,  406, 2768, 2681, 2686,
     2698, 2711, 2725, 2737, 2749, 2771, 2775, 2794, 2739, 2798,
     2808, 2819, 2822, 2832, 2842, 2844, 2854, 2856, 2867, 2879,

     2881, 2885, 2898, 2902, 2908, 2920, 2922, 2932, 2942, 2944,
     2946, 2966, 2968, 2970, 2972, 2989, 2991, 2994, 3011, 3013,
      512,  210,  182, 3038, 3061,  532, 3114,  188,  175, 3045,
      682,    0, 3167, 3072,  159, 3220, 2232,  150, 3073, 2708,
     3069, 2751, 2777, 2830, 2850, 2910, 3016, 3078, 3080, 2999,
     3083, 2862, 3039, 3102, 3107, 3110, 3121, 3124, 3131, 3134,
     3138, 3145, 3171, 3173, 3178, 3181, 3184, 3202, 3190, 3216,
     3192, 3230, 3227, 3234, 3239, 3237, 3257, 3259, 3261, 3269,
     3271, 3278, 3280, 3291, 3297, 3300, 3302, 3305, 3308, 3322,
     3319, 3328, 3331, 3333, 3336, 3339, 3341, 3353, 3372, 1185,

     3403, 3379,    0,  136, 3456, 3379,  135, 3414, 3375, 3417,
     3427, 3429, 3459, 3470, 3473, 3476, 3487, 3498, 3501, 3511,
     3515, 3525, 3529, 3547, 3551, 3553, 3557, 3570, 3574, 3584,
     3588, 3598, 3601, 3621, 3623, 3625, 3643, 3645, 3656, 3667,
     3669, 3694, 1210, 3717, 3701,  124, 3770, 3477,  109, 3728,
     3729, 1392, 3701,    0, 3739, 3754, 2264, 3373, 3415, 3425,
     3578, 3611, 3633, 3695, 3439, 3725, 3751, 3748, 3758, 3776,
     3778, 3665, 3780, 3782, 3787, 3790, 3800, 3804, 3809, 3817,
     3821, 3826, 3834, 3838, 3840, 3843, 3848, 3851, 3857, 3860,
     3868, 3870, 3877, 3880, 3882, 3887, 3890, 3894, 3904, 3907,

     3929, 2421, 3912,    0, 3938, 3939, 3470, 3942, 3947, 3960,
     3965, 3970, 3983, 3989, 3993, 4003, 4006, 4016, 4020, 4033,
     4043, 4046, 4056, 4060, 4070, 4073, 4083, 4093, 4095, 4107,
     4113, 4117, 4139, 3512, 4125,    0, 4152, 4159, 4166, 4179,
     4186, 4167, 3935, 4170, 4081, 4125, 4172, 4175, 4189, 4196,
     4198, 4200, 4202, 4207, 4220, 4224, 4227, 4229, 4231, 4233,
     4238, 4250, 4257, 4259, 4261, 4267, 4269, 4294, 4301, 4290,
     4300, 4303, 4313, 4323, 4327, 4333, 4344, 4350, 4355, 4361,
     4367, 4372, 4386, 4389, 4391, 4408, 4410, 4413, 4427, 4430,
     4440, 4405, 4331, 4441, 4309, 4444, 4449, 4452, 4458, 4466,

     4469, 4472, 4475, 4477, 4483, 4486, 4494, 4500, 4504, 4506,
     4517, 4527, 4531, 4541, 4552, 4555, 4558, 4569, 4572, 4582,
     4592, 4594, 4604, 4606, 4602, 4580, 4614, 4616, 4623, 4625,
     4627, 4635, 4646, 4652, 4656, 4658, 4670, 4680, 4693, 4697,
     4703, 4715, 4666, 4711, 4725, 4728, 4745, 4747, 4750, 4764,
     4769, 4775, 4721, 4786, 4788, 4792, 4798, 4683, 4809, 4811,
     5208, 4848, 4857, 4866, 4875, 4880, 4886, 4891, 4897, 4902,
     4908, 4917, 4926, 4934, 4939, 4943, 4947, 4952, 4961, 4967,
     4976, 4982, 4991, 5000, 5009, 5018, 5027, 5036, 5045, 5054,
     5063, 5072, 5081, 5090, 5099, 5108, 5117, 5126, 5135, 5144,

     5153, 5162, 5171, 5180, 5189, 5198
    } ;

static yyconst short int yy_def[907] =
    {   0,
      861,    1,  861,    3,  862,  862,  863,  863,  864,  864,
      865,  865,  861,  861,  861,  861,  861,  866,  867,  861,
      866,  861,  866,  866,  866,  866,  866,  861,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      868,  869,  861,  868,  868,  868,  868,  868,  868,  861,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  870,  871,
      861,  870,  861,  870,  870,  870,  870,  870,  861,  870,
      861,  872,  861,  861,  873,  861,  861,  874,  861,  861,

      861,  861,  861,  861,  861,  861,  866,  867,  866,  875,
      867,  867,  866,  866,  866,  861,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  868,  869,  868,  868,  876,
      869,  869,  868,  868,  868,  868,  868,  861,  868,  868,

      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,   67,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  870,
      871,  870,  877,  871,  871,  870,  870,  861,  861,  870,
      861,  870,  872,  861,  873,  874,  861,  866,  878,  879,
      879,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  868,
      880,  881,  881,  868,  868,  868,  868,   67,  868,  868,
      868,   67,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  870,  882,  883,  883,  861,  861,  878,
      878,  884,  261,  885,  886,  261,  887,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      880,  880,  343,  888,  343,  889,  343,  890,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,

      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      882,  882,  387,  891,  892,  387,  893,  861,  861,  885,
      885,  894,  886,  895,  533,  896,  884,  261,  897,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  888,  888,

      889,  898,  601,  601,  899,  884,  343,  900,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  891,  891,  892,  901,  644,  902,  884,  387,  903,
      895,  895,  894,  533,  904,  897,  897,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,

      898,  898,  894,  601,  905,  900,  900,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  901,  901,  894,  644,  906,  903,  903,  904,
      904,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  905,  905,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      906,  906,  866,  866,  866,  866,  866,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  866,  866,  866,  866,  866,  866,
      866,  866,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  866,  866,  868,  868,  868,  868,  868,  868,
      868,  868,  866,  868,  868,  868,  868,  866,  868,  868,
        0,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,

      861,  861,  861,  861,  861,  861
    } ;

static yyconst short int yy_nxt[5264] =
    {   0,
       14,   15,   16,   14,   17,   15,   15,   18,   19,   20,
       20,   21,   18,   22,   23,   24,   25,   26,   18,   18,
       18,   20,   18,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   18,   36,   18,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   18,
       18,   22,   22,   18,   18,   14,   15,   16,   14,   17,
       15,   15,   51,   52,   53,   53,   54,   55,   53,   56,
       55,   51,   51,   57,   58,   51,   53,   51,   59,   60,
       61,   51,   62,   63,   64,   65,   66,   51,   67,   68,
       51,   69,   70,   51,   71,   72,   51,   73,   74,   75,

       76,   77,   51,   51,   51,   51,   53,   53,   78,   51,
       14,   15,   16,   14,   17,   15,   15,  254,   80,   81,
       81,   82,  254,   83,   84,   85,  393,   86,   87,  523,
      537,   81,  254,   88,   89,   93,   94,  254,   94,   94,
       93,   93,   94,   90,   94,   94,   93,   96,  735,   96,
       96,   96,  106,   96,   96,  473,  106,  106,  257,  257,
      703,   91,   91,   14,   15,   16,   14,   17,   15,   15,
      393,   80,   81,   81,   82,  108,   83,   84,   85,  107,
       86,   87,  108,  653,   81,  113,   88,   89,  108,  249,
      109,  110,  108,  112,  114,  108,   90,  109,  110,  249,

      257,  257,  523,  109,  110,  109,  109,  109,  110,  109,
      109,  110,  521,  108,   91,   91,   97,  109,   99,   97,
      100,   97,  473,  186,   97,  101,  102,  108,  109,  116,
      108,  473,  471,  393,  108,  115,  115,  192,  103,  240,
      108,  390,  109,  110,  108,  109,  110,  109,  109,  109,
      110,  529,  117,  245,  118,  109,  110,  528,  244,  109,
      110,  120,  119,  139,  121,  142,  191,  104,  105,  108,
       97,   97,  241,   99,   97,  100,   97,  107,  140,   97,
      101,  102,  107,  111,  109,  110,  108,  242,  243,  122,
      108,  112,  241,  103,  108,  246,  112,  123,  124,  108,

      125,  109,  110,  126,  186,  109,  110,  242,  243,  109,
      110,  127,  861,  108,  109,  110,  143,  130,  192,  131,
      132,  128,  104,  105,  141,   97,  133,  129,  109,  110,
      144,  186,  106,  861,  145,  108,  106,  106,  861,  861,
      861,  134,  135,  108,  136,  192,  108,  137,  861,  138,
      109,  110,  146,  147,  108,  861,  148,  108,  109,  110,
      149,  109,  110,  151,  240,  861,  150,  861,  240,  109,
      110,  159,  109,  110,  861,  154,  861,  152,  245,  155,
      164,  108,  245,  153,  241,  160,  156,  157,  161,  158,
      108,  162,  108,  163,  861,  108,  109,  110,  165,  242,

      243,  861,  166,  861,  861,  109,  110,  109,  110,  167,
      109,  110,  179,  108,  175,  176,  180,  108,  168,  108,
      181,  861,  178,  861,  177,  258,  473,  340,  109,  110,
      606,  384,  109,  110,  109,  110,  861,  182,  183,  391,
      169,  472,  187,  170,  187,  522,  184,  193,  258,  188,
      171,  188,  861,  172,  185,  173,  174,  189,  190,  189,
      190,  187,  391,  187,  861,  861,  241,  861,  188,  194,
      188,  340,  247,  187,  861,  195,  189,  190,  189,  190,
      188,  242,  243,  196,  187,  472,  187,  861,  189,  190,
      861,  188,  241,  188,  189,  189,  197,  187,  189,  189,

      190,  189,  198,  187,  188,  861,  189,  242,  251,  187,
      188,  241,  189,  190,  187,  861,  188,  861,  189,  190,
      384,  188,  861,  861,  189,  190,  242,  243,  207,  189,
      190,  213,  199,  861,  522,  241,  189,  189,  187,  208,
      861,  252,  209,  250,  250,  188,  108,  861,  187,  210,
      242,  243,  523,  189,  190,  188,  648,  861,  861,  200,
      108,  109,  110,  189,  190,  861,  201,  202,  861,  203,
      187,  204,  205,  861,  206,  109,  116,  188,  861,  211,
      187,  861,  212,  187,  861,  189,  190,  188,  219,  861,
      188,  108,  861,  187,  260,  189,  190,  220,  189,  190,

      188,  221,  861,  214,  861,  215,  109,  110,  189,  190,
      187,  222,  861,  216,  223,  187,  861,  188,  217,  218,
      187,  861,  188,  861,  861,  189,  190,  188,  224,  861,
      189,  190,  861,  225,  861,  189,  190,  861,  861,  187,
      861,  227,  187,  861,  228,  229,  188,  226,  230,  188,
      108,  861,  187,  861,  189,  190,  261,  189,  190,  188,
      242,  242,  187,  235,  242,  109,  110,  189,  190,  188,
      231,  232,  242,  236,  187,  233,  234,  189,  190,  238,
      861,  188,  392,  861,  111,  392,  239,  237,  111,  189,
      190,  248,  249,  248,  248,  248,  248,  861,  241,  259,

      109,  109,  242,  242,  109,  109,  109,  108,  861,  109,
      108,  861,  109,  242,  243,  115,  115,  109,  108,  861,
      861,  108,  109,  110,  108,  109,  110,  861,  861,  861,
      861,  861,  861,  109,  110,  108,  109,  110,  108,  109,
      110,  262,  109,  109,  266,  108,  264,  109,  109,  265,
      109,  110,  108,  109,  110,  108,  263,  861,  108,  267,
      109,  110,  108,  861,  861,  861,  268,  109,  110,  861,
      109,  110,  269,  109,  110,  108,  861,  109,  110,  274,
      275,  861,  861,  270,  271,  272,  108,  861,  108,  861,
      109,  110,  273,  108,  189,  189,  108,  276,  189,  861,

      861,  109,  110,  109,  110,  108,  189,  108,  109,  110,
      278,  109,  110,  861,  108,  277,  861,  280,  108,  861,
      109,  110,  109,  110,  281,  861,  861,  108,  279,  109,
      110,  283,  861,  109,  110,  108,  189,  189,  284,  108,
      861,  282,  109,  110,  861,  108,  861,  861,  286,  108,
      109,  110,  285,  861,  109,  110,  108,  861,  108,  175,
      109,  110,  287,  108,  109,  110,  108,  861,  288,  108,
      861,  109,  110,  109,  110,  108,  290,  108,  109,  110,
      291,  109,  110,  108,  109,  110,  289,  108,  861,  861,
      109,  110,  109,  110,  292,  861,  108,  861,  109,  110,

      108,  861,  109,  110,  108,  293,  295,  297,  861,  108,
      294,  109,  110,  108,  861,  109,  110,  861,  861,  109,
      110,  108,  861,  296,  109,  110,  108,  861,  109,  110,
      298,  108,  861,  300,  299,  175,  109,  110,  108,  861,
      108,  109,  110,  301,  302,  108,  109,  110,  108,  861,
      861,  861,  108,  109,  110,  109,  110,  861,  861,  861,
      109,  110,  861,  109,  110,  307,  303,  109,  110,  108,
      861,  308,  304,  861,  305,  108,  861,  306,  108,  861,
      108,  861,  861,  309,  109,  110,  108,  861,  312,  310,
      109,  110,  108,  109,  110,  109,  110,  861,  313,  861,

      311,  109,  110,  108,  861,  861,  108,  109,  110,  319,
      108,  861,  861,  314,  318,  317,  315,  316,  109,  110,
      320,  109,  110,  108,  861,  109,  110,  108,  321,  861,
      108,  324,  861,  861,  322,  108,  861,  861,  109,  110,
      323,  327,  109,  110,  325,  109,  110,  108,  326,  861,
      109,  110,  328,  108,  861,  861,  861,  861,  108,  861,
      108,  861,  109,  110,  329,  108,  861,  108,  109,  110,
      330,  861,  331,  109,  110,  109,  110,  861,  861,  861,
      109,  110,  109,  110,  108,  861,  334,  108,  335,  861,
      861,  108,  332,  861,  333,  861,  861,  241,  336,  109,

      110,  187,  109,  110,  338,  861,  109,  110,  188,  861,
      861,  187,  242,  243,  861,  187,  189,  190,  188,  861,
      337,  339,  188,  341,  189,  189,  189,  190,  189,  861,
      189,  198,  187,  861,  187,  342,  189,  187,  861,  188,
      343,  188,  861,  861,  188,  861,  861,  189,  190,  189,
      190,  861,  189,  190,  187,  861,  187,  861,  187,  861,
      861,  188,  241,  188,  861,  188,  189,  189,  187,  189,
      190,  189,  190,  189,  190,  188,  861,  242,  251,  187,
      861,  861,  187,  189,  190,  392,  188,  191,  392,  188,
      241,  191,  187,  344,  189,  190,  345,  189,  190,  188,

      346,  204,  187,  861,  187,  242,  243,  189,  190,  188,
      392,  188,  244,  392,  861,  861,  244,  189,  190,  189,
      190,  347,  348,  187,  861,  861,  187,  861,  187,  861,
      188,  861,  349,  188,  861,  188,  861,  861,  189,  190,
      187,  189,  190,  189,  190,  187,  861,  188,  352,  861,
      187,  861,  188,  241,  350,  189,  190,  188,  861,  387,
      189,  190,  351,  187,  861,  189,  190,  187,  242,  243,
      188,  861,  861,  241,  188,  861,  386,  861,  189,  190,
      187,  353,  189,  190,  354,  861,  357,  188,  242,  243,
      358,  187,  861,  187,  355,  189,  190,  861,  188,  861,

      188,  359,  861,  356,  187,  861,  189,  190,  189,  190,
      187,  188,  360,  861,  187,  861,  861,  188,  861,  189,
      190,  188,  108,  861,  861,  189,  190,  861,  187,  189,
      190,  361,  187,  861,  187,  188,  861,  109,  110,  188,
      861,  188,  861,  189,  190,  362,  363,  189,  190,  189,
      190,  186,  861,  186,  365,  187,  861,  861,  187,  861,
      366,  186,  188,  861,  364,  188,  367,  368,  861,  861,
      189,  190,  187,  189,  190,  187,  861,  861,  369,  188,
      861,  371,  188,  861,  370,  861,  187,  189,  190,  187,
      189,  190,  532,  188,  111,  532,  188,  861,  111,  187,

      373,  189,  190,  861,  189,  190,  188,  374,  861,  187,
      372,  187,  376,  187,  189,  190,  188,  375,  188,  861,
      188,  861,  861,  187,  189,  190,  189,  190,  189,  190,
      188,  861,  378,  187,  861,  187,  861,  187,  189,  190,
      188,  380,  188,  377,  188,  861,  861,  379,  189,  190,
      189,  190,  189,  190,  187,  861,  187,  861,  861,  861,
      861,  188,  382,  188,  242,  242,  861,  381,  242,  189,
      190,  189,  190,  385,  242,  242,  242,  861,  242,  248,
      249,  248,  248,  248,  248,  241,  242,  108,  383,  388,
      861,  861,  389,  250,  250,  108,  861,  861,  108,  861,

      242,  243,  109,  110,  108,  861,  242,  242,  108,  861,
      109,  110,  399,  109,  110,  400,  242,  242,  392,  109,
      110,  392,  861,  109,  110,  861,  394,  392,  392,  398,
      108,  392,  861,  861,  861,  108,  861,  861,  395,  392,
      108,  396,  397,  861,  108,  109,  110,  402,  108,  401,
      109,  110,  403,  861,  861,  109,  110,  108,  861,  109,
      110,  108,  861,  109,  110,  861,  861,  861,  861,  392,
      392,  392,  109,  110,  392,  404,  109,  110,  410,  394,
      392,  392,  108,  861,  392,  861,  405,  861,  108,  406,
      108,  395,  392,  414,  396,  397,  108,  109,  110,  108,

      861,  407,  408,  109,  110,  109,  110,  861,  411,  108,
      861,  109,  110,  108,  109,  110,  108,  413,  409,  108,
      861,  108,  392,  392,  109,  110,  108,  412,  109,  110,
      861,  109,  110,  108,  109,  110,  109,  110,  108,  861,
      417,  109,  110,  108,  416,  108,  175,  861,  109,  110,
      108,  861,  415,  109,  110,  861,  108,  418,  109,  110,
      109,  110,  419,  108,  861,  109,  110,  108,  861,  861,
      423,  109,  110,  422,  108,  421,  425,  420,  109,  110,
      108,  861,  109,  110,  424,  108,  861,  108,  861,  109,
      110,  108,  861,  427,  861,  109,  110,  108,  861,  426,

      109,  110,  109,  110,  108,  861,  109,  110,  108,  429,
      861,  861,  109,  110,  108,  861,  428,  861,  861,  109,
      110,  108,  861,  109,  110,  861,  433,  108,  430,  109,
      110,  431,  108,  432,  108,  861,  109,  110,  861,  108,
      861,  434,  109,  110,  861,  108,  861,  109,  110,  109,
      110,  861,  861,  435,  109,  110,  108,  861,  437,  438,
      109,  110,  861,  861,  108,  861,  108,  436,  108,  861,
      108,  109,  110,  861,  108,  439,  861,  861,  440,  109,
      110,  109,  110,  109,  110,  109,  110,  108,  442,  109,
      110,  108,  441,  108,  861,  444,  861,  861,  108,  861,

      108,  861,  109,  110,  443,  861,  109,  110,  109,  110,
      108,  445,  447,  109,  110,  109,  110,  108,  861,  108,
      861,  449,  861,  861,  446,  109,  110,  448,  861,  861,
      108,  861,  109,  110,  109,  110,  108,  861,  451,  108,
      861,  108,  861,  108,  450,  109,  110,  108,  861,  861,
      108,  109,  110,  861,  109,  110,  109,  110,  109,  110,
      861,  861,  109,  110,  861,  109,  110,  861,  108,  452,
      861,  108,  453,  861,  861,  456,  108,  455,  454,  458,
      108,  861,  457,  109,  110,  108,  109,  110,  861,  459,
      461,  109,  110,  460,  108,  109,  110,  108,  462,  861,

      109,  110,  108,  464,  108,  861,  108,  861,  241,  109,
      110,  108,  109,  110,  861,  463,  861,  109,  110,  109,
      110,  109,  110,  242,  243,  187,  109,  110,  468,  861,
      467,  466,  188,  465,  108,  861,  470,  861,  861,  861,
      189,  190,  469,  392,  108,  861,  392,  861,  861,  109,
      110,  474,  392,  392,  187,  861,  392,  861,  475,  109,
      110,  188,  108,  476,  392,  187,  477,  478,  187,  189,
      190,  861,  188,  861,  861,  188,  108,  109,  110,  541,
      189,  190,  187,  189,  190,  479,  187,  550,  861,  188,
      861,  109,  110,  188,  392,  392,  392,  189,  190,  392,

      480,  189,  190,  861,  474,  392,  392,  861,  186,  392,
      482,  475,  540,  861,  108,  481,  476,  392,  186,  477,
      478,  187,  861,  483,  186,  187,  861,  861,  188,  109,
      110,  546,  188,  861,  861,  861,  189,  190,  861,  861,
      189,  190,  186,  861,  486,  861,  861,  392,  392,  187,
      861,  362,  186,  487,  861,  484,  188,  186,  488,  187,
      489,  485,  187,  861,  189,  190,  188,  861,  108,  188,
      490,  861,  861,  861,  189,  190,  861,  189,  190,  187,
      861,  861,  187,  109,  110,  187,  188,  861,  491,  188,
      861,  492,  188,  547,  189,  190,  861,  189,  190,  548,

      189,  190,  187,  494,  493,  187,  495,  187,  861,  188,
      861,  861,  188,  861,  188,  861,  861,  189,  190,  187,
      189,  190,  189,  190,  861,  861,  188,  861,  861,  187,
      861,  496,  497,  498,  189,  190,  188,  861,  861,  187,
      861,  499,  187,  861,  189,  190,  188,  861,  861,  188,
      500,  861,  187,  861,  189,  190,  187,  189,  190,  188,
      501,  861,  861,  188,  108,  861,  187,  189,  190,  187,
      861,  189,  190,  188,  861,  861,  188,  108,  502,  109,
      110,  189,  190,  503,  189,  190,  505,  187,  861,  187,
      861,  504,  109,  110,  188,  861,  188,  861,  544,  187,

      861,  506,  189,  190,  189,  190,  188,  108,  507,  187,
      861,  187,  542,  508,  189,  190,  188,  861,  188,  861,
      861,  187,  109,  110,  189,  190,  189,  190,  188,  861,
      510,  187,  861,  187,  543,  861,  189,  190,  188,  861,
      188,  396,  396,  861,  187,  396,  189,  190,  189,  190,
      509,  188,  861,  396,  861,  512,  861,  511,  187,  189,
      190,  187,  861,  514,  392,  188,  390,  392,  188,  513,
      390,  187,  861,  189,  190,  515,  189,  190,  188,  861,
      516,  861,  187,  396,  396,  861,  189,  190,  187,  188,
      861,  861,  861,  861,  108,  188,  517,  189,  190,  392,

      518,  108,  392,  189,  190,  111,  861,  393,  861,  109,
      110,  861,  519,  861,  108,  861,  109,  110,  861,  861,
      108,  531,  549,  520,  392,  108,  861,  392,  545,  109,
      110,  861,  524,  392,  392,  109,  110,  392,  108,  551,
      109,  110,  108,  861,  525,  392,  861,  526,  527,  108,
      861,  108,  861,  109,  110,  861,  552,  109,  110,  861,
      861,  554,  553,  108,  109,  110,  109,  110,  108,  861,
      555,  861,  861,  861,  861,  392,  392,  392,  109,  110,
      392,  861,  861,  109,  110,  524,  392,  392,  557,  108,
      392,  108,  861,  558,  108,  861,  108,  525,  392,  108,

      526,  527,  556,  108,  109,  110,  109,  110,  560,  109,
      110,  109,  110,  861,  109,  110,  861,  861,  109,  110,
      562,  532,  861,  191,  532,  559,  108,  191,  392,  392,
      532,  563,  108,  532,  564,  861,  861,  561,  534,  532,
      532,  109,  110,  532,  861,  861,  108,  109,  110,  108,
      861,  532,  108,  535,  536,  108,  861,  861,  861,  108,
      565,  109,  110,  108,  109,  110,  861,  109,  110,  861,
      109,  110,  861,  566,  109,  110,  861,  861,  109,  110,
      567,  532,  532,  392,  108,  861,  392,  568,  861,  861,
      861,  539,  396,  396,  569,  108,  396,  108,  861,  109,

      110,  570,  108,  861,  396,  108,  392,  392,  108,  861,
      109,  110,  109,  110,  108,  861,  571,  109,  110,  861,
      109,  110,  108,  109,  110,  108,  573,  108,  861,  109,
      110,  108,  572,  861,  396,  396,  861,  109,  110,  108,
      109,  110,  109,  110,  108,  861,  109,  110,  576,  108,
      575,  577,  861,  861,  109,  110,  108,  861,  574,  109,
      110,  108,  861,  861,  109,  110,  108,  861,  579,  861,
      861,  109,  110,  108,  861,  578,  109,  110,  581,  108,
      861,  109,  110,  861,  108,  580,  108,  861,  109,  110,
      108,  582,  861,  861,  109,  110,  108,  861,  583,  109,

      110,  109,  110,  584,  108,  109,  110,  108,  317,  861,
      861,  109,  110,  108,  861,  861,  108,  861,  861,  109,
      110,  108,  109,  110,  861,  585,  108,  861,  109,  110,
      586,  109,  110,  589,  861,  108,  109,  110,  108,  587,
      861,  109,  110,  861,  861,  108,  861,  108,  861,  588,
      109,  110,  108,  109,  110,  108,  590,  861,  108,  591,
      109,  110,  109,  110,  861,  108,  861,  109,  110,  108,
      109,  110,  861,  109,  110,  108,  592,  861,  593,  595,
      109,  110,  861,  861,  109,  110,  596,  594,  597,  187,
      109,  110,  392,  861,  187,  392,  188,  598,  191,  861,

      473,  188,  861,  861,  189,  190,  187,  861,  609,  189,
      190,  861,  861,  188,  600,  532,  108,  861,  532,  187,
      861,  189,  190,  602,  532,  532,  188,  861,  532,  610,
      603,  109,  110,  187,  189,  190,  532,  861,  604,  605,
      188,  861,  861,  611,  612,  187,  861,  187,  189,  190,
      861,  861,  188,  861,  188,  861,  861,  187,  861,  108,
      189,  190,  189,  190,  188,  861,  532,  532,  392,  613,
      861,  392,  189,  190,  109,  110,  608,  477,  477,  187,
      660,  477,  861,  187,  861,  108,  188,  861,  614,  477,
      188,  392,  392,  861,  189,  190,  861,  861,  189,  190,

      109,  110,  187,  861,  861,  661,  187,  861,  362,  188,
      861,  861,  362,  188,  861,  615,  187,  189,  190,  477,
      477,  189,  190,  188,  861,  861,  362,  187,  861,  861,
      187,  189,  190,  617,  188,  861,  616,  188,  108,  861,
      187,  861,  189,  190,  861,  189,  190,  188,  861,  861,
      187,  618,  187,  109,  110,  189,  190,  188,  108,  188,
      861,  619,  187,  861,  187,  189,  190,  189,  190,  188,
      108,  188,  861,  109,  110,  187,  861,  189,  190,  189,
      190,  620,  188,  861,  621,  109,  110,  187,  861,  187,
      189,  190,  624,  187,  188,  861,  188,  861,  622,  861,

      188,  623,  189,  190,  189,  190,  187,  861,  189,  190,
      187,  861,  861,  188,  861,  625,  187,  188,  108,  861,
      861,  189,  190,  188,  861,  189,  190,  627,  187,  626,
      187,  189,  190,  109,  110,  188,  628,  188,  861,  861,
      187,  861,  861,  189,  190,  189,  190,  188,  662,  629,
      187,  861,  187,  861,  187,  189,  190,  188,  861,  188,
      861,  188,  861,  861,  861,  189,  190,  189,  190,  189,
      190,  630,  861,  632,  187,  633,  187,  861,  187,  631,
      187,  188,  861,  188,  861,  188,  861,  188,  861,  189,
      190,  189,  190,  189,  190,  189,  190,  187,  861,  187,

      861,  861,  187,  636,  188,  861,  188,  108,  640,  188,
      634,  635,  189,  190,  189,  190,  637,  189,  190,  187,
      861,  187,  109,  110,  108,  638,  188,  861,  188,  861,
      639,  861,  861,  861,  189,  190,  189,  190,  392,  109,
      110,  392,  641,  666,  244,  392,  523,  108,  392,  861,
      861,  111,  663,  393,  861,  861,  861,  861,  861,  861,
      643,  532,  109,  110,  532,  861,  668,  531,  861,  645,
      532,  532,  532,  392,  532,  532,  392,  108,  111,  390,
      533,  538,  532,  861,  646,  647,  108,  861,  108,  861,
      861,  108,  109,  110,  652,  657,  861,  861,  658,  861,

      861,  109,  110,  109,  110,  665,  109,  110,  659,  861,
      108,  861,  532,  532,  392,  108,  664,  392,  108,  861,
      861,  667,  650,  526,  526,  109,  110,  526,  861,  108,
      109,  110,  108,  109,  110,  526,  669,  392,  392,  108,
      861,  861,  108,  670,  109,  110,  108,  109,  110,  671,
      861,  861,  672,  108,  109,  110,  861,  109,  110,  861,
      673,  109,  110,  861,  861,  526,  526,  532,  109,  110,
      532,  675,  861,  861,  861,  534,  532,  532,  674,  108,
      532,  108,  861,  861,  861,  861,  108,  861,  532,  108,
      535,  536,  108,  861,  109,  110,  109,  110,  108,  676,

      108,  109,  110,  861,  109,  110,  861,  109,  110,  861,
      108,  861,  861,  109,  110,  109,  110,  861,  532,  532,
      532,  677,  861,  532,  108,  109,  110,  861,  655,  535,
      535,  679,  678,  535,  682,  108,  861,  680,  108,  109,
      110,  535,  108,  532,  532,  108,  861,  108,  861,  861,
      109,  110,  681,  109,  110,  861,  861,  109,  110,  861,
      109,  110,  109,  110,  686,  108,  861,  108,  861,  108,
      861,  535,  535,  683,  684,  685,  861,  108,  861,  108,
      109,  110,  109,  110,  109,  110,  108,  861,  108,  861,
      688,  861,  109,  110,  109,  110,  861,  687,  689,  108,

      861,  109,  110,  109,  110,  108,  861,  690,  108,  861,
      108,  861,  692,  108,  109,  110,  108,  861,  861,  861,
      109,  110,  691,  109,  110,  109,  110,  108,  109,  110,
      108,  109,  110,  694,  861,  693,  108,  861,  695,  108,
      861,  108,  109,  110,  108,  109,  110,  108,  861,  108,
      696,  109,  110,  697,  109,  110,  109,  110,  861,  109,
      110,  108,  109,  110,  109,  110,  861,  861,  861,  861,
      861,  861,  392,  699,  698,  392,  109,  110,  191,  532,
      473,  108,  532,  187,  861,  191,  861,  601,  477,  477,
      188,  861,  477,  861,  600,  861,  109,  110,  189,  190,

      477,  702,  700,  532,  861,  861,  532,  861,  708,  861,
      861,  602,  532,  532,  392,  861,  532,  392,  603,  861,
      471,  861,  607,  108,  532,  187,  604,  605,  861,  861,
      477,  477,  188,  108,  861,  187,  707,  187,  109,  110,
      189,  190,  188,  861,  188,  861,  861,  108,  109,  110,
      189,  190,  189,  190,  532,  532,  532,  742,  861,  532,
      710,  861,  109,  110,  705,  604,  604,  187,  743,  604,
      392,  709,  471,  392,  188,  747,  471,  604,  187,  532,
      532,  187,  189,  190,  187,  188,  526,  526,  188,  861,
      526,  188,  861,  189,  190,  187,  189,  190,  526,  189,

      190,  711,  188,  861,  712,  362,  187,  604,  604,  187,
      189,  190,  532,  188,  244,  532,  188,  861,  244,  187,
      861,  189,  190,  187,  189,  190,  188,  861,  526,  526,
      188,  713,  861,  187,  189,  190,  714,  187,  189,  190,
      188,  861,  861,  715,  188,  861,  861,  861,  189,  190,
      716,  861,  189,  190,  717,  187,  861,  719,  718,  187,
      861,  187,  188,  861,  861,  187,  188,  861,  188,  861,
      189,  190,  188,  861,  189,  190,  189,  190,  187,  861,
      189,  190,  187,  861,  861,  188,  108,  861,  721,  188,
      861,  720,  187,  189,  190,  722,  187,  189,  190,  188,

      861,  109,  110,  188,  861,  861,  187,  189,  190,  187,
      861,  189,  190,  188,  861,  861,  188,  744,  723,  108,
      861,  189,  190,  724,  189,  190,  726,  725,  727,  187,
      861,  187,  861,  187,  109,  110,  188,  861,  188,  269,
      188,  108,  861,  861,  189,  190,  189,  190,  189,  190,
      728,  187,  861,  187,  861,  861,  109,  110,  188,  861,
      188,  861,  745,  861,  187,  861,  189,  190,  189,  190,
      730,  188,  729,  108,  861,  187,  861,  187,  861,  189,
      190,  861,  188,  861,  188,  861,  861,  861,  109,  110,
      189,  190,  189,  190,  392,  861,  861,  392,  731,  732,

      244,  532,  523,  108,  532,  861,  861,  244,  861,  644,
      535,  535,  861,  861,  535,  861,  643,  532,  109,  110,
      532,  861,  535,  734,  746,  645,  532,  532,  392,  532,
      532,  392,  532,  108,  521,  111,  649,  533,  532,  532,
      646,  647,  532,  861,  861,  390,  861,  654,  109,  110,
      739,  652,  535,  535,  392,  861,  108,  392,  748,  108,
      390,  741,  538,  861,  861,  861,  108,  861,  532,  532,
      532,  109,  110,  532,  109,  110,  657,  750,  737,  646,
      646,  109,  110,  646,  108,  751,  108,  861,  108,  861,
      108,  646,  861,  532,  532,  108,  749,  861,  108,  109,

      110,  109,  110,  109,  110,  109,  110,  753,  108,  861,
      109,  110,  108,  109,  110,  861,  861,  108,  754,  756,
      752,  646,  646,  109,  110,  108,  861,  109,  110,  108,
      861,  755,  109,  110,  108,  861,  861,  861,  861,  861,
      109,  110,  108,  861,  109,  110,  108,  861,  108,  109,
      110,  108,  757,  861,  758,  861,  108,  109,  110,  108,
      861,  109,  110,  109,  110,  108,  109,  110,  108,  760,
      759,  109,  110,  762,  109,  110,  108,  861,  108,  861,
      109,  110,  861,  109,  110,  108,  861,  761,  108,  861,
      108,  109,  110,  109,  110,  108,  861,  763,  108,  861,

      109,  110,  108,  109,  110,  109,  110,  861,  861,  861,
      109,  110,  108,  109,  110,  108,  861,  109,  110,  861,
      861,  604,  604,  767,  764,  604,  765,  109,  110,  532,
      109,  110,  532,  604,  861,  191,  766,  601,  532,  392,
      861,  532,  392,  108,  471,  471,  704,  607,  861,  861,
      187,  702,  861,  861,  861,  187,  861,  188,  109,  110,
      769,  707,  188,  604,  604,  189,  190,  770,  187,  861,
      189,  190,  771,  187,  861,  188,  861,  861,  187,  861,
      188,  861,  861,  189,  190,  188,  861,  861,  189,  190,
      861,  187,  861,  189,  190,  861,  861,  187,  188,  861,

      861,  187,  861,  774,  188,  772,  189,  190,  188,  861,
      773,  187,  189,  190,  187,  861,  189,  190,  188,  861,
      861,  188,  861,  861,  187,  861,  189,  190,  187,  189,
      190,  188,  861,  861,  861,  188,  861,  861,  775,  189,
      190,  187,  861,  189,  190,  861,  861,  861,  188,  861,
      776,  187,  861,  778,  187,  861,  189,  190,  188,  861,
      777,  188,  779,  861,  187,  861,  189,  190,  187,  189,
      190,  188,  780,  861,  861,  188,  861,  861,  187,  189,
      190,  187,  861,  189,  190,  188,  861,  861,  188,  108,
      781,  187,  861,  189,  190,  782,  189,  190,  188,  861,

      861,  187,  784,  187,  109,  110,  189,  190,  188,  861,
      188,  861,  783,  861,  861,  187,  189,  190,  189,  190,
      861,  187,  188,  795,  861,  187,  787,  785,  188,  786,
      189,  190,  188,  108,  646,  646,  189,  190,  646,  532,
      189,  190,  532,  861,  861,  244,  646,  644,  109,  110,
      788,  861,  532,  861,  861,  532,  790,  789,  521,  392,
      736,  734,  392,  796,  861,  521,  392,  649,  521,  392,
      861,  861,  521,  861,  792,  108,  646,  646,  108,  532,
      108,  739,  532,  108,  861,  390,  532,  654,  390,  532,
      109,  110,  390,  109,  110,  109,  110,  108,  109,  110,

      793,  741,  861,  861,  108,  861,  108,  861,  108,  861,
      108,  861,  109,  110,  797,  108,  658,  794,  798,  109,
      110,  109,  110,  109,  110,  109,  110,  861,  108,  800,
      109,  110,  108,  861,  861,  108,  801,  108,  861,  108,
      861,  108,  799,  109,  110,  861,  108,  109,  110,  802,
      109,  110,  109,  110,  109,  110,  109,  110,  108,  861,
      804,  109,  110,  861,  861,  108,  861,  108,  861,  108,
      861,  861,  861,  109,  110,  108,  861,  108,  861,  803,
      109,  110,  109,  110,  109,  110,  805,  861,  806,  861,
      109,  110,  109,  110,  532,  861,  861,  532,  187,  861,

      471,  532,  704,  471,  532,  188,  807,  471,  187,  861,
      861,  187,  861,  189,  190,  188,  769,  108,  188,  861,
      861,  187,  861,  189,  190,  861,  189,  190,  188,  861,
      861,  187,  109,  110,  808,  187,  189,  190,  188,  108,
      811,  187,  188,  861,  809,  810,  189,  190,  188,  861,
      189,  190,  187,  861,  109,  110,  189,  190,  187,  188,
      825,  812,  813,  187,  861,  188,  861,  189,  190,  187,
      188,  861,  861,  189,  190,  187,  188,  861,  189,  190,
      187,  861,  188,  816,  189,  190,  861,  188,  815,  861,
      189,  190,  817,  814,  187,  189,  190,  187,  861,  187,

      861,  188,  861,  861,  188,  532,  188,  521,  532,  189,
      190,  521,  189,  190,  189,  190,  187,  861,  187,  861,
      861,  187,  861,  188,  820,  188,  818,  819,  188,  861,
      861,  189,  190,  189,  190,  187,  189,  190,  187,  861,
      532,  861,  188,  532,  861,  188,  521,  861,  736,  108,
      189,  190,  108,  189,  190,  861,  822,  108,  861,  821,
      108,  861,  792,  861,  109,  110,  108,  109,  110,  824,
      823,  861,  109,  110,  108,  109,  110,  108,  861,  826,
      108,  109,  110,  108,  861,  108,  861,  828,  827,  109,
      110,  108,  109,  110,  108,  109,  110,  829,  109,  110,

      109,  110,  108,  861,  830,  861,  109,  110,  187,  109,
      110,  861,  187,  861,  187,  188,  861,  109,  110,  188,
      831,  188,  861,  189,  190,  187,  861,  189,  190,  189,
      190,  835,  188,  833,  861,  187,  861,  834,  832,  187,
      189,  190,  188,  861,  861,  861,  188,  861,  861,  187,
      189,  190,  861,  861,  189,  190,  188,  861,  641,  358,
      187,  836,  861,  187,  189,  190,  187,  188,  861,  837,
      188,  861,  861,  188,  861,  189,  190,  187,  189,  190,
      187,  189,  190,  641,  188,  861,  861,  188,  108,  861,
      187,  861,  189,  190,  861,  189,  190,  188,  861,  839,

      187,  838,  187,  109,  110,  189,  190,  188,  861,  188,
      108,  861,  187,  861,  187,  189,  190,  189,  190,  188,
      840,  188,  108,  841,  108,  109,  110,  189,  190,  189,
      190,  108,  861,  108,  861,  108,  861,  109,  110,  109,
      110,  842,  861,  108,  861,  658,  109,  110,  109,  110,
      109,  110,  861,  861,  187,  861,  843,  564,  109,  110,
      187,  188,  861,  861,  187,  861,  187,  188,  844,  189,
      190,  188,  861,  188,  108,  189,  190,  861,  187,  189,
      190,  189,  190,  861,  861,  188,  861,  861,  187,  109,
      110,  108,  845,  189,  190,  188,  861,  848,  846,  861,

      847,  187,  861,  189,  190,  187,  109,  110,  188,  683,
      861,  187,  188,  850,  849,  861,  189,  190,  188,  108,
      189,  190,  851,  187,  861,  861,  189,  190,  641,  108,
      188,  861,  861,  187,  109,  110,  187,  861,  189,  190,
      188,  861,  861,  188,  109,  110,  852,  861,  189,  190,
      853,  189,  190,  187,  854,  187,  861,  855,  187,  858,
      188,  861,  188,  861,  861,  188,  861,  861,  189,  190,
      189,  190,  187,  189,  190,  861,  861,  187,  856,  188,
      861,  861,  861,  187,  188,  861,  861,  189,  190,  484,
      188,  857,  189,  190,  187,  861,  187,  861,  189,  190,

      187,  188,  861,  188,  861,  861,  187,  188,  861,  189,
      190,  189,  190,  188,  861,  189,  190,  187,  861,  187,
      861,  189,  190,  861,  188,  861,  188,  861,  861,  861,
      861,  859,  189,  190,  189,  190,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  860,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   98,   98,   98,   98,   98,
       98,   98,   98,   98,  107,  107,  861,  861,  107,  111,
      111,  111,  111,  111,  111,  186,  186,  861,  861,  186,

      191,  191,  191,  191,  191,  191,  240,  240,  861,  861,
      240,  244,  244,  244,  244,  244,  244,  253,  861,  861,
      861,  253,  253,  253,  253,  253,  255,  255,  861,  255,
      255,  255,  255,  255,  255,  256,  861,  256,  256,  861,
      861,  256,  256,  258,  258,  258,  258,  340,  340,  340,
      340,  384,  384,  384,  384,  390,  390,  390,  390,  390,
      390,  393,  861,  861,  861,  393,  393,  393,  393,  393,
      471,  471,  471,  471,  471,  471,  473,  861,  861,  861,
      473,  473,  473,  473,  473,  521,  521,  521,  521,  521,
      521,  523,  861,  861,  861,  523,  523,  523,  523,  523,

      392,  861,  861,  861,  392,  392,  392,  392,  392,  530,
      861,  861,  530,  530,  530,  530,  530,  530,  533,  861,
      861,  861,  533,  533,  533,  533,  533,  538,  861,  861,
      861,  538,  538,  538,  538,  538,  599,  861,  861,  599,
      599,  599,  599,  599,  599,  601,  861,  861,  861,  601,
      601,  601,  601,  601,  607,  861,  861,  861,  607,  607,
      607,  607,  607,  642,  861,  861,  642,  642,  642,  642,
      642,  642,  644,  861,  861,  861,  644,  644,  644,  644,
      644,  649,  861,  861,  861,  649,  649,  649,  649,  649,
      532,  861,  861,  861,  532,  532,  532,  532,  532,  651,

      861,  861,  651,  651,  651,  651,  651,  651,  654,  861,
      861,  861,  654,  654,  654,  654,  654,  656,  861,  861,
      656,  656,  656,  656,  656,  656,  701,  861,  861,  701,
      701,  701,  701,  701,  701,  704,  861,  861,  861,  704,
      704,  704,  704,  704,  706,  861,  861,  706,  706,  706,
      706,  706,  706,  733,  861,  861,  733,  733,  733,  733,
      733,  733,  736,  861,  861,  861,  736,  736,  736,  736,
      736,  738,  861,  861,  738,  738,  738,  738,  738,  738,
      740,  861,  861,  740,  740,  740,  740,  740,  740,  768,
      861,  861,  768,  768,  768,  768,  768,  768,  791,  861,

      861,  791,  791,  791,  791,  791,  791,   13,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861
    } ;

static yyconst short int yy_chk[5264] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,   93,    5,    5,
        5,    5,   93,    5,    5,    5,  396,    5,    5,  649,
      396,    5,  254,    5,    5,    7,    7,  254,    7,    7,
        7,    8,    8,    5,    8,    8,    8,    9,  646,    9,
        9,   10,   15,   10,   10,  607,   15,   15,  103,  103,
      604,    5,    5,    6,    6,    6,    6,    6,    6,    6,
      538,    6,    6,    6,    6,   18,    6,    6,    6,   19,
        6,    6,   21,  535,    6,   21,    6,    6,   23,  529,
       18,   18,   24,   19,   23,   25,    6,   21,   21,  528,

      103,  103,  523,   23,   23,   28,   28,   24,   24,   28,
       25,   25,  522,   27,    6,    6,   11,   28,   11,   11,
       11,   11,  475,   52,   11,   11,   11,   26,   27,   27,
       30,  473,  472,  393,   29,   26,   26,   52,   11,   80,
       37,  391,   26,   26,   35,   30,   30,   28,   28,   29,
       29,  389,   29,   80,   29,   37,   37,  388,  245,   35,
       35,   30,   29,   35,   30,   37,  192,   11,   11,   31,
       11,   12,   79,   12,   12,   12,   12,  108,   35,   12,
       12,   12,  111,  112,   31,   31,   33,   79,   79,   31,
       32,  108,   82,   12,   36,   82,  111,   31,   31,   38,

       31,   33,   33,   31,  187,   32,   32,   82,   82,   36,
       36,   32,   13,   34,   38,   38,   38,   33,  187,   33,
       33,   32,   12,   12,   36,   12,   33,   32,   34,   34,
       38,  191,  106,    0,   38,   39,  106,  106,    0,    0,
        0,   34,   34,   43,   34,  191,   40,   34,    0,   34,
       39,   39,   39,   39,   42,    0,   39,   41,   43,   43,
       39,   40,   40,   40,  241,    0,   39,    0,  244,   42,
       42,   42,   41,   41,    0,   41,    0,   40,  241,   41,
       43,   44,  244,   40,   87,   42,   41,   41,   42,   41,
       46,   42,   47,   42,    0,   48,   44,   44,   44,   87,

       87,    0,   44,    0,    0,   46,   46,   47,   47,   44,
       48,   48,   48,   49,   46,   46,   48,   50,   44,   45,
       48,    0,   47,    0,   46,  259,  477,  341,   49,   49,
      477,  385,   50,   50,   45,   45,    0,   49,   49,  259,
       45,  341,   51,   45,   54,  385,   50,   54,  390,   51,
       45,   54,    0,   45,   50,   45,   45,   51,   51,   54,
       54,   55,  390,   56,    0,    0,   84,    0,   55,   56,
       56,  471,   84,   57,    0,   56,   55,   55,   56,   56,
       57,   84,   84,   57,   58,  471,   59,    0,   57,   57,
        0,   58,   88,   59,   60,   60,   58,   61,   60,   58,

       58,   59,   59,   63,   61,    0,   60,   88,   88,   64,
       63,   90,   61,   61,   66,    0,   64,    0,   63,   63,
      521,   66,    0,    0,   64,   64,   90,   90,   63,   66,
       66,   66,   61,    0,  521,   86,   60,   60,   62,   64,
        0,   90,   64,   86,   86,   62,  107,    0,   65,   64,
       86,   86,  526,   62,   62,   65,  526,    0,    0,   62,
      109,  107,  107,   65,   65,    0,   62,   62,    0,   62,
       68,   62,   62,    0,   62,  109,  109,   68,    0,   65,
       69,    0,   65,   67,    0,   68,   68,   69,   68,    0,
       67,  113,    0,   70,  113,   69,   69,   69,   67,   67,

       70,   69,    0,   67,    0,   67,  113,  113,   70,   70,
       72,   70,    0,   67,   70,   71,    0,   72,   67,   67,
       73,    0,   71,    0,    0,   72,   72,   73,   70,    0,
       71,   71,    0,   71,    0,   73,   73,    0,    0,   74,
        0,   72,   75,    0,   72,   73,   74,   71,   73,   75,
      114,    0,   76,    0,   74,   74,  114,   75,   75,   76,
       89,   89,   77,   75,   89,  114,  114,   76,   76,   77,
       74,   74,   89,   75,   78,   74,   74,   77,   77,   77,
        0,   78,  531,    0,  531,  531,   78,   76,  531,   78,
       78,   85,   85,   85,   85,   85,   85,    0,   85,  110,

      110,  110,   89,   89,  110,  116,  116,  115,    0,  116,
      117,    0,  110,   85,   85,  115,  115,  116,  118,    0,
        0,  119,  115,  115,  120,  117,  117,    0,    0,    0,
        0,    0,    0,  118,  118,  122,  119,  119,  121,  120,
      120,  117,  110,  110,  120,  123,  119,  116,  116,  119,
      122,  122,  124,  121,  121,  125,  118,    0,  126,  121,
      123,  123,  127,    0,    0,    0,  123,  124,  124,    0,
      125,  125,  124,  126,  126,  128,    0,  127,  127,  126,
      127,    0,    0,  125,  125,  125,  129,    0,  130,    0,
      128,  128,  125,  131,  198,  198,  132,  127,  198,    0,

        0,  129,  129,  130,  130,  133,  198,  135,  131,  131,
      130,  132,  132,    0,  134,  129,    0,  132,  136,    0,
      133,  133,  135,  135,  133,    0,    0,  137,  131,  134,
      134,  134,    0,  136,  136,  138,  198,  198,  135,  139,
        0,  133,  137,  137,    0,  140,    0,    0,  137,  141,
      138,  138,  136,    0,  139,  139,  142,    0,  143,  138,
      140,  140,  140,  144,  141,  141,  145,    0,  141,  146,
        0,  142,  142,  143,  143,  147,  143,  148,  144,  144,
      144,  145,  145,  149,  146,  146,  142,  150,    0,    0,
      147,  147,  148,  148,  144,    0,  151,    0,  149,  149,

      152,    0,  150,  150,  153,  146,  148,  150,    0,  154,
      147,  151,  151,  156,    0,  152,  152,    0,    0,  153,
      153,  155,    0,  149,  154,  154,  157,    0,  156,  156,
      151,  158,    0,  153,  152,  154,  155,  155,  159,    0,
      161,  157,  157,  155,  156,  160,  158,  158,  162,    0,
        0,    0,  165,  159,  159,  161,  161,    0,    0,    0,
      160,  160,    0,  162,  162,  161,  158,  165,  165,  163,
        0,  161,  159,    0,  159,  164,    0,  160,  166,    0,
      167,    0,    0,  162,  163,  163,  168,    0,  165,  163,
      164,  164,  169,  166,  166,  167,  167,    0,  166,    0,

      164,  168,  168,  170,    0,    0,  171,  169,  169,  169,
      172,    0,    0,  166,  168,  167,  166,  166,  170,  170,
      169,  171,  171,  174,    0,  172,  172,  173,  169,    0,
      175,  172,    0,    0,  170,  176,    0,    0,  174,  174,
      171,  174,  173,  173,  173,  175,  175,  178,  173,    0,
      176,  176,  174,  177,    0,    0,    0,    0,  179,    0,
      180,    0,  178,  178,  176,  181,    0,  182,  177,  177,
      177,    0,  178,  179,  179,  180,  180,    0,    0,    0,
      181,  181,  182,  182,  183,    0,  181,  184,  182,    0,
        0,  185,  179,    0,  180,    0,    0,  240,  182,  183,

      183,  186,  184,  184,  184,    0,  185,  185,  186,    0,
        0,  188,  240,  240,    0,  189,  186,  186,  188,    0,
      183,  185,  189,  190,  190,  190,  188,  188,  190,    0,
      189,  189,  193,    0,  194,  193,  190,  195,    0,  193,
      194,  194,    0,    0,  195,    0,    0,  193,  193,  194,
      194,    0,  195,  195,  196,    0,  197,    0,  199,    0,
        0,  196,  242,  197,    0,  199,  190,  190,  200,  196,
      196,  197,  197,  199,  199,  200,    0,  242,  242,  201,
        0,    0,  202,  200,  200,  600,  201,  600,  600,  202,
      252,  600,  203,  199,  201,  201,  201,  202,  202,  203,

      202,  200,  204,    0,  205,  252,  252,  203,  203,  204,
      643,  205,  643,  643,    0,    0,  643,  204,  204,  205,
      205,  203,  203,  206,    0,    0,  207,    0,  208,    0,
      206,    0,  205,  207,    0,  208,    0,    0,  206,  206,
      209,  207,  207,  208,  208,  210,    0,  209,  208,    0,
      211,    0,  210,  247,  206,  209,  209,  211,    0,  247,
      210,  210,  207,  212,    0,  211,  211,  213,  247,  247,
      212,    0,    0,  246,  213,    0,  246,    0,  212,  212,
      214,  210,  213,  213,  211,    0,  214,  214,  246,  246,
      214,  215,    0,  216,  212,  214,  214,    0,  215,    0,

      216,  214,    0,  213,  217,    0,  215,  215,  216,  216,
      218,  217,  216,    0,  219,    0,    0,  218,    0,  217,
      217,  219,  258,    0,    0,  218,  218,    0,  220,  219,
      219,  218,  221,    0,  222,  220,    0,  258,  258,  221,
        0,  222,    0,  220,  220,  219,  220,  221,  221,  222,
      222,  223,    0,  223,  221,  224,    0,    0,  225,    0,
      223,  223,  224,    0,  220,  225,  223,  223,    0,    0,
      224,  224,  227,  225,  225,  226,    0,    0,  224,  227,
        0,  226,  226,    0,  225,    0,  228,  227,  227,  229,
      226,  226,  652,  228,  652,  652,  229,    0,  652,  230,

      227,  228,  228,    0,  229,  229,  230,  228,    0,  231,
      226,  232,  229,  233,  230,  230,  231,  228,  232,    0,
      233,    0,    0,  234,  231,  231,  232,  232,  233,  233,
      234,    0,  232,  235,    0,  236,    0,  237,  234,  234,
      235,  234,  236,  231,  237,    0,    0,  233,  235,  235,
      236,  236,  237,  237,  238,    0,  239,    0,    0,    0,
        0,  238,  237,  239,  251,  251,    0,  235,  251,  238,
      238,  239,  239,  243,  243,  243,  251,    0,  243,  248,
      248,  248,  248,  248,  248,  250,  243,  263,  238,  248,
        0,    0,  248,  250,  250,  262,    0,    0,  264,    0,

      250,  250,  263,  263,  265,    0,  251,  251,  266,    0,
      262,  262,  263,  264,  264,  264,  243,  243,  260,  265,
      265,  260,    0,  266,  266,    0,  260,  260,  260,  262,
      267,  260,    0,    0,    0,  268,    0,    0,  260,  260,
      269,  260,  260,    0,  270,  267,  267,  267,  273,  266,
      268,  268,  268,    0,    0,  269,  269,  271,    0,  270,
      270,  277,    0,  273,  273,    0,    0,    0,    0,  260,
      260,  261,  271,  271,  261,  270,  277,  277,  273,  261,
      261,  261,  272,    0,  261,    0,  271,    0,  274,  271,
      275,  261,  261,  277,  261,  261,  276,  272,  272,  278,

        0,  272,  272,  274,  274,  275,  275,    0,  274,  279,
        0,  276,  276,  280,  278,  278,  281,  276,  272,  282,
        0,  283,  261,  261,  279,  279,  284,  275,  280,  280,
        0,  281,  281,  285,  282,  282,  283,  283,  286,    0,
      282,  284,  284,  287,  281,  288,  284,    0,  285,  285,
      289,    0,  280,  286,  286,    0,  291,  283,  287,  287,
      288,  288,  285,  290,    0,  289,  289,  292,    0,    0,
      289,  291,  291,  288,  293,  287,  291,  286,  290,  290,
      294,    0,  292,  292,  290,  295,    0,  296,    0,  293,
      293,  297,    0,  293,    0,  294,  294,  298,    0,  292,

      295,  295,  296,  296,  299,    0,  297,  297,  300,  296,
        0,    0,  298,  298,  301,    0,  295,    0,    0,  299,
      299,  302,    0,  300,  300,    0,  300,  303,  297,  301,
      301,  298,  304,  299,  305,    0,  302,  302,    0,  306,
        0,  302,  303,  303,    0,  307,    0,  304,  304,  305,
      305,    0,    0,  304,  306,  306,  308,    0,  305,  306,
      307,  307,    0,    0,  309,    0,  310,  304,  311,    0,
      312,  308,  308,    0,  313,  307,    0,    0,  308,  309,
      309,  310,  310,  311,  311,  312,  312,  314,  309,  313,
      313,  315,  308,  316,    0,  312,    0,    0,  317,    0,

      318,    0,  314,  314,  311,    0,  315,  315,  316,  316,
      319,  313,  315,  317,  317,  318,  318,  320,    0,  321,
        0,  318,    0,    0,  314,  319,  319,  316,    0,    0,
      322,    0,  320,  320,  321,  321,  323,    0,  320,  324,
        0,  325,    0,  326,  319,  322,  322,  327,    0,    0,
      328,  323,  323,    0,  324,  324,  325,  325,  326,  326,
        0,    0,  327,  327,    0,  328,  328,    0,  329,  322,
        0,  330,  323,    0,    0,  326,  331,  325,  324,  328,
      332,    0,  327,  329,  329,  333,  330,  330,    0,  329,
      330,  331,  331,  329,  334,  332,  332,  335,  331,    0,

      333,  333,  336,  333,  337,    0,  338,    0,  384,  334,
      334,  339,  335,  335,    0,  332,    0,  336,  336,  337,
      337,  338,  338,  384,  384,  340,  339,  339,  337,    0,
      336,  335,  340,  334,  401,    0,  339,    0,    0,    0,
      340,  340,  338,  342,  399,    0,  342,    0,    0,  401,
      401,  342,  342,  342,  344,    0,  342,    0,  342,  399,
      399,  344,  408,  342,  342,  345,  342,  342,  346,  344,
      344,    0,  345,    0,    0,  346,  398,  408,  408,  399,
      345,  345,  349,  346,  346,  344,  347,  408,    0,  349,
        0,  398,  398,  347,  342,  342,  343,  349,  349,  343,

      345,  347,  347,    0,  343,  343,  343,    0,  348,  343,
      348,  343,  398,    0,  405,  347,  343,  343,  348,  343,
      343,  350,    0,  348,  348,  351,    0,    0,  350,  405,
      405,  405,  351,    0,    0,    0,  350,  350,    0,    0,
      351,  351,  352,    0,  352,    0,    0,  343,  343,  353,
        0,  352,  352,  352,    0,  350,  353,  352,  352,  354,
      352,  351,  355,    0,  353,  353,  354,    0,  406,  355,
      353,    0,    0,    0,  354,  354,    0,  355,  355,  356,
        0,    0,  357,  406,  406,  358,  356,    0,  354,  357,
        0,  355,  358,  406,  356,  356,    0,  357,  357,  406,

      358,  358,  359,  356,  355,  360,  357,  361,    0,  359,
        0,    0,  360,    0,  361,    0,    0,  359,  359,  362,
      360,  360,  361,  361,    0,    0,  362,    0,    0,  363,
        0,  359,  359,  360,  362,  362,  363,    0,    0,  364,
        0,  361,  365,    0,  363,  363,  364,    0,    0,  365,
      363,    0,  366,    0,  364,  364,  367,  365,  365,  366,
      364,    0,    0,  367,  403,    0,  369,  366,  366,  368,
        0,  367,  367,  369,    0,    0,  368,  400,  365,  403,
      403,  369,  369,  366,  368,  368,  368,  370,    0,  371,
        0,  367,  400,  400,  370,    0,  371,    0,  403,  372,

        0,  369,  370,  370,  371,  371,  372,  402,  370,  373,
        0,  374,  400,  371,  372,  372,  373,    0,  374,    0,
        0,  375,  402,  402,  373,  373,  374,  374,  375,    0,
      374,  376,    0,  377,  402,    0,  375,  375,  376,    0,
      377,  537,  537,    0,  378,  537,  376,  376,  377,  377,
      373,  378,    0,  537,    0,  376,    0,  375,  379,  378,
      378,  380,    0,  378,  657,  379,  657,  657,  380,  377,
      657,  381,    0,  379,  379,  379,  380,  380,  381,    0,
      380,    0,  382,  537,  537,    0,  381,  381,  383,  382,
        0,    0,    0,    0,  404,  383,  380,  382,  382,  394,

      381,  407,  394,  383,  383,  394,    0,  394,    0,  404,
      404,    0,  382,    0,  409,    0,  407,  407,    0,    0,
      410,  394,  407,  383,  386,  411,    0,  386,  404,  409,
      409,    0,  386,  386,  386,  410,  410,  386,  412,  409,
      411,  411,  413,    0,  386,  386,    0,  386,  386,  414,
        0,  416,    0,  412,  412,    0,  410,  413,  413,    0,
        0,  412,  411,  417,  414,  414,  416,  416,  415,    0,
      413,    0,    0,    0,    0,  386,  386,  387,  417,  417,
      387,    0,    0,  415,  415,  387,  387,  387,  416,  418,
      387,  419,    0,  417,  422,    0,  421,  387,  387,  423,

      387,  387,  415,  420,  418,  418,  419,  419,  419,  422,
      422,  421,  421,    0,  423,  423,    0,    0,  420,  420,
      421,  702,    0,  702,  702,  418,  425,  702,  387,  387,
      395,  422,  424,  395,  423,    0,    0,  420,  395,  395,
      395,  425,  425,  395,    0,    0,  426,  424,  424,  427,
        0,  395,  428,  395,  395,  429,    0,    0,    0,  430,
      424,  426,  426,  431,  427,  427,    0,  428,  428,    0,
      429,  429,    0,  427,  430,  430,    0,    0,  431,  431,
      429,  395,  395,  397,  432,    0,  397,  430,    0,    0,
        0,  397,  397,  397,  431,  433,  397,  434,    0,  432,

      432,  432,  435,    0,  397,  436,  397,  397,  437,    0,
      433,  433,  434,  434,  438,    0,  433,  435,  435,    0,
      436,  436,  439,  437,  437,  440,  436,  441,    0,  438,
      438,  442,  435,    0,  397,  397,    0,  439,  439,  443,
      440,  440,  441,  441,  444,    0,  442,  442,  441,  445,
      440,  442,    0,    0,  443,  443,  446,    0,  439,  444,
      444,  447,    0,    0,  445,  445,  448,    0,  445,    0,
        0,  446,  446,  449,    0,  444,  447,  447,  447,  450,
        0,  448,  448,    0,  451,  446,  452,    0,  449,  449,
      453,  448,    0,    0,  450,  450,  454,    0,  450,  451,

      451,  452,  452,  451,  455,  453,  453,  456,  449,    0,
        0,  454,  454,  457,    0,    0,  458,    0,    0,  455,
      455,  459,  456,  456,    0,  453,  460,    0,  457,  457,
      454,  458,  458,  458,    0,  462,  459,  459,  461,  455,
        0,  460,  460,    0,    0,  463,    0,  464,    0,  457,
      462,  462,  465,  461,  461,  468,  460,    0,  466,  461,
      463,  463,  464,  464,    0,  467,    0,  465,  465,  469,
      468,  468,    0,  466,  466,  470,  462,    0,  464,  466,
      467,  467,    0,    0,  469,  469,  467,  465,  469,  479,
      470,  470,  474,    0,  480,  474,  479,  470,  474,    0,

      474,  480,    0,    0,  479,  479,  481,    0,  479,  480,
      480,    0,    0,  481,  474,  476,  540,    0,  476,  482,
        0,  481,  481,  476,  476,  476,  482,    0,  476,  480,
      476,  540,  540,  483,  482,  482,  476,    0,  476,  476,
      483,    0,    0,  481,  482,  484,    0,  489,  483,  483,
        0,    0,  484,    0,  489,    0,    0,  485,    0,  542,
      484,  484,  489,  489,  485,    0,  476,  476,  478,  483,
        0,  478,  485,  485,  542,  542,  478,  478,  478,  486,
      542,  478,    0,  487,    0,  543,  486,    0,  485,  478,
      487,  478,  478,    0,  486,  486,    0,    0,  487,  487,

      543,  543,  488,    0,    0,  543,  490,    0,  486,  488,
        0,    0,  487,  490,    0,  486,  491,  488,  488,  478,
      478,  490,  490,  491,    0,    0,  488,  492,    0,    0,
      493,  491,  491,  491,  492,    0,  490,  493,  544,    0,
      494,    0,  492,  492,    0,  493,  493,  494,    0,    0,
      495,  493,  496,  544,  544,  494,  494,  495,  545,  496,
        0,  494,  497,    0,  498,  495,  495,  496,  496,  497,
      552,  498,    0,  545,  545,  499,    0,  497,  497,  498,
      498,  495,  499,    0,  496,  552,  552,  500,    0,  501,
      499,  499,  499,  502,  500,    0,  501,    0,  497,    0,

      502,  498,  500,  500,  501,  501,  503,    0,  502,  502,
      504,    0,    0,  503,    0,  500,  505,  504,  546,    0,
        0,  503,  503,  505,    0,  504,  504,  504,  506,  501,
      507,  505,  505,  546,  546,  506,  505,  507,    0,    0,
      508,    0,    0,  506,  506,  507,  507,  508,  546,  507,
      509,    0,  510,    0,  511,  508,  508,  509,    0,  510,
        0,  511,    0,    0,    0,  509,  509,  510,  510,  511,
      511,  508,    0,  510,  512,  511,  513,    0,  514,  509,
      515,  512,    0,  513,    0,  514,    0,  515,    0,  512,
      512,  513,  513,  514,  514,  515,  515,  516,    0,  517,

        0,    0,  518,  514,  516,    0,  517,  550,  518,  518,
      512,  513,  516,  516,  517,  517,  515,  518,  518,  519,
        0,  520,  550,  550,  547,  516,  519,    0,  520,    0,
      517,    0,    0,    0,  519,  519,  520,  520,  524,  547,
      547,  524,  519,  550,  524,  530,  524,  553,  530,    0,
        0,  530,  547,  530,    0,    0,    0,    0,    0,    0,
      524,  525,  553,  553,  525,    0,  553,  530,    0,  525,
      525,  525,  534,  539,  525,  534,  539,  541,  534,  539,
      534,  539,  525,    0,  525,  525,  548,    0,  549,    0,
        0,  551,  541,  541,  534,  539,    0,    0,  541,    0,

        0,  548,  548,  549,  549,  549,  551,  551,  541,    0,
      554,    0,  525,  525,  527,  555,  548,  527,  556,    0,
        0,  551,  527,  527,  527,  554,  554,  527,    0,  557,
      555,  555,  558,  556,  556,  527,  555,  527,  527,  559,
        0,    0,  560,  556,  557,  557,  561,  558,  558,  557,
        0,    0,  558,  562,  559,  559,    0,  560,  560,    0,
      559,  561,  561,    0,    0,  527,  527,  533,  562,  562,
      533,  561,    0,    0,    0,  533,  533,  533,  560,  563,
      533,  564,    0,    0,    0,    0,  565,    0,  533,  566,
      533,  533,  567,    0,  563,  563,  564,  564,  569,  563,

      571,  565,  565,    0,  566,  566,    0,  567,  567,    0,
      568,    0,    0,  569,  569,  571,  571,    0,  533,  533,
      536,  565,    0,  536,  570,  568,  568,    0,  536,  536,
      536,  568,  567,  536,  571,  573,    0,  569,  572,  570,
      570,  536,  574,  536,  536,  576,    0,  575,    0,    0,
      573,  573,  570,  572,  572,    0,    0,  574,  574,    0,
      576,  576,  575,  575,  576,  577,    0,  578,    0,  579,
        0,  536,  536,  572,  572,  575,    0,  580,    0,  581,
      577,  577,  578,  578,  579,  579,  582,    0,  583,    0,
      579,    0,  580,  580,  581,  581,    0,  578,  580,  584,

        0,  582,  582,  583,  583,  585,    0,  581,  586,    0,
      587,    0,  583,  588,  584,  584,  589,    0,    0,    0,
      585,  585,  582,  586,  586,  587,  587,  591,  588,  588,
      590,  589,  589,  586,    0,  584,  592,    0,  588,  593,
        0,  594,  591,  591,  595,  590,  590,  596,    0,  597,
      589,  592,  592,  590,  593,  593,  594,  594,    0,  595,
      595,  598,  596,  596,  597,  597,    0,    0,    0,    0,
        0,    0,  599,  597,  593,  599,  598,  598,  599,  602,
      599,  658,  602,  609,    0,  602,    0,  602,  606,  606,
      609,    0,  606,    0,  599,    0,  658,  658,  609,  609,

      606,  602,  598,  601,    0,    0,  601,    0,  609,    0,
        0,  601,  601,  601,  608,    0,  601,  608,  601,    0,
      608,    0,  608,  659,  601,  610,  601,  601,    0,    0,
      606,  606,  610,  660,    0,  611,  608,  612,  659,  659,
      610,  610,  611,    0,  612,    0,    0,  665,  660,  660,
      611,  611,  612,  612,  601,  601,  605,  659,    0,  605,
      612,    0,  665,  665,  605,  605,  605,  613,  660,  605,
      707,  611,  707,  707,  613,  665,  707,  605,  614,  605,
      605,  615,  613,  613,  616,  614,  648,  648,  615,    0,
      648,  616,    0,  614,  614,  617,  615,  615,  648,  616,

      616,  613,  617,    0,  616,  615,  618,  605,  605,  619,
      617,  617,  734,  618,  734,  734,  619,    0,  734,  620,
        0,  618,  618,  621,  619,  619,  620,    0,  648,  648,
      621,  617,    0,  622,  620,  620,  618,  623,  621,  621,
      622,    0,    0,  619,  623,    0,    0,    0,  622,  622,
      620,    0,  623,  623,  621,  624,    0,  623,  622,  625,
        0,  626,  624,    0,    0,  627,  625,    0,  626,    0,
      624,  624,  627,    0,  625,  625,  626,  626,  628,    0,
      627,  627,  629,    0,    0,  628,  661,    0,  627,  629,
        0,  624,  630,  628,  628,  628,  631,  629,  629,  630,

        0,  661,  661,  631,    0,    0,  632,  630,  630,  633,
        0,  631,  631,  632,    0,    0,  633,  661,  629,  662,
        0,  632,  632,  630,  633,  633,  632,  631,  633,  634,
        0,  635,    0,  636,  662,  662,  634,    0,  635,  662,
      636,  663,    0,    0,  634,  634,  635,  635,  636,  636,
      636,  637,    0,  638,    0,    0,  663,  663,  637,    0,
      638,    0,  663,    0,  639,    0,  637,  637,  638,  638,
      638,  639,  637,  672,    0,  640,    0,  641,    0,  639,
      639,    0,  640,    0,  641,    0,    0,    0,  672,  672,
      640,  640,  641,  641,  642,    0,    0,  642,  639,  640,

      642,  645,  642,  664,  645,    0,    0,  645,    0,  645,
      653,  653,    0,    0,  653,    0,  642,  644,  664,  664,
      644,    0,  653,  645,  664,  644,  644,  644,  650,  651,
      644,  650,  651,  666,  650,  651,  650,  651,  644,  655,
      644,  644,  655,    0,    0,  655,    0,  655,  666,  666,
      650,  651,  653,  653,  656,    0,  668,  656,  666,  667,
      656,  655,  656,    0,    0,    0,  669,    0,  644,  644,
      647,  668,  668,  647,  667,  667,  656,  668,  647,  647,
      647,  669,  669,  647,  670,  669,  671,    0,  673,    0,
      674,  647,    0,  647,  647,  675,  667,    0,  676,  670,

      670,  671,  671,  673,  673,  674,  674,  671,  677,    0,
      675,  675,  678,  676,  676,    0,    0,  679,  673,  676,
      670,  647,  647,  677,  677,  680,    0,  678,  678,  681,
        0,  675,  679,  679,  682,    0,    0,    0,    0,    0,
      680,  680,  683,    0,  681,  681,  684,    0,  685,  682,
      682,  686,  679,    0,  681,    0,  687,  683,  683,  688,
        0,  684,  684,  685,  685,  689,  686,  686,  690,  685,
      684,  687,  687,  687,  688,  688,  691,    0,  692,    0,
      689,  689,    0,  690,  690,  693,    0,  686,  694,    0,
      695,  691,  691,  692,  692,  696,    0,  691,  697,    0,

      693,  693,  698,  694,  694,  695,  695,    0,    0,    0,
      696,  696,  699,  697,  697,  700,    0,  698,  698,    0,
        0,  703,  703,  698,  694,  703,  695,  699,  699,  701,
      700,  700,  701,  703,    0,  701,  696,  701,  705,  706,
        0,  705,  706,  743,  705,  706,  705,  706,    0,    0,
      708,  701,    0,    0,    0,  709,    0,  708,  743,  743,
      705,  706,  709,  703,  703,  708,  708,  708,  710,    0,
      709,  709,  709,  711,    0,  710,    0,    0,  712,    0,
      711,    0,    0,  710,  710,  712,    0,    0,  711,  711,
        0,  713,    0,  712,  712,    0,    0,  714,  713,    0,

        0,  715,    0,  712,  714,  710,  713,  713,  715,    0,
      711,  716,  714,  714,  717,    0,  715,  715,  716,    0,
        0,  717,    0,    0,  718,    0,  716,  716,  719,  717,
      717,  718,    0,    0,    0,  719,    0,    0,  716,  718,
      718,  720,    0,  719,  719,    0,    0,    0,  720,    0,
      717,  721,    0,  719,  722,    0,  720,  720,  721,    0,
      718,  722,  720,    0,  723,    0,  721,  721,  724,  722,
      722,  723,  721,    0,    0,  724,    0,    0,  725,  723,
      723,  726,    0,  724,  724,  725,    0,    0,  726,  745,
      722,  727,    0,  725,  725,  724,  726,  726,  727,    0,

        0,  728,  726,  729,  745,  745,  727,  727,  728,    0,
      729,    0,  725,    0,    0,  730,  728,  728,  729,  729,
        0,  731,  730,  745,    0,  732,  729,  727,  731,  728,
      730,  730,  732,  746,  735,  735,  731,  731,  735,  733,
      732,  732,  733,    0,    0,  733,  735,  733,  746,  746,
      730,    0,  737,    0,    0,  737,  732,  731,  737,  738,
      737,  733,  738,  746,    0,  738,  739,  738,  739,  739,
        0,    0,  739,    0,  737,  742,  735,  735,  744,  740,
      747,  738,  740,  748,    0,  740,  741,  740,  741,  741,
      742,  742,  741,  744,  744,  747,  747,  749,  748,  748,

      742,  740,    0,    0,  750,    0,  751,    0,  752,    0,
      753,    0,  749,  749,  748,  754,  742,  744,  749,  750,
      750,  751,  751,  752,  752,  753,  753,    0,  755,  752,
      754,  754,  756,    0,    0,  757,  754,  758,    0,  759,
        0,  760,  751,  755,  755,    0,  761,  756,  756,  755,
      757,  757,  758,  758,  759,  759,  760,  760,  762,    0,
      759,  761,  761,    0,    0,  763,    0,  764,    0,  765,
        0,    0,    0,  762,  762,  766,    0,  767,    0,  758,
      763,  763,  764,  764,  765,  765,  762,    0,  764,    0,
      766,  766,  767,  767,  768,    0,    0,  768,  770,    0,

      768,  769,  768,  769,  769,  770,  765,  769,  771,    0,
        0,  772,    0,  770,  770,  771,  768,  795,  772,    0,
        0,  773,    0,  771,  771,    0,  772,  772,  773,    0,
        0,  774,  795,  795,  770,  775,  773,  773,  774,  793,
      773,  776,  775,    0,  771,  772,  774,  774,  776,    0,
      775,  775,  777,    0,  793,  793,  776,  776,  778,  777,
      793,  774,  776,  779,    0,  778,    0,  777,  777,  780,
      779,    0,    0,  778,  778,  781,  780,    0,  779,  779,
      782,    0,  781,  779,  780,  780,    0,  782,  778,    0,
      781,  781,  781,  777,  783,  782,  782,  784,    0,  785,

        0,  783,    0,    0,  784,  792,  785,  792,  792,  783,
      783,  792,  784,  784,  785,  785,  786,    0,  787,    0,
        0,  788,    0,  786,  785,  787,  783,  784,  788,    0,
        0,  786,  786,  787,  787,  789,  788,  788,  790,    0,
      791,    0,  789,  791,    0,  790,  791,    0,  791,  794,
      789,  789,  796,  790,  790,    0,  788,  797,    0,  787,
      798,    0,  791,    0,  794,  794,  799,  796,  796,  790,
      789,    0,  797,  797,  800,  798,  798,  801,    0,  794,
      802,  799,  799,  803,    0,  804,    0,  797,  796,  800,
      800,  805,  801,  801,  806,  802,  802,  801,  803,  803,

      804,  804,  807,    0,  803,    0,  805,  805,  808,  806,
      806,    0,  809,    0,  810,  808,    0,  807,  807,  809,
      804,  810,    0,  808,  808,  811,    0,  809,  809,  810,
      810,  810,  811,  808,    0,  812,    0,  809,  807,  813,
      811,  811,  812,    0,    0,    0,  813,    0,    0,  814,
      812,  812,    0,    0,  813,  813,  814,    0,  812,  814,
      815,  811,    0,  816,  814,  814,  817,  815,    0,  813,
      816,    0,    0,  817,    0,  815,  815,  818,  816,  816,
      819,  817,  817,  815,  818,    0,    0,  819,  826,    0,
      820,    0,  818,  818,    0,  819,  819,  820,    0,  819,

      821,  818,  822,  826,  826,  820,  820,  821,    0,  822,
      825,    0,  823,    0,  824,  821,  821,  822,  822,  823,
      820,  824,  827,  822,  828,  825,  825,  823,  823,  824,
      824,  829,    0,  830,    0,  831,    0,  827,  827,  828,
      828,  824,    0,  832,    0,  825,  829,  829,  830,  830,
      831,  831,    0,    0,  833,    0,  831,  827,  832,  832,
      834,  833,    0,    0,  835,    0,  836,  834,  832,  833,
      833,  835,    0,  836,  843,  834,  834,    0,  837,  835,
      835,  836,  836,    0,    0,  837,    0,    0,  838,  843,
      843,  858,  833,  837,  837,  838,    0,  836,  834,    0,

      835,  839,    0,  838,  838,  840,  858,  858,  839,  843,
        0,  841,  840,  838,  837,    0,  839,  839,  841,  844,
      840,  840,  839,  842,    0,    0,  841,  841,  840,  853,
      842,    0,    0,  845,  844,  844,  846,    0,  842,  842,
      845,    0,    0,  846,  853,  853,  841,    0,  845,  845,
      844,  846,  846,  847,  845,  848,    0,  846,  849,  853,
      847,    0,  848,    0,    0,  849,    0,    0,  847,  847,
      848,  848,  850,  849,  849,    0,    0,  851,  847,  850,
        0,    0,    0,  852,  851,    0,    0,  850,  850,  848,
      852,  850,  851,  851,  854,    0,  855,    0,  852,  852,

      856,  854,    0,  855,    0,    0,  857,  856,    0,  854,
      854,  855,  855,  857,    0,  856,  856,  859,    0,  860,
        0,  857,  857,    0,  859,    0,  860,    0,    0,    0,
        0,  856,  859,  859,  860,  860,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  859,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  866,  866,    0,    0,  866,  867,
      867,  867,  867,  867,  867,  868,  868,    0,    0,  868,

      869,  869,  869,  869,  869,  869,  870,  870,    0,    0,
      870,  871,  871,  871,  871,  871,  871,  872,    0,    0,
        0,  872,  872,  872,  872,  872,  873,  873,    0,  873,
      873,  873,  873,  873,  873,  874,    0,  874,  874,    0,
        0,  874,  874,  875,  875,  875,  875,  876,  876,  876,
      876,  877,  877,  877,  877,  878,  878,  878,  878,  878,
      878,  879,    0,    0,    0,  879,  879,  879,  879,  879,
      880,  880,  880,  880,  880,  880,  881,    0,    0,    0,
      881,  881,  881,  881,  881,  882,  882,  882,  882,  882,
      882,  883,    0,    0,    0,  883,  883,  883,  883,  883,

      884,    0,    0,    0,  884,  884,  884,  884,  884,  885,
        0,    0,  885,  885,  885,  885,  885,  885,  886,    0,
        0,    0,  886,  886,  886,  886,  886,  887,    0,    0,
        0,  887,  887,  887,  887,  887,  888,    0,    0,  888,
      888,  888,  888,  888,  888,  889,    0,    0,    0,  889,
      889,  889,  889,  889,  890,    0,    0,    0,  890,  890,
      890,  890,  890,  891,    0,    0,  891,  891,  891,  891,
      891,  891,  892,    0,    0,    0,  892,  892,  892,  892,
      892,  893,    0,    0,    0,  893,  893,  893,  893,  893,
      894,    0,    0,    0,  894,  894,  894,  894,  894,  895,

        0,    0,  895,  895,  895,  895,  895,  895,  896,    0,
        0,    0,  896,  896,  896,  896,  896,  897,    0,    0,
      897,  897,  897,  897,  897,  897,  898,    0,    0,  898,
      898,  898,  898,  898,  898,  899,    0,    0,    0,  899,
      899,  899,  899,  899,  900,    0,    0,  900,  900,  900,
      900,  900,  900,  901,    0,    0,  901,  901,  901,  901,
      901,  901,  902,    0,    0,    0,  902,  902,  902,  902,
      902,  903,    0,    0,  903,  903,  903,  903,  903,  903,
      904,    0,    0,  904,  904,  904,  904,  904,  904,  905,
        0,    0,  905,  905,  905,  905,  905,  905,  906,    0,

        0,  906,  906,  906,  906,  906,  906,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
#define INITIAL 0
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "main.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

int braceCount;
int parenCount;
string latexCode;
#define ID_MODE 1

#define CMD_MODE 2

#define FILE_NAME_MODE 3

#define STRING_MODE 4

#define LATEX_MODE 5

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 84 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 862 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5208 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 88 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 92 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 98 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 103 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 107 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 108 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 109 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 111 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 112 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 113 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 114 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 115 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 117 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 119 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 120 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 121 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 124 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 126 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 130 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 131 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 132 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
return KW_XUNIFY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_OPS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 97:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 101:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 255 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 256 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 260 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 270 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 271 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 272 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 273 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 274 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 275 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 276 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 277 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 278 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 279 "../../../src/Mixfix/lexer.ll"
FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 280 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK


case 153:
YY_RULE_SETUP
#line 284 "../../../src/Mixfix/lexer.ll"
// eat white space
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 285 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 155:
YY_RULE_SETUP
#line 293 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 157:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
latexCode += yytext;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = latexCode.c_str();
						  return LATEX_STRING;
						}
					    }
					  latexCode += yytext;
					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 335 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  latexCode += yytext;
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 342 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 348 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 349 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 350 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 355 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 862 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 862 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 861);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 355 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"
