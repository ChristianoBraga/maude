/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 160
#define YY_END_OF_BUFFER 161
static yyconst short int yy_accept[841] =
    {   0,
      157,  157,  157,  157,  157,  157,  146,  146,  148,  148,
        0,    0,  161,  159,  157,  158,  158,   93,  159,   91,
       93,   93,   93,   91,   92,   92,   93,  159,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   14,   93,   93,   93,   93,   93,   93,   93,
      145,  159,  143,  143,  143,  145,  143,  145,  159,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,   97,  159,
       95,   97,   95,   97,   97,   96,   95,   97,  159,   97,
       97,  147,  146,  160,  148,  149,  156,  150,  155,  155,

      151,  152,  150,  153,  154,  157,   93,    0,   93,    0,
        0,    0,   93,   93,   92,    0,   93,   93,   93,   93,
       10,   93,   93,   93,   93,   93,   39,   93,   93,   69,
       93,   93,   93,   93,   93,   93,   93,   57,   93,    5,
       93,   93,   13,   93,   68,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   34,   66,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   70,   93,   93,   93,   93,
       93,    6,   93,   93,   93,   93,   93,   93,   93,   93,
       93,  145,    0,  144,  145,    0,    0,    0,  145,  145,
      140,  141,    0,  145,  145,  145,  145,  145,  136,  145,

      145,  145,  145,  135,  124,  145,  145,  145,  145,  123,
      145,  122,  145,  145,  145,  145,  133,  145,  145,  145,
      129,  145,  124,  145,  137,  145,  145,  145,  145,  145,
       98,  124,  145,  142,   97,    0,   97,    0,    0,    0,
       97,   97,    0,   94,   96,    0,    5,  147,  146,  148,
      150,  150,   93,    0,    2,    2,   93,   93,   93,   62,
       93,   93,   61,   93,   93,   93,   93,   93,   93,   93,
       93,   15,   69,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   68,   93,   93,    6,
       26,   93,   93,   35,   93,   66,   93,   93,   93,   93,

       93,   93,   93,    9,   93,   90,   18,   93,   93,   20,
       70,   93,   93,   32,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   67,   93,   93,   93,   93,   93,   93,
      145,    0,    2,    2,  145,  145,  134,  145,  145,  138,
      145,  145,  145,  145,  145,  145,  145,  145,  102,  145,
      124,  145,  139,  145,  145,  145,  145,  145,  117,  116,
      145,  130,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  132,   97,    0,    2,    2,    0,    0,    0,
        0,    2,    2,    2,    1,    2,    2,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   47,   25,   93,   19,

       93,   93,   84,   21,   93,   93,   53,   93,   22,   93,
       93,   93,    8,   24,   93,    3,   93,   93,   93,   17,
       93,    7,   23,   93,   93,   87,   12,   93,   93,   93,
       93,   14,   93,   93,   93,   93,   93,   93,   93,   33,
       65,   93,   82,   93,   93,   58,   93,   93,   93,   67,
       93,   93,   93,   54,   93,   93,    0,    0,    2,    2,
        2,    1,    2,    2,  145,  145,  101,  145,  145,  112,
      145,  145,  139,  145,  145,  145,  145,  145,  145,  103,
      145,  145,  104,  145,  145,  105,    3,  145,  131,  145,
      145,  111,  107,  145,  145,  125,  145,  145,  145,  145,

      145,  145,  132,    0,    0,    2,    2,    1,    2,    2,
        0,    0,    2,    2,    1,    1,    1,    1,    1,    2,
        2,    2,   81,   93,   56,   85,   40,   50,   93,   93,
       93,   93,   93,   93,   93,   74,   93,   79,   93,   93,
       93,   93,   93,   93,   93,   51,   93,   72,   27,   93,
       93,   93,   93,   93,   93,   55,   16,   49,   93,   93,
       11,   93,   93,   93,   93,   93,   93,   93,   65,   59,
       48,   93,   93,   36,   30,   93,   83,   42,   93,   93,
        2,    2,    1,    1,    1,    1,    1,    2,    2,    2,
      100,  127,  145,  145,  145,  118,  145,  145,  145,  145,

      145,  145,  145,  145,  145,  145,   99,  113,  145,  145,
      145,  145,  145,  145,  106,  125,  145,  109,  145,  145,
      145,  124,    2,    2,    1,    1,    1,    1,    2,    2,
        2,    1,    1,    1,    1,    1,    2,    2,   37,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   76,   93,    4,   93,   93,   52,   64,
       26,   93,   89,   93,   55,   93,   93,   93,   93,   18,
       80,   46,   93,   29,   43,   93,   93,   60,   93,   28,
       31,    1,    1,    1,    1,    1,    2,    2,  145,  145,
      115,  145,  145,    4,  110,  108,  145,  145,  145,  145,

      145,  145,  116,  145,  145,  145,  145,  145,  145,  145,
      145,  145,    1,    1,    1,    1,    1,    2,    2,    1,
        1,   93,   56,   93,   73,   93,   45,   93,   41,   93,
       19,   93,   93,   78,   93,   93,   77,   63,   93,   93,
       93,   88,   75,   93,   20,   93,   71,   38,    1,    1,
      145,  145,  145,  145,  145,  119,  145,  145,  145,  145,
      117,  120,  145,  145,  145,  114,  145,  145,  126,  145,
        1,    1,   93,   93,   73,   93,   93,   25,   44,   21,
       93,   22,   93,   23,   93,   90,   93,  145,  145,  145,
      145,  145,  145,  145,  145,  104,  145,  145,  145,  109,

      128,  126,  145,   93,   86,   93,   47,   53,   17,   93,
       93,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      121,   93,   93,  145,  145,  145,  145,  103,  145,  107,
      128,   93,  100,  101,  145,  111,   48,  145,  115,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   22,    8,   24,   25,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   13,   53,   54,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    6,    9,    9,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    5,    6
    } ;

static yyconst short int yy_base[886] =
    {   0,
        0,    0,   55,    0,  110,  163,  134,  140,  145,  149,
      216,  271,  339, 5083,  151, 5083, 5083,  167,  171, 5083,
      174, 5083,  180,  184,  187,  219,  205,  196,  226,  222,
      261,  282,  278,  305,  236,  286,  232,  291,  327,  338,
      376,  346,  335,  386,  396,  400,  349,  308,  413,  426,
      366,  215, 5083,  436,  446,  458,  460,  471,  478,  477,
      523,  481,  494,  498,  500,  560,  546,  526,  563,  585,
      597,  558,  607,  504,  611,  625, 5083,  645,  264,  231,
     5083,  284, 5083,  593,  669,  621,  374,  572,  646,  619,
     5083,    0,  116, 5083,    0, 5083, 5083,    0, 5083, 5083,

     5083, 5083,  149, 5083, 5083,  425,  655,  269,  658,  675,
      274,  310,  678,  686,  691,  703,  682,  695,  709,  714,
      712,  723,  736,  742,  745,  749,  753,  759,  776,  762,
      780,  787,  793,  789,  799,  811,  813,  819,  824,  830,
      836,  838,  842,  844,  847,  856,  861,  868,  874,  878,
      881,  887,  899,  891,  904,  909,  911,  918,  923,  931,
      935,  943,  949,  945,  953,  967,  978,  984,  971,  996,
     1003, 1007, 1009, 1020, 1026, 1028, 1030, 1034, 1052, 1054,
     1057, 1059,  296, 1076, 1078, 1095,  356,  281, 1098, 1103,
     1115, 1117, 1124, 1120, 1141, 1143, 1146, 1163, 1165, 1169,

     1175, 1187, 1189, 1200, 1210, 1213, 1224, 1227, 1238, 1249,
     1251, 1261, 1271, 1273, 1275, 1294, 1298, 1308, 1312, 1318,
     1332, 1342, 1345, 1356, 1362, 1368, 1373, 1385, 1390, 1396,
     1407, 1409, 1413, 1426, 1183,  357, 1221, 1435,  395,  264,
     1269, 1438, 1462, 5083, 1461, 1461, 1281,    0,  131,    0,
        0, 5083, 1306,  421, 1514, 1567, 1467, 1471, 1473, 1484,
     1495, 1507, 1502, 1520, 1531, 1525, 1534, 1555, 1537, 1573,
     1576, 1581, 1584, 1586, 1590, 1598, 1607, 1612, 1615, 1620,
     1624, 1626, 1633, 1645, 1647, 1651, 1657, 1668, 1671, 1674,
     1676, 1680, 1682, 1688, 1701, 1707, 1712, 1714, 1718, 1724,

     1731, 1737, 1741, 1748, 1754, 1760, 1762, 1766, 1768, 1771,
     1779, 1791, 1793, 1796, 1800, 1802, 1804, 1813, 1821, 1826,
     1832, 1835, 1843, 1846, 1852, 1860, 1863, 1869, 1871, 1873,
     1890,  430, 1916, 1969, 1919, 1930, 1933, 1951, 1879, 1947,
     1972, 1983, 1972, 1989, 2009, 2011, 2015, 2021, 2033, 2035,
     2047, 2052, 2066, 2069, 2072, 2089, 2091, 2094, 2108, 2111,
     2121, 2131, 2133, 2135, 2152, 2155, 2157, 2175, 2169, 2180,
     2197, 2201, 2203, 1880,  431, 2247, 2300,  247,  237,  440,
      239,    0,  213, 2229, 2353,  106, 2406, 1941, 2220, 2230,
     2207, 2241, 2251, 1927, 2253, 2258, 2055, 2261, 2041, 2097,

     2281, 2283, 2272, 2293, 2303, 2306, 2310, 2314, 2317, 2323,
     2334, 2341, 2359, 2362, 2364, 2367, 2370, 2384, 2387, 2409,
     2389, 2413, 2417, 2415, 2420, 2423, 2427, 2437, 2440, 2446,
     2444, 2454, 2463, 2466, 2468, 2471, 2474, 2476, 2493, 2498,
     2500, 2502, 2504, 2506, 2510, 2523, 2528, 2530, 2532, 2534,
     2540, 2553, 2560, 2562, 2564, 2570,  468,  230,  211, 2595,
      202, 2618,  237, 2671, 2582, 2600, 2614, 2632, 2638, 2596,
     2649, 2652, 2675, 2678, 2692, 2696, 2709, 2719, 2721, 2731,
     2741, 2743, 2753, 2766, 2771, 2776, 2788, 2790, 2793, 2810,
     2812, 2815, 2832, 2834, 2845, 2851, 2857, 2862, 2868, 2885,

     2887, 2890, 2904,  485,  210,  182, 2917, 2940,  316, 2993,
      188,  175, 2929, 1423,    0, 3046, 2930,  159, 3099, 2946,
      150, 2954, 2626, 2950, 2821, 2729, 2628, 2717, 2957, 2739,
     2961, 2963, 2986, 2798, 2996, 2918, 2999, 2923, 3004, 3017,
     3024, 3034, 3052, 3056, 3060, 3013, 3063, 3065, 3082, 3087,
     3095, 3093, 3105, 3107, 3113, 3119, 3124, 3130, 3136, 3144,
     3150, 3153, 3156, 3158, 3170, 3175, 3178, 3180, 3184, 3188,
     3192, 3197, 3205, 3209, 3214, 3218, 3222, 3226, 3232, 3235,
     3254, 1451, 3285, 3265,    0,  136, 3338, 3265,  135, 3296,
     3297, 3299, 3311, 3334, 3345, 3316, 3348, 3358, 3368, 3370,

     3380, 3390, 3392, 3394, 3411, 3413, 3417, 3430, 3435, 3440,
     3452, 3454, 3457, 3471, 3481, 3484, 3494, 3498, 3508, 3520,
     3522, 3526, 3552, 1499, 3575, 3564,  124, 3628, 3538,  109,
     3565, 3594, 1683, 3582,    0, 3601, 3639, 2122, 3243, 3598,
     3321, 3635, 3553, 3606, 3640, 3502, 3642, 3647, 3649, 3654,
     3673, 3678, 3680, 3516, 3682, 3684, 3687, 3690, 3704, 3709,
     3713, 3715, 3717, 3721, 3726, 3734, 3738, 3745, 3747, 3751,
     3755, 3768, 3772, 3774, 3776, 3779, 3782, 3785, 3796, 3803,
     3805, 3830, 2610, 3830,    0, 3841, 3842, 2703, 3845, 3850,
     3863, 3868, 3881, 3886, 3892, 3903, 3909, 3913, 3915, 3927,

     3932, 3950, 3954, 3960, 3973, 3977, 3979, 3990, 3996, 4001,
     4013, 4023, 3964, 3277, 3846,    0, 4042, 4052, 3468, 4053,
     3812, 4043, 3838, 4046, 4055, 4057, 4009, 4060, 4063, 4065,
     4077, 4082, 4088, 4090, 4095, 4099, 4107, 4112, 4117, 4119,
     4121, 4129, 4131, 4138, 4141, 4148, 4152, 4155, 4177, 3943,
     4158, 4180, 4183, 4186, 4197, 4203, 4207, 4224, 4226, 4229,
     4243, 4246, 4248, 4260, 4266, 4270, 4272, 4289, 4292, 4294,
     4319, 4184, 4300, 4268, 4320, 4322, 4326, 4328, 4330, 4332,
     4334, 4351, 4353, 4355, 4357, 4360, 4362, 4379, 4381, 4384,
     4402, 4405, 4407, 4419, 4424, 4436, 4441, 4453, 4455, 4459,

     4473, 4476, 4486, 4463, 4430, 4481, 4484, 4490, 4495, 4503,
     4507, 4514, 4520, 4526, 4538, 4540, 4550, 4563, 4544, 4573,
     4583, 4571, 4581, 4594, 4604, 4607, 4621, 4624, 4626, 4643,
     4646, 4648, 4660, 4665, 4670, 4682, 4577, 4684, 4687, 5083,
     4723, 4732, 4741, 4750, 4755, 4761, 4766, 4772, 4777, 4783,
     4792, 4801, 4809, 4814, 4818, 4822, 4827, 4836, 4842, 4851,
     4857, 4866, 4875, 4884, 4893, 4902, 4911, 4920, 4929, 4938,
     4947, 4956, 4965, 4974, 4983, 4992, 5001, 5010, 5019, 5028,
     5037, 5046, 5055, 5064, 5073
    } ;

static yyconst short int yy_def[886] =
    {   0,
      840,    1,  840,    3,  841,  841,  842,  842,  843,  843,
      844,  844,  840,  840,  840,  840,  840,  845,  846,  840,
      845,  840,  845,  845,  845,  845,  845,  840,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      847,  848,  840,  847,  847,  847,  847,  847,  840,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  840,  847,  849,  850,
      840,  849,  840,  849,  849,  849,  849,  849,  840,  849,
      840,  851,  840,  840,  852,  840,  840,  853,  840,  840,

      840,  840,  840,  840,  840,  840,  845,  846,  845,  854,
      846,  846,  845,  845,  845,  840,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  847,  848,  847,  847,  855,  848,  848,  847,  847,
      847,  847,  840,  847,  847,  847,  847,  847,  847,  847,

      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  849,  850,  849,  856,  850,  850,
      849,  849,  840,  840,  849,  840,  849,  851,  840,  852,
      853,  840,  845,  857,  858,  858,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      847,  859,  860,  860,  847,  847,  847,  847,   66,  847,
      847,  847,   66,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  849,  861,  862,  862,  840,  840,  857,
      857,  863,  256,  864,  865,  256,  866,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  859,  859,  334,  867,
      334,  868,  334,  869,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  847,  847,  861,  861,  377,  870,  871,  377,  872,
      840,  840,  864,  864,  873,  865,  874,  516,  875,  863,
      256,  876,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      867,  867,  868,  877,  583,  583,  878,  863,  334,  879,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  870,  870,  871,  880,  625,  881,  863,  377,
      882,  874,  874,  873,  516,  883,  876,  876,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  877,  877,  873,  583,  884,  879,  879,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  880,  880,  873,  625,  885,  882,  882,  883,
      883,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  884,  884,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      885,  885,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  847,  847,  845,  845,  845,  845,  845,  845,  845,
      845,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  845,  845,  847,  847,  847,  847,  847,  847,  847,
      847,  845,  847,  847,  847,  847,  845,  847,  847,    0,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840
    } ;

static yyconst short int yy_nxt[5139] =
    {   0,
       14,   15,   16,   14,   17,   15,   15,   18,   19,   20,
       20,   21,   18,   22,   23,   24,   25,   26,   18,   18,
       18,   20,   18,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   18,   36,   18,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   18,
       18,   22,   22,   18,   18,   14,   15,   16,   14,   17,
       15,   15,   51,   52,   53,   53,   54,   55,   53,   56,
       55,   51,   51,   55,   57,   51,   53,   51,   58,   59,
       60,   51,   61,   62,   63,   64,   65,   51,   66,   67,
       51,   68,   69,   51,   70,   71,   51,   72,   73,   74,

       75,   76,   51,   51,   51,   51,   77,   77,   78,   51,
       14,   15,   16,   14,   17,   15,   15,  249,   80,   81,
       81,   82,  249,   83,   84,   85,  383,   86,   87,  506,
      520,   81,  249,   88,   89,   93,   94,  249,   94,   94,
       93,   93,   94,   90,   94,   94,   93,   96,  715,   96,
       96,   96,  106,   96,   96,  459,  106,  106,  252,  252,
      684,   91,   91,   14,   15,   16,   14,   17,   15,   15,
      383,   80,   81,   81,   82,  108,   83,   84,   85,  107,
       86,   87,  108,  634,   81,  113,   88,   89,  108,  244,
      109,  110,  108,  112,  114,  108,   90,  109,  110,  244,

      252,  252,  506,  109,  110,  109,  109,  109,  110,  109,
      109,  110,  504,  108,   91,   91,   97,  109,   99,   97,
      100,   97,  459,  182,   97,  101,  102,  108,  109,  116,
      108,  459,  457,  383,  108,  115,  115,  188,  103,  235,
      108,  380,  109,  110,  108,  109,  110,  109,  109,  109,
      110,  512,  117,  240,  118,  109,  110,  459,  511,  109,
      110,  588,  119,  138,  120,  141,  239,  104,  105,  108,
       97,   97,  236,   99,   97,  100,   97,  107,  139,   97,
      101,  102,  107,  187,  109,  110,  108,  237,  238,  121,
      108,  112,  236,  103,  108,  241,  112,  122,  123,  108,

      124,  109,  110,  125,  182,  109,  110,  237,  238,  109,
      110,  126,  111,  108,  109,  110,  108,  129,  188,  130,
      131,  127,  104,  105,  140,   97,  132,  128,  109,  110,
      142,  109,  110,  176,  143,  108,  506,  177,  840,  840,
      629,  133,  134,  108,  135,  840,  108,  136,  840,  137,
      109,  110,  144,  145,  108,  840,  146,  108,  109,  110,
      147,  109,  110,  149,  182,  235,  148,  840,  840,  109,
      110,  158,  109,  110,  183,  840,  840,  150,  188,  240,
      163,  184,  236,  151,  108,  159,  840,  175,  160,  185,
      186,  161,  840,  162,  108,  840,  840,  237,  238,  109,

      110,  840,  152,  235,  108,  840,  153,  840,  108,  109,
      110,  164,  840,  154,  155,  165,  156,  240,  157,  109,
      110,  108,  166,  109,  110,  167,  106,  840,  168,  253,
      106,  106,  172,  173,  108,  169,  109,  110,  331,  374,
      170,  171,  174,  381,  183,  178,  179,  189,  253,  109,
      110,  184,  458,  505,  183,  840,  840,  840,  840,  185,
      186,  184,  381,  180,  840,  840,  183,  840,  183,  185,
      186,  181,  190,  184,  840,  184,  331,  840,  191,  183,
      192,  185,  186,  185,  186,  183,  184,  185,  185,  183,
      458,  185,  184,  374,  185,  193,  184,  840,  840,  185,

      185,  186,  183,  840,  185,  186,  183,  505,  183,  184,
      840,  840,  183,  184,  202,  184,  840,  185,  186,  184,
      194,  185,  186,  185,  186,  208,  840,  185,  186,  185,
      185,  183,  203,  230,  183,  204,  840,  206,  184,  840,
      207,  184,  205,  231,  840,  840,  185,  186,  840,  185,
      186,  215,  195,  840,  183,  216,  840,  840,  840,  196,
      197,  184,  198,  840,  199,  200,  183,  201,  183,  185,
      186,  183,  214,  184,  840,  184,  840,  840,  184,  840,
      236,  185,  186,  185,  186,  840,  185,  186,  209,  217,
      210,  224,  218,  183,  225,  237,  246,  840,  211,  840,

      184,  236,  840,  212,  213,  183,  219,  242,  185,  186,
      840,  220,  184,  840,  840,  183,  237,  238,  840,  183,
      185,  186,  184,  840,  840,  221,  184,  236,  840,  236,
      185,  186,  840,  183,  185,  186,  222,  245,  245,  223,
      184,  840,  237,  238,  237,  238,  226,  227,  185,  186,
      233,  228,  229,  183,  232,  237,  237,  247,  840,  237,
      184,  840,  840,  108,  840,  234,  108,  237,  185,  186,
      243,  244,  243,  243,  243,  243,  840,  236,  109,  110,
      840,  109,  116,  254,  109,  109,  108,  840,  109,  255,
      108,  840,  237,  238,  108,  840,  109,  237,  237,  108,

      256,  109,  110,  108,  840,  109,  110,  115,  115,  109,
      110,  840,  109,  109,  109,  110,  109,  108,  109,  110,
      108,  257,  108,  840,  109,  840,  109,  109,  840,  840,
      840,  108,  109,  110,  840,  109,  110,  109,  110,  840,
      840,  258,  259,  261,  108,  260,  109,  110,  840,  840,
      108,  840,  262,  108,  109,  109,  840,  108,  840,  109,
      110,  108,  840,  840,  263,  109,  110,  108,  109,  110,
      108,  840,  109,  110,  268,  269,  109,  110,  264,  265,
      266,  840,  109,  110,  108,  109,  110,  267,  108,  840,
      840,  840,  270,  840,  840,  108,  271,  108,  840,  109,

      110,  108,  840,  109,  110,  273,  272,  108,  840,  274,
      109,  110,  109,  110,  275,  840,  109,  110,  277,  108,
      840,  108,  109,  110,  840,  840,  840,  108,  278,  840,
      840,  276,  108,  840,  109,  110,  109,  110,  108,  840,
      280,  279,  109,  110,  108,  172,  108,  109,  110,  281,
      108,  840,  108,  109,  110,  108,  840,  282,  840,  109,
      110,  109,  110,  284,  108,  109,  110,  109,  110,  108,
      109,  110,  840,  840,  283,  840,  108,  285,  840,  109,
      110,  840,  108,  840,  109,  110,  108,  840,  286,  108,
      287,  109,  110,  288,  840,  108,  290,  109,  110,  108,

      840,  109,  110,  840,  109,  110,  840,  108,  840,  289,
      109,  110,  108,  840,  109,  110,  291,  108,  293,  108,
      292,  172,  109,  110,  840,  840,  108,  109,  110,  294,
      295,  108,  109,  110,  109,  110,  840,  840,  840,  108,
      297,  109,  110,  108,  840,  840,  109,  110,  840,  840,
      840,  108,  296,  108,  109,  110,  840,  108,  109,  110,
      298,  108,  299,  300,  301,  840,  109,  110,  109,  110,
      302,  304,  109,  110,  840,  108,  109,  110,  303,  108,
      840,  307,  305,  840,  840,  840,  108,  840,  840,  306,
      109,  110,  108,  840,  109,  110,  308,  840,  840,  309,

      310,  109,  110,  312,  108,  840,  840,  109,  110,  840,
      311,  108,  840,  316,  313,  108,  840,  108,  840,  109,
      110,  317,  314,  315,  840,  318,  109,  110,  108,  319,
      109,  110,  109,  110,  108,  840,  108,  840,  108,  840,
      320,  840,  108,  109,  110,  322,  321,  840,  840,  109,
      110,  109,  110,  109,  110,  840,  840,  109,  110,  323,
      108,  840,  108,  326,  840,  108,  840,  183,  840,  840,
      324,  840,  325,  327,  184,  109,  110,  109,  110,  329,
      109,  110,  185,  186,  183,  840,  183,  840,  840,  840,
      840,  184,  840,  184,  840,  330,  328,  840,  840,  185,

      186,  185,  193,  332,  185,  185,  183,  840,  185,  333,
      840,  183,  840,  184,  840,  840,  185,  334,  184,  840,
      840,  185,  186,  183,  840,  183,  185,  186,  183,  840,
      184,  840,  184,  185,  185,  184,  840,  185,  185,  186,
      185,  186,  840,  185,  186,  185,  185,  185,  840,  183,
      840,  183,  840,  840,  183,  840,  184,  840,  184,  840,
      840,  184,  840,  335,  185,  186,  185,  186,  336,  185,
      186,  183,  337,  183,  840,  185,  185,  183,  184,  840,
      184,  840,  199,  183,  184,  840,  185,  186,  185,  186,
      184,  236,  185,  186,  840,  183,  840,  183,  185,  186,

      338,  339,  184,  840,  184,  340,  237,  238,  183,  840,
      185,  186,  185,  186,  341,  184,  840,  343,  183,  840,
      840,  183,  840,  185,  186,  184,  840,  840,  184,  236,
      840,  342,  183,  185,  186,  183,  185,  186,  840,  184,
      840,  840,  184,  840,  237,  246,  183,  185,  186,  840,
      185,  186,  348,  184,  344,  345,  349,  183,  840,  183,
      840,  185,  186,  346,  184,  840,  184,  350,  840,  183,
      840,  347,  185,  186,  185,  186,  184,  236,  351,  183,
      376,  183,  840,  183,  185,  186,  184,  840,  184,  236,
      184,  840,  237,  238,  185,  186,  185,  186,  185,  186,

      352,  354,  183,  840,  237,  238,  183,  840,  840,  184,
      840,  840,  353,  184,  108,  840,  183,  185,  186,  355,
      183,  185,  186,  184,  356,  840,  183,  184,  840,  109,
      110,  185,  186,  184,  840,  185,  186,  840,  840,  840,
      183,  185,  186,  359,  840,  357,  361,  184,  840,  840,
      183,  358,  360,  183,  840,  185,  186,  184,  840,  840,
      184,  840,  840,  840,  183,  185,  186,  840,  185,  186,
      183,  184,  840,  840,  364,  362,  183,  184,  363,  185,
      186,  183,  840,  184,  365,  185,  186,  366,  184,  840,
      840,  185,  186,  183,  840,  840,  185,  186,  183,  840,

      184,  840,  368,  840,  183,  184,  840,  840,  185,  186,
      367,  184,  840,  185,  186,  183,  370,  183,  840,  185,
      186,  183,  184,  382,  184,  111,  382,  369,  184,  111,
      185,  186,  185,  186,  183,  840,  185,  186,  371,  840,
      840,  184,  372,  375,  237,  237,  236,  840,  237,  185,
      186,  382,  377,  187,  382,  373,  237,  187,  840,  840,
      840,  237,  238,  243,  244,  243,  243,  243,  243,  236,
      237,  237,  840,  378,  237,  108,  379,  245,  245,  108,
      840,  108,  237,  840,  237,  238,  237,  237,  840,  840,
      109,  110,  108,  840,  109,  110,  109,  110,  390,  382,

      840,  239,  382,  108,  389,  239,  840,  109,  110,  388,
      108,  840,  237,  237,  382,  108,  840,  382,  109,  110,
      391,  840,  384,  382,  382,  109,  110,  382,  108,  840,
      109,  110,  392,  108,  385,  382,  840,  386,  387,  108,
      840,  840,  108,  109,  110,  108,  840,  840,  109,  110,
      840,  840,  396,  397,  109,  110,  840,  109,  110,  393,
      109,  110,  840,  108,  840,  382,  382,  382,  394,  398,
      382,  395,  399,  840,  840,  384,  382,  382,  109,  110,
      382,  108,  401,  400,  108,  840,  840,  385,  382,  108,
      386,  387,  108,  840,  108,  840,  109,  110,  108,  109,

      110,  840,  402,  840,  109,  110,  108,  109,  110,  109,
      110,  840,  840,  109,  110,  108,  403,  840,  382,  382,
      108,  109,  110,  108,  840,  840,  405,  406,  108,  840,
      109,  110,  108,  404,  108,  109,  110,  840,  109,  110,
      172,  108,  840,  109,  110,  840,  840,  109,  110,  109,
      110,  407,  408,  108,  840,  108,  109,  110,  840,  108,
      840,  412,  411,  840,  410,  108,  840,  409,  109,  110,
      109,  110,  840,  413,  109,  110,  108,  840,  415,  108,
      109,  110,  108,  515,  108,  111,  515,  414,  108,  111,
      108,  109,  110,  840,  109,  110,  108,  109,  110,  109,

      110,  417,  840,  109,  110,  109,  110,  416,  421,  108,
      840,  109,  110,  840,  840,  108,  840,  420,  419,  418,
      108,  840,  108,  840,  109,  110,  108,  840,  840,  422,
      109,  110,  108,  840,  840,  109,  110,  109,  110,  108,
      840,  109,  110,  424,  840,  108,  840,  109,  110,  108,
      426,  840,  427,  840,  109,  110,  108,  425,  840,  423,
      109,  110,  108,  840,  109,  110,  840,  429,  108,  428,
      108,  109,  110,  431,  108,  840,  108,  109,  110,  108,
      840,  430,  840,  109,  110,  109,  110,  108,  840,  109,
      110,  109,  110,  433,  109,  110,  840,  436,  432,  108,

      840,  108,  109,  110,  108,  840,  840,  434,  108,  840,
      108,  435,  108,  437,  109,  110,  109,  110,  840,  109,
      110,  108,  439,  109,  110,  109,  110,  109,  110,  108,
      840,  840,  840,  438,  108,  840,  109,  110,  840,  840,
      108,  840,  840,  108,  109,  110,  441,  440,  442,  109,
      110,  108,  840,  443,  108,  109,  110,  840,  109,  110,
      108,  446,  448,  445,  444,  447,  109,  110,  108,  109,
      110,  108,  840,  449,  840,  109,  110,  108,  451,  108,
      840,  108,  840,  109,  110,  840,  109,  110,  236,  450,
      840,  840,  109,  110,  109,  110,  109,  110,  183,  453,

      840,  454,  452,  237,  238,  184,  456,  182,  840,  468,
      840,  840,  840,  185,  186,  455,  382,  182,  840,  382,
      840,  840,  469,  182,  460,  382,  382,  183,  840,  382,
      840,  461,  840,  840,  184,  108,  462,  382,  183,  463,
      464,  183,  185,  186,  840,  184,  840,  840,  184,  108,
      109,  110,  529,  185,  186,  183,  185,  186,  465,  183,
      840,  840,  184,  840,  109,  110,  184,  382,  382,  382,
      185,  186,  382,  466,  185,  186,  840,  460,  382,  382,
      183,  840,  382,  840,  461,  523,  840,  184,  467,  462,
      382,  183,  463,  464,  840,  185,  186,  183,  184,  840,

      182,  840,  472,  840,  184,  840,  185,  186,  840,  353,
      182,  473,  185,  186,  470,  182,  474,  183,  475,  183,
      382,  382,  840,  183,  184,  840,  184,  471,  840,  183,
      184,  840,  185,  186,  185,  186,  184,  840,  185,  186,
      840,  183,  840,  183,  185,  186,  476,  478,  184,  108,
      184,  840,  840,  479,  840,  183,  185,  186,  185,  186,
      183,  477,  184,  108,  109,  110,  840,  184,  840,  840,
      185,  186,  480,  481,  183,  185,  186,  183,  109,  110,
      183,  184,  840,  482,  184,  536,  840,  184,  533,  185,
      186,  840,  185,  186,  483,  185,  186,  183,  484,  183,

      840,  485,  183,  840,  184,  108,  184,  840,  840,  184,
      840,  840,  185,  186,  185,  186,  183,  185,  186,  183,
      109,  110,  382,  184,  380,  382,  184,  840,  380,  183,
      487,  185,  186,  486,  185,  186,  184,  488,  840,  183,
      490,  183,  537,  183,  185,  186,  184,  840,  184,  840,
      184,  489,  840,  491,  185,  186,  185,  186,  185,  186,
      183,  840,  493,  183,  840,  183,  840,  184,  840,  840,
      184,  840,  184,  840,  840,  185,  186,  183,  185,  186,
      185,  186,  492,  183,  184,  840,  840,  495,  183,  840,
      184,  840,  185,  186,  498,  184,  494,  840,  185,  186,

      840,  496,  497,  185,  186,  183,  840,  499,  840,  183,
      840,  183,  184,  840,  840,  108,  184,  840,  184,  840,
      185,  186,  840,  500,  185,  186,  185,  186,  108,  382,
      109,  110,  382,  840,  501,  111,  840,  383,  108,  502,
      840,  840,  526,  109,  110,  840,  503,  382,  840,  108,
      382,  514,  840,  109,  110,  507,  382,  382,  840,  108,
      382,  108,  840,  524,  109,  110,  108,  508,  382,  108,
      509,  510,  840,  525,  109,  110,  109,  110,  840,  840,
      108,  109,  110,  527,  109,  110,  530,  532,  840,  108,
      534,  108,  531,  528,  535,  109,  110,  840,  382,  382,

      382,  108,  840,  382,  109,  110,  109,  110,  507,  382,
      382,  108,  538,  382,  108,  840,  109,  110,  108,  539,
      508,  382,  108,  509,  510,  108,  109,  110,  840,  109,
      110,  108,  840,  109,  110,  540,  840,  109,  110,  544,
      109,  110,  108,  840,  542,  840,  109,  110,  541,  108,
      840,  382,  382,  515,  543,  546,  515,  109,  110,  545,
      840,  517,  515,  515,  109,  110,  515,  108,  840,  840,
      108,  840,  108,  840,  515,  108,  518,  519,  108,  547,
      840,  840,  109,  110,  548,  109,  110,  109,  110,  840,
      109,  110,  108,  109,  110,  108,  549,  108,  840,  840,

      840,  840,  840,  550,  515,  515,  382,  109,  110,  382,
      109,  110,  109,  110,  522,  386,  386,  108,  554,  386,
      551,  108,  840,  108,  840,  108,  552,  386,  108,  382,
      382,  108,  109,  110,  553,  108,  109,  110,  109,  110,
      109,  110,  840,  109,  110,  108,  109,  110,  108,  557,
      109,  110,  108,  556,  108,  840,  840,  386,  386,  555,
      109,  110,  108,  109,  110,  840,  840,  109,  110,  109,
      110,  108,  561,  559,  108,  560,  108,  109,  110,  108,
      840,  558,  108,  840,  108,  840,  109,  110,  840,  109,
      110,  109,  110,  563,  109,  110,  565,  109,  110,  109,

      110,  108,  562,  567,  840,  564,  108,  566,  108,  840,
      108,  840,  108,  840,  108,  840,  109,  110,  108,  840,
      568,  109,  110,  109,  110,  109,  110,  109,  110,  109,
      110,  108,  840,  109,  110,  572,  108,  840,  108,  840,
      108,  840,  108,  569,  840,  570,  109,  110,  108,  840,
      571,  109,  110,  109,  110,  109,  110,  109,  110,  574,
      840,  108,  840,  109,  110,  840,  573,  840,  108,  840,
      108,  840,  108,  840,  840,  840,  109,  110,  108,  576,
      840,  575,  577,  109,  110,  109,  110,  109,  110,  578,
      183,  579,  840,  109,  110,  382,  840,  184,  382,  840,

      580,  187,  840,  459,  183,  185,  186,  840,  183,  591,
      515,  184,  187,  515,  840,  184,  187,  582,  515,  185,
      186,  515,  183,  185,  186,  840,  584,  515,  515,  184,
      840,  515,  840,  585,  108,  840,  108,  185,  186,  515,
      183,  586,  587,  592,  840,  840,  183,  184,  840,  109,
      110,  109,  110,  184,  840,  185,  186,  183,  840,  593,
      183,  185,  186,  840,  184,  594,  840,  184,  840,  515,
      515,  382,  185,  186,  382,  185,  186,  840,  840,  590,
      463,  463,  595,  183,  463,  840,  183,  840,  596,  353,
      184,  840,  463,  184,  382,  382,  597,  840,  185,  186,

      183,  185,  186,  382,  183,  457,  382,  184,  840,  457,
      353,  184,  353,  840,  840,  185,  186,  183,  840,  185,
      186,  599,  463,  463,  184,  108,  840,  183,  840,  183,
      598,  840,  185,  186,  184,  840,  184,  108,  600,  183,
      109,  110,  185,  186,  185,  186,  184,  108,  601,  183,
      840,  183,  109,  110,  185,  186,  184,  642,  184,  840,
      602,  183,  109,  110,  185,  186,  185,  186,  184,  840,
      840,  603,  840,  840,  183,  644,  185,  186,  606,  183,
      840,  184,  840,  840,  183,  604,  184,  840,  605,  185,
      186,  184,  840,  840,  185,  186,  183,  840,  183,  185,

      186,  183,  607,  184,  840,  184,  108,  840,  184,  840,
      840,  185,  186,  185,  186,  609,  185,  186,  183,  608,
      183,  109,  110,  183,  840,  184,  840,  184,  840,  108,
      184,  840,  840,  185,  186,  185,  186,  610,  185,  186,
      183,  840,  183,  840,  109,  110,  648,  184,  840,  184,
      641,  611,  612,  183,  840,  185,  186,  185,  186,  183,
      184,  613,  840,  614,  840,  183,  184,  840,  185,  186,
      183,  840,  184,  840,  185,  186,  183,  184,  840,  840,
      185,  186,  840,  184,  840,  185,  186,  840,  840,  615,
      617,  185,  186,  183,  616,  183,  840,  840,  183,  840,

      184,  621,  184,  840,  619,  184,  618,  840,  185,  186,
      185,  186,  183,  185,  186,  840,  840,  382,  840,  184,
      382,  622,  840,  239,  620,  506,  108,  185,  186,  382,
      515,  108,  382,  515,  840,  111,  111,  383,  516,  624,
      515,  109,  110,  515,  840,  840,  109,  110,  626,  515,
      515,  514,  633,  515,  382,  386,  386,  382,  108,  386,
      380,  515,  521,  627,  628,  108,  840,  386,  840,  108,
      840,  108,  840,  109,  110,  840,  638,  840,  840,  639,
      109,  110,  840,  840,  109,  110,  109,  110,  646,  640,
      840,  515,  515,  382,  108,  643,  382,  386,  386,  645,

      840,  631,  509,  509,  108,  840,  509,  108,  840,  109,
      110,  840,  108,  840,  509,  840,  382,  382,  840,  109,
      110,  108,  109,  110,  840,  108,  650,  109,  110,  840,
      647,  840,  108,  651,  649,  840,  109,  110,  840,  840,
      109,  110,  108,  840,  509,  509,  515,  109,  110,  515,
      652,  840,  653,  840,  517,  515,  515,  109,  110,  515,
      108,  840,  654,  840,  108,  840,  840,  515,  108,  518,
      519,  108,  840,  108,  840,  109,  110,  840,  840,  109,
      110,  655,  840,  109,  110,  840,  109,  110,  109,  110,
      108,  658,  840,  657,  840,  108,  840,  515,  515,  515,

      656,  108,  515,  108,  840,  109,  110,  636,  518,  518,
      109,  110,  518,  108,  840,  108,  109,  110,  109,  110,
      518,  108,  515,  515,  660,  840,  840,  108,  109,  110,
      109,  110,  108,  840,  840,  659,  109,  110,  108,  840,
      661,  662,  109,  110,  108,  840,  664,  109,  110,  663,
      518,  518,  108,  109,  110,  840,  840,  840,  108,  109,
      110,  108,  665,  666,  108,  840,  108,  109,  110,  840,
      840,  668,  667,  109,  110,  840,  109,  110,  108,  109,
      110,  109,  110,  108,  840,  670,  108,  671,  108,  840,
      840,  669,  108,  109,  110,  840,  108,  840,  109,  110,

      108,  109,  110,  109,  110,  108,  672,  109,  110,  840,
      674,  109,  110,  108,  840,  109,  110,  108,  840,  673,
      109,  110,  108,  840,  675,  676,  108,  840,  109,  110,
      108,  840,  109,  110,  108,  840,  678,  109,  110,  677,
      108,  109,  110,  108,  840,  109,  110,  840,  840,  109,
      110,  108,  840,  840,  382,  109,  110,  382,  109,  110,
      187,  679,  459,  840,  680,  515,  109,  110,  515,  840,
      840,  187,  840,  583,  463,  463,  582,  515,  463,  239,
      515,  840,  840,  239,  681,  515,  463,  683,  515,  840,
      840,  840,  840,  584,  515,  515,  382,  840,  515,  382,

      585,  840,  457,  840,  589,  183,  515,  183,  586,  587,
      840,  840,  184,  840,  184,  840,  463,  463,  688,  183,
      185,  186,  185,  186,  183,  840,  184,  840,  840,  108,
      689,  184,  840,  840,  185,  186,  515,  515,  515,  185,
      186,  515,  183,  840,  109,  110,  686,  586,  586,  184,
      840,  586,  840,  183,  840,  690,  183,  185,  186,  586,
      184,  515,  515,  184,  723,  691,  183,  840,  185,  186,
      840,  185,  186,  184,  840,  840,  183,  840,  183,  840,
      353,  185,  186,  184,  840,  184,  693,  692,  183,  586,
      586,  185,  186,  185,  186,  184,  840,  840,  183,  840,

      183,  840,  183,  185,  186,  184,  840,  184,  695,  184,
      840,  840,  694,  185,  186,  185,  186,  185,  186,  183,
      840,  183,  696,  840,  840,  183,  184,  699,  184,  697,
      840,  698,  184,  840,  185,  186,  185,  186,  183,  700,
      185,  186,  840,  183,  840,  184,  840,  840,  183,  840,
      184,  840,  840,  185,  186,  184,  840,  701,  185,  186,
      183,  840,  183,  185,  186,  183,  702,  184,  382,  184,
      504,  382,  184,  840,  504,  185,  186,  185,  186,  183,
      185,  186,  840,  840,  703,  706,  184,  840,  840,  183,
      840,  704,  183,  705,  185,  186,  184,  840,  707,  184,

      840,  840,  183,  840,  185,  186,  183,  185,  186,  184,
      108,  840,  840,  184,  840,  840,  183,  185,  186,  708,
      840,  185,  186,  184,  108,  109,  110,  709,  183,  840,
      183,  185,  186,  710,  183,  184,  840,  184,  727,  109,
      110,  184,  840,  185,  186,  185,  186,  509,  509,  185,
      186,  509,  382,  840,  712,  382,  840,  840,  239,  509,
      506,  108,  711,  840,  515,  382,  840,  515,  382,  840,
      239,  504,  625,  630,  624,  515,  109,  110,  515,  840,
      840,  263,  840,  626,  515,  515,  714,  719,  515,  509,
      509,  518,  518,  840,  515,  518,  515,  515,  627,  628,

      111,  515,  516,  518,  515,  840,  108,  380,  840,  635,
      840,  840,  840,  840,  108,  840,  633,  840,  840,  840,
      840,  109,  110,  721,  840,  840,  515,  515,  515,  109,
      110,  515,  840,  518,  518,  725,  717,  627,  627,  382,
      722,  627,  382,  108,  840,  380,  840,  521,  108,  627,
      108,  515,  515,  840,  840,  108,  840,  108,  109,  110,
      840,  638,  108,  109,  110,  109,  110,  840,  840,  726,
      109,  110,  109,  110,  724,  728,  840,  109,  110,  627,
      627,  108,  840,  731,  840,  840,  108,  840,  108,  840,
      108,  729,  108,  840,  730,  108,  109,  110,  108,  840,

      732,  109,  110,  109,  110,  109,  110,  109,  110,  734,
      109,  110,  108,  109,  110,  840,  840,  108,  840,  737,
      735,  108,  733,  108,  840,  108,  840,  109,  110,  108,
      840,  736,  109,  110,  108,  840,  109,  110,  109,  110,
      109,  110,  108,  840,  109,  110,  108,  840,  739,  109,
      110,  840,  738,  108,  840,  108,  840,  109,  110,  108,
      840,  109,  110,  108,  840,  740,  741,  742,  109,  110,
      109,  110,  744,  840,  109,  110,  108,  840,  109,  110,
      108,  840,  108,  840,  108,  840,  840,  108,  840,  743,
      108,  109,  110,  108,  840,  109,  110,  109,  110,  109,

      110,  745,  109,  110,  108,  109,  110,  840,  109,  110,
      840,  108,  515,  108,  380,  515,  840,  840,  380,  109,
      110,  840,  840,  746,  840,  748,  109,  110,  109,  110,
      515,  747,  840,  515,  840,  840,  187,  840,  583,  586,
      586,  515,  382,  586,  515,  382,  108,  457,  457,  685,
      589,  586,  683,  183,  840,  627,  627,  840,  183,  627,
      184,  109,  110,  750,  688,  184,  840,  627,  185,  186,
      751,  183,  840,  185,  186,  752,  183,  840,  184,  840,
      840,  586,  586,  184,  840,  840,  185,  186,  840,  183,
      840,  185,  186,  840,  183,  840,  184,  627,  627,  840,

      183,  184,  840,  840,  185,  186,  840,  184,  753,  185,
      186,  183,  840,  754,  755,  185,  186,  183,  184,  840,
      840,  183,  840,  183,  184,  840,  185,  186,  184,  840,
      184,  840,  185,  186,  840,  183,  185,  186,  185,  186,
      183,  840,  184,  515,  756,  457,  515,  184,  840,  457,
      185,  186,  840,  840,  840,  185,  186,  757,  183,  758,
      759,  760,  183,  840,  515,  184,  840,  515,  183,  184,
      239,  840,  625,  185,  186,  184,  840,  185,  186,  761,
      840,  183,  840,  185,  186,  183,  714,  183,  184,  840,
      840,  840,  184,  840,  184,  762,  185,  186,  183,  840,

      185,  186,  185,  186,  183,  184,  764,  840,  840,  183,
      840,  184,  840,  185,  186,  763,  184,  108,  840,  185,
      186,  183,  840,  765,  185,  186,  766,  767,  184,  840,
      840,  183,  109,  110,  840,  840,  185,  186,  184,  840,
      840,  840,  515,  840,  768,  515,  185,  186,  504,  840,
      716,  108,  382,  515,  108,  382,  515,  769,  504,  380,
      630,  635,  770,  108,  772,  108,  109,  110,  108,  109,
      110,  108,  840,  108,  719,  721,  773,  840,  109,  110,
      109,  110,  840,  109,  110,  108,  109,  110,  109,  110,
      108,  840,  639,  774,  778,  776,  108,  775,  108,  777,

      109,  110,  840,  108,  840,  109,  110,  108,  840,  840,
      840,  109,  110,  109,  110,  108,  840,  780,  109,  110,
      108,  840,  109,  110,  781,  108,  779,  108,  782,  108,
      109,  110,  840,  840,  840,  109,  110,  108,  840,  108,
      109,  110,  109,  110,  109,  110,  108,  840,  784,  108,
      785,  840,  109,  110,  109,  110,  108,  840,  840,  840,
      108,  109,  110,  108,  109,  110,  183,  783,  840,  840,
      840,  109,  110,  184,  786,  109,  110,  515,  109,  110,
      515,  185,  186,  457,  515,  685,  504,  515,  183,  840,
      504,  183,  840,  787,  183,  184,  840,  840,  184,  750,

      840,  184,  788,  185,  186,  183,  185,  186,  840,  185,
      186,  183,  184,  791,  840,  183,  840,  840,  184,  840,
      185,  186,  184,  840,  789,  790,  185,  186,  840,  840,
      185,  186,  183,  840,  183,  792,  793,  183,  840,  184,
      840,  184,  840,  840,  184,  840,  840,  185,  186,  185,
      186,  183,  185,  186,  183,  840,  183,  796,  184,  840,
      840,  184,  840,  184,  795,  840,  185,  186,  183,  185,
      186,  185,  186,  794,  183,  184,  108,  840,  183,  840,
      183,  184,  840,  185,  186,  184,  840,  184,  797,  185,
      186,  109,  110,  185,  186,  185,  186,  183,  798,  799,

      183,  840,  183,  840,  184,  840,  805,  184,  108,  184,
      840,  840,  185,  186,  840,  185,  186,  185,  186,  515,
      840,  800,  515,  109,  110,  504,  840,  716,  108,  804,
      108,  840,  801,  803,  108,  802,  108,  840,  108,  840,
      108,  772,  108,  109,  110,  109,  110,  840,  840,  109,
      110,  109,  110,  109,  110,  109,  110,  109,  110,  108,
      840,  108,  808,  108,  807,  108,  806,  840,  108,  840,
      108,  840,  840,  840,  109,  110,  109,  110,  109,  110,
      109,  110,  809,  109,  110,  109,  110,  183,  840,  183,
      840,  840,  183,  840,  184,  840,  184,  840,  840,  184,

      810,  840,  185,  186,  185,  186,  811,  185,  186,  814,
      183,  840,  812,  183,  813,  183,  840,  184,  840,  840,
      184,  840,  184,  840,  840,  185,  186,  183,  185,  186,
      185,  186,  183,  840,  184,  840,  622,  349,  108,  184,
      840,  840,  185,  186,  183,  816,  815,  185,  186,  183,
      840,  184,  840,  109,  110,  622,  184,  840,  840,  185,
      186,  183,  840,  183,  185,  186,  840,  183,  184,  840,
      184,  108,  840,  817,  184,  840,  185,  186,  185,  186,
      818,  183,  185,  186,  183,  840,  109,  110,  184,  108,
      840,  184,  108,  819,  183,  840,  185,  186,  108,  185,

      186,  184,  820,  108,  109,  110,  639,  109,  110,  185,
      186,  108,  840,  109,  110,  108,  840,  840,  109,  110,
      840,  821,  183,  840,  548,  840,  109,  110,  183,  184,
      109,  110,  822,  840,  183,  184,  840,  185,  186,  840,
      823,  184,  840,  185,  186,  840,  183,  840,  183,  185,
      186,  840,  183,  184,  840,  184,  840,  840,  183,  184,
      824,  185,  186,  185,  186,  184,  825,  185,  186,  840,
      826,  183,  840,  185,  186,  622,  840,  827,  184,  108,
      840,  183,  840,  829,  828,  108,  185,  186,  184,  108,
      840,  183,  830,  840,  109,  110,  185,  186,  184,  840,

      109,  110,  183,  840,  109,  110,  185,  186,  840,  184,
      840,  840,  183,  840,  665,  183,  831,  185,  186,  184,
      832,  840,  184,  833,  840,  840,  840,  185,  186,  183,
      185,  186,  183,  834,  183,  840,  184,  840,  840,  184,
      835,  184,  840,  840,  185,  186,  840,  185,  186,  185,
      186,  183,  840,  836,  183,  840,  108,  840,  184,  840,
      840,  184,  840,  470,  840,  840,  185,  186,  183,  185,
      186,  109,  110,  183,  840,  184,  840,  840,  183,  840,
      184,  840,  840,  185,  186,  184,  837,  840,  185,  186,
      183,  840,  183,  185,  186,  183,  840,  184,  840,  184,

      840,  840,  184,  840,  840,  185,  186,  185,  186,  838,
      185,  186,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  839,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  107,
      107,  840,  840,  107,  111,  111,  111,  111,  111,  111,
      182,  182,  840,  840,  182,  187,  187,  187,  187,  187,
      187,  235,  235,  840,  840,  235,  239,  239,  239,  239,
      239,  239,  248,  840,  840,  840,  248,  248,  248,  248,

      248,  250,  250,  840,  250,  250,  250,  250,  250,  250,
      251,  840,  251,  251,  840,  840,  251,  251,  253,  253,
      253,  253,  331,  331,  331,  331,  374,  374,  374,  374,
      380,  380,  380,  380,  380,  380,  383,  840,  840,  840,
      383,  383,  383,  383,  383,  457,  457,  457,  457,  457,
      457,  459,  840,  840,  840,  459,  459,  459,  459,  459,
      504,  504,  504,  504,  504,  504,  506,  840,  840,  840,
      506,  506,  506,  506,  506,  382,  840,  840,  840,  382,
      382,  382,  382,  382,  513,  840,  840,  513,  513,  513,
      513,  513,  513,  516,  840,  840,  840,  516,  516,  516,

      516,  516,  521,  840,  840,  840,  521,  521,  521,  521,
      521,  581,  840,  840,  581,  581,  581,  581,  581,  581,
      583,  840,  840,  840,  583,  583,  583,  583,  583,  589,
      840,  840,  840,  589,  589,  589,  589,  589,  623,  840,
      840,  623,  623,  623,  623,  623,  623,  625,  840,  840,
      840,  625,  625,  625,  625,  625,  630,  840,  840,  840,
      630,  630,  630,  630,  630,  515,  840,  840,  840,  515,
      515,  515,  515,  515,  632,  840,  840,  632,  632,  632,
      632,  632,  632,  635,  840,  840,  840,  635,  635,  635,
      635,  635,  637,  840,  840,  637,  637,  637,  637,  637,

      637,  682,  840,  840,  682,  682,  682,  682,  682,  682,
      685,  840,  840,  840,  685,  685,  685,  685,  685,  687,
      840,  840,  687,  687,  687,  687,  687,  687,  713,  840,
      840,  713,  713,  713,  713,  713,  713,  716,  840,  840,
      840,  716,  716,  716,  716,  716,  718,  840,  840,  718,
      718,  718,  718,  718,  718,  720,  840,  840,  720,  720,
      720,  720,  720,  720,  749,  840,  840,  749,  749,  749,
      749,  749,  749,  771,  840,  840,  771,  771,  771,  771,
      771,  771,   13,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,

      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840
    } ;

static yyconst short int yy_chk[5139] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,   93,    5,    5,
        5,    5,   93,    5,    5,    5,  386,    5,    5,  630,
      386,    5,  249,    5,    5,    7,    7,  249,    7,    7,
        7,    8,    8,    5,    8,    8,    8,    9,  627,    9,
        9,   10,   15,   10,   10,  589,   15,   15,  103,  103,
      586,    5,    5,    6,    6,    6,    6,    6,    6,    6,
      521,    6,    6,    6,    6,   18,    6,    6,    6,   19,
        6,    6,   21,  518,    6,   21,    6,    6,   23,  512,
       18,   18,   24,   19,   23,   25,    6,   21,   21,  511,

      103,  103,  506,   23,   23,   28,   28,   24,   24,   28,
       25,   25,  505,   27,    6,    6,   11,   28,   11,   11,
       11,   11,  461,   52,   11,   11,   11,   26,   27,   27,
       30,  459,  458,  383,   29,   26,   26,   52,   11,   80,
       37,  381,   26,   26,   35,   30,   30,   28,   28,   29,
       29,  379,   29,   80,   29,   37,   37,  463,  378,   35,
       35,  463,   29,   35,   30,   37,  240,   11,   11,   31,
       11,   12,   79,   12,   12,   12,   12,  108,   35,   12,
       12,   12,  111,  188,   31,   31,   33,   79,   79,   31,
       32,  108,   82,   12,   36,   82,  111,   31,   31,   38,

       31,   33,   33,   31,  183,   32,   32,   82,   82,   36,
       36,   32,  112,   34,   38,   38,   48,   33,  183,   33,
       33,   32,   12,   12,   36,   12,   33,   32,   34,   34,
       38,   48,   48,   48,   38,   39,  509,   48,   13,    0,
      509,   34,   34,   43,   34,    0,   40,   34,    0,   34,
       39,   39,   39,   39,   42,    0,   39,   47,   43,   43,
       39,   40,   40,   40,  187,  236,   39,    0,    0,   42,
       42,   42,   47,   47,   51,    0,    0,   40,  187,  236,
       43,   51,   87,   40,   41,   42,    0,   47,   42,   51,
       51,   42,    0,   42,   44,    0,    0,   87,   87,   41,

       41,    0,   41,  239,   45,    0,   41,    0,   46,   44,
       44,   44,    0,   41,   41,   44,   41,  239,   41,   45,
       45,   49,   44,   46,   46,   45,  106,    0,   45,  254,
      106,  106,   46,   46,   50,   45,   49,   49,  332,  375,
       45,   45,   46,  254,   54,   49,   49,   54,  380,   50,
       50,   54,  332,  375,   55,    0,    0,    0,    0,   54,
       54,   55,  380,   50,    0,    0,   56,    0,   57,   55,
       55,   50,   56,   56,    0,   57,  457,    0,   56,   58,
       57,   56,   56,   57,   57,   60,   58,   59,   59,   62,
      457,   59,   60,  504,   58,   58,   62,    0,    0,   59,

       60,   60,   63,    0,   62,   62,   64,  504,   65,   63,
        0,    0,   74,   64,   62,   65,    0,   63,   63,   74,
       60,   64,   64,   65,   65,   65,    0,   74,   74,   59,
       59,   61,   63,   74,   68,   63,    0,   64,   61,    0,
       64,   68,   63,   74,    0,    0,   61,   61,    0,   68,
       68,   68,   61,    0,   67,   68,    0,    0,    0,   61,
       61,   67,   61,    0,   61,   61,   72,   61,   66,   67,
       67,   69,   67,   72,    0,   66,    0,    0,   69,    0,
       88,   72,   72,   66,   66,    0,   69,   69,   66,   69,
       66,   72,   69,   70,   72,   88,   88,    0,   66,    0,

       70,   84,    0,   66,   66,   71,   69,   84,   70,   70,
        0,   70,   71,    0,    0,   73,   84,   84,    0,   75,
       71,   71,   73,    0,    0,   70,   75,   90,    0,   86,
       73,   73,    0,   76,   75,   75,   71,   86,   86,   71,
       76,    0,   90,   90,   86,   86,   73,   73,   76,   76,
       76,   73,   73,   78,   75,   89,   89,   90,    0,   89,
       78,    0,    0,  107,    0,   78,  109,   89,   78,   78,
       85,   85,   85,   85,   85,   85,    0,   85,  107,  107,
        0,  109,  109,  110,  110,  110,  113,    0,  110,  113,
      117,    0,   85,   85,  114,    0,  110,   89,   89,  115,

      114,  113,  113,  118,    0,  117,  117,  115,  115,  114,
      114,    0,  116,  116,  115,  115,  116,  119,  118,  118,
      121,  117,  120,    0,  116,    0,  110,  110,    0,    0,
        0,  122,  119,  119,    0,  121,  121,  120,  120,    0,
        0,  118,  119,  120,  123,  119,  122,  122,    0,    0,
      124,    0,  122,  125,  116,  116,    0,  126,    0,  123,
      123,  127,    0,    0,  123,  124,  124,  128,  125,  125,
      130,    0,  126,  126,  125,  126,  127,  127,  124,  124,
      124,    0,  128,  128,  129,  130,  130,  124,  131,    0,
        0,    0,  126,    0,    0,  132,  128,  134,    0,  129,

      129,  133,    0,  131,  131,  130,  129,  135,    0,  131,
      132,  132,  134,  134,  132,    0,  133,  133,  133,  136,
        0,  137,  135,  135,    0,    0,    0,  138,  134,    0,
        0,  132,  139,    0,  136,  136,  137,  137,  140,    0,
      136,  135,  138,  138,  141,  137,  142,  139,  139,  139,
      143,    0,  144,  140,  140,  145,    0,  140,    0,  141,
      141,  142,  142,  142,  146,  143,  143,  144,  144,  147,
      145,  145,    0,    0,  141,    0,  148,  142,    0,  146,
      146,    0,  149,    0,  147,  147,  150,    0,  144,  151,
      145,  148,  148,  146,    0,  152,  148,  149,  149,  154,

        0,  150,  150,    0,  151,  151,    0,  153,    0,  147,
      152,  152,  155,    0,  154,  154,  149,  156,  151,  157,
      150,  152,  153,  153,    0,    0,  158,  155,  155,  153,
      154,  159,  156,  156,  157,  157,    0,    0,    0,  160,
      157,  158,  158,  161,    0,    0,  159,  159,    0,    0,
        0,  162,  156,  164,  160,  160,    0,  163,  161,  161,
      158,  165,  158,  159,  160,    0,  162,  162,  164,  164,
      160,  162,  163,  163,    0,  166,  165,  165,  161,  169,
        0,  165,  163,    0,    0,    0,  167,    0,    0,  164,
      166,  166,  168,    0,  169,  169,  165,    0,    0,  165,

      165,  167,  167,  167,  170,    0,    0,  168,  168,    0,
      166,  171,    0,  169,  167,  172,    0,  173,    0,  170,
      170,  170,  167,  168,    0,  170,  171,  171,  174,  171,
      172,  172,  173,  173,  175,    0,  176,    0,  177,    0,
      171,    0,  178,  174,  174,  174,  173,    0,    0,  175,
      175,  176,  176,  177,  177,    0,    0,  178,  178,  175,
      179,    0,  180,  178,    0,  181,    0,  182,    0,    0,
      176,    0,  177,  178,  182,  179,  179,  180,  180,  180,
      181,  181,  182,  182,  184,    0,  185,    0,    0,    0,
        0,  184,    0,  185,    0,  181,  179,    0,    0,  184,

      184,  185,  185,  186,  186,  186,  189,    0,  186,  189,
        0,  190,    0,  189,    0,    0,  186,  190,  190,    0,
        0,  189,  189,  191,    0,  192,  190,  190,  194,    0,
      191,    0,  192,  193,  193,  194,    0,  193,  191,  191,
      192,  192,    0,  194,  194,  193,  186,  186,    0,  195,
        0,  196,    0,    0,  197,    0,  195,    0,  196,    0,
        0,  197,    0,  194,  195,  195,  196,  196,  196,  197,
      197,  198,  197,  199,    0,  193,  193,  200,  198,    0,
      199,    0,  195,  201,  200,    0,  198,  198,  199,  199,
      201,  235,  200,  200,    0,  202,    0,  203,  201,  201,

      198,  198,  202,    0,  203,  200,  235,  235,  204,    0,
      202,  202,  203,  203,  201,  204,    0,  203,  205,    0,
        0,  206,    0,  204,  204,  205,    0,    0,  206,  237,
        0,  202,  207,  205,  205,  208,  206,  206,    0,  207,
        0,    0,  208,    0,  237,  237,  209,  207,  207,    0,
      208,  208,  209,  209,  205,  206,  209,  210,    0,  211,
        0,  209,  209,  207,  210,    0,  211,  209,    0,  212,
        0,  208,  210,  210,  211,  211,  212,  241,  211,  213,
      241,  214,    0,  215,  212,  212,  213,    0,  214,  247,
      215,    0,  241,  241,  213,  213,  214,  214,  215,  215,

      213,  215,  216,    0,  247,  247,  217,    0,    0,  216,
        0,    0,  214,  217,  253,    0,  218,  216,  216,  215,
      219,  217,  217,  218,  216,    0,  220,  219,    0,  253,
      253,  218,  218,  220,    0,  219,  219,    0,    0,    0,
      221,  220,  220,  219,    0,  218,  221,  221,    0,    0,
      222,  218,  220,  223,    0,  221,  221,  222,    0,    0,
      223,    0,    0,    0,  224,  222,  222,    0,  223,  223,
      225,  224,    0,    0,  223,  221,  226,  225,  222,  224,
      224,  227,    0,  226,  223,  225,  225,  224,  227,    0,
        0,  226,  226,  228,    0,    0,  227,  227,  229,    0,

      228,    0,  227,    0,  230,  229,    0,    0,  228,  228,
      226,  230,    0,  229,  229,  231,  229,  232,    0,  230,
      230,  233,  231,  514,  232,  514,  514,  228,  233,  514,
      231,  231,  232,  232,  234,    0,  233,  233,  230,    0,
        0,  234,  232,  238,  238,  238,  242,    0,  238,  234,
      234,  582,  242,  582,  582,  233,  238,  582,    0,    0,
        0,  242,  242,  243,  243,  243,  243,  243,  243,  245,
      246,  246,    0,  243,  246,  257,  243,  245,  245,  258,
        0,  259,  246,    0,  245,  245,  238,  238,    0,    0,
      257,  257,  260,    0,  258,  258,  259,  259,  259,  624,

        0,  624,  624,  261,  258,  624,    0,  260,  260,  257,
      263,    0,  246,  246,  255,  262,    0,  255,  261,  261,
      261,    0,  255,  255,  255,  263,  263,  255,  264,    0,
      262,  262,  262,  266,  255,  255,    0,  255,  255,  265,
        0,    0,  267,  264,  264,  269,    0,    0,  266,  266,
        0,    0,  266,  266,  265,  265,    0,  267,  267,  264,
      269,  269,    0,  268,    0,  255,  255,  256,  265,  266,
      256,  265,  267,    0,    0,  256,  256,  256,  268,  268,
      256,  270,  269,  268,  271,    0,    0,  256,  256,  272,
      256,  256,  273,    0,  274,    0,  270,  270,  275,  271,

      271,    0,  270,    0,  272,  272,  276,  273,  273,  274,
      274,    0,    0,  275,  275,  277,  271,    0,  256,  256,
      278,  276,  276,  279,    0,    0,  275,  276,  280,    0,
      277,  277,  281,  274,  282,  278,  278,    0,  279,  279,
      278,  283,    0,  280,  280,    0,    0,  281,  281,  282,
      282,  277,  279,  284,    0,  285,  283,  283,    0,  286,
        0,  283,  282,    0,  281,  287,    0,  280,  284,  284,
      285,  285,    0,  284,  286,  286,  288,    0,  286,  289,
      287,  287,  290,  633,  291,  633,  633,  285,  292,  633,
      293,  288,  288,    0,  289,  289,  294,  290,  290,  291,

      291,  289,    0,  292,  292,  293,  293,  288,  293,  295,
        0,  294,  294,    0,    0,  296,    0,  292,  291,  290,
      297,    0,  298,    0,  295,  295,  299,    0,    0,  295,
      296,  296,  300,    0,    0,  297,  297,  298,  298,  301,
        0,  299,  299,  298,    0,  302,    0,  300,  300,  303,
      299,    0,  300,    0,  301,  301,  304,  298,    0,  297,
      302,  302,  305,    0,  303,  303,    0,  302,  306,  301,
      307,  304,  304,  303,  308,    0,  309,  305,  305,  310,
        0,  302,    0,  306,  306,  307,  307,  311,    0,  308,
      308,  309,  309,  306,  310,  310,    0,  309,  305,  312,

        0,  313,  311,  311,  314,    0,    0,  307,  315,    0,
      316,  308,  317,  310,  312,  312,  313,  313,    0,  314,
      314,  318,  313,  315,  315,  316,  316,  317,  317,  319,
        0,    0,    0,  312,  320,    0,  318,  318,    0,    0,
      321,    0,    0,  322,  319,  319,  316,  315,  317,  320,
      320,  323,    0,  318,  324,  321,  321,    0,  322,  322,
      325,  321,  322,  320,  319,  321,  323,  323,  326,  324,
      324,  327,    0,  323,    0,  325,  325,  328,  325,  329,
        0,  330,    0,  326,  326,    0,  327,  327,  374,  324,
        0,    0,  328,  328,  329,  329,  330,  330,  331,  327,

        0,  328,  326,  374,  374,  331,  330,  339,    0,  339,
        0,    0,    0,  331,  331,  329,  333,  339,    0,  333,
        0,    0,  339,  339,  333,  333,  333,  335,    0,  333,
        0,  333,    0,    0,  335,  394,  333,  333,  336,  333,
      333,  337,  335,  335,    0,  336,    0,    0,  337,  388,
      394,  394,  394,  336,  336,  340,  337,  337,  335,  338,
        0,    0,  340,    0,  388,  388,  338,  333,  333,  334,
      340,  340,  334,  336,  338,  338,    0,  334,  334,  334,
      341,    0,  334,    0,  334,  388,    0,  341,  338,  334,
      334,  342,  334,  334,    0,  341,  341,  344,  342,    0,

      343,    0,  343,    0,  344,    0,  342,  342,    0,  343,
      343,  343,  344,  344,  341,  343,  343,  345,  344,  346,
      334,  334,    0,  347,  345,    0,  346,  342,    0,  348,
      347,    0,  345,  345,  346,  346,  348,    0,  347,  347,
        0,  349,    0,  350,  348,  348,  345,  347,  349,  399,
      350,    0,    0,  348,    0,  351,  349,  349,  350,  350,
      352,  346,  351,  397,  399,  399,    0,  352,    0,    0,
      351,  351,  350,  350,  353,  352,  352,  354,  397,  397,
      355,  353,    0,  351,  354,  399,    0,  355,  397,  353,
      353,    0,  354,  354,  352,  355,  355,  356,  354,  357,

        0,  355,  358,    0,  356,  400,  357,    0,    0,  358,
        0,    0,  356,  356,  357,  357,  359,  358,  358,  360,
      400,  400,  638,  359,  638,  638,  360,    0,  638,  361,
      357,  359,  359,  356,  360,  360,  361,  358,    0,  362,
      360,  363,  400,  364,  361,  361,  362,    0,  363,    0,
      364,  359,    0,  361,  362,  362,  363,  363,  364,  364,
      365,    0,  364,  366,    0,  367,    0,  365,    0,    0,
      366,    0,  367,    0,    0,  365,  365,  369,  366,  366,
      367,  367,  363,  368,  369,    0,    0,  366,  370,    0,
      368,    0,  369,  369,  369,  370,  365,    0,  368,  368,

        0,  367,  368,  370,  370,  371,    0,  370,    0,  372,
        0,  373,  371,    0,    0,  391,  372,    0,  373,    0,
      371,  371,    0,  370,  372,  372,  373,  373,  389,  384,
      391,  391,  384,    0,  371,  384,    0,  384,  390,  372,
        0,    0,  391,  389,  389,    0,  373,  376,    0,  392,
      376,  384,    0,  390,  390,  376,  376,  376,    0,  393,
      376,  395,    0,  389,  392,  392,  396,  376,  376,  398,
      376,  376,    0,  390,  393,  393,  395,  395,    0,    0,
      403,  396,  396,  392,  398,  398,  395,  396,    0,  401,
      398,  402,  395,  393,  398,  403,  403,    0,  376,  376,

      377,  404,    0,  377,  401,  401,  402,  402,  377,  377,
      377,  405,  401,  377,  406,    0,  404,  404,  407,  402,
      377,  377,  408,  377,  377,  409,  405,  405,    0,  406,
      406,  410,    0,  407,  407,  404,    0,  408,  408,  408,
      409,  409,  411,    0,  406,    0,  410,  410,  405,  412,
        0,  377,  377,  385,  407,  410,  385,  411,  411,  409,
        0,  385,  385,  385,  412,  412,  385,  413,    0,    0,
      414,    0,  415,    0,  385,  416,  385,  385,  417,  411,
        0,    0,  413,  413,  412,  414,  414,  415,  415,    0,
      416,  416,  418,  417,  417,  419,  415,  421,    0,    0,

        0,    0,    0,  417,  385,  385,  387,  418,  418,  387,
      419,  419,  421,  421,  387,  387,  387,  420,  421,  387,
      418,  422,    0,  424,    0,  423,  419,  387,  425,  387,
      387,  426,  420,  420,  420,  427,  422,  422,  424,  424,
      423,  423,    0,  425,  425,  428,  426,  426,  429,  425,
      427,  427,  431,  424,  430,    0,    0,  387,  387,  423,
      428,  428,  432,  429,  429,    0,    0,  431,  431,  430,
      430,  433,  431,  429,  434,  430,  435,  432,  432,  436,
        0,  428,  437,    0,  438,    0,  433,  433,    0,  434,
      434,  435,  435,  434,  436,  436,  436,  437,  437,  438,

      438,  439,  433,  438,    0,  435,  440,  437,  441,    0,
      442,    0,  443,    0,  444,    0,  439,  439,  445,    0,
      439,  440,  440,  441,  441,  442,  442,  443,  443,  444,
      444,  446,    0,  445,  445,  445,  447,    0,  448,    0,
      449,    0,  450,  441,    0,  442,  446,  446,  451,    0,
      444,  447,  447,  448,  448,  449,  449,  450,  450,  448,
        0,  452,    0,  451,  451,    0,  447,    0,  453,    0,
      454,    0,  455,    0,    0,    0,  452,  452,  456,  451,
        0,  449,  452,  453,  453,  454,  454,  455,  455,  453,
      465,  455,    0,  456,  456,  460,    0,  465,  460,    0,

      456,  460,    0,  460,  470,  465,  465,    0,  466,  465,
      683,  470,  683,  683,    0,  466,  683,  460,  462,  470,
      470,  462,  467,  466,  466,    0,  462,  462,  462,  467,
        0,  462,    0,  462,  523,    0,  527,  467,  467,  462,
      468,  462,  462,  466,    0,    0,  469,  468,    0,  523,
      523,  527,  527,  469,    0,  468,  468,  471,    0,  467,
      472,  469,  469,    0,  471,  468,    0,  472,    0,  462,
      462,  464,  471,  471,  464,  472,  472,    0,    0,  464,
      464,  464,  469,  473,  464,    0,  474,    0,  471,  472,
      473,    0,  464,  474,  464,  464,  472,    0,  473,  473,

      475,  474,  474,  688,  476,  688,  688,  475,    0,  688,
      474,  476,  473,    0,    0,  475,  475,  477,    0,  476,
      476,  476,  464,  464,  477,  528,    0,  478,    0,  479,
      475,    0,  477,  477,  478,    0,  479,  526,  477,  480,
      528,  528,  478,  478,  479,  479,  480,  530,  478,  481,
        0,  482,  526,  526,  480,  480,  481,  526,  482,    0,
      479,  483,  530,  530,  481,  481,  482,  482,  483,    0,
        0,  480,    0,    0,  484,  530,  483,  483,  483,  485,
        0,  484,    0,    0,  486,  481,  485,    0,  482,  484,
      484,  486,    0,    0,  485,  485,  487,    0,  488,  486,

      486,  489,  484,  487,    0,  488,  534,    0,  489,    0,
        0,  487,  487,  488,  488,  488,  489,  489,  490,  485,
      491,  534,  534,  492,    0,  490,    0,  491,    0,  525,
      492,    0,    0,  490,  490,  491,  491,  490,  492,  492,
      493,    0,  494,    0,  525,  525,  534,  493,    0,  494,
      525,  491,  492,  495,    0,  493,  493,  494,  494,  496,
      495,  493,    0,  494,    0,  497,  496,    0,  495,  495,
      498,    0,  497,    0,  496,  496,  499,  498,    0,    0,
      497,  497,    0,  499,    0,  498,  498,    0,    0,  495,
      497,  499,  499,  500,  496,  501,    0,    0,  502,    0,

      500,  501,  501,    0,  499,  502,  498,    0,  500,  500,
      501,  501,  503,  502,  502,    0,    0,  507,    0,  503,
      507,  502,    0,  507,  500,  507,  536,  503,  503,  513,
      517,  538,  513,  517,    0,  513,  517,  513,  517,  507,
      508,  536,  536,  508,    0,    0,  538,  538,  508,  508,
      508,  513,  517,  508,  522,  520,  520,  522,  524,  520,
      522,  508,  522,  508,  508,  529,    0,  520,    0,  531,
        0,  532,    0,  524,  524,    0,  522,    0,    0,  524,
      529,  529,    0,    0,  531,  531,  532,  532,  532,  524,
        0,  508,  508,  510,  533,  529,  510,  520,  520,  531,

        0,  510,  510,  510,  535,    0,  510,  537,    0,  533,
      533,    0,  539,    0,  510,    0,  510,  510,    0,  535,
      535,  546,  537,  537,    0,  540,  537,  539,  539,    0,
      533,    0,  541,  539,  535,    0,  546,  546,    0,    0,
      540,  540,  542,    0,  510,  510,  516,  541,  541,  516,
      540,    0,  541,    0,  516,  516,  516,  542,  542,  516,
      543,    0,  542,    0,  544,    0,    0,  516,  545,  516,
      516,  547,    0,  548,    0,  543,  543,    0,    0,  544,
      544,  543,    0,  545,  545,    0,  547,  547,  548,  548,
      549,  547,    0,  545,    0,  550,    0,  516,  516,  519,

      544,  552,  519,  551,    0,  549,  549,  519,  519,  519,
      550,  550,  519,  553,    0,  554,  552,  552,  551,  551,
      519,  555,  519,  519,  551,    0,    0,  556,  553,  553,
      554,  554,  557,    0,    0,  550,  555,  555,  558,    0,
      552,  553,  556,  556,  559,    0,  555,  557,  557,  554,
      519,  519,  560,  558,  558,    0,    0,    0,  561,  559,
      559,  562,  556,  556,  563,    0,  564,  560,  560,    0,
        0,  560,  559,  561,  561,    0,  562,  562,  565,  563,
      563,  564,  564,  566,    0,  563,  567,  564,  568,    0,
        0,  562,  569,  565,  565,    0,  570,    0,  566,  566,

      571,  567,  567,  568,  568,  572,  565,  569,  569,    0,
      567,  570,  570,  573,    0,  571,  571,  574,    0,  566,
      572,  572,  575,    0,  568,  571,  576,    0,  573,  573,
      577,    0,  574,  574,  578,    0,  573,  575,  575,  572,
      579,  576,  576,  580,    0,  577,  577,    0,    0,  578,
      578,  639,    0,    0,  581,  579,  579,  581,  580,  580,
      581,  576,  581,    0,  579,  584,  639,  639,  584,    0,
        0,  584,    0,  584,  588,  588,  581,  714,  588,  714,
      714,    0,    0,  714,  580,  583,  588,  584,  583,    0,
        0,    0,    0,  583,  583,  583,  590,    0,  583,  590,

      583,    0,  590,    0,  590,  591,  583,  592,  583,  583,
        0,    0,  591,    0,  592,    0,  588,  588,  590,  593,
      591,  591,  592,  592,  596,    0,  593,    0,    0,  641,
      591,  596,    0,    0,  593,  593,  583,  583,  587,  596,
      596,  587,  594,    0,  641,  641,  587,  587,  587,  594,
        0,  587,    0,  595,    0,  593,  597,  594,  594,  587,
      595,  587,  587,  597,  641,  594,  598,    0,  595,  595,
        0,  597,  597,  598,    0,    0,  599,    0,  600,    0,
      597,  598,  598,  599,    0,  600,  598,  595,  601,  587,
      587,  599,  599,  600,  600,  601,    0,    0,  602,    0,

      603,    0,  604,  601,  601,  602,    0,  603,  600,  604,
        0,    0,  599,  602,  602,  603,  603,  604,  604,  605,
        0,  606,  601,    0,    0,  607,  605,  604,  606,  602,
        0,  603,  607,    0,  605,  605,  606,  606,  608,  605,
      607,  607,    0,  609,    0,  608,    0,    0,  610,    0,
      609,    0,    0,  608,  608,  610,    0,  606,  609,  609,
      611,    0,  612,  610,  610,  613,  609,  611,  719,  612,
      719,  719,  613,    0,  719,  611,  611,  612,  612,  614,
      613,  613,    0,    0,  610,  613,  614,    0,    0,  615,
        0,  611,  616,  612,  614,  614,  615,    0,  614,  616,

        0,    0,  617,    0,  615,  615,  618,  616,  616,  617,
      646,    0,    0,  618,    0,    0,  619,  617,  617,  617,
        0,  618,  618,  619,  654,  646,  646,  618,  620,    0,
      621,  619,  619,  619,  622,  620,    0,  621,  646,  654,
      654,  622,    0,  620,  620,  621,  621,  629,  629,  622,
      622,  629,  623,    0,  621,  623,    0,    0,  623,  629,
      623,  643,  620,    0,  626,  631,    0,  626,  631,    0,
      626,  631,  626,  631,  623,  625,  643,  643,  625,    0,
        0,  643,    0,  625,  625,  625,  626,  631,  625,  629,
      629,  634,  634,    0,  632,  634,  625,  632,  625,  625,

      632,  636,  632,  634,  636,    0,  640,  636,    0,  636,
        0,    0,    0,    0,  644,    0,  632,    0,    0,    0,
        0,  640,  640,  636,    0,    0,  625,  625,  628,  644,
      644,  628,    0,  634,  634,  644,  628,  628,  628,  637,
      640,  628,  637,  642,    0,  637,    0,  637,  645,  628,
      647,  628,  628,    0,    0,  648,    0,  649,  642,  642,
        0,  637,  650,  645,  645,  647,  647,    0,    0,  645,
      648,  648,  649,  649,  642,  647,    0,  650,  650,  628,
      628,  651,    0,  650,    0,    0,  652,    0,  653,    0,
      655,  648,  656,    0,  649,  657,  651,  651,  658,    0,

      651,  652,  652,  653,  653,  655,  655,  656,  656,  653,
      657,  657,  659,  658,  658,    0,    0,  660,    0,  658,
      655,  661,  652,  662,    0,  663,    0,  659,  659,  664,
        0,  657,  660,  660,  665,    0,  661,  661,  662,  662,
      663,  663,  666,    0,  664,  664,  667,    0,  662,  665,
      665,    0,  660,  668,    0,  669,    0,  666,  666,  670,
        0,  667,  667,  671,    0,  664,  666,  667,  668,  668,
      669,  669,  669,    0,  670,  670,  672,    0,  671,  671,
      673,    0,  674,    0,  675,    0,    0,  676,    0,  668,
      677,  672,  672,  678,    0,  673,  673,  674,  674,  675,

      675,  673,  676,  676,  679,  677,  677,    0,  678,  678,
        0,  680,  721,  681,  721,  721,    0,    0,  721,  679,
      679,    0,    0,  676,    0,  679,  680,  680,  681,  681,
      682,  677,    0,  682,    0,    0,  682,    0,  682,  684,
      684,  686,  687,  684,  686,  687,  723,  686,  687,  686,
      687,  684,  682,  689,    0,  715,  715,    0,  690,  715,
      689,  723,  723,  686,  687,  690,    0,  715,  689,  689,
      689,  691,    0,  690,  690,  690,  692,    0,  691,    0,
        0,  684,  684,  692,    0,    0,  691,  691,    0,  693,
        0,  692,  692,    0,  694,    0,  693,  715,  715,    0,

      695,  694,    0,    0,  693,  693,    0,  695,  691,  694,
      694,  696,    0,  692,  693,  695,  695,  697,  696,    0,
        0,  698,    0,  699,  697,    0,  696,  696,  698,    0,
      699,    0,  697,  697,    0,  700,  698,  698,  699,  699,
      701,    0,  700,  750,  697,  750,  750,  701,    0,  750,
      700,  700,    0,    0,    0,  701,  701,  698,  702,  699,
      700,  701,  703,    0,  713,  702,    0,  713,  704,  703,
      713,    0,  713,  702,  702,  704,    0,  703,  703,  702,
        0,  705,    0,  704,  704,  706,  713,  707,  705,    0,
        0,    0,  706,    0,  707,  704,  705,  705,  708,    0,

      706,  706,  707,  707,  709,  708,  706,    0,    0,  710,
        0,  709,    0,  708,  708,  705,  710,  727,    0,  709,
      709,  711,    0,  707,  710,  710,  708,  709,  711,    0,
        0,  712,  727,  727,    0,    0,  711,  711,  712,    0,
        0,    0,  717,    0,  710,  717,  712,  712,  717,    0,
      717,  722,  718,  720,  724,  718,  720,  711,  718,  720,
      718,  720,  712,  725,  717,  726,  722,  722,  728,  724,
      724,  729,    0,  730,  718,  720,  722,    0,  725,  725,
      726,  726,    0,  728,  728,  731,  729,  729,  730,  730,
      732,    0,  722,  724,  730,  726,  733,  725,  734,  728,

      731,  731,    0,  735,    0,  732,  732,  736,    0,    0,
        0,  733,  733,  734,  734,  737,    0,  733,  735,  735,
      738,    0,  736,  736,  735,  739,  732,  740,  736,  741,
      737,  737,    0,    0,    0,  738,  738,  742,    0,  743,
      739,  739,  740,  740,  741,  741,  744,    0,  740,  745,
      741,    0,  742,  742,  743,  743,  746,    0,    0,    0,
      747,  744,  744,  748,  745,  745,  751,  739,    0,    0,
        0,  746,  746,  751,  744,  747,  747,  749,  748,  748,
      749,  751,  751,  749,  772,  749,  772,  772,  752,    0,
      772,  753,    0,  746,  754,  752,    0,    0,  753,  749,

        0,  754,  751,  752,  752,  755,  753,  753,    0,  754,
      754,  756,  755,  754,    0,  757,    0,    0,  756,    0,
      755,  755,  757,    0,  752,  753,  756,  756,    0,    0,
      757,  757,  758,    0,  759,  755,  757,  760,    0,  758,
        0,  759,    0,    0,  760,    0,    0,  758,  758,  759,
      759,  761,  760,  760,  762,    0,  763,  760,  761,    0,
        0,  762,    0,  763,  759,    0,  761,  761,  764,  762,
      762,  763,  763,  758,  765,  764,  774,    0,  766,    0,
      767,  765,    0,  764,  764,  766,    0,  767,  763,  765,
      765,  774,  774,  766,  766,  767,  767,  768,  764,  765,

      769,    0,  770,    0,  768,    0,  774,  769,  773,  770,
        0,    0,  768,  768,    0,  769,  769,  770,  770,  771,
        0,  767,  771,  773,  773,  771,    0,  771,  775,  773,
      776,    0,  768,  770,  777,  769,  778,    0,  779,    0,
      780,  771,  781,  775,  775,  776,  776,    0,    0,  777,
      777,  778,  778,  779,  779,  780,  780,  781,  781,  782,
        0,  783,  781,  784,  777,  785,  776,    0,  786,    0,
      787,    0,    0,    0,  782,  782,  783,  783,  784,  784,
      785,  785,  783,  786,  786,  787,  787,  788,    0,  789,
        0,    0,  790,    0,  788,    0,  789,    0,    0,  790,

      785,    0,  788,  788,  789,  789,  787,  790,  790,  790,
      791,    0,  788,  792,  789,  793,    0,  791,    0,    0,
      792,    0,  793,    0,    0,  791,  791,  794,  792,  792,
      793,  793,  795,    0,  794,    0,  792,  794,  805,  795,
        0,    0,  794,  794,  796,  793,  791,  795,  795,  797,
        0,  796,    0,  805,  805,  795,  797,    0,    0,  796,
      796,  798,    0,  799,  797,  797,    0,  800,  798,    0,
      799,  804,    0,  797,  800,    0,  798,  798,  799,  799,
      798,  801,  800,  800,  802,    0,  804,  804,  801,  806,
        0,  802,  807,  799,  803,    0,  801,  801,  808,  802,

      802,  803,  801,  809,  806,  806,  804,  807,  807,  803,
      803,  810,    0,  808,  808,  811,    0,    0,  809,  809,
        0,  803,  812,    0,  806,    0,  810,  810,  813,  812,
      811,  811,  810,    0,  814,  813,    0,  812,  812,    0,
      811,  814,    0,  813,  813,    0,  815,    0,  816,  814,
      814,    0,  819,  815,    0,  816,    0,    0,  817,  819,
      812,  815,  815,  816,  816,  817,  813,  819,  819,    0,
      814,  818,    0,  817,  817,  819,    0,  815,  818,  822,
        0,  820,    0,  817,  816,  837,  818,  818,  820,  823,
        0,  821,  818,    0,  822,  822,  820,  820,  821,    0,

      837,  837,  824,    0,  823,  823,  821,  821,    0,  824,
        0,    0,  825,    0,  822,  826,  820,  824,  824,  825,
      823,    0,  826,  824,    0,    0,    0,  825,  825,  827,
      826,  826,  828,  825,  829,    0,  827,    0,    0,  828,
      826,  829,    0,    0,  827,  827,    0,  828,  828,  829,
      829,  830,    0,  829,  831,    0,  832,    0,  830,    0,
        0,  831,    0,  827,    0,    0,  830,  830,  833,  831,
      831,  832,  832,  834,    0,  833,    0,    0,  835,    0,
      834,    0,    0,  833,  833,  835,  832,    0,  834,  834,
      836,    0,  838,  835,  835,  839,    0,  836,    0,  838,

        0,    0,  839,    0,    0,  836,  836,  838,  838,  835,
      839,  839,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  838,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  845,
      845,    0,    0,  845,  846,  846,  846,  846,  846,  846,
      847,  847,    0,    0,  847,  848,  848,  848,  848,  848,
      848,  849,  849,    0,    0,  849,  850,  850,  850,  850,
      850,  850,  851,    0,    0,    0,  851,  851,  851,  851,

      851,  852,  852,    0,  852,  852,  852,  852,  852,  852,
      853,    0,  853,  853,    0,    0,  853,  853,  854,  854,
      854,  854,  855,  855,  855,  855,  856,  856,  856,  856,
      857,  857,  857,  857,  857,  857,  858,    0,    0,    0,
      858,  858,  858,  858,  858,  859,  859,  859,  859,  859,
      859,  860,    0,    0,    0,  860,  860,  860,  860,  860,
      861,  861,  861,  861,  861,  861,  862,    0,    0,    0,
      862,  862,  862,  862,  862,  863,    0,    0,    0,  863,
      863,  863,  863,  863,  864,    0,    0,  864,  864,  864,
      864,  864,  864,  865,    0,    0,    0,  865,  865,  865,

      865,  865,  866,    0,    0,    0,  866,  866,  866,  866,
      866,  867,    0,    0,  867,  867,  867,  867,  867,  867,
      868,    0,    0,    0,  868,  868,  868,  868,  868,  869,
        0,    0,    0,  869,  869,  869,  869,  869,  870,    0,
        0,  870,  870,  870,  870,  870,  870,  871,    0,    0,
        0,  871,  871,  871,  871,  871,  872,    0,    0,    0,
      872,  872,  872,  872,  872,  873,    0,    0,    0,  873,
      873,  873,  873,  873,  874,    0,    0,  874,  874,  874,
      874,  874,  874,  875,    0,    0,    0,  875,  875,  875,
      875,  875,  876,    0,    0,  876,  876,  876,  876,  876,

      876,  877,    0,    0,  877,  877,  877,  877,  877,  877,
      878,    0,    0,    0,  878,  878,  878,  878,  878,  879,
        0,    0,  879,  879,  879,  879,  879,  879,  880,    0,
        0,  880,  880,  880,  880,  880,  880,  881,    0,    0,
        0,  881,  881,  881,  881,  881,  882,    0,    0,  882,
      882,  882,  882,  882,  882,  883,    0,    0,  883,  883,
      883,  883,  883,  883,  884,    0,    0,  884,  884,  884,
      884,  884,  884,  885,    0,    0,  885,  885,  885,  885,
      885,  885,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,

      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
#define INITIAL 0
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "main.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

int braceCount;
int parenCount;
string latexCode;
#define ID_MODE 1

#define CMD_MODE 2

#define FILE_NAME_MODE 3

#define STRING_MODE 4

#define LATEX_MODE 5

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 83 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 841 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5083 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 87 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 91 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 97 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 98 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 102 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 106 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 107 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 108 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 109 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 110 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 111 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 112 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 113 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 114 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 115 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 116 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 117 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 119 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 120 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 121 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
return KW_OREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 124 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 126 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 130 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 131 "../../../src/Mixfix/lexer.ll"
return KW_XUNIFY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 132 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_CONTEXT;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_OPS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 94:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 98:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 255 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 256 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 260 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 270 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 271 "../../../src/Mixfix/lexer.ll"
FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 272 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK


case 146:
YY_RULE_SETUP
#line 276 "../../../src/Mixfix/lexer.ll"
// eat white space
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 277 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 148:
YY_RULE_SETUP
#line 285 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 290 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 150:
YY_RULE_SETUP
#line 299 "../../../src/Mixfix/lexer.ll"
latexCode += yytext;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 300 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = latexCode.c_str();
						  return LATEX_STRING;
						}
					    }
					  latexCode += yytext;
					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  latexCode += yytext;
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 334 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 340 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 341 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 342 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 347 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 841 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 841 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 840);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 347 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"
