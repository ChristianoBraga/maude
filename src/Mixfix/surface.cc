
/*  A Bison parser, made from surface.yy
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FILE_NAME_STRING	257
#define	UNINTERPRETED_STRING	258
#define	LATEX_STRING	259
#define	KW_FMOD	260
#define	KW_MOD	261
#define	KW_OMOD	262
#define	KW_PARSE	263
#define	KW_NORMALIZE	264
#define	KW_REDUCE	265
#define	KW_REWRITE	266
#define	KW_LOOP	267
#define	KW_NARROW	268
#define	KW_MATCH	269
#define	KW_XMATCH	270
#define	KW_UNIFY	271
#define	KW_XUNIFY	272
#define	KW_EREWRITE	273
#define	KW_FREWRITE	274
#define	KW_OREWRITE	275
#define	KW_CONTINUE	276
#define	KW_SEARCH	277
#define	KW_SET	278
#define	KW_SHOW	279
#define	KW_ON	280
#define	KW_OFF	281
#define	KW_TRACE	282
#define	KW_CONTEXT	283
#define	KW_WHOLE	284
#define	KW_SELECT	285
#define	KW_DESELECT	286
#define	KW_CONDITION	287
#define	KW_SUBSTITUTION	288
#define	KW_PRINT	289
#define	KW_GRAPH	290
#define	KW_MIXFIX	291
#define	KW_FLAT	292
#define	KW_WITH	293
#define	KW_PARENS	294
#define	KW_ALIASES	295
#define	KW_GC	296
#define	KW_TIME	297
#define	KW_STATS	298
#define	KW_TIMING	299
#define	KW_CMD	300
#define	KW_BREAKDOWN	301
#define	KW_BREAK	302
#define	KW_PATH	303
#define	KW_MODULE	304
#define	KW_ALL	305
#define	KW_SORTS	306
#define	KW_OPS	307
#define	KW_VARS	308
#define	KW_MBS	309
#define	KW_EQS	310
#define	KW_RLS	311
#define	KW_SUMMARY	312
#define	KW_KINDS	313
#define	KW_ADVISE	314
#define	KW_VERBOSE	315
#define	KW_DO	316
#define	KW_CLEAR	317
#define	KW_INCLUDE	318
#define	KW_EXCLUDE	319
#define	KW_CONCEAL	320
#define	KW_REVEAL	321
#define	KW_COMPILE	322
#define	KW_COUNT	323
#define	KW_DEBUG	324
#define	KW_RESUME	325
#define	KW_ABORT	326
#define	KW_STEP	327
#define	KW_WHERE	328
#define	KW_CREDUCE	329
#define	KW_DUMP	330
#define	KW_PROFILE	331
#define	KW_NUMBER	332
#define	KW_RAT	333
#define	KW_COLOR	334
#define	SIMPLE_NUMBER	335
#define	KW_PWD	336
#define	KW_CD	337
#define	KW_PUSHD	338
#define	KW_POPD	339
#define	KW_LS	340
#define	KW_LOAD	341
#define	KW_QUIT	342
#define	KW_EOF	343
#define	KW_ENDFM	344
#define	KW_ENDM	345
#define	KW_ENDOM	346
#define	KW_IMPORT	347
#define	KW_SORT	348
#define	KW_SUBSORT	349
#define	KW_OP	350
#define	KW_MSGS	351
#define	KW_VAR	352
#define	KW_CLASS	353
#define	KW_SUBCLASS	354
#define	KW_MB	355
#define	KW_CMB	356
#define	KW_EQ	357
#define	KW_CEQ	358
#define	KW_RL	359
#define	KW_CRL	360
#define	KW_IS	361
#define	KW_ARROW	362
#define	KW_ARROW2	363
#define	KW_PARTIAL	364
#define	KW_IF	365
#define	KW_LABEL	366
#define	KW_TO	367
#define	KW_ASSOC	368
#define	KW_COMM	369
#define	KW_ID	370
#define	KW_IDEM	371
#define	KW_ITER	372
#define	KW_LEFT	373
#define	KW_RIGHT	374
#define	KW_PREC	375
#define	KW_GATHER	376
#define	KW_STRAT	377
#define	KW_POLY	378
#define	KW_MEMO	379
#define	KW_FROZEN	380
#define	KW_CTOR	381
#define	KW_LATEX	382
#define	KW_SPECIAL	383
#define	KW_CONFIG	384
#define	KW_OBJ	385
#define	KW_MSG	386
#define	KW_DITTO	387
#define	KW_FORMAT	388
#define	KW_ID_HOOK	389
#define	KW_OP_HOOK	390
#define	KW_TERM_HOOK	391
#define	KW_IN	392
#define	IDENTIFIER	393
#define	NUMERIC_ID	394

#line 27 "surface.yy"

#include <string>

//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "moduleExpression.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "visibleModule.hh"  // HACK
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

#include "main.hh"
#define clear()		bubble.contractTo(0);
#define store(token)	bubble.append(token)
#define YYPARSE_PARAM	parseResult
#define PARSE_RESULT	(*((UserLevelRewritingContext::ParseResult*) parseResult))

#define CM		interpreter.getCurrentModule()

void lexerInitialMode();
void lexerIdMode();
void lexerCmdMode();
void lexerFileNameMode();
void lexerStringMode();
void lexerLatexMode();
bool handleEof();
bool includeFile(const string& directory, const string& fileName, bool silent, int lineNr);
void eatComment(bool firstNonWhite);

Vector<Token> bubble;
Vector<Token> moduleExpr;

//PreModule* currentModule = 0;
Int64 number;
Int64 number2;

static void yyerror(char *s);
void cleanUpParser();

#line 83 "surface.yy"
typedef union
{
  bool yyBool;
  Int64 yyInt64;
  const char* yyString;
  Token yyToken;
  ModuleExpression* yyModuleExpression;
  Renaming* yyRenaming;
} YYSTYPE;
#line 93 "surface.yy"

int yylex(YYSTYPE* lvalp);
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		958
#define	YYFLAG		-32768
#define	YYNTBASE	153

#define YYTRANSLATE(x) ((unsigned)(x) <= 394 ? yytranslate[x] : 372)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   114,
   115,   125,   124,   120,     2,   116,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   112,     2,   117,
   113,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   118,     2,   119,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,   121,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   122,   123,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,     9,    10,    14,    15,    19,
    21,    22,    26,    27,    31,    33,    34,    38,    40,    42,
    44,    48,    52,    56,    60,    64,    66,    71,    76,    81,
    82,    83,    91,    92,    93,   101,   102,   103,   111,   113,
   115,   117,   119,   121,   123,   125,   127,   129,   131,   133,
   135,   138,   139,   142,   143,   146,   147,   148,   153,   154,
   159,   160,   161,   170,   174,   178,   184,   185,   186,   194,
   195,   196,   197,   208,   209,   210,   218,   219,   220,   221,
   232,   235,   237,   238,   239,   247,   248,   249,   250,   261,
   263,   267,   271,   272,   278,   279,   280,   289,   291,   294,
   296,   300,   304,   307,   309,   310,   314,   315,   320,   323,
   325,   327,   328,   333,   340,   342,   344,   347,   348,   350,
   351,   356,   360,   362,   366,   367,   370,   372,   374,   377,
   380,   382,   384,   385,   389,   391,   393,   396,   397,   403,
   404,   410,   411,   417,   418,   424,   426,   428,   430,   431,
   437,   439,   441,   443,   444,   450,   455,   457,   460,   462,
   465,   467,   470,   471,   478,   479,   486,   487,   494,   497,
   498,   501,   502,   503,   509,   512,   513,   514,   520,   523,
   524,   525,   531,   534,   535,   536,   542,   545,   546,   547,
   553,   556,   557,   559,   562,   564,   565,   570,   571,   577,
   580,   583,   585,   587,   590,   592,   594,   596,   598,   599,
   604,   606,   608,   610,   612,   614,   616,   618,   620,   622,
   624,   626,   628,   630,   632,   634,   636,   638,   640,   642,
   644,   646,   648,   650,   652,   654,   656,   658,   660,   662,
   664,   666,   668,   670,   672,   674,   676,   678,   680,   682,
   684,   686,   688,   690,   692,   694,   696,   698,   700,   702,
   704,   706,   708,   710,   712,   714,   716,   718,   720,   722,
   724,   726,   728,   730,   732,   734,   736,   738,   740,   742,
   744,   746,   748,   750,   752,   754,   756,   758,   760,   762,
   764,   766,   768,   770,   772,   774,   776,   778,   780,   782,
   784,   786,   788,   790,   792,   794,   796,   798,   800,   802,
   804,   806,   808,   810,   812,   814,   816,   818,   820,   822,
   824,   826,   828,   830,   832,   834,   836,   838,   840,   842,
   844,   846,   848,   850,   852,   854,   856,   858,   860,   862,
   864,   866,   868,   870,   872,   874,   875,   876,   883,   884,
   885,   892,   893,   897,   898,   902,   903,   908,   909,   914,
   915,   920,   921,   926,   927,   931,   932,   936,   941,   942,
   946,   947,   952,   953,   959,   960,   966,   967,   973,   974,
   980,   985,   986,   992,   993,   999,  1000,  1006,  1007,  1013,
  1014,  1020,  1021,  1027,  1028,  1034,  1035,  1041,  1042,  1048,
  1049,  1055,  1056,  1062,  1067,  1072,  1073,  1079,  1085,  1091,
  1098,  1104,  1110,  1117,  1123,  1129,  1135,  1141,  1148,  1155,
  1161,  1167,  1173,  1179,  1185,  1191,  1196,  1202,  1208,  1214,
  1220,  1226,  1232,  1238,  1244,  1249,  1250,  1251,  1259,  1260,
  1261,  1270,  1275,  1281,  1287,  1292,  1298,  1301,  1304,  1307,
  1310,  1316,  1321,  1322,  1326,  1328,  1330,  1332,  1334,  1336,
  1338,  1340,  1342,  1344,  1346,  1348,  1349,  1351,  1352,  1353,
  1358,  1359,  1364,  1365,  1366,  1373,  1375,  1376,  1380,  1381,
  1386,  1387,  1392,  1393,  1397,  1398,  1403,  1405,  1406,  1410,
  1411,  1416,  1418,  1419,  1423,  1424,  1429,  1430,  1435,  1436,
  1440,  1441,  1446,  1448,  1449,  1453,  1454,  1458,  1459,  1464,
  1466,  1467,  1471,  1472,  1477,  1479,  1480,  1484,  1485,  1490,
  1492,  1495,  1496,  1499,  1500,  1503,  1504,  1506,  1508,  1510,
  1512,  1514,  1516,  1518,  1520,  1521,  1526,  1528,  1530,  1532,
  1534,  1536,  1538,  1540,  1541,  1546,  1548,  1550,  1552,  1554,
  1556,  1558,  1559,  1564,  1566,  1568,  1570,  1572,  1574,  1576,
  1578,  1579,  1584,  1586,  1588,  1590,  1592,  1594,  1596,  1597,
  1602,  1604,  1606,  1608,  1610,  1612,  1614,  1615,  1620,  1622,
  1624,  1626,  1628,  1630,  1632,  1633,  1638,  1640,  1642,  1644,
  1646,  1648,  1649,  1654,  1657,  1659,  1661,  1662,  1667,  1669,
  1671,  1673,  1675,  1677,  1679
};

static const short yyrhs[] = {   154,
     0,     0,   165,     0,   155,     0,   273,     0,     0,   150,
   156,     3,     0,     0,    87,   157,     3,     0,    82,     0,
     0,    83,   158,     3,     0,     0,    84,   159,     3,     0,
    85,     0,     0,    86,   160,     4,     0,    88,     0,    89,
     0,   258,     0,   161,   124,   161,     0,   161,   125,   162,
     0,   114,   161,   115,     0,   114,   163,   115,     0,   163,
   120,   164,     0,   164,     0,    94,   258,   123,   258,     0,
   122,   267,   123,   267,     0,    96,   267,   123,   267,     0,
     0,     0,     6,   166,   258,   107,   167,   178,   172,     0,
     0,     0,     7,   168,   258,   107,   169,   179,   174,     0,
     0,     0,     8,   170,   258,   107,   171,   180,   176,     0,
    90,     0,   173,     0,    91,     0,    92,     0,    91,     0,
   175,     0,    90,     0,    92,     0,    92,     0,   177,     0,
    90,     0,    91,     0,   178,   181,     0,     0,   179,   196,
     0,     0,   180,   202,     0,     0,     0,    93,   182,   161,
   116,     0,     0,    94,   183,   240,   116,     0,     0,     0,
    95,   258,   184,   239,   117,   185,   240,   116,     0,    96,
   210,   216,     0,    53,   213,   216,     0,    98,   209,   112,
   219,   116,     0,     0,     0,   101,   186,   243,   112,   187,
   251,   116,     0,     0,     0,     0,   102,   188,   243,   112,
   189,   249,   111,   190,   251,   116,     0,     0,     0,   103,
   191,   245,   113,   192,   251,   116,     0,     0,     0,     0,
   104,   193,   245,   113,   194,   249,   111,   195,   251,   116,
     0,     1,   116,     0,   181,     0,     0,     0,   105,   197,
   247,   109,   198,   251,   116,     0,     0,     0,     0,   106,
   199,   247,   109,   200,   249,   111,   201,   251,   116,     0,
   196,     0,   144,   210,   216,     0,    97,   213,   216,     0,
     0,    99,   258,   203,   206,   116,     0,     0,     0,   100,
   258,   204,   239,   117,   205,   240,   116,     0,   121,     0,
   121,   207,     0,   208,     0,   207,   120,   208,     0,   259,
   112,   258,     0,   209,   264,     0,   264,     0,     0,   258,
   211,   243,     0,     0,   114,   212,   241,   115,     0,   213,
   214,     0,   214,     0,   264,     0,     0,   114,   215,   241,
   115,     0,   112,   218,   217,   219,   222,   116,     0,   108,
     0,   110,     0,   218,   219,     0,     0,   266,     0,     0,
   118,   220,   221,   119,     0,   221,   120,   266,     0,   266,
     0,   118,   223,   119,     0,     0,   223,   225,     0,   225,
     0,   128,     0,   131,   128,     0,   132,   128,     0,   126,
     0,   127,     0,     0,   224,   226,   255,     0,   129,     0,
   130,     0,   133,   151,     0,     0,   134,   114,   227,   233,
   115,     0,     0,   146,   114,   228,   233,   115,     0,     0,
   135,   114,   229,   233,   115,     0,     0,   136,   114,   230,
   233,   115,     0,   137,     0,   139,     0,   138,     0,     0,
   138,   114,   231,   233,   115,     0,   142,     0,   143,     0,
   144,     0,     0,   140,   114,   232,     5,   115,     0,   141,
   114,   234,   115,     0,   145,     0,   233,   151,     0,   151,
     0,   234,   235,     0,   235,     0,   147,   258,     0,     0,
   147,   258,   114,   236,   241,   115,     0,     0,   148,   258,
   114,   237,   241,   115,     0,     0,   149,   258,   114,   238,
   241,   115,     0,   239,   265,     0,     0,   240,   259,     0,
     0,     0,   241,   114,   242,   241,   115,     0,   241,   258,
     0,     0,     0,   243,   114,   244,   241,   115,     0,   243,
   264,     0,     0,     0,   245,   114,   246,   241,   115,     0,
   245,   262,     0,     0,     0,   247,   114,   248,   241,   115,
     0,   247,   261,     0,     0,     0,   249,   114,   250,   241,
   115,     0,   249,   263,     0,     0,   252,     0,   251,   116,
     0,   116,     0,     0,   114,   253,   241,   115,     0,     0,
   251,   114,   254,   241,   115,     0,   252,   268,     0,   251,
   260,     0,   259,     0,   256,     0,   255,   256,     0,   267,
     0,   269,     0,   270,     0,   116,     0,     0,   114,   257,
   241,   115,     0,   267,     0,   268,     0,   270,     0,   271,
     0,   116,     0,   267,     0,   268,     0,   270,     0,   271,
     0,   267,     0,   270,     0,   271,     0,   267,     0,   268,
     0,   271,     0,   116,     0,   117,     0,   112,     0,   108,
     0,   110,     0,   113,     0,   111,     0,   107,     0,   267,
     0,   268,     0,   271,     0,   116,     0,   117,     0,   112,
     0,   108,     0,   110,     0,   109,     0,   111,     0,   107,
     0,   267,     0,   268,     0,   271,     0,   116,     0,   117,
     0,   112,     0,   108,     0,   110,     0,   113,     0,   109,
     0,   107,     0,   267,     0,   268,     0,   271,     0,   116,
     0,   117,     0,   108,     0,   110,     0,   113,     0,   109,
     0,   111,     0,   107,     0,   267,     0,   268,     0,   271,
     0,   116,     0,   112,     0,   108,     0,   110,     0,   113,
     0,   109,     0,   111,     0,   107,     0,   267,     0,   268,
     0,   272,     0,   113,     0,   109,     0,   111,     0,   107,
     0,   151,     0,   120,     0,   121,     0,   122,     0,   123,
     0,   124,     0,   125,     0,   144,     0,   269,     0,    93,
     0,    94,     0,    95,     0,    96,     0,    53,     0,    98,
     0,    97,     0,    99,     0,   100,     0,   101,     0,   102,
     0,   103,     0,   104,     0,   105,     0,   106,     0,    90,
     0,    91,     0,    92,     0,   117,     0,   112,     0,   108,
     0,   110,     0,   113,     0,   109,     0,   111,     0,   107,
     0,   118,     0,   119,     0,   272,     0,   126,     0,   127,
     0,   128,     0,   129,     0,   130,     0,   131,     0,   132,
     0,   133,     0,   134,     0,   135,     0,   136,     0,   137,
     0,   139,     0,   140,     0,   141,     0,   138,     0,   142,
     0,   143,     0,   145,     0,   146,     0,   147,     0,   148,
     0,   149,     0,     0,     0,    31,   274,   352,   275,   350,
   116,     0,     0,     0,    76,   276,   352,   277,   350,   116,
     0,     0,     9,   278,   316,     0,     0,    75,   279,   316,
     0,     0,   314,    11,   280,   316,     0,     0,   314,    12,
   281,   322,     0,     0,   314,    19,   282,   322,     0,     0,
   314,    20,   283,   332,     0,     0,    23,   284,   322,     0,
     0,   313,   285,   322,     0,   314,    22,   315,   116,     0,
     0,    13,   286,   316,     0,     0,   114,   287,   349,   115,
     0,     0,    28,   310,   288,   368,   116,     0,     0,    28,
   311,   289,   368,   116,     0,     0,    48,   310,   290,   368,
   116,     0,     0,    35,   312,   291,   368,   116,     0,    62,
    63,   137,   116,     0,     0,    25,     7,   292,   350,   116,
     0,     0,    25,    50,   293,   350,   116,     0,     0,    25,
    51,   294,   350,   116,     0,     0,    25,    52,   295,   350,
   116,     0,     0,    25,    53,   296,   350,   116,     0,     0,
    25,    54,   297,   350,   116,     0,     0,    25,    55,   298,
   350,   116,     0,     0,    25,    56,   299,   350,   116,     0,
     0,    25,    57,   300,   350,   116,     0,     0,    25,    58,
   301,   350,   116,     0,     0,    25,    59,   302,   350,   116,
     0,    25,    49,    81,   116,     0,    25,    23,    36,   116,
     0,     0,    25,    77,   303,   350,   116,     0,    24,    25,
    60,   309,   116,     0,    24,    25,    44,   309,   116,     0,
    24,    25,    13,    44,   309,   116,     0,    24,    25,    45,
   309,   116,     0,    24,    25,    47,   309,   116,     0,    24,
    25,    13,    45,   309,   116,     0,    24,    25,    46,   309,
   116,     0,    24,    25,    42,   309,   116,     0,    24,    35,
    37,   309,   116,     0,    24,    35,    38,   309,   116,     0,
    24,    35,    39,    41,   309,   116,     0,    24,    35,    39,
    40,   309,   116,     0,    24,    35,    36,   309,   116,     0,
    24,    35,    66,   309,   116,     0,    24,    35,    78,   309,
   116,     0,    24,    35,    79,   309,   116,     0,    24,    35,
    80,   309,   116,     0,    24,    35,   146,   309,   116,     0,
    24,    28,   309,   116,     0,    24,    28,    33,   309,   116,
     0,    24,    28,    29,   309,   116,     0,    24,    28,    30,
   309,   116,     0,    24,    28,    34,   309,   116,     0,    24,
    28,    31,   309,   116,     0,    24,    28,    55,   309,   116,
     0,    24,    28,    56,   309,   116,     0,    24,    28,    57,
   309,   116,     0,    24,    48,   309,   116,     0,     0,     0,
    24,    64,   304,   371,   305,   309,   116,     0,     0,     0,
    24,     8,    64,   306,   371,   307,   309,   116,     0,    24,
    61,   309,   116,     0,    24,    63,   137,   309,   116,     0,
    24,    68,    69,   309,   116,     0,    24,    77,   309,   116,
     0,    24,    63,    77,   309,   116,     0,    71,   116,     0,
    72,   116,     0,    73,   116,     0,    74,   116,     0,    24,
    42,    25,   309,   116,     0,    24,    44,   309,   116,     0,
     0,     1,   308,   116,     0,    26,     0,    27,     0,    31,
     0,    32,     0,    65,     0,    64,     0,    66,     0,    67,
     0,    16,     0,    15,     0,    70,     0,     0,    81,     0,
     0,     0,   150,   317,   351,   319,     0,     0,   358,   318,
   350,   116,     0,     0,     0,   112,   320,   352,   321,   350,
   116,     0,   116,     0,     0,   118,   323,   326,     0,     0,
   150,   324,   351,   319,     0,     0,   360,   325,   350,   116,
     0,     0,   152,   327,   329,     0,     0,   362,   328,   350,
   116,     0,   116,     0,     0,   119,   330,   316,     0,     0,
   364,   331,   350,   116,     0,   116,     0,     0,   118,   333,
   336,     0,     0,   150,   334,   351,   319,     0,     0,   360,
   335,   350,   116,     0,     0,   152,   337,   339,     0,     0,
   362,   338,   350,   116,     0,   116,     0,     0,   119,   340,
   316,     0,     0,   120,   341,   343,     0,     0,   366,   342,
   350,   116,     0,   116,     0,     0,   152,   344,   346,     0,
     0,   362,   345,   350,   116,     0,   116,     0,     0,   119,
   347,   316,     0,     0,   364,   348,   350,   116,     0,   116,
     0,   349,   352,     0,     0,   350,   354,     0,     0,   351,
   356,     0,     0,   151,     0,   152,     0,   118,     0,   119,
     0,   150,     0,   112,     0,   116,     0,   120,     0,     0,
   114,   353,   349,   115,     0,   151,     0,   152,     0,   118,
     0,   119,     0,   150,     0,   112,     0,   120,     0,     0,
   114,   355,   349,   115,     0,   151,     0,   152,     0,   118,
     0,   119,     0,   150,     0,   120,     0,     0,   114,   357,
   349,   115,     0,   151,     0,   152,     0,   118,     0,   119,
     0,   112,     0,   116,     0,   120,     0,     0,   114,   359,
   349,   115,     0,   151,     0,   152,     0,   119,     0,   112,
     0,   116,     0,   120,     0,     0,   114,   361,   349,   115,
     0,   151,     0,   118,     0,   119,     0,   150,     0,   112,
     0,   120,     0,     0,   114,   363,   349,   115,     0,   151,
     0,   152,     0,   118,     0,   150,     0,   112,     0,   120,
     0,     0,   114,   365,   349,   115,     0,   151,     0,   152,
     0,   118,     0,   150,     0,   112,     0,     0,   114,   367,
   349,   115,     0,   368,   369,     0,   369,     0,   371,     0,
     0,   114,   370,   349,   115,     0,   151,     0,   152,     0,
   118,     0,   119,     0,   150,     0,   112,     0,   120,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   191,   192,   198,   199,   200,   206,   208,   216,   218,   226,
   230,   232,   241,   243,   252,   263,   265,   268,   273,   306,
   310,   314,   318,   324,   327,   328,   331,   332,   333,   339,
   340,   346,   352,   353,   359,   365,   366,   372,   380,   381,
   388,   388,   391,   392,   399,   399,   402,   403,   410,   410,
   413,   414,   417,   418,   421,   422,   425,   426,   428,   429,
   431,   432,   433,   435,   437,   439,   441,   442,   443,   445,
   446,   447,   448,   450,   451,   452,   454,   455,   456,   457,
   459,   462,   463,   464,   465,   467,   468,   469,   470,   473,
   474,   478,   482,   485,   488,   489,   490,   493,   494,   497,
   498,   501,   506,   507,   510,   511,   512,   513,   516,   517,
   520,   526,   527,   530,   537,   538,   541,   542,   545,   551,
   552,   558,   559,   562,   563,   566,   567,   570,   574,   578,
   584,   588,   592,   593,   594,   598,   602,   603,   604,   605,
   606,   607,   608,   609,   610,   611,   615,   619,   624,   625,
   626,   630,   634,   638,   639,   640,   641,   647,   648,   651,
   652,   655,   660,   661,   665,   666,   670,   671,   680,   681,
   684,   685,   691,   692,   693,   694,   697,   698,   699,   700,
   703,   704,   705,   706,   709,   710,   711,   712,   715,   716,
   717,   718,   721,   722,   723,   726,   727,   728,   729,   730,
   731,   732,   738,   739,   742,   742,   742,   742,   743,   744,
   750,   750,   750,   750,   750,   753,   753,   753,   753,   756,
   756,   756,   759,   759,   759,   759,   760,   760,   760,   760,
   760,   760,   760,   762,   762,   762,   762,   763,   763,   763,
   763,   763,   763,   763,   765,   765,   765,   765,   766,   766,
   766,   766,   766,   766,   766,   768,   768,   768,   768,   769,
   769,   769,   769,   769,   769,   769,   771,   771,   771,   771,
   772,   772,   772,   772,   772,   772,   772,   775,   775,   775,
   775,   776,   776,   776,   782,   782,   782,   782,   782,   782,
   782,   785,   785,   788,   788,   788,   788,   788,   788,   789,
   789,   789,   790,   790,   790,   790,   790,   790,   791,   791,
   791,   794,   794,   794,   794,   794,   794,   794,   794,   797,
   797,   797,   800,   800,   800,   800,   800,   800,   800,   801,
   801,   801,   801,   801,   801,   802,   802,   802,   803,   803,
   803,   803,   804,   804,   804,   831,   832,   833,   838,   839,
   840,   846,   853,   859,   866,   872,   879,   885,   893,   898,
   906,   911,   920,   925,   933,   938,   946,   951,   955,   962,
   967,   968,   976,   977,   982,   983,   988,   989,   994,   995,
  1000,  1008,  1009,  1015,  1016,  1022,  1023,  1029,  1030,  1036,
  1037,  1043,  1044,  1050,  1051,  1057,  1058,  1064,  1065,  1071,
  1072,  1078,  1079,  1085,  1089,  1093,  1094,  1103,  1107,  1111,
  1115,  1119,  1123,  1127,  1131,  1135,  1139,  1143,  1147,  1151,
  1155,  1159,  1163,  1167,  1171,  1175,  1179,  1183,  1187,  1191,
  1195,  1199,  1203,  1207,  1211,  1215,  1216,  1217,  1221,  1222,
  1223,  1227,  1231,  1235,  1239,  1243,  1250,  1254,  1258,  1262,
  1269,  1273,  1280,  1282,  1287,  1288,  1291,  1292,  1295,  1296,
  1299,  1300,  1303,  1304,  1307,  1308,  1311,  1312,  1320,  1321,
  1322,  1323,  1326,  1327,  1328,  1329,  1338,  1340,  1340,  1341,
  1342,  1343,  1347,  1349,  1349,  1350,  1351,  1355,  1361,  1361,
  1362,  1363,  1372,  1374,  1374,  1375,  1376,  1377,  1381,  1383,
  1383,  1384,  1385,  1389,  1395,  1395,  1397,  1397,  1398,  1399,
  1403,  1405,  1405,  1406,  1407,  1411,  1418,  1418,  1419,  1420,
  1426,  1427,  1430,  1431,  1435,  1436,  1442,  1442,  1442,  1442,
  1442,  1442,  1442,  1442,  1443,  1444,  1447,  1447,  1447,  1447,
  1447,  1447,  1447,  1448,  1449,  1453,  1453,  1453,  1453,  1453,
  1453,  1454,  1455,  1458,  1458,  1458,  1458,  1458,  1458,  1458,
  1459,  1460,  1463,  1463,  1463,  1463,  1463,  1463,  1464,  1465,
  1469,  1469,  1469,  1469,  1469,  1469,  1470,  1471,  1475,  1475,
  1475,  1475,  1475,  1475,  1476,  1477,  1481,  1481,  1481,  1481,
  1481,  1482,  1483,  1489,  1490,  1493,  1499,  1500,  1507,  1507,
  1507,  1507,  1507,  1507,  1507
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FILE_NAME_STRING",
"UNINTERPRETED_STRING","LATEX_STRING","KW_FMOD","KW_MOD","KW_OMOD","KW_PARSE",
"KW_NORMALIZE","KW_REDUCE","KW_REWRITE","KW_LOOP","KW_NARROW","KW_MATCH","KW_XMATCH",
"KW_UNIFY","KW_XUNIFY","KW_EREWRITE","KW_FREWRITE","KW_OREWRITE","KW_CONTINUE",
"KW_SEARCH","KW_SET","KW_SHOW","KW_ON","KW_OFF","KW_TRACE","KW_CONTEXT","KW_WHOLE",
"KW_SELECT","KW_DESELECT","KW_CONDITION","KW_SUBSTITUTION","KW_PRINT","KW_GRAPH",
"KW_MIXFIX","KW_FLAT","KW_WITH","KW_PARENS","KW_ALIASES","KW_GC","KW_TIME","KW_STATS",
"KW_TIMING","KW_CMD","KW_BREAKDOWN","KW_BREAK","KW_PATH","KW_MODULE","KW_ALL",
"KW_SORTS","KW_OPS","KW_VARS","KW_MBS","KW_EQS","KW_RLS","KW_SUMMARY","KW_KINDS",
"KW_ADVISE","KW_VERBOSE","KW_DO","KW_CLEAR","KW_INCLUDE","KW_EXCLUDE","KW_CONCEAL",
"KW_REVEAL","KW_COMPILE","KW_COUNT","KW_DEBUG","KW_RESUME","KW_ABORT","KW_STEP",
"KW_WHERE","KW_CREDUCE","KW_DUMP","KW_PROFILE","KW_NUMBER","KW_RAT","KW_COLOR",
"SIMPLE_NUMBER","KW_PWD","KW_CD","KW_PUSHD","KW_POPD","KW_LS","KW_LOAD","KW_QUIT",
"KW_EOF","KW_ENDFM","KW_ENDM","KW_ENDOM","KW_IMPORT","KW_SORT","KW_SUBSORT",
"KW_OP","KW_MSGS","KW_VAR","KW_CLASS","KW_SUBCLASS","KW_MB","KW_CMB","KW_EQ",
"KW_CEQ","KW_RL","KW_CRL","KW_IS","KW_ARROW","KW_ARROW2","KW_PARTIAL","KW_IF",
"':'","'='","'('","')'","'.'","'<'","'['","']'","','","'|'","KW_LABEL","KW_TO",
"'+'","'*'","KW_ASSOC","KW_COMM","KW_ID","KW_IDEM","KW_ITER","KW_LEFT","KW_RIGHT",
"KW_PREC","KW_GATHER","KW_STRAT","KW_POLY","KW_MEMO","KW_FROZEN","KW_CTOR","KW_LATEX",
"KW_SPECIAL","KW_CONFIG","KW_OBJ","KW_MSG","KW_DITTO","KW_FORMAT","KW_ID_HOOK",
"KW_OP_HOOK","KW_TERM_HOOK","KW_IN","IDENTIFIER","NUMERIC_ID","top","item","directive",
"@1","@2","@3","@4","@5","moduleExpr","renaming","mapList","map","module","@6",
"@7","@8","@9","@10","@11","endfm","notEndfm","endm","notEndm","endom","notEndom",
"fDecList","decList","oDecList","fDeclaration","@12","@13","@14","@15","@16",
"@17","@18","@19","@20","@21","@22","@23","@24","@25","declaration","@26","@27",
"@28","@29","@30","oDeclaration","@31","@32","@33","classDef","cPairList","cPair",
"varNameList","opName","@34","@35","opNameList","simpleOpName","@36","domainRangeAttr",
"arrow","typeList","type","@37","sortTokens","attributes","attributeList","idKeyword",
"attribute","@38","@39","@40","@41","@42","@43","@44","idList","hookList","hook",
"@45","@46","@47","listBarLt","listBarDot","tokens","@48","tokensBarColon","@49",
"tokensBarEqual","@50","tokensBarArrow2","@51","tokensBarIf","@52","endTokens",
"noTrailingDot","@53","@54","identity","identityChunk","@55","token","tokenBarDot",
"endToken","tokenBarArrow2","tokenBarEqual","tokenBarIf","tokenBarColon","tokenBarLt",
"sortToken","identifier","startKeyword","startKeyword2","midKeyword","attrKeyword",
"attrKeyword2","command","@56","@57","@58","@59","@60","@61","@62","@63","@64",
"@65","@66","@67","@68","@69","@70","@71","@72","@73","@74","@75","@76","@77",
"@78","@79","@80","@81","@82","@83","@84","@85","@86","@87","@88","@89","@90",
"polarity","select","exclude","conceal","match","optDebug","optNumber","moduleAndTerm",
"@91","@92","inEnd","@93","@94","numberModuleTerm","@95","@96","@97","numberModuleTerm1",
"@98","@99","numberModuleTerm2","@100","@101","numbersModuleTerm","@102","@103",
"@104","numbersModuleTerm1","@105","@106","numbersModuleTerm2","@107","@108",
"@109","numbersModuleTerm3","@110","@111","numbersModuleTerm4","@112","@113",
"cTokens","cTokensBarDot","cTokensBarDotColon","cToken","@114","cTokenBarDot",
"@115","cTokenBarDotColon","@116","cTokenBarIn","@117","cTokenBarLeftIn","@118",
"cTokenBarDotNumber","@119","cTokenBarDotRight","@120","cTokenBarDotCommaRight",
"@121","cOpNameList","cSimpleOpName","@122","cSimpleTokenBarDot", NULL
};
#endif

static const short yyr1[] = {     0,
   153,   153,   154,   154,   154,   156,   155,   157,   155,   155,
   158,   155,   159,   155,   155,   160,   155,   155,   155,   161,
   161,   161,   161,   162,   163,   163,   164,   164,   164,   166,
   167,   165,   168,   169,   165,   170,   171,   165,   172,   172,
   173,   173,   174,   174,   175,   175,   176,   176,   177,   177,
   178,   178,   179,   179,   180,   180,   182,   181,   183,   181,
   184,   185,   181,   181,   181,   181,   186,   187,   181,   188,
   189,   190,   181,   191,   192,   181,   193,   194,   195,   181,
   181,   196,   197,   198,   196,   199,   200,   201,   196,   202,
   202,   202,   203,   202,   204,   205,   202,   206,   206,   207,
   207,   208,   209,   209,   211,   210,   212,   210,   213,   213,
   214,   215,   214,   216,   217,   217,   218,   218,   219,   220,
   219,   221,   221,   222,   222,   223,   223,   224,   224,   224,
   225,   225,   226,   225,   225,   225,   225,   227,   225,   228,
   225,   229,   225,   230,   225,   225,   225,   225,   231,   225,
   225,   225,   225,   232,   225,   225,   225,   233,   233,   234,
   234,   235,   236,   235,   237,   235,   238,   235,   239,   239,
   240,   240,   242,   241,   241,   241,   244,   243,   243,   243,
   246,   245,   245,   245,   248,   247,   247,   247,   250,   249,
   249,   249,   251,   251,   251,   253,   252,   254,   252,   252,
   252,   252,   255,   255,   256,   256,   256,   256,   257,   256,
   258,   258,   258,   258,   258,   259,   259,   259,   259,   260,
   260,   260,   261,   261,   261,   261,   261,   261,   261,   261,
   261,   261,   261,   262,   262,   262,   262,   262,   262,   262,
   262,   262,   262,   262,   263,   263,   263,   263,   263,   263,
   263,   263,   263,   263,   263,   264,   264,   264,   264,   264,
   264,   264,   264,   264,   264,   264,   265,   265,   265,   265,
   265,   265,   265,   265,   265,   265,   265,   266,   266,   266,
   266,   266,   266,   266,   267,   267,   267,   267,   267,   267,
   267,   268,   268,   269,   269,   269,   269,   269,   269,   269,
   269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
   269,   270,   270,   270,   270,   270,   270,   270,   270,   271,
   271,   271,   272,   272,   272,   272,   272,   272,   272,   272,
   272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
   272,   272,   272,   272,   272,   274,   275,   273,   276,   277,
   273,   278,   273,   279,   273,   280,   273,   281,   273,   282,
   273,   283,   273,   284,   273,   285,   273,   273,   286,   273,
   287,   273,   288,   273,   289,   273,   290,   273,   291,   273,
   273,   292,   273,   293,   273,   294,   273,   295,   273,   296,
   273,   297,   273,   298,   273,   299,   273,   300,   273,   301,
   273,   302,   273,   273,   273,   303,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   304,   305,   273,   306,   307,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   308,   273,   309,   309,   310,   310,   311,   311,
   312,   312,   313,   313,   314,   314,   315,   315,   317,   316,
   318,   316,   320,   321,   319,   319,   323,   322,   324,   322,
   325,   322,   327,   326,   328,   326,   326,   330,   329,   331,
   329,   329,   333,   332,   334,   332,   335,   332,   337,   336,
   338,   336,   336,   340,   339,   341,   339,   342,   339,   339,
   344,   343,   345,   343,   343,   347,   346,   348,   346,   346,
   349,   349,   350,   350,   351,   351,   352,   352,   352,   352,
   352,   352,   352,   352,   353,   352,   354,   354,   354,   354,
   354,   354,   354,   355,   354,   356,   356,   356,   356,   356,
   356,   357,   356,   358,   358,   358,   358,   358,   358,   358,
   359,   358,   360,   360,   360,   360,   360,   360,   361,   360,
   362,   362,   362,   362,   362,   362,   363,   362,   364,   364,
   364,   364,   364,   364,   365,   364,   366,   366,   366,   366,
   366,   367,   366,   368,   368,   369,   370,   369,   371,   371,
   371,   371,   371,   371,   371
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     1,     0,     3,     0,     3,     1,
     0,     3,     0,     3,     1,     0,     3,     1,     1,     1,
     3,     3,     3,     3,     3,     1,     4,     4,     4,     0,
     0,     7,     0,     0,     7,     0,     0,     7,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     0,     2,     0,     2,     0,     0,     4,     0,     4,
     0,     0,     8,     3,     3,     5,     0,     0,     7,     0,
     0,     0,    10,     0,     0,     7,     0,     0,     0,    10,
     2,     1,     0,     0,     7,     0,     0,     0,    10,     1,
     3,     3,     0,     5,     0,     0,     8,     1,     2,     1,
     3,     3,     2,     1,     0,     3,     0,     4,     2,     1,
     1,     0,     4,     6,     1,     1,     2,     0,     1,     0,
     4,     3,     1,     3,     0,     2,     1,     1,     2,     2,
     1,     1,     0,     3,     1,     1,     2,     0,     5,     0,
     5,     0,     5,     0,     5,     1,     1,     1,     0,     5,
     1,     1,     1,     0,     5,     4,     1,     2,     1,     2,
     1,     2,     0,     6,     0,     6,     0,     6,     2,     0,
     2,     0,     0,     5,     2,     0,     0,     5,     2,     0,
     0,     5,     2,     0,     0,     5,     2,     0,     0,     5,
     2,     0,     1,     2,     1,     0,     4,     0,     5,     2,
     2,     1,     1,     2,     1,     1,     1,     1,     0,     4,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     0,     0,     6,     0,     0,
     6,     0,     3,     0,     3,     0,     4,     0,     4,     0,
     4,     0,     4,     0,     3,     0,     3,     4,     0,     3,
     0,     4,     0,     5,     0,     5,     0,     5,     0,     5,
     4,     0,     5,     0,     5,     0,     5,     0,     5,     0,
     5,     0,     5,     0,     5,     0,     5,     0,     5,     0,
     5,     0,     5,     4,     4,     0,     5,     5,     5,     6,
     5,     5,     6,     5,     5,     5,     5,     6,     6,     5,
     5,     5,     5,     5,     5,     4,     5,     5,     5,     5,
     5,     5,     5,     5,     4,     0,     0,     7,     0,     0,
     8,     4,     5,     5,     4,     5,     2,     2,     2,     2,
     5,     4,     0,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     0,     1,     0,     0,     4,
     0,     4,     0,     0,     6,     1,     0,     3,     0,     4,
     0,     4,     0,     3,     0,     4,     1,     0,     3,     0,
     4,     1,     0,     3,     0,     4,     0,     4,     0,     3,
     0,     4,     1,     0,     3,     0,     3,     0,     4,     1,
     0,     3,     0,     4,     1,     0,     3,     0,     4,     1,
     2,     0,     2,     0,     2,     0,     1,     1,     1,     1,
     1,     1,     1,     1,     0,     4,     1,     1,     1,     1,
     1,     1,     1,     0,     4,     1,     1,     1,     1,     1,
     1,     0,     4,     1,     1,     1,     1,     1,     1,     1,
     0,     4,     1,     1,     1,     1,     1,     1,     0,     4,
     1,     1,     1,     1,     1,     1,     0,     4,     1,     1,
     1,     1,     1,     1,     0,     4,     1,     1,     1,     1,
     1,     0,     4,     2,     1,     1,     0,     4,     1,     1,
     1,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
   453,    30,    33,    36,   352,   369,   464,   463,   364,     0,
     0,     0,   346,     0,     0,     0,   465,     0,     0,     0,
     0,   354,   349,    10,    11,    13,    15,    16,     8,    18,
    19,   371,     6,     1,     4,     3,     5,   366,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   436,     0,     0,   382,     0,
     0,   384,   386,   388,   390,   392,   394,   396,   398,   400,
   402,   406,   457,   458,   460,   459,   373,   375,     0,   461,
   462,   379,   377,     0,   447,   448,   449,   450,     0,     0,
     0,     0,     0,     0,   522,     0,     0,   356,   358,   360,
   362,   468,   454,   298,   309,   310,   311,   294,   295,   296,
   297,   300,   299,   301,   302,   303,   304,   305,   306,   307,
   308,   319,   314,   317,   315,   318,   313,   316,   215,   312,
   320,   321,   286,   287,   288,   289,   290,   291,   323,   324,
   325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
   338,   335,   336,   337,   339,   340,   292,   341,   342,   343,
   344,   345,   285,     0,   211,   212,   293,   213,   214,   322,
     0,     0,   558,   561,   559,   556,   557,   560,   469,   554,
   555,   353,   471,   370,   566,   569,   567,   477,   565,   568,
   479,   563,   564,   365,   481,   439,     0,     0,     0,     0,
     0,     0,     0,   455,   456,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   524,     0,     0,   524,   524,   524,   524,   524,
   524,   524,   524,   524,   524,   524,     0,     0,   532,   535,
   533,   529,   530,   534,   531,   527,   528,   347,     0,     0,
     0,   355,   350,    12,    14,    17,     9,     0,     7,   367,
     0,     0,     0,     0,   467,     0,    31,    34,    37,   522,
   526,   524,   522,     0,   526,   524,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   426,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   452,   435,   442,     0,     0,
   604,   601,   602,   605,   603,   599,   600,   437,     0,   445,
     0,   405,   404,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   597,     0,   595,   596,     0,   522,
   524,     0,     0,   381,   524,   372,   521,   357,   359,   361,
   493,   495,   363,   497,   368,    52,    54,    56,     0,     0,
     0,     0,   575,   577,   487,   572,   573,   576,   574,   571,
   483,   478,   485,     0,     0,   440,     0,     0,   415,   409,
   411,   414,   412,   408,   428,   429,   431,   427,   430,   432,
   433,   434,   420,   416,   417,     0,     0,   421,   422,   423,
   424,   425,   451,   446,   443,     0,   444,   542,   544,   383,
   539,   540,   543,   541,   537,   538,   523,   385,   387,   389,
   391,   393,   395,   397,   399,   401,   403,   407,   522,   374,
   594,   376,     0,     0,   380,   378,     0,     0,   526,   524,
     0,     0,     0,   562,   473,   552,   476,   548,   549,   551,
   550,   546,   547,   470,   525,   472,   570,   522,     0,   524,
   480,   482,     0,   410,   413,   419,   418,     0,   522,     0,
   536,   348,   351,   503,   499,   494,   501,     0,     0,     0,
     0,    39,    41,    42,    57,    59,     0,     0,     0,    67,
    70,    74,    77,    32,    40,    51,    45,    43,    46,    83,
    86,    35,    44,    82,    53,    49,    50,    47,     0,     0,
     0,     0,    38,    48,    90,    55,     0,   522,     0,   583,
   585,   492,   581,   488,   584,   582,   579,   580,   484,   490,
     0,     0,   438,     0,   598,     0,   524,   496,   498,    81,
   266,   261,   264,   262,   265,   263,   112,   259,   260,     0,
   110,   111,   256,   257,   258,     0,   172,    61,   107,     0,
   105,     0,   104,   180,   180,   184,   184,   188,   188,     0,
    93,    95,     0,   474,     0,   578,   522,     0,   524,   486,
   441,   545,   591,   592,   510,   589,   504,   506,   590,   587,
   588,   500,   508,     0,   176,   118,   109,    65,     0,     0,
    20,     0,   170,   176,    64,   180,     0,   103,     0,     0,
     0,     0,     0,     0,    92,     0,   170,    91,   524,   553,
     0,   489,     0,   522,     0,     0,   524,   502,     0,     0,
     0,    58,     0,     0,    60,   171,   216,   217,   218,   219,
     0,     0,   106,   284,   282,   283,   281,   120,     0,   119,
   278,   279,   280,    68,   177,   179,    71,   244,   240,   242,
   241,   243,   239,    75,   181,   237,   238,   183,   234,   235,
   236,    78,   233,   229,    84,   230,   232,   228,   231,   185,
   226,   227,   187,   223,   224,   225,    87,    98,     0,     0,
     0,   586,   491,     0,   505,   515,   511,   507,   513,     0,
   173,   113,   175,   115,   116,     0,   117,    23,    21,     0,
    22,   277,   272,   275,   273,   276,   271,   274,   270,    62,
   169,   267,   268,   269,   108,     0,    66,     0,   176,   192,
     0,   176,   192,     0,   176,   192,    99,   100,     0,    94,
    96,   475,   593,     0,   524,   509,   176,   125,     0,     0,
     0,     0,    26,   172,     0,   123,   196,   195,     0,   193,
   202,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   172,   520,   516,   512,   518,     0,     0,     0,     0,
     0,     0,     0,    24,     0,     0,   121,     0,   176,   198,
   194,   201,   220,   221,   222,   200,   178,   255,   251,   254,
   252,    72,   250,   253,   189,   248,   249,   191,   245,   246,
   247,   194,   182,    79,   194,   186,    88,   101,   102,     0,
     0,   524,   514,   174,   131,   132,   128,   135,   136,     0,
     0,     0,     0,     0,     0,   146,   148,   147,     0,     0,
   151,   152,   153,   157,     0,     0,   133,   127,   114,     0,
     0,     0,    25,    63,   122,     0,   176,     0,   176,     0,
     0,    97,   517,     0,   129,   130,   137,   138,   142,   144,
   149,   154,     0,   140,   124,   126,     0,    27,    29,    28,
   197,     0,     0,     0,     0,     0,   519,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   161,     0,   209,   208,
   134,   203,   205,   206,   207,   199,   194,   190,   194,   194,
   159,     0,     0,     0,     0,     0,   162,     0,     0,   156,
   160,     0,   176,   204,   139,   158,   143,   145,   150,   155,
   163,   165,   167,   141,     0,   176,   176,   176,   210,     0,
     0,     0,   164,   166,   168,     0,     0,     0
};

static const short yydefgoto[] = {   956,
    34,    35,    96,    94,    91,    92,    93,   610,   721,   762,
   763,    36,    41,   366,    42,   367,    43,   368,   504,   505,
   512,   513,   523,   524,   451,   452,   453,   514,   566,   567,
   613,   764,   574,   738,   575,   740,   868,   576,   741,   577,
   743,   870,   515,   578,   744,   579,   746,   871,   526,   626,
   627,   782,   699,   747,   748,   572,   570,   616,   614,   560,
   561,   605,   608,   716,   640,   659,   736,   765,   790,   856,
   857,   858,   887,   898,   908,   899,   900,   901,   902,   922,
   906,   907,   946,   947,   948,   651,   612,   639,   757,   619,
   739,   621,   742,   623,   745,   773,   869,   769,   770,   799,
   867,   911,   912,   933,   713,   771,   802,   693,   678,   818,
   562,   731,   660,   165,   166,   167,   168,   169,   170,    37,
    79,   351,    90,   355,    44,    89,   271,   272,   273,   274,
    46,    97,    45,    95,   247,   248,   260,   259,   233,   236,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   230,   416,   287,   473,    40,   214,    77,    78,    82,    38,
    39,   276,   182,   281,   282,   464,   527,   629,   194,   284,
   285,   286,   382,   469,   470,   539,   588,   589,   363,   448,
   449,   450,   486,   546,   547,   602,   635,   636,   637,   708,
   754,   755,   785,   831,   832,   268,   331,   370,   357,   350,
   427,   479,   465,   528,   183,   280,   195,   283,   383,   468,
   540,   587,   603,   634,   346,   347,   439,   348
};

static const short yypact[] = {   860,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    40,
   208,    83,-32768,   150,   223,   -22,-32768,   -63,   -61,   -59,
   -35,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   344,    11,
  3113,  3113,  3113,   -40,   -40,   592,     3,   256,   278,     7,
    75,   244,   244,   244,   -48,-32768,    68,   244,-32768,   107,
    69,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   672,-32768,
-32768,-32768,-32768,    19,-32768,-32768,-32768,-32768,   -40,   672,
   157,   165,   178,   187,-32768,   209,   592,-32768,-32768,-32768,
-32768,   152,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   129,-32768,-32768,-32768,-32768,-32768,-32768,
   142,   144,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   269,   244,   244,   244,
   244,   244,   244,-32768,-32768,   244,   244,   244,   244,   244,
   244,   244,   244,   140,   244,   244,   244,   277,   244,   244,
   244,   244,   244,   244,   158,   168,   170,   244,   244,   128,
   244,   179,-32768,   183,   190,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   125,   125,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   125,   125,
   211,-32768,-32768,-32768,-32768,-32768,-32768,   -56,-32768,-32768,
   -40,   592,   592,   800,-32768,   215,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   918,-32768,-32768,   128,   244,   244,   216,
   221,   224,   225,   232,   237,   238,   242,   243,   249,   251,
   255,   263,   268,-32768,   271,   282,   283,   244,   244,   284,
   285,   287,   291,   293,   294,-32768,-32768,-32768,   296,   302,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   303,-32768,
  4000,-32768,-32768,  4009,  4335,  4344,  4353,  4362,  4403,  4412,
  4421,  4430,  4471,  4480,-32768,  4489,-32768,-32768,  4498,-32768,
-32768,  4539,  4548,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   210,  4557,
  4566,   231,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  4557,  4607,-32768,   304,   305,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   306,   307,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   244,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   276,  4616,-32768,-32768,  4625,  4634,-32768,-32768,
    38,  1013,   392,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4675,-32768,
-32768,-32768,   244,-32768,-32768,-32768,-32768,   308,-32768,   393,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4557,  4684,   313,
  3175,-32768,-32768,-32768,-32768,-32768,  3113,  2307,  3671,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  3175,  3113,
  3113,  2307,-32768,-32768,-32768,-32768,   672,-32768,   458,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  4693,   316,-32768,   468,-32768,  4702,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2369,
-32768,-32768,-32768,-32768,-32768,  2431,-32768,-32768,-32768,   169,
-32768,  3237,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2369,
-32768,-32768,   169,-32768,   522,-32768,-32768,   -40,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  4743,-32768,-32768,-32768,-32768,  2431,   172,
-32768,  3299,-32768,-32768,-32768,-32768,  3857,-32768,  2493,  2555,
  2617,  2679,  2741,  2803,-32768,   218,-32768,-32768,-32768,-32768,
   550,-32768,  4752,-32768,   -40,  4761,-32768,-32768,  1046,  3795,
    95,-32768,  2431,   320,-32768,-32768,-32768,-32768,-32768,-32768,
  3361,  1143,  3423,-32768,-32768,-32768,-32768,-32768,   319,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  3733,   322,  3485,
  4770,-32768,-32768,   577,-32768,-32768,-32768,-32768,-32768,  4811,
-32768,-32768,-32768,-32768,-32768,  3857,-32768,-32768,-32768,   103,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  3919,-32768,  2865,-32768,-32768,
  2865,-32768,-32768,  2865,-32768,-32768,   265,-32768,   257,-32768,
-32768,-32768,-32768,  4820,-32768,-32768,-32768,   318,  3113,   253,
   253,    31,-32768,-32768,   200,-32768,-32768,-32768,  4072,  4043,
-32768,  1240,  2927,  4117,  1337,  2989,  4162,  1434,  3051,  3733,
  3113,-32768,-32768,-32768,-32768,-32768,  4829,  1531,  1169,   324,
   325,   328,   329,-32768,   103,  3547,-32768,  3919,-32768,-32768,
   662,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   746,-32768,-32768,   885,-32768,-32768,-32768,-32768,  3609,
   -40,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   314,
   326,   290,   339,   341,   345,-32768,   346,-32768,   347,   348,
-32768,-32768,-32768,-32768,   350,  1079,-32768,-32768,-32768,  3113,
   253,   253,-32768,-32768,-32768,  1628,-32768,  2865,-32768,  2865,
  2865,-32768,-32768,  4838,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   -27,-32768,-32768,-32768,  3981,-32768,-32768,-32768,
-32768,  1725,  4207,  1822,  4252,  4297,-32768,   327,   327,   327,
   327,   453,  3113,  3113,  3113,    10,-32768,   327,-32768,-32768,
  3981,-32768,-32768,-32768,-32768,-32768,   903,-32768,   958,   991,
-32768,   -81,   -49,   -44,   -16,   352,   355,   356,   357,-32768,
-32768,    -2,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1919,-32768,-32768,-32768,-32768,  2016,
  2113,  2210,-32768,-32768,-32768,   499,   501,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -517,-32768,-32768,
  -293,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    52,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    57,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -266,-32768,    -7,-32768,-32768,    -3,
  -511,-32768,  -348,-32768,-32768,  -610,-32768,-32768,-32768,-32768,
-32768,  -339,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -695,
-32768,  -388,-32768,-32768,-32768,  -107,  -666,  -531,-32768,  -539,
-32768,   -55,-32768,   -58,-32768,  -545,-32768,  -716,-32768,-32768,
-32768,-32768,  -387,-32768,   -41,  -589,-32768,-32768,-32768,-32768,
  -475,-32768,  -705,  -330,    35,  -850,   -93,  -147,  -598,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   -36,   512,-32768,-32768,-32768,
-32768,-32768,   -42,-32768,-32768,  -364,-32768,-32768,   -70,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -245,  -232,  -253,   -64,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   254,-32768,  -427,-32768,
  -225,-32768,-32768,-32768,  -208,  -125,-32768,  -197
};


#define	YYLAST		4990


static const short yytable[] = {   164,
   171,   172,   184,   334,   335,   336,   337,   338,   339,   340,
   341,   342,   343,   344,   258,   225,   226,   227,   663,   471,
   487,   232,   646,   573,   774,   263,   270,   777,   228,   717,
   766,   384,   328,   935,   369,   620,   914,   372,   490,   349,
    84,   663,   215,   216,   217,   218,   262,    47,   607,   371,
   352,   353,    85,   385,    86,   249,    87,   250,   356,   251,
   914,   252,   253,   254,    48,   937,   196,    49,   607,   936,
   938,   173,   219,   174,    50,   175,   653,   176,   177,   178,
    88,    51,   652,    52,   220,   221,   222,    53,   229,   386,
   491,   641,   865,   255,   256,   257,   618,   796,   939,   224,
    54,   936,    55,    56,   443,   758,   936,    57,   749,   179,
   180,   181,   944,    73,    74,   830,    58,   663,   444,   903,
   904,   905,   447,   548,   930,   719,   103,   492,   493,   494,
   495,   496,   497,   498,   936,   499,   231,   663,   500,   501,
   502,   503,   234,   666,   666,   794,    75,    76,   936,   235,
   795,   893,   223,   895,   896,   261,   903,   904,   905,   264,
   563,   290,   291,   292,   293,   294,   295,   265,   563,   296,
   297,   298,   299,   300,   301,   302,   303,   666,   305,   306,
   307,   266,   310,   311,   312,   313,   314,   315,   563,   267,
   749,   319,   320,   480,   329,   488,   759,   776,   760,   663,
   779,   359,   360,   923,   924,   925,   646,   772,   709,   718,
   775,   269,   932,   778,    59,    80,    81,   489,   643,   644,
   441,   615,   529,   441,   761,   788,   441,   441,   358,   563,
    60,   625,   275,   544,   628,   277,   321,   541,   345,   321,
   646,   563,   322,   323,   324,   322,   323,   324,   278,   563,
   279,   387,   388,    73,    74,   304,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,   866,   197,   204,
   205,   406,   407,   316,   325,   326,   327,   325,   326,   327,
   606,   647,   585,   317,    72,   318,   661,   642,   563,   563,
   679,   679,   694,   694,   330,   643,   644,   198,   332,   199,
   200,   201,   202,   204,   205,   333,   206,   207,   208,   661,
   209,   210,   288,   289,   604,   203,   308,   309,   797,   798,
   732,   249,   563,   250,   454,   251,   354,   252,   253,   254,
   365,   389,   211,   212,   213,   892,   390,   894,   698,   391,
   392,   631,   249,   565,   250,   467,   251,   393,   252,   253,
   254,   565,   394,   395,    98,    99,   633,   396,   397,   255,
   256,   257,   100,   101,   398,   102,   399,   647,   781,   732,
   400,   565,   133,   134,   135,   136,   137,   138,   401,   478,
   255,   256,   257,   402,   780,   661,   403,   249,   704,   250,
   481,   251,   490,   252,   253,   254,   701,   404,   405,   408,
   409,   945,   410,   163,   710,   661,   411,   647,   412,   413,
   647,   414,   565,   647,   950,   951,   952,   415,   417,   474,
   475,   476,   477,   543,   565,   255,   256,   257,   550,   792,
   793,   591,   565,   720,   737,   789,   542,   750,   803,   859,
   877,   875,   819,   803,   491,   819,   803,   860,   819,   647,
   861,   862,   878,   876,   879,   568,   571,   926,   880,   881,
   882,   883,   584,   884,   650,   647,   940,   661,   941,   942,
   943,   565,   565,   681,   681,   696,   696,   921,   581,   582,
   571,   516,   517,   518,   495,   496,   497,   498,   519,   499,
   520,   521,   500,   501,   502,   503,   510,   511,   957,   647,
   958,   863,   506,   734,   249,   565,   250,   545,   251,   525,
   252,   253,   254,   828,   583,   580,   886,   931,   649,   700,
   624,   622,   787,   934,   611,   564,    83,   364,   786,     0,
   889,   890,     0,   564,     0,   522,     0,   647,     0,   647,
   647,     0,   255,   256,   257,   632,     0,     0,     0,     0,
   650,     0,   734,   564,     0,     0,   913,     0,     0,     0,
     0,     0,   803,     0,   803,   803,     0,   611,     0,   249,
     0,   250,   586,   251,     0,   252,   253,   254,     0,   249,
   913,   250,   592,   251,     0,   252,   253,   254,     0,     0,
   650,     0,   705,   650,   564,     0,   650,     0,     0,   874,
     0,   611,     0,     0,   649,     0,   564,   255,   256,   257,
     0,     0,     0,     0,   564,     0,     0,   255,   256,   257,
     0,   805,     0,     0,     0,   821,   805,     0,   821,   805,
     0,   821,   650,   249,     0,   250,   630,   251,     0,   252,
   253,   254,     0,     0,   649,     0,   648,   649,   650,     0,
   649,   662,     0,   564,   564,   680,   680,   695,   695,     0,
     0,   249,   -69,   250,   702,   251,     0,   252,   253,   254,
     0,   255,   256,   257,   662,   804,     0,     0,     0,     0,
   804,     0,   650,   804,     0,   733,   649,   564,   249,     0,
   250,   753,   251,     0,   252,   253,   254,     0,     0,   255,
   256,   257,   649,   185,     0,   186,     0,   187,     0,   188,
   189,   190,     0,     0,   -69,     0,     0,   791,     0,     0,
   650,     0,   650,   650,     0,     0,   255,   256,   257,     0,
     0,     0,   648,     0,   733,     0,   649,     0,     0,   829,
     0,   191,   192,   193,     0,   805,   -76,   805,   805,     0,
   662,   -69,   -69,   -69,   -69,   -69,   -69,   -69,   -69,   -69,
   -69,   -69,   -69,   -69,   -69,   -69,   -69,   -69,     0,     0,
   662,     0,   648,     0,   649,   648,   649,   649,   648,     0,
     0,     0,     0,   249,     0,   250,     0,   251,   873,   252,
   253,   254,     0,   915,     0,     0,     0,     0,   -76,   804,
     0,   804,   804,     0,   806,   -69,     0,   820,     0,     0,
   820,     0,     0,   820,   648,     0,     0,   915,   888,     0,
     0,   255,   256,   257,     0,     0,     0,     0,     0,     0,
   648,     0,   662,     0,     0,   -76,   -76,   -76,   -76,   -76,
   -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,
   -76,   -76,     0,     0,     0,     0,     0,     0,     0,    -2,
     1,   927,   928,   929,   648,     2,     3,     4,     5,     0,
  -466,  -466,     6,     0,     7,     8,     0,     0,  -466,  -466,
     0,  -466,     9,    10,    11,   -85,     0,    12,     0,   -76,
    13,     0,     0,     0,    14,     0,     0,     0,     0,     0,
     0,     0,   648,   -73,   648,   648,     0,    15,     0,     0,
     0,   185,     0,   186,     0,   187,     0,   361,   189,   190,
     0,    16,     0,     0,     0,     0,     0,     0,     0,    17,
    18,    19,    20,    21,    22,    23,     0,   -85,     0,     0,
     0,    24,    25,    26,    27,    28,    29,    30,    31,   362,
   192,   193,     0,     0,     0,   -73,     0,     0,   -80,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    32,   -85,   -85,   -85,   -85,   -85,   -85,
   -85,   -85,   -85,   -85,   -85,   -85,   -85,   -85,   -85,   -85,
   -85,   -89,   -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,
   -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,    33,
   -80,     0,     0,   490,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   -85,   373,
     0,   374,     0,   375,     0,   376,   377,   378,     0,     0,
     0,     0,     0,   -89,     0,     0,   -73,   -80,   -80,   -80,
   -80,   -80,   -80,   -80,   -80,   -80,   -80,   -80,   -80,   -80,
   -80,   -80,   -80,   -80,     0,   491,     0,   379,   380,   381,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -89,   -89,   -89,   -89,   -89,   -89,   -89,   -89,   -89,   -89,
   -89,   -89,   -89,   -89,   -89,   -89,   -89,     0,   104,     0,
     0,   -80,   507,   508,   509,   495,   496,   497,   498,     0,
   499,     0,     0,   500,   501,   502,   503,   510,   511,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   -89,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   711,
   712,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   104,   163,   885,     0,     0,
     0,     0,     0,     0,   835,   836,   837,   838,   839,   840,
   841,   842,   843,   844,   845,   846,   847,   848,   849,   850,
   851,   852,   853,   854,   855,     0,     0,     0,     0,     0,
     0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   711,   735,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   104,   163,   835,   836,   837,   838,   839,   840,
   841,   842,   843,   844,   845,   846,   847,   848,   849,   850,
   851,   852,   853,   854,   855,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   711,   807,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   104,
   163,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   711,   823,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   104,   163,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   711,   826,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   104,   163,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   711,   834,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   104,   163,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   711,   891,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   104,   163,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   711,   916,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   104,   163,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   711,   918,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   104,   163,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   711,   949,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   104,   163,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   711,
   953,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   104,   163,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   711,   954,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   104,   163,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   711,   955,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   104,
   163,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   569,   104,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,     0,   163,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   551,   552,   553,   554,   555,
   606,   556,   557,   104,   558,   559,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   609,   104,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     0,   163,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   551,
   552,   553,   554,   555,   664,   556,   665,   104,   558,   559,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,     0,   163,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   551,   552,   553,   554,   555,   667,   556,   665,   104,
   558,   559,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,     0,   163,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   668,   669,   670,   671,   672,   673,   674,
   675,   104,   676,   677,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,     0,   163,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   668,   669,   670,   671,   672,
   673,   682,   675,   104,   676,   677,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   683,   684,   685,
   686,   687,   688,   689,   690,   104,   691,   692,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     0,   163,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   683,
   684,   697,   686,   687,   688,   689,   690,   104,   691,   692,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,     0,   163,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   767,   104,
   768,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,     0,   163,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   808,   809,   810,   811,   812,   813,   814,
   815,   104,   816,   817,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,     0,   163,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   808,   809,   810,   811,   824,
   813,   814,   815,   104,   816,   817,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   808,   809,   810,
   811,   827,   813,   814,   815,   104,   816,   817,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     0,   163,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,     0,   104,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,     0,   163,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   551,   552,   553,   554,   555,     0,   556,   557,   104,
   558,   559,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,     0,   163,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   551,   552,   553,   554,   555,   617,   556,
     0,   104,   558,   559,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,     0,   163,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,     0,   104,   645,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   722,   723,   724,
   725,   726,   727,   728,     0,   104,   729,   730,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     0,   163,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   551,
   552,   553,   554,   555,     0,   556,   665,   104,   558,   559,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,     0,   163,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   722,   723,   724,   725,   726,   727,   728,     0,   104,
   729,   751,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,     0,   163,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     0,   104,   864,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,     0,   163,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,     0,   104,   872,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   551,   552,   553,
   554,   555,     0,   556,     0,   104,   558,   559,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     0,   163,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,     0,   104,     0,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,     0,   163,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   654,   714,   655,   715,   656,     0,   657,     0,   104,
     0,     0,   658,     0,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,     0,   163,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   654,     0,   655,     0,   656,     0,   657,
     0,   104,     0,     0,   658,     0,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,     0,   163,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   654,     0,   655,     0,   656,
     0,   657,     0,   104,     0,     0,     0,     0,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   909,   104,   910,   130,     0,     0,
   133,   134,   135,   136,   137,   138,     0,     0,     0,     0,
     0,   418,     0,   419,     0,   420,     0,   421,   422,   423,
   418,     0,   419,     0,   428,     0,   421,   422,   423,     0,
     0,   163,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   424,
   425,   426,     0,     0,     0,     0,     0,     0,   424,   425,
   426,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
   124,   125,   126,   127,   128,   800,   157,   801,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,     0,   158,   159,   160,   161,
   162,     0,   163,   122,   123,   124,   125,   126,   127,   128,
   800,     0,   822,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     0,   158,   159,   160,   161,   162,     0,   163,   122,   123,
   124,   125,   126,   127,   128,   800,     0,   825,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,     0,   158,   159,   160,   161,
   162,     0,   163,   122,   123,   124,   125,   126,   127,   128,
   800,     0,   917,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     0,   158,   159,   160,   161,   162,     0,   163,   122,   123,
   124,   125,   126,   127,   128,   800,     0,   919,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,     0,   158,   159,   160,   161,
   162,     0,   163,   122,   123,   124,   125,   126,   127,   128,
   800,     0,   920,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     0,   158,   159,   160,   161,   162,   418,   163,   419,     0,
   429,     0,   421,   422,   423,   418,     0,   419,     0,   430,
     0,   421,   422,   423,   418,     0,   419,     0,   431,     0,
   421,   422,   423,   418,     0,   419,     0,   432,     0,   421,
   422,   423,     0,     0,   424,   425,   426,     0,     0,     0,
     0,     0,     0,   424,   425,   426,     0,     0,     0,     0,
     0,     0,   424,   425,   426,     0,     0,     0,     0,     0,
     0,   424,   425,   426,   418,     0,   419,     0,   433,     0,
   421,   422,   423,   418,     0,   419,     0,   434,     0,   421,
   422,   423,   418,     0,   419,     0,   435,     0,   421,   422,
   423,   418,     0,   419,     0,   436,     0,   421,   422,   423,
     0,     0,   424,   425,   426,     0,     0,     0,     0,     0,
     0,   424,   425,   426,     0,     0,     0,     0,     0,     0,
   424,   425,   426,     0,     0,     0,     0,     0,     0,   424,
   425,   426,   418,     0,   419,     0,   437,     0,   421,   422,
   423,   418,     0,   419,     0,   438,     0,   421,   422,   423,
   321,     0,   345,     0,   440,     0,   322,   323,   324,   321,
     0,   345,     0,   442,     0,   322,   323,   324,     0,     0,
   424,   425,   426,     0,     0,     0,     0,     0,     0,   424,
   425,   426,     0,     0,     0,     0,     0,     0,   325,   326,
   327,     0,     0,     0,     0,     0,     0,   325,   326,   327,
   321,     0,   345,     0,   445,     0,   322,   323,   324,   321,
     0,   345,     0,   446,     0,   322,   323,   324,   455,     0,
   456,     0,   457,     0,   458,   459,   460,   418,     0,   419,
     0,   466,     0,   421,   422,   423,     0,     0,   325,   326,
   327,     0,     0,     0,     0,     0,     0,   325,   326,   327,
     0,     0,     0,     0,     0,     0,   461,   462,   463,     0,
     0,     0,     0,     0,     0,   424,   425,   426,   418,     0,
   419,     0,   472,     0,   421,   422,   423,   418,     0,   419,
     0,   482,     0,   421,   422,   423,   418,     0,   419,     0,
   483,     0,   421,   422,   423,   373,     0,   374,     0,   484,
     0,   376,   377,   378,     0,     0,   424,   425,   426,     0,
     0,     0,     0,     0,     0,   424,   425,   426,     0,     0,
     0,     0,     0,     0,   424,   425,   426,     0,     0,     0,
     0,     0,     0,   379,   380,   485,   530,     0,   531,     0,
   532,     0,   533,   534,   535,   418,     0,   419,     0,   549,
     0,   421,   422,   423,   418,     0,   419,     0,   590,     0,
   421,   422,   423,   593,     0,   594,     0,   595,     0,   596,
   597,   598,     0,     0,   536,   537,   538,     0,     0,     0,
     0,     0,     0,   424,   425,   426,     0,     0,     0,     0,
     0,     0,   424,   425,   426,     0,     0,     0,     0,     0,
     0,   599,   600,   601,   418,     0,   419,     0,   638,     0,
   421,   422,   423,   418,     0,   419,     0,   703,     0,   421,
   422,   423,   373,     0,   374,     0,   706,     0,   376,   377,
   378,   418,     0,   419,     0,   752,     0,   421,   422,   423,
     0,     0,   424,   425,   426,     0,     0,     0,     0,     0,
     0,   424,   425,   426,     0,     0,     0,     0,     0,     0,
   379,   380,   707,     0,     0,     0,     0,     0,     0,   424,
   425,   426,   418,     0,   419,     0,   756,     0,   421,   422,
   423,   530,     0,   531,     0,   783,     0,   533,   784,   535,
   418,     0,   419,     0,   833,     0,   421,   422,   423,   418,
     0,   419,     0,   897,     0,   421,   422,   423,     0,     0,
   424,   425,   426,     0,     0,     0,     0,     0,     0,   536,
   537,   538,     0,     0,     0,     0,     0,     0,   424,   425,
   426,     0,     0,     0,     0,     0,     0,   424,   425,   426
};

static const short yycheck[] = {    41,
    42,    43,    45,   236,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,    79,    52,    53,    54,   617,   384,
   448,    58,   612,   499,   741,    90,    97,   744,    77,   640,
   736,   285,   230,   115,   280,   575,   887,   283,     1,   248,
    63,   640,    36,    37,    38,    39,    89,     8,   560,   282,
   259,   260,   116,   286,   116,   112,   116,   114,   115,   116,
   911,   118,   119,   120,    25,   115,    64,    28,   580,   151,
   115,   112,    66,   114,    35,   116,   616,   118,   119,   120,
   116,    42,   614,    44,    78,    79,    80,    48,   137,   287,
    53,   609,   798,   150,   151,   152,   572,   764,   115,    25,
    61,   151,    63,    64,   350,   716,   151,    68,   698,   150,
   151,   152,   115,    31,    32,   782,    77,   716,   351,   147,
   148,   149,   355,   488,   115,   643,   116,    90,    91,    92,
    93,    94,    95,    96,   151,    98,    69,   736,   101,   102,
   103,   104,    36,   619,   620,   115,    64,    65,   151,    81,
   120,   868,   146,   870,   871,   137,   147,   148,   149,     3,
   491,   198,   199,   200,   201,   202,   203,     3,   499,   206,
   207,   208,   209,   210,   211,   212,   213,   653,   215,   216,
   217,     4,   219,   220,   221,   222,   223,   224,   519,     3,
   780,   228,   229,   439,   231,   449,    94,   743,    96,   798,
   746,   272,   273,   899,   900,   901,   796,   739,   636,   115,
   742,     3,   908,   745,     7,    66,    67,   450,   124,   125,
   346,   570,   468,   349,   122,   757,   352,   353,   271,   560,
    23,   580,    81,   479,   583,   107,   112,   470,   114,   112,
   830,   572,   118,   119,   120,   118,   119,   120,   107,   580,
   107,   288,   289,    31,    32,   116,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,   799,    13,    26,
    27,   308,   309,   116,   150,   151,   152,   150,   151,   152,
   112,   612,   528,   116,    77,   116,   617,   116,   619,   620,
   621,   622,   623,   624,   116,   124,   125,    42,   116,    44,
    45,    46,    47,    26,    27,   116,    29,    30,    31,   640,
    33,    34,    44,    45,   547,    60,    40,    41,   119,   120,
   651,   112,   653,   114,   115,   116,   116,   118,   119,   120,
   116,   116,    55,    56,    57,   867,   116,   869,   121,   116,
   116,   587,   112,   491,   114,   115,   116,   116,   118,   119,
   120,   499,   116,   116,    11,    12,   589,   116,   116,   150,
   151,   152,    19,    20,   116,    22,   116,   698,   112,   700,
   116,   519,   120,   121,   122,   123,   124,   125,   116,   416,
   150,   151,   152,   116,   120,   716,   116,   112,   634,   114,
   115,   116,     1,   118,   119,   120,   629,   116,   116,   116,
   116,   933,   116,   151,   637,   736,   116,   738,   116,   116,
   741,   116,   560,   744,   946,   947,   948,   116,   116,   116,
   116,   116,   116,   116,   572,   150,   151,   152,   116,   760,
   761,   116,   580,   114,   116,   118,   473,   116,   769,   116,
   151,   128,   773,   774,    53,   776,   777,   123,   779,   780,
   123,   123,   114,   128,   114,   497,   498,     5,   114,   114,
   114,   114,   527,   114,   612,   796,   115,   798,   114,   114,
   114,   619,   620,   621,   622,   623,   624,   151,   520,   521,
   522,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,     0,   830,
     0,   795,   451,   651,   112,   653,   114,   115,   116,   453,
   118,   119,   120,   780,   522,   519,   856,   906,   612,   627,
   579,   577,   755,   911,   566,   491,    15,   274,   754,    -1,
   861,   862,    -1,   499,    -1,   144,    -1,   868,    -1,   870,
   871,    -1,   150,   151,   152,   588,    -1,    -1,    -1,    -1,
   698,    -1,   700,   519,    -1,    -1,   887,    -1,    -1,    -1,
    -1,    -1,   893,    -1,   895,   896,    -1,   609,    -1,   112,
    -1,   114,   115,   116,    -1,   118,   119,   120,    -1,   112,
   911,   114,   115,   116,    -1,   118,   119,   120,    -1,    -1,
   738,    -1,   635,   741,   560,    -1,   744,    -1,    -1,   832,
    -1,   643,    -1,    -1,   698,    -1,   572,   150,   151,   152,
    -1,    -1,    -1,    -1,   580,    -1,    -1,   150,   151,   152,
    -1,   769,    -1,    -1,    -1,   773,   774,    -1,   776,   777,
    -1,   779,   780,   112,    -1,   114,   115,   116,    -1,   118,
   119,   120,    -1,    -1,   738,    -1,   612,   741,   796,    -1,
   744,   617,    -1,   619,   620,   621,   622,   623,   624,    -1,
    -1,   112,     1,   114,   115,   116,    -1,   118,   119,   120,
    -1,   150,   151,   152,   640,   769,    -1,    -1,    -1,    -1,
   774,    -1,   830,   777,    -1,   651,   780,   653,   112,    -1,
   114,   115,   116,    -1,   118,   119,   120,    -1,    -1,   150,
   151,   152,   796,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,    -1,    -1,    53,    -1,    -1,   759,    -1,    -1,
   868,    -1,   870,   871,    -1,    -1,   150,   151,   152,    -1,
    -1,    -1,   698,    -1,   700,    -1,   830,    -1,    -1,   781,
    -1,   150,   151,   152,    -1,   893,     1,   895,   896,    -1,
   716,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,    -1,    -1,
   736,    -1,   738,    -1,   868,   741,   870,   871,   744,    -1,
    -1,    -1,    -1,   112,    -1,   114,    -1,   116,   831,   118,
   119,   120,    -1,   887,    -1,    -1,    -1,    -1,    53,   893,
    -1,   895,   896,    -1,   770,   144,    -1,   773,    -1,    -1,
   776,    -1,    -1,   779,   780,    -1,    -1,   911,   860,    -1,
    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
   796,    -1,   798,    -1,    -1,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
     1,   903,   904,   905,   830,     6,     7,     8,     9,    -1,
    11,    12,    13,    -1,    15,    16,    -1,    -1,    19,    20,
    -1,    22,    23,    24,    25,     1,    -1,    28,    -1,   144,
    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   868,     1,   870,   871,    -1,    48,    -1,    -1,
    -1,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    53,    -1,    -1,
    -1,    82,    83,    84,    85,    86,    87,    88,    89,   150,
   151,   152,    -1,    -1,    -1,    53,    -1,    -1,     1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   114,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,     1,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   150,
    53,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,    -1,    -1,
    -1,    -1,    -1,    53,    -1,    -1,   144,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,    -1,    53,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,    -1,    53,    -1,
    -1,   144,    90,    91,    92,    93,    94,    95,    96,    -1,
    98,    -1,    -1,   101,   102,   103,   104,   105,   106,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   144,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,    53,   151,   119,    -1,    -1,
    -1,    -1,    -1,    -1,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,    53,   151,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,    53,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,    53,   151,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,    53,   151,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
    53,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,    53,   151,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,    53,   151,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,    53,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,    53,   151,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,    53,   151,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,    53,   151,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,    53,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,    53,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,    -1,   151,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,    53,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,    -1,   151,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,    53,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
    -1,   151,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,    53,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,    -1,   151,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,    53,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,    -1,   151,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,    53,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,    -1,   151,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,    53,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,    -1,   151,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,    53,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
    -1,   151,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,    53,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,    -1,   151,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,    53,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,    -1,   151,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,    53,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,    -1,   151,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,    53,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,    -1,   151,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,    53,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
    -1,   151,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,    -1,    53,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,    -1,   151,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,    -1,   113,   114,    53,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,    -1,   151,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
    -1,    53,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,    -1,   151,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,    -1,    53,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,    -1,   151,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,    -1,    53,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
    -1,   151,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,    -1,   113,   114,    53,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,    -1,   151,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,    -1,    53,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,    -1,   151,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
    -1,    53,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,    -1,   151,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,    -1,    53,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,    -1,   151,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,    -1,   113,    -1,    53,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
    -1,   151,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,    -1,    53,    -1,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,    -1,   151,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,    -1,   113,    -1,    53,
    -1,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,    -1,   151,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,    -1,   109,    -1,   111,    -1,   113,
    -1,    53,    -1,    -1,   118,    -1,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,    -1,   151,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,    -1,   109,    -1,   111,
    -1,   113,    -1,    53,    -1,    -1,    -1,    -1,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,    -1,   151,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,    53,   116,   117,    -1,    -1,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,    -1,
    -1,   151,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
   109,   110,   111,   112,   113,   114,   144,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,    -1,   145,   146,   147,   148,
   149,    -1,   151,   107,   108,   109,   110,   111,   112,   113,
   114,    -1,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
    -1,   145,   146,   147,   148,   149,    -1,   151,   107,   108,
   109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,    -1,   145,   146,   147,   148,
   149,    -1,   151,   107,   108,   109,   110,   111,   112,   113,
   114,    -1,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
    -1,   145,   146,   147,   148,   149,    -1,   151,   107,   108,
   109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,    -1,   145,   146,   147,   148,
   149,    -1,   151,   107,   108,   109,   110,   111,   112,   113,
   114,    -1,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
    -1,   145,   146,   147,   148,   149,   112,   151,   114,    -1,
   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,
    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
    -1,   150,   151,   152,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
    -1,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,
   151,   152,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,    -1,    -1,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,    -1,    -1,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,    -1,   150,   151,   152,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,
    -1,   118,   119,   120,    -1,    -1,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,    -1,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,    -1,   150,   151,   152,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,
    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
    -1,   150,   151,   152,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
    -1,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,
   151,   152,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,    -1,    -1,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/csl/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/csl/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 191 "surface.yy"
{ YYACCEPT; ;
    break;}
case 2:
#line 193 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::QUIT;
			;
    break;}
case 6:
#line 206 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 7:
#line 208 "surface.yy"
{
			  int lineNr = lineNumber;
			  eatComment(false); // eat \n so that line number is correct
			  string directory;
			  string fileName;
			  if (findFile(yyvsp[0].yyString, directory, fileName, lineNr))
			    includeFile(directory, fileName, false, lineNr);
			;
    break;}
case 8:
#line 216 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 9:
#line 218 "surface.yy"
{
			  int lineNr = lineNumber;
			  eatComment(false); // eat \n so that line number is correct
			  string directory;
			  string fileName;
			  if (findFile(yyvsp[0].yyString, directory, fileName, lineNr))
			    includeFile(directory, fileName, true, lineNr);
			;
    break;}
case 10:
#line 227 "surface.yy"
{
			  cout << directoryManager.getCwd() << '\n';
			;
    break;}
case 11:
#line 230 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 12:
#line 232 "surface.yy"
{
			  string directory;
			  directoryManager.realPath(yyvsp[0].yyString, directory);
			  if (!directoryManager.cd(directory))
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": cd failed");
			    }
			;
    break;}
case 13:
#line 241 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 14:
#line 243 "surface.yy"
{
			  string directory;
			  directoryManager.realPath(yyvsp[0].yyString, directory);
			  if (directoryManager.pushd(directory) == UNDEFINED)
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": pushd failed");
			    }
			;
    break;}
case 15:
#line 253 "surface.yy"
{
			  const char* path = directoryManager.popd();
			  if (path != 0)
			    cout << path << '\n';
			  else
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": popd failed");
			    }
			;
    break;}
case 16:
#line 263 "surface.yy"
{ lexerStringMode(); ;
    break;}
case 17:
#line 265 "surface.yy"
{
			  system((string("ls") + yyvsp[0].yyString).c_str());
			;
    break;}
case 18:
#line 269 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::QUIT;
			  YYACCEPT;
			;
    break;}
case 19:
#line 274 "surface.yy"
{
			  if(!handleEof())
			    {
			      PARSE_RESULT = UserLevelRewritingContext::QUIT;
			    }
			;
    break;}
case 20:
#line 307 "surface.yy"
{
			  yyval.yyModuleExpression = new ModuleExpression(yyvsp[0].yyToken.code());
			;
    break;}
case 21:
#line 311 "surface.yy"
{
			  yyval.yyModuleExpression = new ModuleExpression(yyvsp[-2].yyModuleExpression, yyvsp[0].yyModuleExpression);
			;
    break;}
case 22:
#line 315 "surface.yy"
{
			  yyval.yyModuleExpression = new ModuleExpression(yyvsp[-2].yyModuleExpression, yyvsp[0].yyRenaming);
			;
    break;}
case 23:
#line 319 "surface.yy"
{
			  yyval.yyModuleExpression = yyvsp[-1].yyModuleExpression;
			;
    break;}
case 24:
#line 324 "surface.yy"
{ return 0; ;
    break;}
case 27:
#line 331 "surface.yy"
{;
    break;}
case 28:
#line 332 "surface.yy"
{;
    break;}
case 29:
#line 333 "surface.yy"
{;
    break;}
case 30:
#line 339 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 31:
#line 341 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::FUNCTIONAL_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 32:
#line 347 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 33:
#line 352 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 34:
#line 354 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::SYSTEM_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 35:
#line 360 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 36:
#line 365 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 37:
#line 367 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::SYSTEM_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 38:
#line 373 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 39:
#line 380 "surface.yy"
{;
    break;}
case 40:
#line 382 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": fmod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 43:
#line 391 "surface.yy"
{;
    break;}
case 44:
#line 393 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": mod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 47:
#line 402 "surface.yy"
{;
    break;}
case 48:
#line 404 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": omod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 57:
#line 425 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 58:
#line 426 "surface.yy"
{ CM->addImport(bubble[0], yyvsp[-1].yyModuleExpression); ;
    break;}
case 59:
#line 428 "surface.yy"
{ clear(); ;
    break;}
case 60:
#line 429 "surface.yy"
{ CM->addSortDecl(bubble); ;
    break;}
case 61:
#line 431 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 62:
#line 432 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 63:
#line 433 "surface.yy"
{ CM->addSubsortDecl(bubble); ;
    break;}
case 64:
#line 435 "surface.yy"
{;
    break;}
case 65:
#line 437 "surface.yy"
{;
    break;}
case 66:
#line 439 "surface.yy"
{;
    break;}
case 67:
#line 441 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 68:
#line 442 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 69:
#line 443 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 70:
#line 445 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 71:
#line 446 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 72:
#line 447 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 73:
#line 448 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 74:
#line 450 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 75:
#line 451 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 76:
#line 452 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 77:
#line 454 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 78:
#line 455 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 79:
#line 456 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 80:
#line 457 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 81:
#line 459 "surface.yy"
{ CM->makeOpDeclsConsistent(); ;
    break;}
case 83:
#line 463 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 84:
#line 464 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 85:
#line 465 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 86:
#line 467 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 87:
#line 468 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 88:
#line 469 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 89:
#line 470 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 91:
#line 475 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 92:
#line 479 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 93:
#line 483 "surface.yy"
{
			;
    break;}
case 94:
#line 486 "surface.yy"
{
			;
    break;}
case 95:
#line 488 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 96:
#line 489 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 97:
#line 490 "surface.yy"
{ CM->addSubsortDecl(bubble); ;
    break;}
case 98:
#line 493 "surface.yy"
{;
    break;}
case 99:
#line 494 "surface.yy"
{;
    break;}
case 102:
#line 502 "surface.yy"
{
			;
    break;}
case 103:
#line 506 "surface.yy"
{ CM->addVarDecl(yyvsp[0].yyToken); ;
    break;}
case 104:
#line 507 "surface.yy"
{ CM->addVarDecl(yyvsp[0].yyToken); ;
    break;}
case 105:
#line 510 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 106:
#line 511 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 107:
#line 512 "surface.yy"
{ clear(); ;
    break;}
case 108:
#line 513 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 111:
#line 521 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  CM->addOpDecl(bubble);
			;
    break;}
case 112:
#line 526 "surface.yy"
{ clear(); ;
    break;}
case 113:
#line 527 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 114:
#line 531 "surface.yy"
{
			  if (yyvsp[-3].yyBool)
			    CM->convertSortsToKinds();
			;
    break;}
case 115:
#line 537 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 116:
#line 538 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 119:
#line 546 "surface.yy"
{
			  clear();
			  bubble.append(yyvsp[0].yyToken);
			  CM->addType(false, bubble);
			;
    break;}
case 120:
#line 551 "surface.yy"
{ clear(); ;
    break;}
case 121:
#line 553 "surface.yy"
{
			  CM->addType(true, bubble);
			;
    break;}
case 122:
#line 558 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 123:
#line 559 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 124:
#line 562 "surface.yy"
{;
    break;}
case 128:
#line 571 "surface.yy"
{
			  CM->setFlag(SymbolType::LEFT_ID | SymbolType::RIGHT_ID);
			;
    break;}
case 129:
#line 575 "surface.yy"
{
			  CM->setFlag(SymbolType::LEFT_ID);
			;
    break;}
case 130:
#line 579 "surface.yy"
{
			  CM->setFlag(SymbolType::RIGHT_ID);
			;
    break;}
case 131:
#line 585 "surface.yy"
{
			  CM->setFlag(SymbolType::ASSOC);
			;
    break;}
case 132:
#line 589 "surface.yy"
{
			  CM->setFlag(SymbolType::COMM);
			;
    break;}
case 133:
#line 592 "surface.yy"
{ clear(); ;
    break;}
case 134:
#line 593 "surface.yy"
{ CM->setIdentity(bubble); ;
    break;}
case 135:
#line 595 "surface.yy"
{
			  CM->setFlag(SymbolType::IDEM);
			;
    break;}
case 136:
#line 599 "surface.yy"
{
			  CM->setFlag(SymbolType::ITER);
			;
    break;}
case 137:
#line 602 "surface.yy"
{ CM->setPrec(yyvsp[0].yyToken); ;
    break;}
case 138:
#line 603 "surface.yy"
{ clear(); ;
    break;}
case 139:
#line 604 "surface.yy"
{ CM->setGather(bubble); ;
    break;}
case 140:
#line 605 "surface.yy"
{ clear(); ;
    break;}
case 141:
#line 606 "surface.yy"
{ CM->setFormat(bubble); ;
    break;}
case 142:
#line 607 "surface.yy"
{ clear(); ;
    break;}
case 143:
#line 608 "surface.yy"
{ CM->setStrat(bubble); ;
    break;}
case 144:
#line 609 "surface.yy"
{ clear(); ;
    break;}
case 145:
#line 610 "surface.yy"
{ CM->setPoly(bubble); ;
    break;}
case 146:
#line 612 "surface.yy"
{
			  CM->setFlag(SymbolType::MEMO);
			;
    break;}
case 147:
#line 616 "surface.yy"
{
			  CM->setFlag(SymbolType::CTOR);
			;
    break;}
case 148:
#line 620 "surface.yy"
{
			  clear();
			  CM->setFrozen(bubble);
			;
    break;}
case 149:
#line 624 "surface.yy"
{ clear(); ;
    break;}
case 150:
#line 625 "surface.yy"
{ CM->setFrozen(bubble); ;
    break;}
case 151:
#line 627 "surface.yy"
{
			  CM->setFlag(SymbolType::CONFIG);
			;
    break;}
case 152:
#line 631 "surface.yy"
{
			  CM->setFlag(SymbolType::OBJECT);
			;
    break;}
case 153:
#line 635 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 154:
#line 638 "surface.yy"
{ lexerLatexMode(); ;
    break;}
case 155:
#line 639 "surface.yy"
{ CM->setLatexMacro(yyvsp[-1].yyString); ;
    break;}
case 156:
#line 640 "surface.yy"
{;
    break;}
case 157:
#line 642 "surface.yy"
{
			  CM->setFlag(SymbolType::DITTO);
			;
    break;}
case 158:
#line 647 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 159:
#line 648 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 162:
#line 656 "surface.yy"
{
			  clear();
			  CM->addHook(PreModule::ID_HOOK, yyvsp[0].yyToken, bubble);
			;
    break;}
case 163:
#line 660 "surface.yy"
{ clear(); ;
    break;}
case 164:
#line 662 "surface.yy"
{
			  CM->addHook(PreModule::ID_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 165:
#line 665 "surface.yy"
{ clear(); ;
    break;}
case 166:
#line 667 "surface.yy"
{
			  CM->addHook(PreModule::OP_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 167:
#line 670 "surface.yy"
{ clear(); ;
    break;}
case 168:
#line 672 "surface.yy"
{
			  CM->addHook(PreModule::TERM_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 169:
#line 680 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 171:
#line 684 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 173:
#line 691 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 174:
#line 692 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 175:
#line 693 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 177:
#line 697 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 178:
#line 698 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 179:
#line 699 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 181:
#line 703 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 182:
#line 704 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 183:
#line 705 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 185:
#line 709 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 186:
#line 710 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 187:
#line 711 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 189:
#line 715 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 190:
#line 716 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 191:
#line 717 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 194:
#line 722 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 195:
#line 723 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 196:
#line 726 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 197:
#line 727 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 198:
#line 728 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 199:
#line 729 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 200:
#line 730 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 201:
#line 731 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 202:
#line 732 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 203:
#line 738 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 204:
#line 739 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 209:
#line 743 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 210:
#line 744 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 346:
#line 831 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 347:
#line 832 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 348:
#line 834 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.setCurrentModule(bubble);
			;
    break;}
case 349:
#line 838 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 350:
#line 839 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 351:
#line 841 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->dump();
			;
    break;}
case 352:
#line 847 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 353:
#line 853 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.parse(bubble);
			;
    break;}
case 354:
#line 860 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 355:
#line 866 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.creduce(bubble);
			;
    break;}
case 356:
#line 873 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 357:
#line 879 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.reduce(bubble, yyvsp[-3].yyBool);
			;
    break;}
case 358:
#line 886 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 359:
#line 893 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.rewrite(bubble, number, yyvsp[-3].yyBool);
			;
    break;}
case 360:
#line 899 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 361:
#line 906 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    ;
			;
    break;}
case 362:
#line 912 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			  number2 = NONE;
			;
    break;}
case 363:
#line 920 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.fRewrite(bubble, number, number2, yyvsp[-3].yyBool);
			;
    break;}
case 364:
#line 926 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 365:
#line 933 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.search(bubble, number);
			;
    break;}
case 366:
#line 939 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 367:
#line 946 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.match(bubble, yyvsp[-2].yyBool, number);
			;
    break;}
case 368:
#line 952 "surface.yy"
{
			  interpreter.cont(yyvsp[-1].yyInt64, yyvsp[-3].yyBool);
			;
    break;}
case 369:
#line 956 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 370:
#line 962 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.loop(bubble);
			;
    break;}
case 371:
#line 967 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 372:
#line 969 "surface.yy"
{
			  lexerInitialMode();
			  moduleExpr.contractTo(0);
			  if (interpreter.setCurrentModule(moduleExpr))  // HACK
			    interpreter.contLoop(bubble);
			;
    break;}
case 373:
#line 976 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 374:
#line 978 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.traceSelect(yyvsp[-3].yyBool);
			;
    break;}
case 375:
#line 982 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 376:
#line 984 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.traceExclude(yyvsp[-3].yyBool);
			;
    break;}
case 377:
#line 988 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 378:
#line 990 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.breakSelect(yyvsp[-3].yyBool);
			;
    break;}
case 379:
#line 994 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 380:
#line 996 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.printConceal(yyvsp[-3].yyBool);
			;
    break;}
case 381:
#line 1001 "surface.yy"
{
			  if (CM != 0)  // HACK
			    CM->getFlatSignature()->clearMemo();
			;
    break;}
case 382:
#line 1008 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 383:
#line 1010 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->showModule();
			;
    break;}
case 384:
#line 1015 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 385:
#line 1017 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->showModule();
			;
    break;}
case 386:
#line 1022 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 387:
#line 1024 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showModule(true);
			;
    break;}
case 388:
#line 1029 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 389:
#line 1031 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showSortsAndSubsorts();
			;
    break;}
case 390:
#line 1036 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 391:
#line 1038 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showOps();
			;
    break;}
case 392:
#line 1043 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 393:
#line 1045 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showVars();
			;
    break;}
case 394:
#line 1050 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 395:
#line 1052 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showMbs();
			;
    break;}
case 396:
#line 1057 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 397:
#line 1059 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showEqs();
			;
    break;}
case 398:
#line 1064 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 399:
#line 1066 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showRls();
			;
    break;}
case 400:
#line 1071 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 401:
#line 1073 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showSummary();
			;
    break;}
case 402:
#line 1078 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 403:
#line 1080 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showKinds();
			;
    break;}
case 404:
#line 1086 "surface.yy"
{
			  interpreter.showSearchPath(yyvsp[-1].yyInt64);
			;
    break;}
case 405:
#line 1090 "surface.yy"
{
			  interpreter.showSearchGraph();
			;
    break;}
case 406:
#line 1093 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 407:
#line 1095 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showProfile();
			;
    break;}
case 408:
#line 1104 "surface.yy"
{
			  globalAdvisoryFlag = yyvsp[-1].yyBool;
			;
    break;}
case 409:
#line 1108 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 410:
#line 1112 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_LOOP_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 411:
#line 1116 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_TIMING, yyvsp[-1].yyBool);
			;
    break;}
case 412:
#line 1120 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_BREAKDOWN, yyvsp[-1].yyBool);
			;
    break;}
case 413:
#line 1124 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_LOOP_TIMING, yyvsp[-1].yyBool);
			;
    break;}
case 414:
#line 1128 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_COMMAND, yyvsp[-1].yyBool);
			;
    break;}
case 415:
#line 1132 "surface.yy"
{
			  MemoryCell::setShowGC(yyvsp[-1].yyBool);
			;
    break;}
case 416:
#line 1136 "surface.yy"
{
			  MixfixModule::setPrintMixfix(yyvsp[-1].yyBool);
			;
    break;}
case 417:
#line 1140 "surface.yy"
{
			  MixfixModule::setPrintFlat(yyvsp[-1].yyBool);
			;
    break;}
case 418:
#line 1144 "surface.yy"
{
			  MixfixModule::setPrintWithAliases(yyvsp[-1].yyBool);
			;
    break;}
case 419:
#line 1148 "surface.yy"
{
			  MixfixModule::setPrintWithParens(yyvsp[-1].yyBool);
			;
    break;}
case 420:
#line 1152 "surface.yy"
{
			  MixfixModule::setPrintGraph(yyvsp[-1].yyBool);
			;
    break;}
case 421:
#line 1156 "surface.yy"
{
			  MixfixModule::setPrintConceal(yyvsp[-1].yyBool);
			;
    break;}
case 422:
#line 1160 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_NUMBER, yyvsp[-1].yyBool);
			;
    break;}
case 423:
#line 1164 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_RAT, yyvsp[-1].yyBool);
			;
    break;}
case 424:
#line 1168 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_COLOR, yyvsp[-1].yyBool);
			;
    break;}
case 425:
#line 1172 "surface.yy"
{
			  MixfixModule::setPrintFormat(yyvsp[-1].yyBool);
			;
    break;}
case 426:
#line 1176 "surface.yy"
{
			  interpreter.setFlag(Interpreter::TRACE, yyvsp[-1].yyBool);
			;
    break;}
case 427:
#line 1180 "surface.yy"
{
			  UserLevelRewritingContext::setTraceConditionFlag(yyvsp[-1].yyBool);
			;
    break;}
case 428:
#line 1184 "surface.yy"
{
			// ??? what is this supposed to do?
			;
    break;}
case 429:
#line 1188 "surface.yy"
{
			  UserLevelRewritingContext::setTraceWholeFlag(yyvsp[-1].yyBool);
			;
    break;}
case 430:
#line 1192 "surface.yy"
{
			  UserLevelRewritingContext::setTraceSubstitutionFlag(yyvsp[-1].yyBool);
			;
    break;}
case 431:
#line 1196 "surface.yy"
{
			  UserLevelRewritingContext::setTraceSelectFlag(yyvsp[-1].yyBool);
			;
    break;}
case 432:
#line 1200 "surface.yy"
{
			  UserLevelRewritingContext::setTraceScFlag(yyvsp[-1].yyBool);
			;
    break;}
case 433:
#line 1204 "surface.yy"
{
			  UserLevelRewritingContext::setTraceEqFlag(yyvsp[-1].yyBool);
			;
    break;}
case 434:
#line 1208 "surface.yy"
{
			  UserLevelRewritingContext::setTraceRuleFlag(yyvsp[-1].yyBool);
			;
    break;}
case 435:
#line 1212 "surface.yy"
{
			  interpreter.setFlag(Interpreter::BREAK, yyvsp[-1].yyBool);
			;
    break;}
case 436:
#line 1215 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 437:
#line 1216 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 438:
#line 1218 "surface.yy"
{
			  interpreter.setInclude(yyvsp[-3].yyToken, yyvsp[-1].yyBool);
			;
    break;}
case 439:
#line 1221 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 440:
#line 1222 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 441:
#line 1224 "surface.yy"
{
			  interpreter.setOmodInclude(yyvsp[-3].yyToken, yyvsp[-1].yyBool);
			;
    break;}
case 442:
#line 1228 "surface.yy"
{
			  globalVerboseFlag = yyvsp[-1].yyBool;
			;
    break;}
case 443:
#line 1232 "surface.yy"
{
			  interpreter.setFlag(Interpreter::AUTO_CLEAR_MEMO, yyvsp[-1].yyBool);
			;
    break;}
case 444:
#line 1236 "surface.yy"
{
			  interpreter.setFlag(Interpreter::COMPILE_COUNT, yyvsp[-1].yyBool);
			;
    break;}
case 445:
#line 1240 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PROFILE, yyvsp[-1].yyBool);
			;
    break;}
case 446:
#line 1244 "surface.yy"
{
			  interpreter.setFlag(Interpreter::AUTO_CLEAR_PROFILE, yyvsp[-1].yyBool);
			;
    break;}
case 447:
#line 1251 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::RESUME;
			;
    break;}
case 448:
#line 1255 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::ABORT;
			;
    break;}
case 449:
#line 1259 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::STEP;
			;
    break;}
case 450:
#line 1263 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::WHERE;
			;
    break;}
case 451:
#line 1270 "surface.yy"
{
			  MemoryCell::setShowGC(yyvsp[-1].yyBool);
			;
    break;}
case 452:
#line 1274 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 453:
#line 1280 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 455:
#line 1287 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 456:
#line 1288 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 457:
#line 1291 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 458:
#line 1292 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 459:
#line 1295 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 460:
#line 1296 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 461:
#line 1299 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 462:
#line 1300 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 463:
#line 1303 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 464:
#line 1304 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 465:
#line 1307 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 466:
#line 1308 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 467:
#line 1311 "surface.yy"
{ yyval.yyInt64 = yyvsp[0].yyInt64; ;
    break;}
case 468:
#line 1312 "surface.yy"
{ yyval.yyInt64 = NONE; ;
    break;}
case 469:
#line 1320 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 471:
#line 1322 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 473:
#line 1326 "surface.yy"
{ moduleExpr = bubble; clear(); ;
    break;}
case 474:
#line 1327 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 475:
#line 1328 "surface.yy"
{;
    break;}
case 476:
#line 1329 "surface.yy"
{;
    break;}
case 477:
#line 1338 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 479:
#line 1340 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 481:
#line 1342 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 483:
#line 1347 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 485:
#line 1349 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 487:
#line 1351 "surface.yy"
{;
    break;}
case 488:
#line 1356 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  clear();
			;
    break;}
case 490:
#line 1361 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 492:
#line 1363 "surface.yy"
{;
    break;}
case 493:
#line 1372 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 495:
#line 1374 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 497:
#line 1376 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 499:
#line 1381 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 501:
#line 1383 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 503:
#line 1385 "surface.yy"
{;
    break;}
case 504:
#line 1390 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  clear();
			;
    break;}
case 506:
#line 1395 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 508:
#line 1397 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 510:
#line 1399 "surface.yy"
{;
    break;}
case 511:
#line 1403 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 513:
#line 1405 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 515:
#line 1407 "surface.yy"
{;
    break;}
case 516:
#line 1412 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  number2 = Token::codeToInt64(bubble[3].code());
			  clear();
			;
    break;}
case 518:
#line 1418 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 520:
#line 1420 "surface.yy"
{;
    break;}
case 521:
#line 1426 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 523:
#line 1430 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 525:
#line 1435 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 535:
#line 1443 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 536:
#line 1444 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 544:
#line 1448 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 545:
#line 1449 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 552:
#line 1454 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 553:
#line 1455 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 561:
#line 1459 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 562:
#line 1460 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 569:
#line 1464 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 570:
#line 1465 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 577:
#line 1470 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 578:
#line 1471 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 585:
#line 1476 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 586:
#line 1477 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 592:
#line 1482 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 593:
#line 1483 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 596:
#line 1494 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  interpreter.addSelected(bubble);
			;
    break;}
case 597:
#line 1499 "surface.yy"
{ clear(); ;
    break;}
case 598:
#line 1501 "surface.yy"
{
			  interpreter.addSelected(bubble);
			;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/csl/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1531 "surface.yy"


static void
yyerror(char *s)
{
  if (!(UserLevelRewritingContext::interrupted()))
    IssueWarning(LineNumber(lineNumber) << ": " << s);
}

void
cleanUpParser()
{
  //bubble.contractTo(0);
  //moduleExpr.contractTo(0);
  //pattern.contractTo(0);
  interpreter.makeClean(lineNumber);
  /*
  if (currentModule != 0 && !(currentModule->isComplete()))
    {
      IssueAdvisory(cerr << LineNumber(lineNumber) << ": discarding incomplete module.");
      delete currentModule;
      currentModule = 0;
    }
  */
}
