
/*  A Bison parser, made from surface.yy
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FILE_NAME_STRING	257
#define	UNINTERPRETED_STRING	258
#define	LATEX_STRING	259
#define	KW_FMOD	260
#define	KW_MOD	261
#define	KW_OMOD	262
#define	KW_PARSE	263
#define	KW_NORMALIZE	264
#define	KW_REDUCE	265
#define	KW_REWRITE	266
#define	KW_LOOP	267
#define	KW_NARROW	268
#define	KW_MATCH	269
#define	KW_XMATCH	270
#define	KW_UNIFY	271
#define	KW_XUNIFY	272
#define	KW_EREWRITE	273
#define	KW_FREWRITE	274
#define	KW_OREWRITE	275
#define	KW_CONTINUE	276
#define	KW_SEARCH	277
#define	KW_SET	278
#define	KW_SHOW	279
#define	KW_ON	280
#define	KW_OFF	281
#define	KW_TRACE	282
#define	KW_CONTEXT	283
#define	KW_WHOLE	284
#define	KW_SELECT	285
#define	KW_DESELECT	286
#define	KW_CONDITION	287
#define	KW_SUBSTITUTION	288
#define	KW_PRINT	289
#define	KW_GRAPH	290
#define	KW_MIXFIX	291
#define	KW_FLAT	292
#define	KW_WITH	293
#define	KW_PARENS	294
#define	KW_ALIASES	295
#define	KW_GC	296
#define	KW_TIME	297
#define	KW_STATS	298
#define	KW_TIMING	299
#define	KW_CMD	300
#define	KW_BREAKDOWN	301
#define	KW_BREAK	302
#define	KW_PATH	303
#define	KW_MODULE	304
#define	KW_ALL	305
#define	KW_SORTS	306
#define	KW_OPS	307
#define	KW_VARS	308
#define	KW_MBS	309
#define	KW_EQS	310
#define	KW_RLS	311
#define	KW_SUMMARY	312
#define	KW_KINDS	313
#define	KW_ADVISE	314
#define	KW_VERBOSE	315
#define	KW_DO	316
#define	KW_CLEAR	317
#define	KW_INCLUDE	318
#define	KW_EXCLUDE	319
#define	KW_CONCEAL	320
#define	KW_REVEAL	321
#define	KW_COMPILE	322
#define	KW_COUNT	323
#define	KW_DEBUG	324
#define	KW_RESUME	325
#define	KW_ABORT	326
#define	KW_STEP	327
#define	KW_WHERE	328
#define	KW_CREDUCE	329
#define	KW_DUMP	330
#define	KW_PROFILE	331
#define	KW_NUMBER	332
#define	KW_RAT	333
#define	KW_COLOR	334
#define	SIMPLE_NUMBER	335
#define	KW_PWD	336
#define	KW_CD	337
#define	KW_PUSHD	338
#define	KW_POPD	339
#define	KW_LS	340
#define	KW_LOAD	341
#define	KW_QUIT	342
#define	KW_EOF	343
#define	KW_ENDFM	344
#define	KW_ENDM	345
#define	KW_ENDOM	346
#define	KW_IMPORT	347
#define	KW_SORT	348
#define	KW_SUBSORT	349
#define	KW_OP	350
#define	KW_MSGS	351
#define	KW_VAR	352
#define	KW_CLASS	353
#define	KW_SUBCLASS	354
#define	KW_MB	355
#define	KW_CMB	356
#define	KW_EQ	357
#define	KW_CEQ	358
#define	KW_RL	359
#define	KW_CRL	360
#define	KW_IS	361
#define	KW_ARROW	362
#define	KW_ARROW2	363
#define	KW_PARTIAL	364
#define	KW_IF	365
#define	KW_LABEL	366
#define	KW_TO	367
#define	KW_ASSOC	368
#define	KW_COMM	369
#define	KW_ID	370
#define	KW_IDEM	371
#define	KW_ITER	372
#define	KW_LEFT	373
#define	KW_RIGHT	374
#define	KW_PREC	375
#define	KW_GATHER	376
#define	KW_STRAT	377
#define	KW_MEMO	378
#define	KW_FROZEN	379
#define	KW_CTOR	380
#define	KW_LATEX	381
#define	KW_SPECIAL	382
#define	KW_CONFIG	383
#define	KW_OBJ	384
#define	KW_MSG	385
#define	KW_DITTO	386
#define	KW_FORMAT	387
#define	KW_ID_HOOK	388
#define	KW_OP_HOOK	389
#define	KW_TERM_HOOK	390
#define	KW_IN	391
#define	IDENTIFIER	392
#define	NUMERIC_ID	393

#line 27 "surface.yy"

#include <string>

//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "moduleExpression.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "visibleModule.hh"  // HACK
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

#include "main.hh"
#define clear()		bubble.contractTo(0);
#define store(token)	bubble.append(token)
#define YYPARSE_PARAM	parseResult
#define PARSE_RESULT	(*((UserLevelRewritingContext::ParseResult*) parseResult))

#define CM		interpreter.getCurrentModule()

void lexerInitialMode();
void lexerIdMode();
void lexerCmdMode();
void lexerFileNameMode();
void lexerStringMode();
void lexerLatexMode();
bool handleEof();
bool includeFile(const string& directory, const string& fileName, bool silent, int lineNr);
void eatComment(bool firstNonWhite);

Vector<Token> bubble;
Vector<Token> moduleExpr;

//PreModule* currentModule = 0;
Int64 number;
Int64 number2;

static void yyerror(char *s);
void cleanUpParser();

#line 83 "surface.yy"
typedef union
{
  bool yyBool;
  Int64 yyInt64;
  const char* yyString;
  Token yyToken;
  ModuleExpression* yyModuleExpression;
  Renaming* yyRenaming;
} YYSTYPE;
#line 93 "surface.yy"

int yylex(YYSTYPE* lvalp);
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		952
#define	YYFLAG		-32768
#define	YYNTBASE	152

#define YYTRANSLATE(x) ((unsigned)(x) <= 393 ? yytranslate[x] : 370)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   114,
   115,   125,   124,   120,     2,   116,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   112,     2,   117,
   113,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   118,     2,   119,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,   121,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   122,   123,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,     9,    10,    14,    15,    19,
    21,    22,    26,    27,    31,    33,    34,    38,    40,    42,
    44,    48,    52,    56,    60,    64,    66,    71,    76,    81,
    82,    83,    91,    92,    93,   101,   102,   103,   111,   113,
   115,   117,   119,   121,   123,   125,   127,   129,   131,   133,
   135,   138,   139,   142,   143,   146,   147,   148,   153,   154,
   159,   160,   161,   170,   174,   178,   184,   185,   186,   194,
   195,   196,   197,   208,   209,   210,   218,   219,   220,   221,
   232,   235,   237,   238,   239,   247,   248,   249,   250,   261,
   263,   267,   271,   272,   278,   279,   280,   289,   291,   294,
   296,   300,   304,   307,   309,   310,   314,   315,   320,   323,
   325,   327,   328,   333,   340,   342,   344,   347,   348,   350,
   351,   356,   360,   362,   366,   367,   370,   372,   374,   377,
   380,   382,   384,   385,   389,   391,   393,   396,   397,   403,
   404,   410,   411,   417,   419,   421,   423,   424,   430,   432,
   434,   436,   437,   443,   448,   450,   453,   455,   458,   460,
   463,   464,   471,   472,   479,   480,   487,   490,   491,   494,
   495,   496,   502,   505,   506,   507,   513,   516,   517,   518,
   524,   527,   528,   529,   535,   538,   539,   540,   546,   549,
   550,   552,   555,   557,   558,   563,   564,   570,   573,   576,
   578,   580,   583,   585,   587,   589,   591,   592,   597,   599,
   601,   603,   605,   607,   609,   611,   613,   615,   617,   619,
   621,   623,   625,   627,   629,   631,   633,   635,   637,   639,
   641,   643,   645,   647,   649,   651,   653,   655,   657,   659,
   661,   663,   665,   667,   669,   671,   673,   675,   677,   679,
   681,   683,   685,   687,   689,   691,   693,   695,   697,   699,
   701,   703,   705,   707,   709,   711,   713,   715,   717,   719,
   721,   723,   725,   727,   729,   731,   733,   735,   737,   739,
   741,   743,   745,   747,   749,   751,   753,   755,   757,   759,
   761,   763,   765,   767,   769,   771,   773,   775,   777,   779,
   781,   783,   785,   787,   789,   791,   793,   795,   797,   799,
   801,   803,   805,   807,   809,   811,   813,   815,   817,   819,
   821,   823,   825,   827,   829,   831,   833,   835,   837,   839,
   841,   843,   845,   847,   849,   851,   853,   855,   857,   859,
   861,   863,   865,   866,   867,   874,   875,   876,   883,   884,
   888,   889,   893,   894,   899,   900,   905,   906,   911,   912,
   917,   918,   922,   923,   927,   932,   933,   937,   938,   943,
   944,   950,   951,   957,   958,   964,   965,   971,   976,   977,
   983,   984,   990,   991,   997,   998,  1004,  1005,  1011,  1012,
  1018,  1019,  1025,  1026,  1032,  1033,  1039,  1040,  1046,  1047,
  1053,  1058,  1063,  1064,  1070,  1076,  1082,  1089,  1095,  1101,
  1108,  1114,  1120,  1126,  1132,  1139,  1146,  1152,  1158,  1164,
  1170,  1176,  1182,  1187,  1193,  1199,  1205,  1211,  1217,  1223,
  1229,  1235,  1240,  1241,  1242,  1250,  1251,  1252,  1261,  1266,
  1272,  1278,  1283,  1289,  1292,  1295,  1298,  1301,  1307,  1312,
  1313,  1317,  1319,  1321,  1323,  1325,  1327,  1329,  1331,  1333,
  1335,  1337,  1339,  1340,  1342,  1343,  1344,  1349,  1350,  1355,
  1356,  1357,  1364,  1366,  1367,  1371,  1372,  1377,  1378,  1383,
  1384,  1388,  1389,  1394,  1396,  1397,  1401,  1402,  1407,  1409,
  1410,  1414,  1415,  1420,  1421,  1426,  1427,  1431,  1432,  1437,
  1439,  1440,  1444,  1445,  1449,  1450,  1455,  1457,  1458,  1462,
  1463,  1468,  1470,  1471,  1475,  1476,  1481,  1483,  1486,  1487,
  1490,  1491,  1494,  1495,  1497,  1499,  1501,  1503,  1505,  1507,
  1509,  1511,  1512,  1517,  1519,  1521,  1523,  1525,  1527,  1529,
  1531,  1532,  1537,  1539,  1541,  1543,  1545,  1547,  1549,  1550,
  1555,  1557,  1559,  1561,  1563,  1565,  1567,  1569,  1570,  1575,
  1577,  1579,  1581,  1583,  1585,  1587,  1588,  1593,  1595,  1597,
  1599,  1601,  1603,  1605,  1606,  1611,  1613,  1615,  1617,  1619,
  1621,  1623,  1624,  1629,  1631,  1633,  1635,  1637,  1639,  1640,
  1645,  1648,  1650,  1652,  1653,  1658,  1660,  1662,  1664,  1666,
  1668,  1670
};

static const short yyrhs[] = {   153,
     0,     0,   164,     0,   154,     0,   271,     0,     0,   149,
   155,     3,     0,     0,    87,   156,     3,     0,    82,     0,
     0,    83,   157,     3,     0,     0,    84,   158,     3,     0,
    85,     0,     0,    86,   159,     4,     0,    88,     0,    89,
     0,   256,     0,   160,   124,   160,     0,   160,   125,   161,
     0,   114,   160,   115,     0,   114,   162,   115,     0,   162,
   120,   163,     0,   163,     0,    94,   256,   123,   256,     0,
   122,   265,   123,   265,     0,    96,   265,   123,   265,     0,
     0,     0,     6,   165,   256,   107,   166,   177,   171,     0,
     0,     0,     7,   167,   256,   107,   168,   178,   173,     0,
     0,     0,     8,   169,   256,   107,   170,   179,   175,     0,
    90,     0,   172,     0,    91,     0,    92,     0,    91,     0,
   174,     0,    90,     0,    92,     0,    92,     0,   176,     0,
    90,     0,    91,     0,   177,   180,     0,     0,   178,   195,
     0,     0,   179,   201,     0,     0,     0,    93,   181,   160,
   116,     0,     0,    94,   182,   238,   116,     0,     0,     0,
    95,   256,   183,   237,   117,   184,   238,   116,     0,    96,
   209,   215,     0,    53,   212,   215,     0,    98,   208,   112,
   218,   116,     0,     0,     0,   101,   185,   241,   112,   186,
   249,   116,     0,     0,     0,     0,   102,   187,   241,   112,
   188,   247,   111,   189,   249,   116,     0,     0,     0,   103,
   190,   243,   113,   191,   249,   116,     0,     0,     0,     0,
   104,   192,   243,   113,   193,   247,   111,   194,   249,   116,
     0,     1,   116,     0,   180,     0,     0,     0,   105,   196,
   245,   109,   197,   249,   116,     0,     0,     0,     0,   106,
   198,   245,   109,   199,   247,   111,   200,   249,   116,     0,
   195,     0,   143,   209,   215,     0,    97,   212,   215,     0,
     0,    99,   256,   202,   205,   116,     0,     0,     0,   100,
   256,   203,   237,   117,   204,   238,   116,     0,   121,     0,
   121,   206,     0,   207,     0,   206,   120,   207,     0,   257,
   112,   256,     0,   208,   262,     0,   262,     0,     0,   256,
   210,   241,     0,     0,   114,   211,   239,   115,     0,   212,
   213,     0,   213,     0,   262,     0,     0,   114,   214,   239,
   115,     0,   112,   217,   216,   218,   221,   116,     0,   108,
     0,   110,     0,   217,   218,     0,     0,   264,     0,     0,
   118,   219,   220,   119,     0,   220,   120,   264,     0,   264,
     0,   118,   222,   119,     0,     0,   222,   224,     0,   224,
     0,   128,     0,   131,   128,     0,   132,   128,     0,   126,
     0,   127,     0,     0,   223,   225,   253,     0,   129,     0,
   130,     0,   133,   150,     0,     0,   134,   114,   226,   231,
   115,     0,     0,   145,   114,   227,   231,   115,     0,     0,
   135,   114,   228,   231,   115,     0,   136,     0,   138,     0,
   137,     0,     0,   137,   114,   229,   231,   115,     0,   141,
     0,   142,     0,   143,     0,     0,   139,   114,   230,     5,
   115,     0,   140,   114,   232,   115,     0,   144,     0,   231,
   150,     0,   150,     0,   232,   233,     0,   233,     0,   146,
   256,     0,     0,   146,   256,   114,   234,   239,   115,     0,
     0,   147,   256,   114,   235,   239,   115,     0,     0,   148,
   256,   114,   236,   239,   115,     0,   237,   263,     0,     0,
   238,   257,     0,     0,     0,   239,   114,   240,   239,   115,
     0,   239,   256,     0,     0,     0,   241,   114,   242,   239,
   115,     0,   241,   262,     0,     0,     0,   243,   114,   244,
   239,   115,     0,   243,   260,     0,     0,     0,   245,   114,
   246,   239,   115,     0,   245,   259,     0,     0,     0,   247,
   114,   248,   239,   115,     0,   247,   261,     0,     0,   250,
     0,   249,   116,     0,   116,     0,     0,   114,   251,   239,
   115,     0,     0,   249,   114,   252,   239,   115,     0,   250,
   266,     0,   249,   258,     0,   257,     0,   254,     0,   253,
   254,     0,   265,     0,   267,     0,   268,     0,   116,     0,
     0,   114,   255,   239,   115,     0,   265,     0,   266,     0,
   268,     0,   269,     0,   116,     0,   265,     0,   266,     0,
   268,     0,   269,     0,   265,     0,   268,     0,   269,     0,
   265,     0,   266,     0,   269,     0,   116,     0,   117,     0,
   112,     0,   108,     0,   110,     0,   113,     0,   111,     0,
   107,     0,   265,     0,   266,     0,   269,     0,   116,     0,
   117,     0,   112,     0,   108,     0,   110,     0,   109,     0,
   111,     0,   107,     0,   265,     0,   266,     0,   269,     0,
   116,     0,   117,     0,   112,     0,   108,     0,   110,     0,
   113,     0,   109,     0,   107,     0,   265,     0,   266,     0,
   269,     0,   116,     0,   117,     0,   108,     0,   110,     0,
   113,     0,   109,     0,   111,     0,   107,     0,   265,     0,
   266,     0,   269,     0,   116,     0,   112,     0,   108,     0,
   110,     0,   113,     0,   109,     0,   111,     0,   107,     0,
   265,     0,   266,     0,   270,     0,   113,     0,   109,     0,
   111,     0,   107,     0,   150,     0,   120,     0,   121,     0,
   122,     0,   123,     0,   124,     0,   125,     0,   143,     0,
   267,     0,    93,     0,    94,     0,    95,     0,    96,     0,
    53,     0,    98,     0,    97,     0,    99,     0,   100,     0,
   101,     0,   102,     0,   103,     0,   104,     0,   105,     0,
   106,     0,    90,     0,    91,     0,    92,     0,   117,     0,
   112,     0,   108,     0,   110,     0,   113,     0,   109,     0,
   111,     0,   107,     0,   118,     0,   119,     0,   270,     0,
   126,     0,   127,     0,   128,     0,   129,     0,   130,     0,
   131,     0,   132,     0,   133,     0,   134,     0,   135,     0,
   136,     0,   138,     0,   139,     0,   140,     0,   137,     0,
   141,     0,   142,     0,   144,     0,   145,     0,   146,     0,
   147,     0,   148,     0,     0,     0,    31,   272,   350,   273,
   348,   116,     0,     0,     0,    76,   274,   350,   275,   348,
   116,     0,     0,     9,   276,   314,     0,     0,    75,   277,
   314,     0,     0,   312,    11,   278,   314,     0,     0,   312,
    12,   279,   320,     0,     0,   312,    19,   280,   320,     0,
     0,   312,    20,   281,   330,     0,     0,    23,   282,   320,
     0,     0,   311,   283,   320,     0,   312,    22,   313,   116,
     0,     0,    13,   284,   314,     0,     0,   114,   285,   347,
   115,     0,     0,    28,   308,   286,   366,   116,     0,     0,
    28,   309,   287,   366,   116,     0,     0,    48,   308,   288,
   366,   116,     0,     0,    35,   310,   289,   366,   116,     0,
    62,    63,   136,   116,     0,     0,    25,     7,   290,   348,
   116,     0,     0,    25,    50,   291,   348,   116,     0,     0,
    25,    51,   292,   348,   116,     0,     0,    25,    52,   293,
   348,   116,     0,     0,    25,    53,   294,   348,   116,     0,
     0,    25,    54,   295,   348,   116,     0,     0,    25,    55,
   296,   348,   116,     0,     0,    25,    56,   297,   348,   116,
     0,     0,    25,    57,   298,   348,   116,     0,     0,    25,
    58,   299,   348,   116,     0,     0,    25,    59,   300,   348,
   116,     0,    25,    49,    81,   116,     0,    25,    23,    36,
   116,     0,     0,    25,    77,   301,   348,   116,     0,    24,
    25,    60,   307,   116,     0,    24,    25,    44,   307,   116,
     0,    24,    25,    13,    44,   307,   116,     0,    24,    25,
    45,   307,   116,     0,    24,    25,    47,   307,   116,     0,
    24,    25,    13,    45,   307,   116,     0,    24,    25,    46,
   307,   116,     0,    24,    25,    42,   307,   116,     0,    24,
    35,    37,   307,   116,     0,    24,    35,    38,   307,   116,
     0,    24,    35,    39,    41,   307,   116,     0,    24,    35,
    39,    40,   307,   116,     0,    24,    35,    36,   307,   116,
     0,    24,    35,    66,   307,   116,     0,    24,    35,    78,
   307,   116,     0,    24,    35,    79,   307,   116,     0,    24,
    35,    80,   307,   116,     0,    24,    35,   145,   307,   116,
     0,    24,    28,   307,   116,     0,    24,    28,    33,   307,
   116,     0,    24,    28,    29,   307,   116,     0,    24,    28,
    30,   307,   116,     0,    24,    28,    34,   307,   116,     0,
    24,    28,    31,   307,   116,     0,    24,    28,    55,   307,
   116,     0,    24,    28,    56,   307,   116,     0,    24,    28,
    57,   307,   116,     0,    24,    48,   307,   116,     0,     0,
     0,    24,    64,   302,   369,   303,   307,   116,     0,     0,
     0,    24,     8,    64,   304,   369,   305,   307,   116,     0,
    24,    61,   307,   116,     0,    24,    63,   136,   307,   116,
     0,    24,    68,    69,   307,   116,     0,    24,    77,   307,
   116,     0,    24,    63,    77,   307,   116,     0,    71,   116,
     0,    72,   116,     0,    73,   116,     0,    74,   116,     0,
    24,    42,    25,   307,   116,     0,    24,    44,   307,   116,
     0,     0,     1,   306,   116,     0,    26,     0,    27,     0,
    31,     0,    32,     0,    65,     0,    64,     0,    66,     0,
    67,     0,    16,     0,    15,     0,    70,     0,     0,    81,
     0,     0,     0,   149,   315,   349,   317,     0,     0,   356,
   316,   348,   116,     0,     0,     0,   112,   318,   350,   319,
   348,   116,     0,   116,     0,     0,   118,   321,   324,     0,
     0,   149,   322,   349,   317,     0,     0,   358,   323,   348,
   116,     0,     0,   151,   325,   327,     0,     0,   360,   326,
   348,   116,     0,   116,     0,     0,   119,   328,   314,     0,
     0,   362,   329,   348,   116,     0,   116,     0,     0,   118,
   331,   334,     0,     0,   149,   332,   349,   317,     0,     0,
   358,   333,   348,   116,     0,     0,   151,   335,   337,     0,
     0,   360,   336,   348,   116,     0,   116,     0,     0,   119,
   338,   314,     0,     0,   120,   339,   341,     0,     0,   364,
   340,   348,   116,     0,   116,     0,     0,   151,   342,   344,
     0,     0,   360,   343,   348,   116,     0,   116,     0,     0,
   119,   345,   314,     0,     0,   362,   346,   348,   116,     0,
   116,     0,   347,   350,     0,     0,   348,   352,     0,     0,
   349,   354,     0,     0,   150,     0,   151,     0,   118,     0,
   119,     0,   149,     0,   112,     0,   116,     0,   120,     0,
     0,   114,   351,   347,   115,     0,   150,     0,   151,     0,
   118,     0,   119,     0,   149,     0,   112,     0,   120,     0,
     0,   114,   353,   347,   115,     0,   150,     0,   151,     0,
   118,     0,   119,     0,   149,     0,   120,     0,     0,   114,
   355,   347,   115,     0,   150,     0,   151,     0,   118,     0,
   119,     0,   112,     0,   116,     0,   120,     0,     0,   114,
   357,   347,   115,     0,   150,     0,   151,     0,   119,     0,
   112,     0,   116,     0,   120,     0,     0,   114,   359,   347,
   115,     0,   150,     0,   118,     0,   119,     0,   149,     0,
   112,     0,   120,     0,     0,   114,   361,   347,   115,     0,
   150,     0,   151,     0,   118,     0,   149,     0,   112,     0,
   120,     0,     0,   114,   363,   347,   115,     0,   150,     0,
   151,     0,   118,     0,   149,     0,   112,     0,     0,   114,
   365,   347,   115,     0,   366,   367,     0,   367,     0,   369,
     0,     0,   114,   368,   347,   115,     0,   150,     0,   151,
     0,   118,     0,   119,     0,   149,     0,   112,     0,   120,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   191,   192,   198,   199,   200,   206,   208,   216,   218,   226,
   230,   232,   241,   243,   252,   263,   265,   268,   273,   306,
   310,   314,   318,   324,   327,   328,   331,   332,   333,   339,
   340,   346,   352,   353,   359,   365,   366,   372,   380,   381,
   388,   388,   391,   392,   399,   399,   402,   403,   410,   410,
   413,   414,   417,   418,   421,   422,   425,   426,   428,   429,
   431,   432,   433,   435,   437,   439,   441,   442,   443,   445,
   446,   447,   448,   450,   451,   452,   454,   455,   456,   457,
   459,   462,   463,   464,   465,   467,   468,   469,   470,   473,
   474,   478,   482,   485,   488,   489,   490,   493,   494,   497,
   498,   501,   506,   507,   510,   511,   512,   513,   516,   517,
   520,   526,   527,   530,   537,   538,   541,   542,   545,   551,
   552,   558,   559,   562,   563,   566,   567,   570,   574,   578,
   584,   588,   592,   593,   594,   598,   602,   603,   604,   605,
   606,   607,   608,   609,   613,   617,   622,   623,   624,   628,
   632,   636,   637,   638,   639,   645,   646,   649,   650,   653,
   658,   659,   663,   664,   668,   669,   678,   679,   682,   683,
   689,   690,   691,   692,   695,   696,   697,   698,   701,   702,
   703,   704,   707,   708,   709,   710,   713,   714,   715,   716,
   719,   720,   721,   724,   725,   726,   727,   728,   729,   730,
   736,   737,   740,   740,   740,   740,   741,   742,   748,   748,
   748,   748,   748,   751,   751,   751,   751,   754,   754,   754,
   757,   757,   757,   757,   758,   758,   758,   758,   758,   758,
   758,   760,   760,   760,   760,   761,   761,   761,   761,   761,
   761,   761,   763,   763,   763,   763,   764,   764,   764,   764,
   764,   764,   764,   766,   766,   766,   766,   767,   767,   767,
   767,   767,   767,   767,   769,   769,   769,   769,   770,   770,
   770,   770,   770,   770,   770,   773,   773,   773,   773,   774,
   774,   774,   780,   780,   780,   780,   780,   780,   780,   783,
   783,   786,   786,   786,   786,   786,   786,   787,   787,   787,
   788,   788,   788,   788,   788,   788,   789,   789,   789,   792,
   792,   792,   792,   792,   792,   792,   792,   795,   795,   795,
   798,   798,   798,   798,   798,   798,   798,   799,   799,   799,
   799,   799,   800,   800,   800,   801,   801,   801,   801,   802,
   802,   802,   829,   830,   831,   836,   837,   838,   844,   851,
   857,   864,   870,   877,   883,   891,   896,   904,   909,   918,
   923,   931,   936,   944,   949,   953,   960,   965,   966,   974,
   975,   980,   981,   986,   987,   992,   993,   998,  1006,  1007,
  1013,  1014,  1020,  1021,  1027,  1028,  1034,  1035,  1041,  1042,
  1048,  1049,  1055,  1056,  1062,  1063,  1069,  1070,  1076,  1077,
  1083,  1087,  1091,  1092,  1101,  1105,  1109,  1113,  1117,  1121,
  1125,  1129,  1133,  1137,  1141,  1145,  1149,  1153,  1157,  1161,
  1165,  1169,  1173,  1177,  1181,  1185,  1189,  1193,  1197,  1201,
  1205,  1209,  1213,  1214,  1215,  1219,  1220,  1221,  1225,  1229,
  1233,  1237,  1241,  1248,  1252,  1256,  1260,  1267,  1271,  1278,
  1280,  1285,  1286,  1289,  1290,  1293,  1294,  1297,  1298,  1301,
  1302,  1305,  1306,  1309,  1310,  1318,  1319,  1320,  1321,  1324,
  1325,  1326,  1327,  1336,  1338,  1338,  1339,  1340,  1341,  1345,
  1347,  1347,  1348,  1349,  1353,  1359,  1359,  1360,  1361,  1370,
  1372,  1372,  1373,  1374,  1375,  1379,  1381,  1381,  1382,  1383,
  1387,  1393,  1393,  1395,  1395,  1396,  1397,  1401,  1403,  1403,
  1404,  1405,  1409,  1416,  1416,  1417,  1418,  1424,  1425,  1428,
  1429,  1433,  1434,  1440,  1440,  1440,  1440,  1440,  1440,  1440,
  1440,  1441,  1442,  1445,  1445,  1445,  1445,  1445,  1445,  1445,
  1446,  1447,  1451,  1451,  1451,  1451,  1451,  1451,  1452,  1453,
  1456,  1456,  1456,  1456,  1456,  1456,  1456,  1457,  1458,  1461,
  1461,  1461,  1461,  1461,  1461,  1462,  1463,  1467,  1467,  1467,
  1467,  1467,  1467,  1468,  1469,  1473,  1473,  1473,  1473,  1473,
  1473,  1474,  1475,  1479,  1479,  1479,  1479,  1479,  1480,  1481,
  1487,  1488,  1491,  1497,  1498,  1505,  1505,  1505,  1505,  1505,
  1505,  1505
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FILE_NAME_STRING",
"UNINTERPRETED_STRING","LATEX_STRING","KW_FMOD","KW_MOD","KW_OMOD","KW_PARSE",
"KW_NORMALIZE","KW_REDUCE","KW_REWRITE","KW_LOOP","KW_NARROW","KW_MATCH","KW_XMATCH",
"KW_UNIFY","KW_XUNIFY","KW_EREWRITE","KW_FREWRITE","KW_OREWRITE","KW_CONTINUE",
"KW_SEARCH","KW_SET","KW_SHOW","KW_ON","KW_OFF","KW_TRACE","KW_CONTEXT","KW_WHOLE",
"KW_SELECT","KW_DESELECT","KW_CONDITION","KW_SUBSTITUTION","KW_PRINT","KW_GRAPH",
"KW_MIXFIX","KW_FLAT","KW_WITH","KW_PARENS","KW_ALIASES","KW_GC","KW_TIME","KW_STATS",
"KW_TIMING","KW_CMD","KW_BREAKDOWN","KW_BREAK","KW_PATH","KW_MODULE","KW_ALL",
"KW_SORTS","KW_OPS","KW_VARS","KW_MBS","KW_EQS","KW_RLS","KW_SUMMARY","KW_KINDS",
"KW_ADVISE","KW_VERBOSE","KW_DO","KW_CLEAR","KW_INCLUDE","KW_EXCLUDE","KW_CONCEAL",
"KW_REVEAL","KW_COMPILE","KW_COUNT","KW_DEBUG","KW_RESUME","KW_ABORT","KW_STEP",
"KW_WHERE","KW_CREDUCE","KW_DUMP","KW_PROFILE","KW_NUMBER","KW_RAT","KW_COLOR",
"SIMPLE_NUMBER","KW_PWD","KW_CD","KW_PUSHD","KW_POPD","KW_LS","KW_LOAD","KW_QUIT",
"KW_EOF","KW_ENDFM","KW_ENDM","KW_ENDOM","KW_IMPORT","KW_SORT","KW_SUBSORT",
"KW_OP","KW_MSGS","KW_VAR","KW_CLASS","KW_SUBCLASS","KW_MB","KW_CMB","KW_EQ",
"KW_CEQ","KW_RL","KW_CRL","KW_IS","KW_ARROW","KW_ARROW2","KW_PARTIAL","KW_IF",
"':'","'='","'('","')'","'.'","'<'","'['","']'","','","'|'","KW_LABEL","KW_TO",
"'+'","'*'","KW_ASSOC","KW_COMM","KW_ID","KW_IDEM","KW_ITER","KW_LEFT","KW_RIGHT",
"KW_PREC","KW_GATHER","KW_STRAT","KW_MEMO","KW_FROZEN","KW_CTOR","KW_LATEX",
"KW_SPECIAL","KW_CONFIG","KW_OBJ","KW_MSG","KW_DITTO","KW_FORMAT","KW_ID_HOOK",
"KW_OP_HOOK","KW_TERM_HOOK","KW_IN","IDENTIFIER","NUMERIC_ID","top","item","directive",
"@1","@2","@3","@4","@5","moduleExpr","renaming","mapList","map","module","@6",
"@7","@8","@9","@10","@11","endfm","notEndfm","endm","notEndm","endom","notEndom",
"fDecList","decList","oDecList","fDeclaration","@12","@13","@14","@15","@16",
"@17","@18","@19","@20","@21","@22","@23","@24","@25","declaration","@26","@27",
"@28","@29","@30","oDeclaration","@31","@32","@33","classDef","cPairList","cPair",
"varNameList","opName","@34","@35","opNameList","simpleOpName","@36","domainRangeAttr",
"arrow","typeList","type","@37","sortTokens","attributes","attributeList","idKeyword",
"attribute","@38","@39","@40","@41","@42","@43","idList","hookList","hook","@44",
"@45","@46","listBarLt","listBarDot","tokens","@47","tokensBarColon","@48","tokensBarEqual",
"@49","tokensBarArrow2","@50","tokensBarIf","@51","endTokens","noTrailingDot",
"@52","@53","identity","identityChunk","@54","token","tokenBarDot","endToken",
"tokenBarArrow2","tokenBarEqual","tokenBarIf","tokenBarColon","tokenBarLt","sortToken",
"identifier","startKeyword","startKeyword2","midKeyword","attrKeyword","attrKeyword2",
"command","@55","@56","@57","@58","@59","@60","@61","@62","@63","@64","@65",
"@66","@67","@68","@69","@70","@71","@72","@73","@74","@75","@76","@77","@78",
"@79","@80","@81","@82","@83","@84","@85","@86","@87","@88","@89","polarity",
"select","exclude","conceal","match","optDebug","optNumber","moduleAndTerm",
"@90","@91","inEnd","@92","@93","numberModuleTerm","@94","@95","@96","numberModuleTerm1",
"@97","@98","numberModuleTerm2","@99","@100","numbersModuleTerm","@101","@102",
"@103","numbersModuleTerm1","@104","@105","numbersModuleTerm2","@106","@107",
"@108","numbersModuleTerm3","@109","@110","numbersModuleTerm4","@111","@112",
"cTokens","cTokensBarDot","cTokensBarDotColon","cToken","@113","cTokenBarDot",
"@114","cTokenBarDotColon","@115","cTokenBarIn","@116","cTokenBarLeftIn","@117",
"cTokenBarDotNumber","@118","cTokenBarDotRight","@119","cTokenBarDotCommaRight",
"@120","cOpNameList","cSimpleOpName","@121","cSimpleTokenBarDot", NULL
};
#endif

static const short yyr1[] = {     0,
   152,   152,   153,   153,   153,   155,   154,   156,   154,   154,
   157,   154,   158,   154,   154,   159,   154,   154,   154,   160,
   160,   160,   160,   161,   162,   162,   163,   163,   163,   165,
   166,   164,   167,   168,   164,   169,   170,   164,   171,   171,
   172,   172,   173,   173,   174,   174,   175,   175,   176,   176,
   177,   177,   178,   178,   179,   179,   181,   180,   182,   180,
   183,   184,   180,   180,   180,   180,   185,   186,   180,   187,
   188,   189,   180,   190,   191,   180,   192,   193,   194,   180,
   180,   195,   196,   197,   195,   198,   199,   200,   195,   201,
   201,   201,   202,   201,   203,   204,   201,   205,   205,   206,
   206,   207,   208,   208,   210,   209,   211,   209,   212,   212,
   213,   214,   213,   215,   216,   216,   217,   217,   218,   219,
   218,   220,   220,   221,   221,   222,   222,   223,   223,   223,
   224,   224,   225,   224,   224,   224,   224,   226,   224,   227,
   224,   228,   224,   224,   224,   224,   229,   224,   224,   224,
   224,   230,   224,   224,   224,   231,   231,   232,   232,   233,
   234,   233,   235,   233,   236,   233,   237,   237,   238,   238,
   240,   239,   239,   239,   242,   241,   241,   241,   244,   243,
   243,   243,   246,   245,   245,   245,   248,   247,   247,   247,
   249,   249,   249,   251,   250,   252,   250,   250,   250,   250,
   253,   253,   254,   254,   254,   254,   255,   254,   256,   256,
   256,   256,   256,   257,   257,   257,   257,   258,   258,   258,
   259,   259,   259,   259,   259,   259,   259,   259,   259,   259,
   259,   260,   260,   260,   260,   260,   260,   260,   260,   260,
   260,   260,   261,   261,   261,   261,   261,   261,   261,   261,
   261,   261,   261,   262,   262,   262,   262,   262,   262,   262,
   262,   262,   262,   262,   263,   263,   263,   263,   263,   263,
   263,   263,   263,   263,   263,   264,   264,   264,   264,   264,
   264,   264,   265,   265,   265,   265,   265,   265,   265,   266,
   266,   267,   267,   267,   267,   267,   267,   267,   267,   267,
   267,   267,   267,   267,   267,   267,   267,   267,   267,   268,
   268,   268,   268,   268,   268,   268,   268,   269,   269,   269,
   270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
   270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
   270,   270,   272,   273,   271,   274,   275,   271,   276,   271,
   277,   271,   278,   271,   279,   271,   280,   271,   281,   271,
   282,   271,   283,   271,   271,   284,   271,   285,   271,   286,
   271,   287,   271,   288,   271,   289,   271,   271,   290,   271,
   291,   271,   292,   271,   293,   271,   294,   271,   295,   271,
   296,   271,   297,   271,   298,   271,   299,   271,   300,   271,
   271,   271,   301,   271,   271,   271,   271,   271,   271,   271,
   271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
   271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
   271,   271,   302,   303,   271,   304,   305,   271,   271,   271,
   271,   271,   271,   271,   271,   271,   271,   271,   271,   306,
   271,   307,   307,   308,   308,   309,   309,   310,   310,   311,
   311,   312,   312,   313,   313,   315,   314,   316,   314,   318,
   319,   317,   317,   321,   320,   322,   320,   323,   320,   325,
   324,   326,   324,   324,   328,   327,   329,   327,   327,   331,
   330,   332,   330,   333,   330,   335,   334,   336,   334,   334,
   338,   337,   339,   337,   340,   337,   337,   342,   341,   343,
   341,   341,   345,   344,   346,   344,   344,   347,   347,   348,
   348,   349,   349,   350,   350,   350,   350,   350,   350,   350,
   350,   351,   350,   352,   352,   352,   352,   352,   352,   352,
   353,   352,   354,   354,   354,   354,   354,   354,   355,   354,
   356,   356,   356,   356,   356,   356,   356,   357,   356,   358,
   358,   358,   358,   358,   358,   359,   358,   360,   360,   360,
   360,   360,   360,   361,   360,   362,   362,   362,   362,   362,
   362,   363,   362,   364,   364,   364,   364,   364,   365,   364,
   366,   366,   367,   368,   367,   369,   369,   369,   369,   369,
   369,   369
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     1,     0,     3,     0,     3,     1,
     0,     3,     0,     3,     1,     0,     3,     1,     1,     1,
     3,     3,     3,     3,     3,     1,     4,     4,     4,     0,
     0,     7,     0,     0,     7,     0,     0,     7,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     0,     2,     0,     2,     0,     0,     4,     0,     4,
     0,     0,     8,     3,     3,     5,     0,     0,     7,     0,
     0,     0,    10,     0,     0,     7,     0,     0,     0,    10,
     2,     1,     0,     0,     7,     0,     0,     0,    10,     1,
     3,     3,     0,     5,     0,     0,     8,     1,     2,     1,
     3,     3,     2,     1,     0,     3,     0,     4,     2,     1,
     1,     0,     4,     6,     1,     1,     2,     0,     1,     0,
     4,     3,     1,     3,     0,     2,     1,     1,     2,     2,
     1,     1,     0,     3,     1,     1,     2,     0,     5,     0,
     5,     0,     5,     1,     1,     1,     0,     5,     1,     1,
     1,     0,     5,     4,     1,     2,     1,     2,     1,     2,
     0,     6,     0,     6,     0,     6,     2,     0,     2,     0,
     0,     5,     2,     0,     0,     5,     2,     0,     0,     5,
     2,     0,     0,     5,     2,     0,     0,     5,     2,     0,
     1,     2,     1,     0,     4,     0,     5,     2,     2,     1,
     1,     2,     1,     1,     1,     1,     0,     4,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     0,     0,     6,     0,     0,     6,     0,     3,
     0,     3,     0,     4,     0,     4,     0,     4,     0,     4,
     0,     3,     0,     3,     4,     0,     3,     0,     4,     0,
     5,     0,     5,     0,     5,     0,     5,     4,     0,     5,
     0,     5,     0,     5,     0,     5,     0,     5,     0,     5,
     0,     5,     0,     5,     0,     5,     0,     5,     0,     5,
     4,     4,     0,     5,     5,     5,     6,     5,     5,     6,
     5,     5,     5,     5,     6,     6,     5,     5,     5,     5,
     5,     5,     4,     5,     5,     5,     5,     5,     5,     5,
     5,     4,     0,     0,     7,     0,     0,     8,     4,     5,
     5,     4,     5,     2,     2,     2,     2,     5,     4,     0,
     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     0,     1,     0,     0,     4,     0,     4,     0,
     0,     6,     1,     0,     3,     0,     4,     0,     4,     0,
     3,     0,     4,     1,     0,     3,     0,     4,     1,     0,
     3,     0,     4,     0,     4,     0,     3,     0,     4,     1,
     0,     3,     0,     3,     0,     4,     1,     0,     3,     0,
     4,     1,     0,     3,     0,     4,     1,     2,     0,     2,
     0,     2,     0,     1,     1,     1,     1,     1,     1,     1,
     1,     0,     4,     1,     1,     1,     1,     1,     1,     1,
     0,     4,     1,     1,     1,     1,     1,     1,     0,     4,
     1,     1,     1,     1,     1,     1,     1,     0,     4,     1,
     1,     1,     1,     1,     1,     0,     4,     1,     1,     1,
     1,     1,     1,     0,     4,     1,     1,     1,     1,     1,
     1,     0,     4,     1,     1,     1,     1,     1,     0,     4,
     2,     1,     1,     0,     4,     1,     1,     1,     1,     1,
     1,     1
};

static const short yydefact[] = {     0,
   450,    30,    33,    36,   349,   366,   461,   460,   361,     0,
     0,     0,   343,     0,     0,     0,   462,     0,     0,     0,
     0,   351,   346,    10,    11,    13,    15,    16,     8,    18,
    19,   368,     6,     1,     4,     3,     5,   363,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   433,     0,     0,   379,     0,
     0,   381,   383,   385,   387,   389,   391,   393,   395,   397,
   399,   403,   454,   455,   457,   456,   370,   372,     0,   458,
   459,   376,   374,     0,   444,   445,   446,   447,     0,     0,
     0,     0,     0,     0,   519,     0,     0,   353,   355,   357,
   359,   465,   451,   296,   307,   308,   309,   292,   293,   294,
   295,   298,   297,   299,   300,   301,   302,   303,   304,   305,
   306,   317,   312,   315,   313,   316,   311,   314,   213,   310,
   318,   319,   284,   285,   286,   287,   288,   289,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,   335,
   332,   333,   334,   336,   337,   290,   338,   339,   340,   341,
   342,   283,     0,   209,   210,   291,   211,   212,   320,     0,
     0,   555,   558,   556,   553,   554,   557,   466,   551,   552,
   350,   468,   367,   563,   566,   564,   474,   562,   565,   476,
   560,   561,   362,   478,   436,     0,     0,     0,     0,     0,
     0,     0,   452,   453,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   521,     0,     0,   521,   521,   521,   521,   521,   521,
   521,   521,   521,   521,   521,     0,     0,   529,   532,   530,
   526,   527,   531,   528,   524,   525,   344,     0,     0,     0,
   352,   347,    12,    14,    17,     9,     0,     7,   364,     0,
     0,     0,     0,   464,     0,    31,    34,    37,   519,   523,
   521,   519,     0,   523,   521,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   423,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   449,   432,   439,     0,     0,   601,
   598,   599,   602,   600,   596,   597,   434,     0,   442,     0,
   402,   401,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   594,     0,   592,   593,     0,   519,   521,
     0,     0,   378,   521,   369,   518,   354,   356,   358,   490,
   492,   360,   494,   365,    52,    54,    56,     0,     0,     0,
     0,   572,   574,   484,   569,   570,   573,   571,   568,   480,
   475,   482,     0,     0,   437,     0,     0,   412,   406,   408,
   411,   409,   405,   425,   426,   428,   424,   427,   429,   430,
   431,   417,   413,   414,     0,     0,   418,   419,   420,   421,
   422,   448,   443,   440,     0,   441,   539,   541,   380,   536,
   537,   540,   538,   534,   535,   520,   382,   384,   386,   388,
   390,   392,   394,   396,   398,   400,   404,   519,   371,   591,
   373,     0,     0,   377,   375,     0,     0,   523,   521,     0,
     0,     0,   559,   470,   549,   473,   545,   546,   548,   547,
   543,   544,   467,   522,   469,   567,   519,     0,   521,   477,
   479,     0,   407,   410,   416,   415,     0,   519,     0,   533,
   345,   348,   500,   496,   491,   498,     0,     0,     0,     0,
    39,    41,    42,    57,    59,     0,     0,     0,    67,    70,
    74,    77,    32,    40,    51,    45,    43,    46,    83,    86,
    35,    44,    82,    53,    49,    50,    47,     0,     0,     0,
     0,    38,    48,    90,    55,     0,   519,     0,   580,   582,
   489,   578,   485,   581,   579,   576,   577,   481,   487,     0,
     0,   435,     0,   595,     0,   521,   493,   495,    81,   264,
   259,   262,   260,   263,   261,   112,   257,   258,     0,   110,
   111,   254,   255,   256,     0,   170,    61,   107,     0,   105,
     0,   104,   178,   178,   182,   182,   186,   186,     0,    93,
    95,     0,   471,     0,   575,   519,     0,   521,   483,   438,
   542,   588,   589,   507,   586,   501,   503,   587,   584,   585,
   497,   505,     0,   174,   118,   109,    65,     0,     0,    20,
     0,   168,   174,    64,   178,     0,   103,     0,     0,     0,
     0,     0,     0,    92,     0,   168,    91,   521,   550,     0,
   486,     0,   519,     0,     0,   521,   499,     0,     0,     0,
    58,     0,     0,    60,   169,   214,   215,   216,   217,     0,
     0,   106,   282,   280,   281,   279,   120,     0,   119,   276,
   277,   278,    68,   175,   177,    71,   242,   238,   240,   239,
   241,   237,    75,   179,   235,   236,   181,   232,   233,   234,
    78,   231,   227,    84,   228,   230,   226,   229,   183,   224,
   225,   185,   221,   222,   223,    87,    98,     0,     0,     0,
   583,   488,     0,   502,   512,   508,   504,   510,     0,   171,
   113,   173,   115,   116,     0,   117,    23,    21,     0,    22,
   275,   270,   273,   271,   274,   269,   272,   268,    62,   167,
   265,   266,   267,   108,     0,    66,     0,   174,   190,     0,
   174,   190,     0,   174,   190,    99,   100,     0,    94,    96,
   472,   590,     0,   521,   506,   174,   125,     0,     0,     0,
     0,    26,   170,     0,   123,   194,   193,     0,   191,   200,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   170,   517,   513,   509,   515,     0,     0,     0,     0,     0,
     0,     0,    24,     0,     0,   121,     0,   174,   196,   192,
   199,   218,   219,   220,   198,   176,   253,   249,   252,   250,
    72,   248,   251,   187,   246,   247,   189,   243,   244,   245,
   192,   180,    79,   192,   184,    88,   101,   102,     0,     0,
   521,   511,   172,   131,   132,   128,   135,   136,     0,     0,
     0,     0,     0,   144,   146,   145,     0,     0,   149,   150,
   151,   155,     0,     0,   133,   127,   114,     0,     0,     0,
    25,    63,   122,     0,   174,     0,   174,     0,     0,    97,
   514,     0,   129,   130,   137,   138,   142,   147,   152,     0,
   140,   124,   126,     0,    27,    29,    28,   195,     0,     0,
     0,     0,     0,   516,     0,     0,     0,     0,     0,     0,
     0,     0,   159,     0,   207,   206,   134,   201,   203,   204,
   205,   197,   192,   188,   192,   192,   157,     0,     0,     0,
     0,   160,     0,     0,   154,   158,     0,   174,   202,   139,
   156,   143,   148,   153,   161,   163,   165,   141,     0,   174,
   174,   174,   208,     0,     0,     0,   162,   164,   166,     0,
     0,     0
};

static const short yydefgoto[] = {   950,
    34,    35,    96,    94,    91,    92,    93,   609,   720,   761,
   762,    36,    41,   365,    42,   366,    43,   367,   503,   504,
   511,   512,   522,   523,   450,   451,   452,   513,   565,   566,
   612,   763,   573,   737,   574,   739,   866,   575,   740,   576,
   742,   868,   514,   577,   743,   578,   745,   869,   525,   625,
   626,   781,   698,   746,   747,   571,   569,   615,   613,   559,
   560,   604,   607,   715,   639,   658,   735,   764,   789,   854,
   855,   856,   884,   895,   904,   896,   897,   898,   918,   902,
   903,   940,   941,   942,   650,   611,   638,   756,   618,   738,
   620,   741,   622,   744,   772,   867,   768,   769,   798,   865,
   907,   908,   928,   712,   770,   801,   692,   677,   817,   561,
   730,   659,   164,   165,   166,   167,   168,   169,    37,    79,
   350,    90,   354,    44,    89,   270,   271,   272,   273,    46,
    97,    45,    95,   246,   247,   259,   258,   232,   235,   236,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   229,
   415,   286,   472,    40,   213,    77,    78,    82,    38,    39,
   275,   181,   280,   281,   463,   526,   628,   193,   283,   284,
   285,   381,   468,   469,   538,   587,   588,   362,   447,   448,
   449,   485,   545,   546,   601,   634,   635,   636,   707,   753,
   754,   784,   830,   831,   267,   330,   369,   356,   349,   426,
   478,   464,   527,   182,   279,   194,   282,   382,   467,   539,
   586,   602,   633,   345,   346,   438,   347
};

static const short yypact[] = {   813,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   256,
   366,    41,-32768,    19,   127,   -14,-32768,   -16,    -7,     2,
     5,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   221,    27,
  3000,  3000,  3000,   232,   232,   624,   -12,    17,   587,     3,
    33,   171,   171,   171,   -56,-32768,    83,   171,-32768,   131,
   120,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4279,-32768,
-32768,-32768,-32768,    72,-32768,-32768,-32768,-32768,   232,  4279,
   214,   220,   223,   226,-32768,   241,   624,-32768,-32768,-32768,
-32768,   167,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   146,-32768,-32768,-32768,-32768,-32768,-32768,   152,
   156,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   190,   171,   171,   171,   171,
   171,   171,-32768,-32768,   171,   171,   171,   171,   171,   171,
   171,   171,   139,   171,   171,   171,   225,   171,   171,   171,
   171,   171,   171,   166,   169,   170,   171,   171,   -52,   171,
   173,-32768,   174,   177,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   363,   363,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   363,   363,   178,
-32768,-32768,-32768,-32768,-32768,-32768,    -4,-32768,-32768,   232,
   624,   624,  4288,-32768,   179,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  4297,-32768,-32768,   -52,   171,   171,   180,   181,
   183,   185,   189,   200,   202,   205,   206,   210,   211,   212,
   218,   219,-32768,   224,   229,   238,   171,   171,   242,   243,
   244,   246,   247,   248,-32768,-32768,-32768,   249,   250,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   251,-32768,  4337,
-32768,-32768,  4346,  4355,  4364,  4404,  4413,  4422,  4431,  4471,
  4480,  4489,  4498,-32768,  4538,-32768,-32768,  4547,-32768,-32768,
  4556,  4565,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   490,  4605,  4614,
   554,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  4605,  4623,-32768,   252,   255,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   258,   259,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   171,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  3876,  4632,-32768,-32768,  4672,  4681,-32768,-32768,   445,
   401,    34,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4690,-32768,-32768,
-32768,   171,-32768,-32768,-32768,-32768,   260,-32768,  3885,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  4605,  4699,   261,  3061,
-32768,-32768,-32768,-32768,-32768,  3000,  2194,  3551,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  3061,  3000,  3000,
  2194,-32768,-32768,-32768,-32768,  4279,-32768,  4203,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4739,
   262,-32768,  4212,-32768,  4748,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2256,-32768,
-32768,-32768,-32768,-32768,  2318,-32768,-32768,-32768,   157,-32768,
  3123,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2256,-32768,
-32768,   157,-32768,  4221,-32768,-32768,   232,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  4757,-32768,-32768,-32768,-32768,  2318,   -22,-32768,
  3184,-32768,-32768,-32768,-32768,  3734,-32768,  2380,  2442,  2504,
  2566,  2628,  2690,-32768,   162,-32768,-32768,-32768,-32768,  4230,
-32768,  4766,-32768,   232,  4806,-32768,-32768,   946,  3673,   122,
-32768,  2318,   192,-32768,-32768,-32768,-32768,-32768,-32768,  3245,
  1042,  3306,-32768,-32768,-32768,-32768,-32768,   264,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  3612,   268,  3368,  4815,
-32768,-32768,  4270,-32768,-32768,-32768,-32768,-32768,  4824,-32768,
-32768,-32768,-32768,-32768,  3734,-32768,-32768,-32768,   -18,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  3795,-32768,  2752,-32768,-32768,  2752,
-32768,-32768,  2752,-32768,-32768,   216,-32768,   175,-32768,-32768,
-32768,-32768,  4833,-32768,-32768,-32768,   254,  3000,   153,   153,
    90,-32768,-32768,   148,-32768,-32768,-32768,  3946,  3918,-32768,
  1138,  2814,  3990,  1234,  2876,  4034,  1330,  2938,  3612,  3000,
-32768,-32768,-32768,-32768,-32768,  4873,  1426,  1067,   271,   269,
   270,   272,-32768,   -18,  3429,-32768,  3795,-32768,-32768,   594,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   666,-32768,-32768,   814,-32768,-32768,-32768,-32768,  3490,   232,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   209,   263,
   253,   228,   280,-32768,   282,-32768,   290,   293,-32768,-32768,
-32768,-32768,   300,   978,-32768,-32768,-32768,  3000,   153,   153,
-32768,-32768,-32768,  1522,-32768,  2752,-32768,  2752,  2752,-32768,
-32768,  4882,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    74,
-32768,-32768,-32768,  3856,-32768,-32768,-32768,-32768,  1618,  4078,
  1714,  4122,  4166,-32768,   277,   277,   277,   334,  3000,  3000,
  3000,    78,-32768,   277,-32768,-32768,  3856,-32768,-32768,-32768,
-32768,-32768,   838,-32768,   873,   892,-32768,   -71,   -62,   -60,
   314,   316,   318,   319,-32768,-32768,   -58,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1810,-32768,
-32768,-32768,-32768,  1906,  2002,  2098,-32768,-32768,-32768,   435,
   437,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -572,-32768,-32768,
  -356,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -11,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    -8,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -338,-32768,   -76,-32768,-32768,   -70,
  -514,-32768,  -462,-32768,-32768,  -619,-32768,-32768,-32768,-32768,
-32768,  -407,-32768,-32768,-32768,-32768,-32768,-32768,  -747,-32768,
  -453,-32768,-32768,-32768,  -174,  -688,  -542,-32768,  -531,-32768,
  -123,-32768,  -121,-32768,  -694,-32768,  -715,-32768,-32768,-32768,
-32768,  -449,-32768,   -41,  -584,-32768,-32768,-32768,-32768,  -403,
-32768,  -706,  -309,    11,  -851,  -537,  -210,  -593,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -36,   446,-32768,-32768,-32768,-32768,
-32768,   -42,-32768,-32768,  -346,-32768,-32768,   -59,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -248,  -231,  -260,   -64,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   187,-32768,  -428,-32768,  -288,
-32768,-32768,-32768,  -103,   -91,-32768,  -197
};


#define	YYLAST		5033


static const short yytable[] = {   163,
   170,   171,   183,   333,   334,   335,   336,   337,   338,   339,
   340,   341,   342,   343,   257,   224,   225,   226,   486,   716,
   227,   231,   662,   383,   773,   262,   645,   776,   765,   196,
   368,   327,   910,   371,   489,   640,   470,   269,   214,   215,
   216,   217,   619,   930,   606,   662,   261,   775,    84,   370,
   778,   195,   932,   384,   933,   910,   938,   223,   197,   320,
   198,   199,   200,   201,   606,   321,   322,   323,   218,   718,
   651,    73,    74,   648,   795,   758,   202,   759,   931,   228,
   219,   220,   221,   652,    80,    81,   490,   931,   385,   931,
   863,   931,   829,   641,   572,   757,   324,   325,   326,    85,
   442,   642,   643,   760,    75,    76,   614,   248,    86,   249,
   355,   250,   748,   251,   252,   253,   624,    87,   443,   627,
    88,   662,   446,   515,   516,   517,   494,   495,   496,   497,
   518,   498,   519,   520,   499,   500,   501,   502,   509,   510,
   547,   662,   103,   348,   254,   255,   256,   222,   919,   920,
   890,   230,   892,   893,   351,   352,   927,    73,    74,   648,
   289,   290,   291,   292,   293,   294,   233,   617,   295,   296,
   297,   298,   299,   300,   301,   302,   521,   304,   305,   306,
   562,   309,   310,   311,   312,   313,   314,   487,   562,   479,
   318,   319,   925,   328,   748,   771,   203,   204,   774,   648,
   234,   777,   648,   662,   793,   648,   708,   260,   562,   794,
   645,   358,   359,   787,   665,   665,   263,   488,   528,   899,
   900,   901,   264,   899,   900,   901,   265,   357,   266,   543,
   803,    98,    99,   287,   288,   803,   717,   540,   803,   100,
   101,   648,   102,   268,   645,   642,   643,   274,   665,   562,
   386,   387,   276,   440,   303,   864,   440,   648,   277,   440,
   440,   562,   278,    47,   307,   308,   796,   797,   605,   562,
   405,   406,   133,   134,   135,   136,   137,   138,   584,   564,
    48,   315,   697,    49,   316,   317,   780,   564,   329,   331,
    50,   648,   332,   353,   364,   388,   389,    51,   390,    52,
   391,   646,   162,    53,   392,   719,   660,   564,   562,   562,
   678,   678,   693,   693,   603,   393,    54,   394,    55,    56,
   395,   396,   889,    57,   891,   397,   398,   399,   648,   660,
   648,   648,    58,   400,   401,   779,   873,   630,   921,   402,
   731,   876,   562,   172,   403,   173,   911,   174,   564,   175,
   176,   177,   803,   404,   803,   803,   632,   407,   408,   409,
   564,   410,   411,   412,   413,   414,   416,   473,   564,   911,
   474,   788,    59,   475,   476,   542,   549,   590,   477,   736,
   178,   179,   180,   749,   703,   939,   857,   646,    60,   731,
   874,   858,   859,   877,   860,   878,   700,   944,   945,   946,
   649,   489,   875,   879,   709,   660,   880,   564,   564,   680,
   680,   695,   695,   881,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,   660,   917,   646,   934,   935,
   646,   936,   937,   646,   951,   541,   952,   861,   505,   733,
   827,   564,    72,   524,   582,   489,   883,   579,   926,   791,
   792,   699,   621,   490,   567,   570,   623,   929,   802,   363,
    83,   583,   818,   802,   785,   818,   802,     0,   818,   646,
     0,     0,     0,     0,   320,     0,   344,   580,   581,   570,
   321,   322,   323,     0,     0,   646,   649,   660,   733,     0,
   506,   507,   508,   494,   495,   496,   497,   490,   498,     0,
   563,   499,   500,   501,   502,   509,   510,     0,   563,     0,
     0,   324,   325,   326,     0,     0,     0,     0,     0,   646,
     0,     0,   786,   610,     0,     0,   649,     0,   563,   649,
     0,     0,   649,     0,   491,   492,   493,   494,   495,   496,
   497,     0,   498,     0,   631,   499,   500,   501,   502,   886,
   887,     0,     0,     0,     0,     0,   646,   804,   646,   646,
     0,   820,   804,     0,   820,   804,   610,   820,   649,   563,
     0,     0,     0,     0,   909,     0,     0,     0,     0,     0,
   802,   563,   802,   802,   649,     0,     0,     0,     0,   563,
     0,   704,     0,     0,   -69,     0,     0,   909,     0,   872,
   610,   248,     0,   249,   453,   250,     0,   251,   252,   253,
     0,     0,   203,   204,     0,   205,   206,   207,   649,   208,
   209,   647,     0,     0,     0,     0,   661,     0,   563,   563,
   679,   679,   694,   694,     0,     0,     0,     0,   254,   255,
   256,   210,   211,   212,     0,     0,   -69,     0,     0,   661,
     0,     0,     0,     0,     0,   649,     0,   649,   649,     0,
   732,     0,   563,     0,     0,   248,   -76,   249,   466,   250,
     0,   251,   252,   253,     0,     0,     0,     0,     0,   804,
     0,   804,   804,   -69,   -69,   -69,   -69,   -69,   -69,   -69,
   -69,   -69,   -69,   -69,   -69,   -69,   -69,   -69,   -69,   -69,
     0,     0,   254,   255,   256,     0,     0,   647,     0,   732,
     0,     0,     0,     0,     0,     0,   790,     0,   -76,     0,
     0,     0,     0,     0,     0,   661,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   184,   -69,   185,   828,   186,
     0,   187,   188,   189,     0,   661,     0,   647,     0,     0,
   647,     0,     0,   647,     0,   -76,   -76,   -76,   -76,   -76,
   -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,
   -76,   -76,   190,   191,   192,     0,     0,     0,     0,   805,
     0,     0,   819,     0,     0,   819,     0,   871,   819,   647,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   647,     0,   661,   -76,     0,
     0,     0,    -2,     1,   -85,     0,   885,     0,     2,     3,
     4,     5,     0,  -463,  -463,     6,     0,     7,     8,     0,
     0,  -463,  -463,     0,  -463,     9,    10,    11,   -73,   647,
    12,     0,     0,    13,     0,     0,     0,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   922,   923,   924,
    15,     0,     0,     0,     0,     0,   -85,     0,     0,     0,
     0,     0,     0,   -80,    16,     0,   647,     0,   647,   647,
     0,     0,    17,    18,    19,    20,    21,    22,    23,     0,
   -73,     0,   -89,     0,    24,    25,    26,    27,    28,    29,
    30,    31,     0,   -85,   -85,   -85,   -85,   -85,   -85,   -85,
   -85,   -85,   -85,   -85,   -85,   -85,   -85,   -85,   -85,   -85,
     0,     0,     0,     0,     0,   -80,    32,   -73,   -73,   -73,
   -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,
   -73,   -73,   -73,   -73,   -89,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   -85,     0,     0,     0,
     0,    33,   -80,   -80,   -80,   -80,   -80,   -80,   -80,   -80,
   -80,   -80,   -80,   -80,   -80,   -80,   -80,   -80,   -80,     0,
   -73,   -89,   -89,   -89,   -89,   -89,   -89,   -89,   -89,   -89,
   -89,   -89,   -89,   -89,   -89,   -89,   -89,   -89,   104,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   -80,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   -89,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   710,
   711,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   104,   162,   882,     0,     0,     0,
     0,     0,     0,   834,   835,   836,   837,   838,   839,   840,
   841,   842,   843,   844,   845,   846,   847,   848,   849,   850,
   851,   852,   853,     0,     0,     0,     0,     0,     0,     0,
     0,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   710,   734,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   104,   162,   834,   835,   836,   837,   838,   839,   840,   841,
   842,   843,   844,   845,   846,   847,   848,   849,   850,   851,
   852,   853,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   710,   806,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   104,   162,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   710,   822,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   104,   162,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   710,   825,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   104,   162,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   710,
   833,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   104,   162,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   710,   888,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   104,   162,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   710,   912,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   104,   162,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   710,   914,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   104,   162,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   710,   943,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   104,   162,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   710,
   947,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   104,   162,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   710,   948,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   104,   162,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   710,   949,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   104,   162,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   568,   104,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,     0,   162,     0,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   550,   551,   552,   553,   554,   605,   555,   556,
   104,   557,   558,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,     0,   162,     0,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   608,   104,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,     0,   162,     0,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   550,   551,   552,   553,
   554,   663,   555,   664,   104,   557,   558,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     0,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   550,   551,
   552,   553,   554,   666,   555,   664,   104,   557,   558,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     0,   162,     0,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   667,   668,   669,   670,   671,   672,   673,   674,   104,   675,
   676,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,     0,   162,     0,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   667,   668,   669,   670,   671,   672,   681,   674,
   104,   675,   676,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,     0,   162,     0,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   682,   683,   684,   685,   686,   687,
   688,   689,   104,   690,   691,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,     0,   162,     0,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   682,   683,   696,   685,
   686,   687,   688,   689,   104,   690,   691,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
     0,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   766,   104,   767,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     0,   162,     0,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   807,   808,   809,   810,   811,   812,   813,   814,   104,   815,
   816,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,     0,   162,     0,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   807,   808,   809,   810,   823,   812,   813,   814,
   104,   815,   816,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,     0,   162,     0,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   807,   808,   809,   810,   826,   812,
   813,   814,   104,   815,   816,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,     0,   162,     0,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   104,     0,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   550,   551,   552,
   553,   554,     0,   555,   556,   104,   557,   558,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,     0,
   162,     0,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   550,
   551,   552,   553,   554,   616,   555,   104,     0,   557,   558,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,     0,   162,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   104,     0,   644,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,     0,   162,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   721,   722,   723,   724,   725,   726,   727,   104,     0,
   728,   729,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,     0,   162,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   550,   551,   552,   553,   554,     0,   555,   664,
   104,   557,   558,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,     0,   162,     0,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   721,   722,   723,   724,   725,   726,
   727,   104,     0,   728,   750,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,     0,   162,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   104,     0,   862,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,     0,   162,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   104,     0,   870,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   550,   551,   552,
   553,   554,     0,   555,   104,     0,   557,   558,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,     0,
   162,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   104,     0,     0,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     0,   162,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   653,
   713,   654,   714,   655,     0,   656,   104,     0,     0,     0,
   657,     0,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,     0,   162,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   653,     0,   654,     0,   655,     0,   656,   104,     0,     0,
     0,   657,     0,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,     0,   162,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   653,     0,   654,     0,   655,     0,   656,   104,     0,
     0,     0,     0,     0,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,     0,   162,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   905,
   104,   906,   130,     0,     0,   133,   134,   135,   136,   137,
   138,     0,     0,     0,     0,     0,     0,   248,     0,   249,
   480,   250,     0,   251,   252,   253,   248,     0,   249,   544,
   250,     0,   251,   252,   253,   162,     0,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   254,   255,   256,     0,     0,     0,
     0,     0,     0,   254,   255,   256,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   122,   123,   124,   125,   126,   127,   128,   799,
   156,   800,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,     0,   157,
   158,   159,   160,   161,     0,   162,   122,   123,   124,   125,
   126,   127,   128,   799,     0,   821,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,     0,   157,   158,   159,   160,   161,     0,   162,
   122,   123,   124,   125,   126,   127,   128,   799,     0,   824,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,     0,   157,   158,   159,
   160,   161,     0,   162,   122,   123,   124,   125,   126,   127,
   128,   799,     0,   913,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     0,   157,   158,   159,   160,   161,     0,   162,   122,   123,
   124,   125,   126,   127,   128,   799,     0,   915,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,     0,   157,   158,   159,   160,   161,
     0,   162,   122,   123,   124,   125,   126,   127,   128,   799,
     0,   916,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,     0,   157,
   158,   159,   160,   161,   248,   162,   249,   585,   250,     0,
   251,   252,   253,   248,     0,   249,   591,   250,     0,   251,
   252,   253,   248,     0,   249,   629,   250,     0,   251,   252,
   253,   248,     0,   249,   701,   250,     0,   251,   252,   253,
     0,   254,   255,   256,     0,     0,     0,     0,     0,     0,
   254,   255,   256,     0,     0,     0,     0,     0,     0,   254,
   255,   256,     0,     0,     0,     0,     0,     0,   254,   255,
   256,   248,     0,   249,   752,   250,     0,   251,   252,   253,
   248,     0,   249,     0,   250,     0,   251,   252,   253,   184,
     0,   185,     0,   186,     0,   360,   188,   189,   372,     0,
   373,     0,   374,     0,   375,   376,   377,     0,   254,   255,
   256,     0,     0,     0,     0,     0,     0,   254,   255,   256,
     0,     0,     0,     0,     0,     0,   361,   191,   192,     0,
     0,     0,     0,     0,     0,   378,   379,   380,   417,     0,
   418,     0,   419,     0,   420,   421,   422,   417,     0,   418,
     0,   427,     0,   420,   421,   422,   417,     0,   418,     0,
   428,     0,   420,   421,   422,   417,     0,   418,     0,   429,
     0,   420,   421,   422,     0,   423,   424,   425,     0,     0,
     0,     0,     0,     0,   423,   424,   425,     0,     0,     0,
     0,     0,     0,   423,   424,   425,     0,     0,     0,     0,
     0,     0,   423,   424,   425,   417,     0,   418,     0,   430,
     0,   420,   421,   422,   417,     0,   418,     0,   431,     0,
   420,   421,   422,   417,     0,   418,     0,   432,     0,   420,
   421,   422,   417,     0,   418,     0,   433,     0,   420,   421,
   422,     0,   423,   424,   425,     0,     0,     0,     0,     0,
     0,   423,   424,   425,     0,     0,     0,     0,     0,     0,
   423,   424,   425,     0,     0,     0,     0,     0,     0,   423,
   424,   425,   417,     0,   418,     0,   434,     0,   420,   421,
   422,   417,     0,   418,     0,   435,     0,   420,   421,   422,
   417,     0,   418,     0,   436,     0,   420,   421,   422,   417,
     0,   418,     0,   437,     0,   420,   421,   422,     0,   423,
   424,   425,     0,     0,     0,     0,     0,     0,   423,   424,
   425,     0,     0,     0,     0,     0,     0,   423,   424,   425,
     0,     0,     0,     0,     0,     0,   423,   424,   425,   320,
     0,   344,     0,   439,     0,   321,   322,   323,   320,     0,
   344,     0,   441,     0,   321,   322,   323,   320,     0,   344,
     0,   444,     0,   321,   322,   323,   320,     0,   344,     0,
   445,     0,   321,   322,   323,     0,   324,   325,   326,     0,
     0,     0,     0,     0,     0,   324,   325,   326,     0,     0,
     0,     0,     0,     0,   324,   325,   326,     0,     0,     0,
     0,     0,     0,   324,   325,   326,   454,     0,   455,     0,
   456,     0,   457,   458,   459,   417,     0,   418,     0,   465,
     0,   420,   421,   422,   417,     0,   418,     0,   471,     0,
   420,   421,   422,   417,     0,   418,     0,   481,     0,   420,
   421,   422,     0,   460,   461,   462,     0,     0,     0,     0,
     0,     0,   423,   424,   425,     0,     0,     0,     0,     0,
     0,   423,   424,   425,     0,     0,     0,     0,     0,     0,
   423,   424,   425,   417,     0,   418,     0,   482,     0,   420,
   421,   422,   372,     0,   373,     0,   483,     0,   375,   376,
   377,   529,     0,   530,     0,   531,     0,   532,   533,   534,
   417,     0,   418,     0,   548,     0,   420,   421,   422,     0,
   423,   424,   425,     0,     0,     0,     0,     0,     0,   378,
   379,   484,     0,     0,     0,     0,     0,     0,   535,   536,
   537,     0,     0,     0,     0,     0,     0,   423,   424,   425,
   417,     0,   418,     0,   589,     0,   420,   421,   422,   592,
     0,   593,     0,   594,     0,   595,   596,   597,   417,     0,
   418,     0,   637,     0,   420,   421,   422,   417,     0,   418,
     0,   702,     0,   420,   421,   422,     0,   423,   424,   425,
     0,     0,     0,     0,     0,     0,   598,   599,   600,     0,
     0,     0,     0,     0,     0,   423,   424,   425,     0,     0,
     0,     0,     0,     0,   423,   424,   425,   372,     0,   373,
     0,   705,     0,   375,   376,   377,   417,     0,   418,     0,
   751,     0,   420,   421,   422,   417,     0,   418,     0,   755,
     0,   420,   421,   422,   529,     0,   530,     0,   782,     0,
   532,   783,   534,     0,   378,   379,   706,     0,     0,     0,
     0,     0,     0,   423,   424,   425,     0,     0,     0,     0,
     0,     0,   423,   424,   425,     0,     0,     0,     0,     0,
     0,   535,   536,   537,   417,     0,   418,     0,   832,     0,
   420,   421,   422,   417,     0,   418,     0,   894,     0,   420,
   421,   422,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   423,   424,   425,     0,     0,     0,     0,     0,     0,
   423,   424,   425
};

static const short yycheck[] = {    41,
    42,    43,    45,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,    79,    52,    53,    54,   447,   639,
    77,    58,   616,   284,   740,    90,   611,   743,   735,    13,
   279,   229,   884,   282,     1,   608,   383,    97,    36,    37,
    38,    39,   574,   115,   559,   639,    89,   742,    63,   281,
   745,    64,   115,   285,   115,   907,   115,    25,    42,   112,
    44,    45,    46,    47,   579,   118,   119,   120,    66,   642,
   613,    31,    32,   611,   763,    94,    60,    96,   150,   136,
    78,    79,    80,   615,    66,    67,    53,   150,   286,   150,
   797,   150,   781,   116,   498,   715,   149,   150,   151,   116,
   349,   124,   125,   122,    64,    65,   569,   112,   116,   114,
   115,   116,   697,   118,   119,   120,   579,   116,   350,   582,
   116,   715,   354,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   487,   735,   116,   247,   149,   150,   151,   145,   896,   897,
   866,    69,   868,   869,   258,   259,   904,    31,    32,   697,
   197,   198,   199,   200,   201,   202,    36,   571,   205,   206,
   207,   208,   209,   210,   211,   212,   143,   214,   215,   216,
   490,   218,   219,   220,   221,   222,   223,   448,   498,   438,
   227,   228,   115,   230,   779,   738,    26,    27,   741,   737,
    81,   744,   740,   797,   115,   743,   635,   136,   518,   120,
   795,   271,   272,   756,   618,   619,     3,   449,   467,   146,
   147,   148,     3,   146,   147,   148,     4,   270,     3,   478,
   768,    11,    12,    44,    45,   773,   115,   469,   776,    19,
    20,   779,    22,     3,   829,   124,   125,    81,   652,   559,
   287,   288,   107,   345,   116,   798,   348,   795,   107,   351,
   352,   571,   107,     8,    40,    41,   119,   120,   112,   579,
   307,   308,   120,   121,   122,   123,   124,   125,   527,   490,
    25,   116,   121,    28,   116,   116,   112,   498,   116,   116,
    35,   829,   116,   116,   116,   116,   116,    42,   116,    44,
   116,   611,   150,    48,   116,   114,   616,   518,   618,   619,
   620,   621,   622,   623,   546,   116,    61,   116,    63,    64,
   116,   116,   865,    68,   867,   116,   116,   116,   866,   639,
   868,   869,    77,   116,   116,   120,   128,   586,     5,   116,
   650,   114,   652,   112,   116,   114,   884,   116,   559,   118,
   119,   120,   890,   116,   892,   893,   588,   116,   116,   116,
   571,   116,   116,   116,   116,   116,   116,   116,   579,   907,
   116,   118,     7,   116,   116,   116,   116,   116,   415,   116,
   149,   150,   151,   116,   633,   928,   116,   697,    23,   699,
   128,   123,   123,   114,   123,   114,   628,   940,   941,   942,
   611,     1,   150,   114,   636,   715,   114,   618,   619,   620,
   621,   622,   623,   114,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,   735,   150,   737,   115,   114,
   740,   114,   114,   743,     0,   472,     0,   794,   450,   650,
   779,   652,    77,   452,   521,     1,   854,   518,   902,   759,
   760,   626,   576,    53,   496,   497,   578,   907,   768,   273,
    15,   526,   772,   773,   753,   775,   776,    -1,   778,   779,
    -1,    -1,    -1,    -1,   112,    -1,   114,   519,   520,   521,
   118,   119,   120,    -1,    -1,   795,   697,   797,   699,    -1,
    90,    91,    92,    93,    94,    95,    96,    53,    98,    -1,
   490,   101,   102,   103,   104,   105,   106,    -1,   498,    -1,
    -1,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   829,
    -1,    -1,   754,   565,    -1,    -1,   737,    -1,   518,   740,
    -1,    -1,   743,    -1,    90,    91,    92,    93,    94,    95,
    96,    -1,    98,    -1,   587,   101,   102,   103,   104,   859,
   860,    -1,    -1,    -1,    -1,    -1,   866,   768,   868,   869,
    -1,   772,   773,    -1,   775,   776,   608,   778,   779,   559,
    -1,    -1,    -1,    -1,   884,    -1,    -1,    -1,    -1,    -1,
   890,   571,   892,   893,   795,    -1,    -1,    -1,    -1,   579,
    -1,   634,    -1,    -1,     1,    -1,    -1,   907,    -1,   831,
   642,   112,    -1,   114,   115,   116,    -1,   118,   119,   120,
    -1,    -1,    26,    27,    -1,    29,    30,    31,   829,    33,
    34,   611,    -1,    -1,    -1,    -1,   616,    -1,   618,   619,
   620,   621,   622,   623,    -1,    -1,    -1,    -1,   149,   150,
   151,    55,    56,    57,    -1,    -1,    53,    -1,    -1,   639,
    -1,    -1,    -1,    -1,    -1,   866,    -1,   868,   869,    -1,
   650,    -1,   652,    -1,    -1,   112,     1,   114,   115,   116,
    -1,   118,   119,   120,    -1,    -1,    -1,    -1,    -1,   890,
    -1,   892,   893,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
    -1,    -1,   149,   150,   151,    -1,    -1,   697,    -1,   699,
    -1,    -1,    -1,    -1,    -1,    -1,   758,    -1,    53,    -1,
    -1,    -1,    -1,    -1,    -1,   715,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   112,   143,   114,   780,   116,
    -1,   118,   119,   120,    -1,   735,    -1,   737,    -1,    -1,
   740,    -1,    -1,   743,    -1,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   149,   150,   151,    -1,    -1,    -1,    -1,   769,
    -1,    -1,   772,    -1,    -1,   775,    -1,   830,   778,   779,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   795,    -1,   797,   143,    -1,
    -1,    -1,     0,     1,     1,    -1,   858,    -1,     6,     7,
     8,     9,    -1,    11,    12,    13,    -1,    15,    16,    -1,
    -1,    19,    20,    -1,    22,    23,    24,    25,     1,   829,
    28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   899,   900,   901,
    48,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
    -1,    -1,    -1,     1,    62,    -1,   866,    -1,   868,   869,
    -1,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
    53,    -1,     1,    -1,    82,    83,    84,    85,    86,    87,
    88,    89,    -1,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
    -1,    -1,    -1,    -1,    -1,    53,   114,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,    53,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,
    -1,   149,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,    -1,
   143,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,    53,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   143,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,    53,   150,   119,    -1,    -1,    -1,
    -1,    -1,    -1,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
    53,   150,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,    53,   150,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,    53,   150,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,    53,   150,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,    53,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
    53,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,    53,   150,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,    53,   150,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,    53,   150,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,    53,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
    53,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,    53,   150,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,    53,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,    -1,   150,    -1,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
    53,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,    -1,   150,    -1,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,    53,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,    -1,   150,    -1,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,    53,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,    -1,   150,
    -1,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,    53,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
    -1,   150,    -1,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,    53,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,    -1,   150,    -1,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
    53,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,    -1,   150,    -1,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,    53,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,    -1,   150,    -1,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,    53,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,    -1,   150,
    -1,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,    53,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
    -1,   150,    -1,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,    53,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,    -1,   150,    -1,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
    53,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,    -1,   150,    -1,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,    53,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,    -1,   150,    -1,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,    53,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,    -1,   150,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,    -1,   113,   114,    53,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,    -1,
   150,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,    53,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,    -1,   150,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,    53,    -1,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,    -1,   150,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,    53,    -1,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,    -1,   150,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,    -1,   113,   114,
    53,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,    -1,   150,    -1,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,    53,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,    -1,   150,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,    53,    -1,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,    -1,   150,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,    53,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,    -1,   150,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,    -1,   113,    53,    -1,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,    -1,
   150,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,    53,    -1,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
    -1,   150,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,    -1,   113,    53,    -1,    -1,    -1,
   118,    -1,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,    -1,   150,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,    -1,   109,    -1,   111,    -1,   113,    53,    -1,    -1,
    -1,   118,    -1,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,    -1,   150,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,    -1,   109,    -1,   111,    -1,   113,    53,    -1,
    -1,    -1,    -1,    -1,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,    -1,   150,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
    53,   116,   117,    -1,    -1,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,
   115,   116,    -1,   118,   119,   120,   112,    -1,   114,   115,
   116,    -1,   118,   119,   120,   150,    -1,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,    -1,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
   143,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,    -1,   144,
   145,   146,   147,   148,    -1,   150,   107,   108,   109,   110,
   111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,    -1,   144,   145,   146,   147,   148,    -1,   150,
   107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,    -1,   144,   145,   146,
   147,   148,    -1,   150,   107,   108,   109,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
    -1,   144,   145,   146,   147,   148,    -1,   150,   107,   108,
   109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
    -1,   150,   107,   108,   109,   110,   111,   112,   113,   114,
    -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,    -1,   144,
   145,   146,   147,   148,   112,   150,   114,   115,   116,    -1,
   118,   119,   120,   112,    -1,   114,   115,   116,    -1,   118,
   119,   120,   112,    -1,   114,   115,   116,    -1,   118,   119,
   120,   112,    -1,   114,   115,   116,    -1,   118,   119,   120,
    -1,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,
   151,   112,    -1,   114,   115,   116,    -1,   118,   119,   120,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,    -1,   149,   150,   151,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,
    -1,   118,   119,   120,    -1,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,    -1,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,    -1,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,    -1,   149,   150,   151,   112,    -1,   114,    -1,   116,
    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,    -1,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
    -1,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,   149,
   150,   151,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,    -1,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,   151,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,    -1,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,    -1,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,    -1,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,    -1,   149,   150,   151,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,
    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,    -1,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,    -1,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
    -1,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,
   149,   150,   151,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,    -1,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,   151,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,    -1,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,    -1,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,    -1,   149,   150,   151,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,
    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,    -1,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,    -1,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,    -1,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
    -1,   149,   150,   151,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,
   149,   150,   151
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/csl/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/csl/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 191 "surface.yy"
{ YYACCEPT; ;
    break;}
case 2:
#line 193 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::QUIT;
			;
    break;}
case 6:
#line 206 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 7:
#line 208 "surface.yy"
{
			  int lineNr = lineNumber;
			  eatComment(false); // eat \n so that line number is correct
			  string directory;
			  string fileName;
			  if (findFile(yyvsp[0].yyString, directory, fileName, lineNr))
			    includeFile(directory, fileName, false, lineNr);
			;
    break;}
case 8:
#line 216 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 9:
#line 218 "surface.yy"
{
			  int lineNr = lineNumber;
			  eatComment(false); // eat \n so that line number is correct
			  string directory;
			  string fileName;
			  if (findFile(yyvsp[0].yyString, directory, fileName, lineNr))
			    includeFile(directory, fileName, true, lineNr);
			;
    break;}
case 10:
#line 227 "surface.yy"
{
			  cout << directoryManager.getCwd() << '\n';
			;
    break;}
case 11:
#line 230 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 12:
#line 232 "surface.yy"
{
			  string directory;
			  directoryManager.realPath(yyvsp[0].yyString, directory);
			  if (!directoryManager.cd(directory))
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": cd failed");
			    }
			;
    break;}
case 13:
#line 241 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 14:
#line 243 "surface.yy"
{
			  string directory;
			  directoryManager.realPath(yyvsp[0].yyString, directory);
			  if (directoryManager.pushd(directory) == UNDEFINED)
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": pushd failed");
			    }
			;
    break;}
case 15:
#line 253 "surface.yy"
{
			  const char* path = directoryManager.popd();
			  if (path != 0)
			    cout << path << '\n';
			  else
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": popd failed");
			    }
			;
    break;}
case 16:
#line 263 "surface.yy"
{ lexerStringMode(); ;
    break;}
case 17:
#line 265 "surface.yy"
{
			  system((string("ls") + yyvsp[0].yyString).c_str());
			;
    break;}
case 18:
#line 269 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::QUIT;
			  YYACCEPT;
			;
    break;}
case 19:
#line 274 "surface.yy"
{
			  if(!handleEof())
			    {
			      PARSE_RESULT = UserLevelRewritingContext::QUIT;
			    }
			;
    break;}
case 20:
#line 307 "surface.yy"
{
			  yyval.yyModuleExpression = new ModuleExpression(yyvsp[0].yyToken.code());
			;
    break;}
case 21:
#line 311 "surface.yy"
{
			  yyval.yyModuleExpression = new ModuleExpression(yyvsp[-2].yyModuleExpression, yyvsp[0].yyModuleExpression);
			;
    break;}
case 22:
#line 315 "surface.yy"
{
			  yyval.yyModuleExpression = new ModuleExpression(yyvsp[-2].yyModuleExpression, yyvsp[0].yyRenaming);
			;
    break;}
case 23:
#line 319 "surface.yy"
{
			  yyval.yyModuleExpression = yyvsp[-1].yyModuleExpression;
			;
    break;}
case 24:
#line 324 "surface.yy"
{ return 0; ;
    break;}
case 27:
#line 331 "surface.yy"
{;
    break;}
case 28:
#line 332 "surface.yy"
{;
    break;}
case 29:
#line 333 "surface.yy"
{;
    break;}
case 30:
#line 339 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 31:
#line 341 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::FUNCTIONAL_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 32:
#line 347 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 33:
#line 352 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 34:
#line 354 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::SYSTEM_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 35:
#line 360 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 36:
#line 365 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 37:
#line 367 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::SYSTEM_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 38:
#line 373 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 39:
#line 380 "surface.yy"
{;
    break;}
case 40:
#line 382 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": fmod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 43:
#line 391 "surface.yy"
{;
    break;}
case 44:
#line 393 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": mod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 47:
#line 402 "surface.yy"
{;
    break;}
case 48:
#line 404 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": omod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 57:
#line 425 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 58:
#line 426 "surface.yy"
{ CM->addImport(bubble[0], yyvsp[-1].yyModuleExpression); ;
    break;}
case 59:
#line 428 "surface.yy"
{ clear(); ;
    break;}
case 60:
#line 429 "surface.yy"
{ CM->addSortDecl(bubble); ;
    break;}
case 61:
#line 431 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 62:
#line 432 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 63:
#line 433 "surface.yy"
{ CM->addSubsortDecl(bubble); ;
    break;}
case 64:
#line 435 "surface.yy"
{;
    break;}
case 65:
#line 437 "surface.yy"
{;
    break;}
case 66:
#line 439 "surface.yy"
{;
    break;}
case 67:
#line 441 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 68:
#line 442 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 69:
#line 443 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 70:
#line 445 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 71:
#line 446 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 72:
#line 447 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 73:
#line 448 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 74:
#line 450 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 75:
#line 451 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 76:
#line 452 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 77:
#line 454 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 78:
#line 455 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 79:
#line 456 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 80:
#line 457 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 81:
#line 459 "surface.yy"
{ CM->makeOpDeclsConsistent(); ;
    break;}
case 83:
#line 463 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 84:
#line 464 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 85:
#line 465 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 86:
#line 467 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 87:
#line 468 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 88:
#line 469 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 89:
#line 470 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 91:
#line 475 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 92:
#line 479 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 93:
#line 483 "surface.yy"
{
			;
    break;}
case 94:
#line 486 "surface.yy"
{
			;
    break;}
case 95:
#line 488 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 96:
#line 489 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 97:
#line 490 "surface.yy"
{ CM->addSubsortDecl(bubble); ;
    break;}
case 98:
#line 493 "surface.yy"
{;
    break;}
case 99:
#line 494 "surface.yy"
{;
    break;}
case 102:
#line 502 "surface.yy"
{
			;
    break;}
case 103:
#line 506 "surface.yy"
{ CM->addVarDecl(yyvsp[0].yyToken); ;
    break;}
case 104:
#line 507 "surface.yy"
{ CM->addVarDecl(yyvsp[0].yyToken); ;
    break;}
case 105:
#line 510 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 106:
#line 511 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 107:
#line 512 "surface.yy"
{ clear(); ;
    break;}
case 108:
#line 513 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 111:
#line 521 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  CM->addOpDecl(bubble);
			;
    break;}
case 112:
#line 526 "surface.yy"
{ clear(); ;
    break;}
case 113:
#line 527 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 114:
#line 531 "surface.yy"
{
			  if (yyvsp[-3].yyBool)
			    CM->convertSortsToKinds();
			;
    break;}
case 115:
#line 537 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 116:
#line 538 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 119:
#line 546 "surface.yy"
{
			  clear();
			  bubble.append(yyvsp[0].yyToken);
			  CM->addType(false, bubble);
			;
    break;}
case 120:
#line 551 "surface.yy"
{ clear(); ;
    break;}
case 121:
#line 553 "surface.yy"
{
			  CM->addType(true, bubble);
			;
    break;}
case 122:
#line 558 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 123:
#line 559 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 124:
#line 562 "surface.yy"
{;
    break;}
case 128:
#line 571 "surface.yy"
{
			  CM->setFlag(SymbolType::LEFT_ID | SymbolType::RIGHT_ID);
			;
    break;}
case 129:
#line 575 "surface.yy"
{
			  CM->setFlag(SymbolType::LEFT_ID);
			;
    break;}
case 130:
#line 579 "surface.yy"
{
			  CM->setFlag(SymbolType::RIGHT_ID);
			;
    break;}
case 131:
#line 585 "surface.yy"
{
			  CM->setFlag(SymbolType::ASSOC);
			;
    break;}
case 132:
#line 589 "surface.yy"
{
			  CM->setFlag(SymbolType::COMM);
			;
    break;}
case 133:
#line 592 "surface.yy"
{ clear(); ;
    break;}
case 134:
#line 593 "surface.yy"
{ CM->setIdentity(bubble); ;
    break;}
case 135:
#line 595 "surface.yy"
{
			  CM->setFlag(SymbolType::IDEM);
			;
    break;}
case 136:
#line 599 "surface.yy"
{
			  CM->setFlag(SymbolType::ITER);
			;
    break;}
case 137:
#line 602 "surface.yy"
{ CM->setPrec(yyvsp[0].yyToken); ;
    break;}
case 138:
#line 603 "surface.yy"
{ clear(); ;
    break;}
case 139:
#line 604 "surface.yy"
{ CM->setGather(bubble); ;
    break;}
case 140:
#line 605 "surface.yy"
{ clear(); ;
    break;}
case 141:
#line 606 "surface.yy"
{ CM->setFormat(bubble); ;
    break;}
case 142:
#line 607 "surface.yy"
{ clear(); ;
    break;}
case 143:
#line 608 "surface.yy"
{ CM->setStrat(bubble); ;
    break;}
case 144:
#line 610 "surface.yy"
{
			  CM->setFlag(SymbolType::MEMO);
			;
    break;}
case 145:
#line 614 "surface.yy"
{
			  CM->setFlag(SymbolType::CTOR);
			;
    break;}
case 146:
#line 618 "surface.yy"
{
			  clear();
			  CM->setFrozen(bubble);
			;
    break;}
case 147:
#line 622 "surface.yy"
{ clear(); ;
    break;}
case 148:
#line 623 "surface.yy"
{ CM->setFrozen(bubble); ;
    break;}
case 149:
#line 625 "surface.yy"
{
			  CM->setFlag(SymbolType::CONFIG);
			;
    break;}
case 150:
#line 629 "surface.yy"
{
			  CM->setFlag(SymbolType::OBJECT);
			;
    break;}
case 151:
#line 633 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 152:
#line 636 "surface.yy"
{ lexerLatexMode(); ;
    break;}
case 153:
#line 637 "surface.yy"
{ CM->setLatexMacro(yyvsp[-1].yyString); ;
    break;}
case 154:
#line 638 "surface.yy"
{;
    break;}
case 155:
#line 640 "surface.yy"
{
			  CM->setFlag(SymbolType::DITTO);
			;
    break;}
case 156:
#line 645 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 157:
#line 646 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 160:
#line 654 "surface.yy"
{
			  clear();
			  CM->addHook(PreModule::ID_HOOK, yyvsp[0].yyToken, bubble);
			;
    break;}
case 161:
#line 658 "surface.yy"
{ clear(); ;
    break;}
case 162:
#line 660 "surface.yy"
{
			  CM->addHook(PreModule::ID_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 163:
#line 663 "surface.yy"
{ clear(); ;
    break;}
case 164:
#line 665 "surface.yy"
{
			  CM->addHook(PreModule::OP_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 165:
#line 668 "surface.yy"
{ clear(); ;
    break;}
case 166:
#line 670 "surface.yy"
{
			  CM->addHook(PreModule::TERM_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 167:
#line 678 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 169:
#line 682 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 171:
#line 689 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 172:
#line 690 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 173:
#line 691 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 175:
#line 695 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 176:
#line 696 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 177:
#line 697 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 179:
#line 701 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 180:
#line 702 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 181:
#line 703 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 183:
#line 707 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 184:
#line 708 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 185:
#line 709 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 187:
#line 713 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 188:
#line 714 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 189:
#line 715 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 192:
#line 720 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 193:
#line 721 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 194:
#line 724 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 195:
#line 725 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 196:
#line 726 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 197:
#line 727 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 198:
#line 728 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 199:
#line 729 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 200:
#line 730 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 201:
#line 736 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 202:
#line 737 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 207:
#line 741 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 208:
#line 742 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 343:
#line 829 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 344:
#line 830 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 345:
#line 832 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.setCurrentModule(bubble);
			;
    break;}
case 346:
#line 836 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 347:
#line 837 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 348:
#line 839 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->dump();
			;
    break;}
case 349:
#line 845 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 350:
#line 851 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.parse(bubble);
			;
    break;}
case 351:
#line 858 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 352:
#line 864 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.creduce(bubble);
			;
    break;}
case 353:
#line 871 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 354:
#line 877 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.reduce(bubble, yyvsp[-3].yyBool);
			;
    break;}
case 355:
#line 884 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 356:
#line 891 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.rewrite(bubble, number, yyvsp[-3].yyBool);
			;
    break;}
case 357:
#line 897 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 358:
#line 904 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    ;
			;
    break;}
case 359:
#line 910 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			  number2 = NONE;
			;
    break;}
case 360:
#line 918 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.fRewrite(bubble, number, number2, yyvsp[-3].yyBool);
			;
    break;}
case 361:
#line 924 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 362:
#line 931 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.search(bubble, number);
			;
    break;}
case 363:
#line 937 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 364:
#line 944 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.match(bubble, yyvsp[-2].yyBool, number);
			;
    break;}
case 365:
#line 950 "surface.yy"
{
			  interpreter.cont(yyvsp[-1].yyInt64, yyvsp[-3].yyBool);
			;
    break;}
case 366:
#line 954 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 367:
#line 960 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.loop(bubble);
			;
    break;}
case 368:
#line 965 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 369:
#line 967 "surface.yy"
{
			  lexerInitialMode();
			  moduleExpr.contractTo(0);
			  if (interpreter.setCurrentModule(moduleExpr))  // HACK
			    interpreter.contLoop(bubble);
			;
    break;}
case 370:
#line 974 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 371:
#line 976 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.traceSelect(yyvsp[-3].yyBool);
			;
    break;}
case 372:
#line 980 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 373:
#line 982 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.traceExclude(yyvsp[-3].yyBool);
			;
    break;}
case 374:
#line 986 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 375:
#line 988 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.breakSelect(yyvsp[-3].yyBool);
			;
    break;}
case 376:
#line 992 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 377:
#line 994 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.printConceal(yyvsp[-3].yyBool);
			;
    break;}
case 378:
#line 999 "surface.yy"
{
			  if (CM != 0)  // HACK
			    CM->getFlatSignature()->clearMemo();
			;
    break;}
case 379:
#line 1006 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 380:
#line 1008 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->showModule();
			;
    break;}
case 381:
#line 1013 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 382:
#line 1015 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->showModule();
			;
    break;}
case 383:
#line 1020 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 384:
#line 1022 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showModule(true);
			;
    break;}
case 385:
#line 1027 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 386:
#line 1029 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showSortsAndSubsorts();
			;
    break;}
case 387:
#line 1034 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 388:
#line 1036 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showOps();
			;
    break;}
case 389:
#line 1041 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 390:
#line 1043 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showVars();
			;
    break;}
case 391:
#line 1048 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 392:
#line 1050 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showMbs();
			;
    break;}
case 393:
#line 1055 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 394:
#line 1057 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showEqs();
			;
    break;}
case 395:
#line 1062 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 396:
#line 1064 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showRls();
			;
    break;}
case 397:
#line 1069 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 398:
#line 1071 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showSummary();
			;
    break;}
case 399:
#line 1076 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 400:
#line 1078 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showKinds();
			;
    break;}
case 401:
#line 1084 "surface.yy"
{
			  interpreter.showSearchPath(yyvsp[-1].yyInt64);
			;
    break;}
case 402:
#line 1088 "surface.yy"
{
			  interpreter.showSearchGraph();
			;
    break;}
case 403:
#line 1091 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 404:
#line 1093 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showProfile();
			;
    break;}
case 405:
#line 1102 "surface.yy"
{
			  globalAdvisoryFlag = yyvsp[-1].yyBool;
			;
    break;}
case 406:
#line 1106 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 407:
#line 1110 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_LOOP_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 408:
#line 1114 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_TIMING, yyvsp[-1].yyBool);
			;
    break;}
case 409:
#line 1118 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_BREAKDOWN, yyvsp[-1].yyBool);
			;
    break;}
case 410:
#line 1122 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_LOOP_TIMING, yyvsp[-1].yyBool);
			;
    break;}
case 411:
#line 1126 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_COMMAND, yyvsp[-1].yyBool);
			;
    break;}
case 412:
#line 1130 "surface.yy"
{
			  MemoryCell::setShowGC(yyvsp[-1].yyBool);
			;
    break;}
case 413:
#line 1134 "surface.yy"
{
			  MixfixModule::setPrintMixfix(yyvsp[-1].yyBool);
			;
    break;}
case 414:
#line 1138 "surface.yy"
{
			  MixfixModule::setPrintFlat(yyvsp[-1].yyBool);
			;
    break;}
case 415:
#line 1142 "surface.yy"
{
			  MixfixModule::setPrintWithAliases(yyvsp[-1].yyBool);
			;
    break;}
case 416:
#line 1146 "surface.yy"
{
			  MixfixModule::setPrintWithParens(yyvsp[-1].yyBool);
			;
    break;}
case 417:
#line 1150 "surface.yy"
{
			  MixfixModule::setPrintGraph(yyvsp[-1].yyBool);
			;
    break;}
case 418:
#line 1154 "surface.yy"
{
			  MixfixModule::setPrintConceal(yyvsp[-1].yyBool);
			;
    break;}
case 419:
#line 1158 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_NUMBER, yyvsp[-1].yyBool);
			;
    break;}
case 420:
#line 1162 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_RAT, yyvsp[-1].yyBool);
			;
    break;}
case 421:
#line 1166 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_COLOR, yyvsp[-1].yyBool);
			;
    break;}
case 422:
#line 1170 "surface.yy"
{
			  MixfixModule::setPrintFormat(yyvsp[-1].yyBool);
			;
    break;}
case 423:
#line 1174 "surface.yy"
{
			  interpreter.setFlag(Interpreter::TRACE, yyvsp[-1].yyBool);
			;
    break;}
case 424:
#line 1178 "surface.yy"
{
			  UserLevelRewritingContext::setTraceConditionFlag(yyvsp[-1].yyBool);
			;
    break;}
case 425:
#line 1182 "surface.yy"
{
			// ??? what is this supposed to do?
			;
    break;}
case 426:
#line 1186 "surface.yy"
{
			  UserLevelRewritingContext::setTraceWholeFlag(yyvsp[-1].yyBool);
			;
    break;}
case 427:
#line 1190 "surface.yy"
{
			  UserLevelRewritingContext::setTraceSubstitutionFlag(yyvsp[-1].yyBool);
			;
    break;}
case 428:
#line 1194 "surface.yy"
{
			  UserLevelRewritingContext::setTraceSelectFlag(yyvsp[-1].yyBool);
			;
    break;}
case 429:
#line 1198 "surface.yy"
{
			  UserLevelRewritingContext::setTraceScFlag(yyvsp[-1].yyBool);
			;
    break;}
case 430:
#line 1202 "surface.yy"
{
			  UserLevelRewritingContext::setTraceEqFlag(yyvsp[-1].yyBool);
			;
    break;}
case 431:
#line 1206 "surface.yy"
{
			  UserLevelRewritingContext::setTraceRuleFlag(yyvsp[-1].yyBool);
			;
    break;}
case 432:
#line 1210 "surface.yy"
{
			  interpreter.setFlag(Interpreter::BREAK, yyvsp[-1].yyBool);
			;
    break;}
case 433:
#line 1213 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 434:
#line 1214 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 435:
#line 1216 "surface.yy"
{
			  interpreter.setInclude(yyvsp[-3].yyToken, yyvsp[-1].yyBool);
			;
    break;}
case 436:
#line 1219 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 437:
#line 1220 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 438:
#line 1222 "surface.yy"
{
			  interpreter.setOmodInclude(yyvsp[-3].yyToken, yyvsp[-1].yyBool);
			;
    break;}
case 439:
#line 1226 "surface.yy"
{
			  globalVerboseFlag = yyvsp[-1].yyBool;
			;
    break;}
case 440:
#line 1230 "surface.yy"
{
			  interpreter.setFlag(Interpreter::AUTO_CLEAR_MEMO, yyvsp[-1].yyBool);
			;
    break;}
case 441:
#line 1234 "surface.yy"
{
			  interpreter.setFlag(Interpreter::COMPILE_COUNT, yyvsp[-1].yyBool);
			;
    break;}
case 442:
#line 1238 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PROFILE, yyvsp[-1].yyBool);
			;
    break;}
case 443:
#line 1242 "surface.yy"
{
			  interpreter.setFlag(Interpreter::AUTO_CLEAR_PROFILE, yyvsp[-1].yyBool);
			;
    break;}
case 444:
#line 1249 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::RESUME;
			;
    break;}
case 445:
#line 1253 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::ABORT;
			;
    break;}
case 446:
#line 1257 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::STEP;
			;
    break;}
case 447:
#line 1261 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::WHERE;
			;
    break;}
case 448:
#line 1268 "surface.yy"
{
			  MemoryCell::setShowGC(yyvsp[-1].yyBool);
			;
    break;}
case 449:
#line 1272 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 450:
#line 1278 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 452:
#line 1285 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 453:
#line 1286 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 454:
#line 1289 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 455:
#line 1290 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 456:
#line 1293 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 457:
#line 1294 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 458:
#line 1297 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 459:
#line 1298 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 460:
#line 1301 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 461:
#line 1302 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 462:
#line 1305 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 463:
#line 1306 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 464:
#line 1309 "surface.yy"
{ yyval.yyInt64 = yyvsp[0].yyInt64; ;
    break;}
case 465:
#line 1310 "surface.yy"
{ yyval.yyInt64 = NONE; ;
    break;}
case 466:
#line 1318 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 468:
#line 1320 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 470:
#line 1324 "surface.yy"
{ moduleExpr = bubble; clear(); ;
    break;}
case 471:
#line 1325 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 472:
#line 1326 "surface.yy"
{;
    break;}
case 473:
#line 1327 "surface.yy"
{;
    break;}
case 474:
#line 1336 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 476:
#line 1338 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 478:
#line 1340 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 480:
#line 1345 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 482:
#line 1347 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 484:
#line 1349 "surface.yy"
{;
    break;}
case 485:
#line 1354 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  clear();
			;
    break;}
case 487:
#line 1359 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 489:
#line 1361 "surface.yy"
{;
    break;}
case 490:
#line 1370 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 492:
#line 1372 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 494:
#line 1374 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 496:
#line 1379 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 498:
#line 1381 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 500:
#line 1383 "surface.yy"
{;
    break;}
case 501:
#line 1388 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  clear();
			;
    break;}
case 503:
#line 1393 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 505:
#line 1395 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 507:
#line 1397 "surface.yy"
{;
    break;}
case 508:
#line 1401 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 510:
#line 1403 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 512:
#line 1405 "surface.yy"
{;
    break;}
case 513:
#line 1410 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  number2 = Token::codeToInt64(bubble[3].code());
			  clear();
			;
    break;}
case 515:
#line 1416 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 517:
#line 1418 "surface.yy"
{;
    break;}
case 518:
#line 1424 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 520:
#line 1428 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 522:
#line 1433 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 532:
#line 1441 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 533:
#line 1442 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 541:
#line 1446 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 542:
#line 1447 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 549:
#line 1452 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 550:
#line 1453 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 558:
#line 1457 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 559:
#line 1458 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 566:
#line 1462 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 567:
#line 1463 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 574:
#line 1468 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 575:
#line 1469 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 582:
#line 1474 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 583:
#line 1475 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 589:
#line 1480 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 590:
#line 1481 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 593:
#line 1492 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  interpreter.addSelected(bubble);
			;
    break;}
case 594:
#line 1497 "surface.yy"
{ clear(); ;
    break;}
case 595:
#line 1499 "surface.yy"
{
			  interpreter.addSelected(bubble);
			;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/csl/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1529 "surface.yy"


static void
yyerror(char *s)
{
  if (!(UserLevelRewritingContext::interrupted()))
    IssueWarning(LineNumber(lineNumber) << ": " << s);
}

void
cleanUpParser()
{
  //bubble.contractTo(0);
  //moduleExpr.contractTo(0);
  //pattern.contractTo(0);
  interpreter.makeClean(lineNumber);
  /*
  if (currentModule != 0 && !(currentModule->isComplete()))
    {
      IssueAdvisory(cerr << LineNumber(lineNumber) << ": discarding incomplete module.");
      delete currentModule;
      currentModule = 0;
    }
  */
}
