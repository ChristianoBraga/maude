
/*  A Bison parser, made from surface.yy
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FILE_NAME_STRING	257
#define	UNINTERPRETED_STRING	258
#define	LATEX_STRING	259
#define	KW_FMOD	260
#define	KW_MOD	261
#define	KW_OMOD	262
#define	KW_PARSE	263
#define	KW_NORMALIZE	264
#define	KW_REDUCE	265
#define	KW_REWRITE	266
#define	KW_LOOP	267
#define	KW_NARROW	268
#define	KW_MATCH	269
#define	KW_XMATCH	270
#define	KW_UNIFY	271
#define	KW_XUNIFY	272
#define	KW_EREWRITE	273
#define	KW_FREWRITE	274
#define	KW_OREWRITE	275
#define	KW_CONTINUE	276
#define	KW_SEARCH	277
#define	KW_SET	278
#define	KW_SHOW	279
#define	KW_ON	280
#define	KW_OFF	281
#define	KW_TRACE	282
#define	KW_CONTEXT	283
#define	KW_WHOLE	284
#define	KW_SELECT	285
#define	KW_DESELECT	286
#define	KW_CONDITION	287
#define	KW_SUBSTITUTION	288
#define	KW_PRINT	289
#define	KW_GRAPH	290
#define	KW_MIXFIX	291
#define	KW_FLAT	292
#define	KW_WITH	293
#define	KW_PARENS	294
#define	KW_ALIASES	295
#define	KW_GC	296
#define	KW_TIME	297
#define	KW_STATS	298
#define	KW_TIMING	299
#define	KW_CMD	300
#define	KW_BREAKDOWN	301
#define	KW_BREAK	302
#define	KW_PATH	303
#define	KW_MODULE	304
#define	KW_ALL	305
#define	KW_SORTS	306
#define	KW_OPS	307
#define	KW_VARS	308
#define	KW_MBS	309
#define	KW_EQS	310
#define	KW_RLS	311
#define	KW_SUMMARY	312
#define	KW_KINDS	313
#define	KW_ADVISE	314
#define	KW_VERBOSE	315
#define	KW_DO	316
#define	KW_CLEAR	317
#define	KW_INCLUDE	318
#define	KW_EXCLUDE	319
#define	KW_CONCEAL	320
#define	KW_REVEAL	321
#define	KW_COMPILE	322
#define	KW_COUNT	323
#define	KW_DEBUG	324
#define	KW_RESUME	325
#define	KW_ABORT	326
#define	KW_STEP	327
#define	KW_WHERE	328
#define	KW_CREDUCE	329
#define	KW_DUMP	330
#define	KW_PROFILE	331
#define	KW_NUMBER	332
#define	KW_RAT	333
#define	KW_COLOR	334
#define	SIMPLE_NUMBER	335
#define	KW_PWD	336
#define	KW_CD	337
#define	KW_PUSHD	338
#define	KW_POPD	339
#define	KW_LS	340
#define	KW_LOAD	341
#define	KW_QUIT	342
#define	KW_EOF	343
#define	KW_ENDFM	344
#define	KW_ENDM	345
#define	KW_ENDOM	346
#define	KW_IMPORT	347
#define	KW_SORT	348
#define	KW_SUBSORT	349
#define	KW_OP	350
#define	KW_MSGS	351
#define	KW_VAR	352
#define	KW_CLASS	353
#define	KW_SUBCLASS	354
#define	KW_MB	355
#define	KW_CMB	356
#define	KW_EQ	357
#define	KW_CEQ	358
#define	KW_RL	359
#define	KW_CRL	360
#define	KW_IS	361
#define	KW_ARROW	362
#define	KW_ARROW2	363
#define	KW_PARTIAL	364
#define	KW_IF	365
#define	KW_ASSOC	366
#define	KW_COMM	367
#define	KW_ID	368
#define	KW_IDEM	369
#define	KW_ITER	370
#define	KW_LEFT	371
#define	KW_RIGHT	372
#define	KW_PREC	373
#define	KW_GATHER	374
#define	KW_STRAT	375
#define	KW_MEMO	376
#define	KW_FROZEN	377
#define	KW_CTOR	378
#define	KW_LATEX	379
#define	KW_SPECIAL	380
#define	KW_CONFIG	381
#define	KW_OBJ	382
#define	KW_MSG	383
#define	KW_DITTO	384
#define	KW_FORMAT	385
#define	KW_ID_HOOK	386
#define	KW_OP_HOOK	387
#define	KW_TERM_HOOK	388
#define	KW_IN	389
#define	IDENTIFIER	390
#define	NUMERIC_ID	391

#line 27 "surface.yy"

#include <string>

//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "visibleModule.hh"  // HACK
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

#include "main.hh"
#define clear()		bubble.contractTo(0);
#define store(token)	bubble.append(token)
#define YYPARSE_PARAM	parseResult
#define PARSE_RESULT	(*((UserLevelRewritingContext::ParseResult*) parseResult))

#define CM		interpreter.getCurrentModule()

void lexerInitialMode();
void lexerIdMode();
void lexerCmdMode();
void lexerFileNameMode();
void lexerStringMode();
void lexerLatexMode();
bool handleEof();
bool includeFile(const string& directory, const string& fileName, bool silent, int lineNr);
void eatComment(bool firstNonWhite);

Vector<Token> bubble;
Vector<Token> moduleExpr;

//PreModule* currentModule = 0;
Int64 number;
Int64 number2;

static void yyerror(char *s);
void cleanUpParser();

#line 82 "surface.yy"
typedef union
{
  bool yyBool;
  Int64 yyInt64;
  const char* yyString;
  Token yyToken;
} YYSTYPE;
#line 90 "surface.yy"

int yylex(YYSTYPE* lvalp);
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		926
#define	YYFLAG		-32768
#define	YYNTBASE	148

#define YYTRANSLATE(x) ((unsigned)(x) <= 391 ? yytranslate[x] : 363)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   114,
   115,     2,     2,   120,     2,   116,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   112,     2,   117,
   113,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   118,     2,   119,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,   121,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,     9,    10,    14,    15,    19,
    21,    22,    26,    27,    31,    33,    34,    38,    40,    42,
    43,    44,    52,    53,    54,    62,    63,    64,    72,    74,
    76,    78,    80,    82,    84,    86,    88,    90,    92,    94,
    96,    99,   100,   103,   104,   107,   108,   109,   114,   115,
   120,   121,   122,   131,   135,   139,   145,   146,   147,   155,
   156,   157,   158,   169,   170,   171,   179,   180,   181,   182,
   193,   196,   198,   199,   200,   208,   209,   210,   211,   222,
   224,   228,   232,   233,   239,   240,   241,   250,   252,   255,
   257,   261,   265,   268,   270,   271,   275,   276,   281,   284,
   286,   288,   289,   294,   301,   303,   305,   308,   309,   311,
   312,   317,   321,   323,   327,   328,   331,   333,   335,   338,
   341,   343,   345,   346,   350,   352,   354,   357,   358,   364,
   365,   371,   372,   378,   380,   382,   384,   385,   391,   393,
   395,   397,   398,   404,   409,   411,   414,   416,   419,   421,
   424,   425,   432,   433,   440,   441,   448,   451,   452,   454,
   457,   459,   462,   465,   467,   468,   474,   477,   478,   479,
   485,   488,   489,   490,   496,   499,   500,   501,   507,   510,
   511,   512,   518,   521,   522,   524,   527,   529,   530,   535,
   536,   542,   545,   548,   550,   552,   555,   557,   559,   561,
   563,   564,   569,   571,   573,   575,   577,   579,   581,   583,
   585,   587,   589,   591,   593,   595,   597,   599,   601,   603,
   605,   607,   609,   611,   613,   615,   617,   619,   621,   623,
   625,   627,   629,   631,   633,   635,   637,   639,   641,   643,
   645,   647,   649,   651,   653,   655,   657,   659,   661,   663,
   665,   667,   669,   671,   673,   675,   677,   679,   681,   683,
   685,   687,   689,   691,   693,   695,   697,   699,   701,   703,
   705,   707,   709,   711,   713,   715,   717,   719,   721,   723,
   725,   727,   729,   731,   733,   735,   737,   739,   741,   743,
   745,   747,   749,   751,   753,   755,   757,   759,   761,   763,
   765,   767,   769,   771,   773,   775,   777,   779,   781,   783,
   785,   787,   789,   791,   793,   795,   797,   799,   801,   803,
   805,   807,   809,   811,   813,   815,   817,   819,   821,   823,
   825,   827,   829,   830,   831,   838,   839,   840,   847,   848,
   852,   853,   857,   858,   863,   864,   869,   870,   875,   876,
   881,   882,   886,   887,   891,   896,   897,   901,   902,   907,
   908,   914,   915,   921,   922,   928,   929,   935,   940,   941,
   947,   948,   954,   955,   961,   962,   968,   969,   975,   976,
   982,   983,   989,   990,   996,   997,  1003,  1004,  1010,  1011,
  1017,  1022,  1027,  1028,  1034,  1040,  1046,  1053,  1059,  1065,
  1072,  1078,  1084,  1090,  1096,  1103,  1110,  1116,  1122,  1128,
  1134,  1140,  1146,  1151,  1157,  1163,  1169,  1175,  1181,  1187,
  1193,  1199,  1204,  1205,  1206,  1214,  1215,  1216,  1225,  1230,
  1236,  1242,  1247,  1253,  1256,  1259,  1262,  1265,  1271,  1276,
  1277,  1281,  1283,  1285,  1287,  1289,  1291,  1293,  1295,  1297,
  1299,  1301,  1303,  1304,  1306,  1307,  1308,  1313,  1314,  1319,
  1320,  1321,  1328,  1330,  1331,  1335,  1336,  1341,  1342,  1347,
  1348,  1352,  1353,  1358,  1360,  1361,  1365,  1366,  1371,  1373,
  1374,  1378,  1379,  1384,  1385,  1390,  1391,  1395,  1396,  1401,
  1403,  1404,  1408,  1409,  1413,  1414,  1419,  1421,  1422,  1426,
  1427,  1432,  1434,  1435,  1439,  1440,  1445,  1447,  1450,  1451,
  1454,  1455,  1458,  1459,  1461,  1463,  1465,  1467,  1469,  1471,
  1473,  1475,  1476,  1481,  1483,  1485,  1487,  1489,  1491,  1493,
  1495,  1496,  1501,  1503,  1505,  1507,  1509,  1511,  1513,  1514,
  1519,  1521,  1523,  1525,  1527,  1529,  1531,  1533,  1534,  1539,
  1541,  1543,  1545,  1547,  1549,  1551,  1552,  1557,  1559,  1561,
  1563,  1565,  1567,  1569,  1570,  1575,  1577,  1579,  1581,  1583,
  1585,  1587,  1588,  1593,  1595,  1597,  1599,  1601,  1603,  1604,
  1609,  1612,  1614,  1616,  1617,  1622,  1624,  1626,  1628,  1630,
  1632,  1634
};

static const short yyrhs[] = {   149,
     0,     0,   156,     0,   150,     0,   264,     0,     0,   145,
   151,     3,     0,     0,    87,   152,     3,     0,    82,     0,
     0,    83,   153,     3,     0,     0,    84,   154,     3,     0,
    85,     0,     0,    86,   155,     4,     0,    88,     0,    89,
     0,     0,     0,     6,   157,   249,   107,   158,   169,   163,
     0,     0,     0,     7,   159,   249,   107,   160,   170,   165,
     0,     0,     0,     8,   161,   249,   107,   162,   171,   167,
     0,    90,     0,   164,     0,    91,     0,    92,     0,    91,
     0,   166,     0,    90,     0,    92,     0,    92,     0,   168,
     0,    90,     0,    91,     0,   169,   172,     0,     0,   170,
   187,     0,     0,   171,   193,     0,     0,     0,    93,   173,
   242,   116,     0,     0,    94,   174,   230,   116,     0,     0,
     0,    95,   249,   175,   229,   117,   176,   230,   116,     0,
    96,   201,   207,     0,    53,   204,   207,     0,    98,   200,
   112,   210,   116,     0,     0,     0,   101,   177,   234,   112,
   178,   242,   116,     0,     0,     0,     0,   102,   179,   234,
   112,   180,   240,   111,   181,   242,   116,     0,     0,     0,
   103,   182,   236,   113,   183,   242,   116,     0,     0,     0,
     0,   104,   184,   236,   113,   185,   240,   111,   186,   242,
   116,     0,     1,   116,     0,   172,     0,     0,     0,   105,
   188,   238,   109,   189,   242,   116,     0,     0,     0,     0,
   106,   190,   238,   109,   191,   240,   111,   192,   242,   116,
     0,   187,     0,   139,   201,   207,     0,    97,   204,   207,
     0,     0,    99,   249,   194,   197,   116,     0,     0,     0,
   100,   249,   195,   229,   117,   196,   230,   116,     0,   121,
     0,   121,   198,     0,   199,     0,   198,   120,   199,     0,
   250,   112,   249,     0,   200,   255,     0,   255,     0,     0,
   249,   202,   234,     0,     0,   114,   203,   232,   115,     0,
   204,   205,     0,   205,     0,   255,     0,     0,   114,   206,
   232,   115,     0,   112,   209,   208,   210,   213,   116,     0,
   108,     0,   110,     0,   209,   210,     0,     0,   257,     0,
     0,   118,   211,   212,   119,     0,   212,   120,   257,     0,
   257,     0,   118,   214,   119,     0,     0,   214,   216,     0,
   216,     0,   124,     0,   127,   124,     0,   128,   124,     0,
   122,     0,   123,     0,     0,   215,   217,   246,     0,   125,
     0,   126,     0,   129,   146,     0,     0,   130,   114,   218,
   223,   115,     0,     0,   141,   114,   219,   223,   115,     0,
     0,   131,   114,   220,   223,   115,     0,   132,     0,   134,
     0,   133,     0,     0,   133,   114,   221,   223,   115,     0,
   137,     0,   138,     0,   139,     0,     0,   135,   114,   222,
     5,   115,     0,   136,   114,   224,   115,     0,   140,     0,
   223,   146,     0,   146,     0,   224,   225,     0,   225,     0,
   142,   249,     0,     0,   142,   249,   114,   226,   232,   115,
     0,     0,   143,   249,   114,   227,   232,   115,     0,     0,
   144,   249,   114,   228,   232,   115,     0,   229,   256,     0,
     0,   231,     0,   230,   116,     0,   116,     0,   231,   259,
     0,   230,   251,     0,   250,     0,     0,   232,   114,   233,
   232,   115,     0,   232,   249,     0,     0,     0,   234,   114,
   235,   232,   115,     0,   234,   255,     0,     0,     0,   236,
   114,   237,   232,   115,     0,   236,   253,     0,     0,     0,
   238,   114,   239,   232,   115,     0,   238,   252,     0,     0,
     0,   240,   114,   241,   232,   115,     0,   240,   254,     0,
     0,   243,     0,   242,   116,     0,   116,     0,     0,   114,
   244,   232,   115,     0,     0,   242,   114,   245,   232,   115,
     0,   243,   259,     0,   242,   251,     0,   250,     0,   247,
     0,   246,   247,     0,   258,     0,   260,     0,   261,     0,
   116,     0,     0,   114,   248,   232,   115,     0,   258,     0,
   259,     0,   261,     0,   262,     0,   116,     0,   258,     0,
   259,     0,   261,     0,   262,     0,   258,     0,   261,     0,
   262,     0,   258,     0,   259,     0,   262,     0,   116,     0,
   117,     0,   112,     0,   108,     0,   110,     0,   113,     0,
   111,     0,   107,     0,   258,     0,   259,     0,   262,     0,
   116,     0,   117,     0,   112,     0,   108,     0,   110,     0,
   109,     0,   111,     0,   107,     0,   258,     0,   259,     0,
   262,     0,   116,     0,   117,     0,   112,     0,   108,     0,
   110,     0,   113,     0,   109,     0,   107,     0,   258,     0,
   259,     0,   262,     0,   116,     0,   117,     0,   108,     0,
   110,     0,   113,     0,   109,     0,   111,     0,   107,     0,
   258,     0,   259,     0,   262,     0,   116,     0,   112,     0,
   108,     0,   110,     0,   113,     0,   109,     0,   111,     0,
   107,     0,   258,     0,   259,     0,   263,     0,   113,     0,
   109,     0,   111,     0,   107,     0,   146,     0,   120,     0,
   121,     0,   139,     0,   260,     0,    93,     0,    94,     0,
    95,     0,    96,     0,    53,     0,    98,     0,    97,     0,
    99,     0,   100,     0,   101,     0,   102,     0,   103,     0,
   104,     0,   105,     0,   106,     0,    90,     0,    91,     0,
    92,     0,   117,     0,   112,     0,   108,     0,   110,     0,
   113,     0,   109,     0,   111,     0,   107,     0,   118,     0,
   119,     0,   263,     0,   122,     0,   123,     0,   124,     0,
   125,     0,   126,     0,   127,     0,   128,     0,   129,     0,
   130,     0,   131,     0,   132,     0,   134,     0,   135,     0,
   136,     0,   133,     0,   137,     0,   138,     0,   140,     0,
   141,     0,   142,     0,   143,     0,   144,     0,     0,     0,
    31,   265,   343,   266,   341,   116,     0,     0,     0,    76,
   267,   343,   268,   341,   116,     0,     0,     9,   269,   307,
     0,     0,    75,   270,   307,     0,     0,   305,    11,   271,
   307,     0,     0,   305,    12,   272,   313,     0,     0,   305,
    19,   273,   313,     0,     0,   305,    20,   274,   323,     0,
     0,    23,   275,   313,     0,     0,   304,   276,   313,     0,
   305,    22,   306,   116,     0,     0,    13,   277,   307,     0,
     0,   114,   278,   340,   115,     0,     0,    28,   301,   279,
   359,   116,     0,     0,    28,   302,   280,   359,   116,     0,
     0,    48,   301,   281,   359,   116,     0,     0,    35,   303,
   282,   359,   116,     0,    62,    63,   132,   116,     0,     0,
    25,     7,   283,   341,   116,     0,     0,    25,    50,   284,
   341,   116,     0,     0,    25,    51,   285,   341,   116,     0,
     0,    25,    52,   286,   341,   116,     0,     0,    25,    53,
   287,   341,   116,     0,     0,    25,    54,   288,   341,   116,
     0,     0,    25,    55,   289,   341,   116,     0,     0,    25,
    56,   290,   341,   116,     0,     0,    25,    57,   291,   341,
   116,     0,     0,    25,    58,   292,   341,   116,     0,     0,
    25,    59,   293,   341,   116,     0,    25,    49,    81,   116,
     0,    25,    23,    36,   116,     0,     0,    25,    77,   294,
   341,   116,     0,    24,    25,    60,   300,   116,     0,    24,
    25,    44,   300,   116,     0,    24,    25,    13,    44,   300,
   116,     0,    24,    25,    45,   300,   116,     0,    24,    25,
    47,   300,   116,     0,    24,    25,    13,    45,   300,   116,
     0,    24,    25,    46,   300,   116,     0,    24,    25,    42,
   300,   116,     0,    24,    35,    37,   300,   116,     0,    24,
    35,    38,   300,   116,     0,    24,    35,    39,    41,   300,
   116,     0,    24,    35,    39,    40,   300,   116,     0,    24,
    35,    36,   300,   116,     0,    24,    35,    66,   300,   116,
     0,    24,    35,    78,   300,   116,     0,    24,    35,    79,
   300,   116,     0,    24,    35,    80,   300,   116,     0,    24,
    35,   141,   300,   116,     0,    24,    28,   300,   116,     0,
    24,    28,    33,   300,   116,     0,    24,    28,    29,   300,
   116,     0,    24,    28,    30,   300,   116,     0,    24,    28,
    34,   300,   116,     0,    24,    28,    31,   300,   116,     0,
    24,    28,    55,   300,   116,     0,    24,    28,    56,   300,
   116,     0,    24,    28,    57,   300,   116,     0,    24,    48,
   300,   116,     0,     0,     0,    24,    64,   295,   362,   296,
   300,   116,     0,     0,     0,    24,     8,    64,   297,   362,
   298,   300,   116,     0,    24,    61,   300,   116,     0,    24,
    63,   132,   300,   116,     0,    24,    68,    69,   300,   116,
     0,    24,    77,   300,   116,     0,    24,    63,    77,   300,
   116,     0,    71,   116,     0,    72,   116,     0,    73,   116,
     0,    74,   116,     0,    24,    42,    25,   300,   116,     0,
    24,    44,   300,   116,     0,     0,     1,   299,   116,     0,
    26,     0,    27,     0,    31,     0,    32,     0,    65,     0,
    64,     0,    66,     0,    67,     0,    16,     0,    15,     0,
    70,     0,     0,    81,     0,     0,     0,   145,   308,   342,
   310,     0,     0,   349,   309,   341,   116,     0,     0,     0,
   112,   311,   343,   312,   341,   116,     0,   116,     0,     0,
   118,   314,   317,     0,     0,   145,   315,   342,   310,     0,
     0,   351,   316,   341,   116,     0,     0,   147,   318,   320,
     0,     0,   353,   319,   341,   116,     0,   116,     0,     0,
   119,   321,   307,     0,     0,   355,   322,   341,   116,     0,
   116,     0,     0,   118,   324,   327,     0,     0,   145,   325,
   342,   310,     0,     0,   351,   326,   341,   116,     0,     0,
   147,   328,   330,     0,     0,   353,   329,   341,   116,     0,
   116,     0,     0,   119,   331,   307,     0,     0,   120,   332,
   334,     0,     0,   357,   333,   341,   116,     0,   116,     0,
     0,   147,   335,   337,     0,     0,   353,   336,   341,   116,
     0,   116,     0,     0,   119,   338,   307,     0,     0,   355,
   339,   341,   116,     0,   116,     0,   340,   343,     0,     0,
   341,   345,     0,     0,   342,   347,     0,     0,   146,     0,
   147,     0,   118,     0,   119,     0,   145,     0,   112,     0,
   116,     0,   120,     0,     0,   114,   344,   340,   115,     0,
   146,     0,   147,     0,   118,     0,   119,     0,   145,     0,
   112,     0,   120,     0,     0,   114,   346,   340,   115,     0,
   146,     0,   147,     0,   118,     0,   119,     0,   145,     0,
   120,     0,     0,   114,   348,   340,   115,     0,   146,     0,
   147,     0,   118,     0,   119,     0,   112,     0,   116,     0,
   120,     0,     0,   114,   350,   340,   115,     0,   146,     0,
   147,     0,   119,     0,   112,     0,   116,     0,   120,     0,
     0,   114,   352,   340,   115,     0,   146,     0,   118,     0,
   119,     0,   145,     0,   112,     0,   120,     0,     0,   114,
   354,   340,   115,     0,   146,     0,   147,     0,   118,     0,
   145,     0,   112,     0,   120,     0,     0,   114,   356,   340,
   115,     0,   146,     0,   147,     0,   118,     0,   145,     0,
   112,     0,     0,   114,   358,   340,   115,     0,   359,   360,
     0,   360,     0,   362,     0,     0,   114,   361,   340,   115,
     0,   146,     0,   147,     0,   118,     0,   119,     0,   145,
     0,   112,     0,   120,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   177,   178,   184,   185,   186,   192,   194,   202,   204,   212,
   216,   218,   227,   229,   238,   249,   251,   254,   259,   292,
   293,   299,   305,   306,   312,   318,   319,   325,   333,   334,
   341,   341,   344,   345,   352,   352,   355,   356,   363,   363,
   366,   367,   370,   371,   374,   375,   378,   379,   385,   386,
   388,   389,   390,   392,   394,   396,   398,   399,   400,   402,
   403,   404,   405,   407,   408,   409,   411,   412,   413,   414,
   416,   419,   420,   421,   422,   424,   425,   426,   427,   430,
   431,   435,   439,   442,   445,   446,   447,   450,   451,   454,
   455,   458,   463,   464,   467,   468,   469,   470,   473,   474,
   477,   483,   484,   487,   494,   495,   498,   499,   502,   508,
   509,   515,   516,   519,   520,   523,   524,   527,   531,   535,
   541,   545,   549,   550,   551,   555,   559,   560,   561,   562,
   563,   564,   565,   566,   570,   574,   579,   580,   581,   585,
   589,   593,   594,   595,   596,   602,   603,   606,   607,   610,
   615,   616,   620,   621,   625,   626,   635,   636,   639,   640,
   641,   644,   645,   646,   652,   653,   654,   655,   658,   659,
   660,   661,   664,   665,   666,   667,   670,   671,   672,   673,
   676,   677,   678,   679,   682,   683,   684,   687,   688,   689,
   690,   691,   692,   693,   699,   700,   703,   703,   703,   703,
   704,   705,   711,   711,   711,   711,   711,   714,   714,   714,
   714,   717,   717,   717,   720,   720,   720,   720,   721,   721,
   721,   721,   721,   721,   721,   723,   723,   723,   723,   724,
   724,   724,   724,   724,   724,   724,   726,   726,   726,   726,
   727,   727,   727,   727,   727,   727,   727,   729,   729,   729,
   729,   730,   730,   730,   730,   730,   730,   730,   732,   732,
   732,   732,   733,   733,   733,   733,   733,   733,   733,   736,
   736,   736,   736,   737,   737,   737,   743,   743,   743,   746,
   746,   749,   749,   749,   749,   749,   749,   750,   750,   750,
   751,   751,   751,   751,   751,   751,   752,   752,   752,   755,
   755,   755,   755,   755,   755,   755,   755,   758,   758,   758,
   761,   761,   761,   761,   761,   761,   761,   762,   762,   762,
   762,   762,   763,   763,   763,   764,   764,   764,   764,   765,
   765,   765,   792,   793,   794,   799,   800,   801,   807,   814,
   820,   827,   833,   840,   846,   854,   859,   867,   872,   881,
   886,   894,   899,   907,   912,   916,   923,   928,   929,   937,
   938,   943,   944,   949,   950,   955,   956,   961,   969,   970,
   976,   977,   983,   984,   990,   991,   997,   998,  1004,  1005,
  1011,  1012,  1018,  1019,  1025,  1026,  1032,  1033,  1039,  1040,
  1046,  1050,  1054,  1055,  1064,  1068,  1072,  1076,  1080,  1084,
  1088,  1092,  1096,  1100,  1104,  1108,  1112,  1116,  1120,  1124,
  1128,  1132,  1136,  1140,  1144,  1148,  1152,  1156,  1160,  1164,
  1168,  1172,  1176,  1177,  1178,  1182,  1183,  1184,  1188,  1192,
  1196,  1200,  1204,  1211,  1215,  1219,  1223,  1230,  1234,  1241,
  1243,  1248,  1249,  1252,  1253,  1256,  1257,  1260,  1261,  1264,
  1265,  1268,  1269,  1272,  1273,  1281,  1282,  1283,  1284,  1287,
  1288,  1289,  1290,  1299,  1301,  1301,  1302,  1303,  1304,  1308,
  1310,  1310,  1311,  1312,  1316,  1322,  1322,  1323,  1324,  1333,
  1335,  1335,  1336,  1337,  1338,  1342,  1344,  1344,  1345,  1346,
  1350,  1356,  1356,  1358,  1358,  1359,  1360,  1364,  1366,  1366,
  1367,  1368,  1372,  1379,  1379,  1380,  1381,  1387,  1388,  1391,
  1392,  1396,  1397,  1403,  1403,  1403,  1403,  1403,  1403,  1403,
  1403,  1404,  1405,  1408,  1408,  1408,  1408,  1408,  1408,  1408,
  1409,  1410,  1414,  1414,  1414,  1414,  1414,  1414,  1415,  1416,
  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1420,  1421,  1424,
  1424,  1424,  1424,  1424,  1424,  1425,  1426,  1430,  1430,  1430,
  1430,  1430,  1430,  1431,  1432,  1436,  1436,  1436,  1436,  1436,
  1436,  1437,  1438,  1442,  1442,  1442,  1442,  1442,  1443,  1444,
  1450,  1451,  1454,  1460,  1461,  1468,  1468,  1468,  1468,  1468,
  1468,  1468
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FILE_NAME_STRING",
"UNINTERPRETED_STRING","LATEX_STRING","KW_FMOD","KW_MOD","KW_OMOD","KW_PARSE",
"KW_NORMALIZE","KW_REDUCE","KW_REWRITE","KW_LOOP","KW_NARROW","KW_MATCH","KW_XMATCH",
"KW_UNIFY","KW_XUNIFY","KW_EREWRITE","KW_FREWRITE","KW_OREWRITE","KW_CONTINUE",
"KW_SEARCH","KW_SET","KW_SHOW","KW_ON","KW_OFF","KW_TRACE","KW_CONTEXT","KW_WHOLE",
"KW_SELECT","KW_DESELECT","KW_CONDITION","KW_SUBSTITUTION","KW_PRINT","KW_GRAPH",
"KW_MIXFIX","KW_FLAT","KW_WITH","KW_PARENS","KW_ALIASES","KW_GC","KW_TIME","KW_STATS",
"KW_TIMING","KW_CMD","KW_BREAKDOWN","KW_BREAK","KW_PATH","KW_MODULE","KW_ALL",
"KW_SORTS","KW_OPS","KW_VARS","KW_MBS","KW_EQS","KW_RLS","KW_SUMMARY","KW_KINDS",
"KW_ADVISE","KW_VERBOSE","KW_DO","KW_CLEAR","KW_INCLUDE","KW_EXCLUDE","KW_CONCEAL",
"KW_REVEAL","KW_COMPILE","KW_COUNT","KW_DEBUG","KW_RESUME","KW_ABORT","KW_STEP",
"KW_WHERE","KW_CREDUCE","KW_DUMP","KW_PROFILE","KW_NUMBER","KW_RAT","KW_COLOR",
"SIMPLE_NUMBER","KW_PWD","KW_CD","KW_PUSHD","KW_POPD","KW_LS","KW_LOAD","KW_QUIT",
"KW_EOF","KW_ENDFM","KW_ENDM","KW_ENDOM","KW_IMPORT","KW_SORT","KW_SUBSORT",
"KW_OP","KW_MSGS","KW_VAR","KW_CLASS","KW_SUBCLASS","KW_MB","KW_CMB","KW_EQ",
"KW_CEQ","KW_RL","KW_CRL","KW_IS","KW_ARROW","KW_ARROW2","KW_PARTIAL","KW_IF",
"':'","'='","'('","')'","'.'","'<'","'['","']'","','","'|'","KW_ASSOC","KW_COMM",
"KW_ID","KW_IDEM","KW_ITER","KW_LEFT","KW_RIGHT","KW_PREC","KW_GATHER","KW_STRAT",
"KW_MEMO","KW_FROZEN","KW_CTOR","KW_LATEX","KW_SPECIAL","KW_CONFIG","KW_OBJ",
"KW_MSG","KW_DITTO","KW_FORMAT","KW_ID_HOOK","KW_OP_HOOK","KW_TERM_HOOK","KW_IN",
"IDENTIFIER","NUMERIC_ID","top","item","directive","@1","@2","@3","@4","@5",
"module","@6","@7","@8","@9","@10","@11","endfm","notEndfm","endm","notEndm",
"endom","notEndom","fDecList","decList","oDecList","fDeclaration","@12","@13",
"@14","@15","@16","@17","@18","@19","@20","@21","@22","@23","@24","@25","declaration",
"@26","@27","@28","@29","@30","oDeclaration","@31","@32","@33","classDef","cPairList",
"cPair","varNameList","opName","@34","@35","opNameList","simpleOpName","@36",
"domainRangeAttr","arrow","typeList","type","@37","sortTokens","attributes",
"attributeList","idKeyword","attribute","@38","@39","@40","@41","@42","@43",
"idList","hookList","hook","@44","@45","@46","listBarLt","endTokens2","noTrailingDot2",
"tokens","@47","tokensBarColon","@48","tokensBarEqual","@49","tokensBarArrow2",
"@50","tokensBarIf","@51","endTokens","noTrailingDot","@52","@53","identity",
"identityChunk","@54","token","tokenBarDot","endToken","tokenBarArrow2","tokenBarEqual",
"tokenBarIf","tokenBarColon","tokenBarLt","sortToken","identifier","startKeyword",
"startKeyword2","midKeyword","attrKeyword","attrKeyword2","command","@55","@56",
"@57","@58","@59","@60","@61","@62","@63","@64","@65","@66","@67","@68","@69",
"@70","@71","@72","@73","@74","@75","@76","@77","@78","@79","@80","@81","@82",
"@83","@84","@85","@86","@87","@88","@89","polarity","select","exclude","conceal",
"match","optDebug","optNumber","moduleAndTerm","@90","@91","inEnd","@92","@93",
"numberModuleTerm","@94","@95","@96","numberModuleTerm1","@97","@98","numberModuleTerm2",
"@99","@100","numbersModuleTerm","@101","@102","@103","numbersModuleTerm1","@104",
"@105","numbersModuleTerm2","@106","@107","@108","numbersModuleTerm3","@109",
"@110","numbersModuleTerm4","@111","@112","cTokens","cTokensBarDot","cTokensBarDotColon",
"cToken","@113","cTokenBarDot","@114","cTokenBarDotColon","@115","cTokenBarIn",
"@116","cTokenBarLeftIn","@117","cTokenBarDotNumber","@118","cTokenBarDotRight",
"@119","cTokenBarDotCommaRight","@120","cOpNameList","cSimpleOpName","@121",
"cSimpleTokenBarDot", NULL
};
#endif

static const short yyr1[] = {     0,
   148,   148,   149,   149,   149,   151,   150,   152,   150,   150,
   153,   150,   154,   150,   150,   155,   150,   150,   150,   157,
   158,   156,   159,   160,   156,   161,   162,   156,   163,   163,
   164,   164,   165,   165,   166,   166,   167,   167,   168,   168,
   169,   169,   170,   170,   171,   171,   173,   172,   174,   172,
   175,   176,   172,   172,   172,   172,   177,   178,   172,   179,
   180,   181,   172,   182,   183,   172,   184,   185,   186,   172,
   172,   187,   188,   189,   187,   190,   191,   192,   187,   193,
   193,   193,   194,   193,   195,   196,   193,   197,   197,   198,
   198,   199,   200,   200,   202,   201,   203,   201,   204,   204,
   205,   206,   205,   207,   208,   208,   209,   209,   210,   211,
   210,   212,   212,   213,   213,   214,   214,   215,   215,   215,
   216,   216,   217,   216,   216,   216,   216,   218,   216,   219,
   216,   220,   216,   216,   216,   216,   221,   216,   216,   216,
   216,   222,   216,   216,   216,   223,   223,   224,   224,   225,
   226,   225,   227,   225,   228,   225,   229,   229,   230,   230,
   230,   231,   231,   231,   233,   232,   232,   232,   235,   234,
   234,   234,   237,   236,   236,   236,   239,   238,   238,   238,
   241,   240,   240,   240,   242,   242,   242,   244,   243,   245,
   243,   243,   243,   243,   246,   246,   247,   247,   247,   247,
   248,   247,   249,   249,   249,   249,   249,   250,   250,   250,
   250,   251,   251,   251,   252,   252,   252,   252,   252,   252,
   252,   252,   252,   252,   252,   253,   253,   253,   253,   253,
   253,   253,   253,   253,   253,   253,   254,   254,   254,   254,
   254,   254,   254,   254,   254,   254,   254,   255,   255,   255,
   255,   255,   255,   255,   255,   255,   255,   255,   256,   256,
   256,   256,   256,   256,   256,   256,   256,   256,   256,   257,
   257,   257,   257,   257,   257,   257,   258,   258,   258,   259,
   259,   260,   260,   260,   260,   260,   260,   260,   260,   260,
   260,   260,   260,   260,   260,   260,   260,   260,   260,   261,
   261,   261,   261,   261,   261,   261,   261,   262,   262,   262,
   263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
   263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
   263,   263,   265,   266,   264,   267,   268,   264,   269,   264,
   270,   264,   271,   264,   272,   264,   273,   264,   274,   264,
   275,   264,   276,   264,   264,   277,   264,   278,   264,   279,
   264,   280,   264,   281,   264,   282,   264,   264,   283,   264,
   284,   264,   285,   264,   286,   264,   287,   264,   288,   264,
   289,   264,   290,   264,   291,   264,   292,   264,   293,   264,
   264,   264,   294,   264,   264,   264,   264,   264,   264,   264,
   264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
   264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
   264,   264,   295,   296,   264,   297,   298,   264,   264,   264,
   264,   264,   264,   264,   264,   264,   264,   264,   264,   299,
   264,   300,   300,   301,   301,   302,   302,   303,   303,   304,
   304,   305,   305,   306,   306,   308,   307,   309,   307,   311,
   312,   310,   310,   314,   313,   315,   313,   316,   313,   318,
   317,   319,   317,   317,   321,   320,   322,   320,   320,   324,
   323,   325,   323,   326,   323,   328,   327,   329,   327,   327,
   331,   330,   332,   330,   333,   330,   330,   335,   334,   336,
   334,   334,   338,   337,   339,   337,   337,   340,   340,   341,
   341,   342,   342,   343,   343,   343,   343,   343,   343,   343,
   343,   344,   343,   345,   345,   345,   345,   345,   345,   345,
   346,   345,   347,   347,   347,   347,   347,   347,   348,   347,
   349,   349,   349,   349,   349,   349,   349,   350,   349,   351,
   351,   351,   351,   351,   351,   352,   351,   353,   353,   353,
   353,   353,   353,   354,   353,   355,   355,   355,   355,   355,
   355,   356,   355,   357,   357,   357,   357,   357,   358,   357,
   359,   359,   360,   361,   360,   362,   362,   362,   362,   362,
   362,   362
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     1,     0,     3,     0,     3,     1,
     0,     3,     0,     3,     1,     0,     3,     1,     1,     0,
     0,     7,     0,     0,     7,     0,     0,     7,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     0,     2,     0,     2,     0,     0,     4,     0,     4,
     0,     0,     8,     3,     3,     5,     0,     0,     7,     0,
     0,     0,    10,     0,     0,     7,     0,     0,     0,    10,
     2,     1,     0,     0,     7,     0,     0,     0,    10,     1,
     3,     3,     0,     5,     0,     0,     8,     1,     2,     1,
     3,     3,     2,     1,     0,     3,     0,     4,     2,     1,
     1,     0,     4,     6,     1,     1,     2,     0,     1,     0,
     4,     3,     1,     3,     0,     2,     1,     1,     2,     2,
     1,     1,     0,     3,     1,     1,     2,     0,     5,     0,
     5,     0,     5,     1,     1,     1,     0,     5,     1,     1,
     1,     0,     5,     4,     1,     2,     1,     2,     1,     2,
     0,     6,     0,     6,     0,     6,     2,     0,     1,     2,
     1,     2,     2,     1,     0,     5,     2,     0,     0,     5,
     2,     0,     0,     5,     2,     0,     0,     5,     2,     0,
     0,     5,     2,     0,     1,     2,     1,     0,     4,     0,
     5,     2,     2,     1,     1,     2,     1,     1,     1,     1,
     0,     4,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     0,     0,     6,     0,     0,     6,     0,     3,
     0,     3,     0,     4,     0,     4,     0,     4,     0,     4,
     0,     3,     0,     3,     4,     0,     3,     0,     4,     0,
     5,     0,     5,     0,     5,     0,     5,     4,     0,     5,
     0,     5,     0,     5,     0,     5,     0,     5,     0,     5,
     0,     5,     0,     5,     0,     5,     0,     5,     0,     5,
     4,     4,     0,     5,     5,     5,     6,     5,     5,     6,
     5,     5,     5,     5,     6,     6,     5,     5,     5,     5,
     5,     5,     4,     5,     5,     5,     5,     5,     5,     5,
     5,     4,     0,     0,     7,     0,     0,     8,     4,     5,
     5,     4,     5,     2,     2,     2,     2,     5,     4,     0,
     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     0,     1,     0,     0,     4,     0,     4,     0,
     0,     6,     1,     0,     3,     0,     4,     0,     4,     0,
     3,     0,     4,     1,     0,     3,     0,     4,     1,     0,
     3,     0,     4,     0,     4,     0,     3,     0,     4,     1,
     0,     3,     0,     3,     0,     4,     1,     0,     3,     0,
     4,     1,     0,     3,     0,     4,     1,     2,     0,     2,
     0,     2,     0,     1,     1,     1,     1,     1,     1,     1,
     1,     0,     4,     1,     1,     1,     1,     1,     1,     1,
     0,     4,     1,     1,     1,     1,     1,     1,     0,     4,
     1,     1,     1,     1,     1,     1,     1,     0,     4,     1,
     1,     1,     1,     1,     1,     0,     4,     1,     1,     1,
     1,     1,     1,     0,     4,     1,     1,     1,     1,     1,
     1,     0,     4,     1,     1,     1,     1,     1,     0,     4,
     2,     1,     1,     0,     4,     1,     1,     1,     1,     1,
     1,     1
};

static const short yydefact[] = {     0,
   440,    20,    23,    26,   339,   356,   451,   450,   351,     0,
     0,     0,   333,     0,     0,     0,   452,     0,     0,     0,
     0,   341,   336,    10,    11,    13,    15,    16,     8,    18,
    19,   358,     6,     1,     4,     3,     5,   353,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   423,     0,     0,   369,     0,
     0,   371,   373,   375,   377,   379,   381,   383,   385,   387,
   389,   393,   444,   445,   447,   446,   360,   362,     0,   448,
   449,   366,   364,     0,   434,   435,   436,   437,     0,     0,
     0,     0,     0,     0,   509,     0,     0,   343,   345,   347,
   349,   455,   441,   286,   297,   298,   299,   282,   283,   284,
   285,   288,   287,   289,   290,   291,   292,   293,   294,   295,
   296,   307,   302,   305,   303,   306,   301,   304,   207,   300,
   308,   309,   278,   279,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   325,   322,   323,   324,   326,
   327,   280,   328,   329,   330,   331,   332,   277,     0,   203,
   204,   281,   205,   206,   310,     0,     0,   545,   548,   546,
   543,   544,   547,   456,   541,   542,   340,   458,   357,   553,
   556,   554,   464,   552,   555,   466,   550,   551,   352,   468,
   426,     0,     0,     0,     0,     0,     0,     0,   442,   443,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   511,     0,     0,
   511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
   511,     0,     0,   519,   522,   520,   516,   517,   521,   518,
   514,   515,   334,     0,     0,     0,   342,   337,    12,    14,
    17,     9,     0,     7,   354,     0,     0,     0,     0,   454,
     0,    21,    24,    27,   509,   513,   511,   509,     0,   513,
   511,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   413,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   439,   422,   429,     0,     0,   591,   588,   589,   592,   590,
   586,   587,   424,     0,   432,     0,   392,   391,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   584,
     0,   582,   583,     0,   509,   511,     0,     0,   368,   511,
   359,   508,   344,   346,   348,   480,   482,   350,   484,   355,
    42,    44,    46,     0,     0,     0,     0,   562,   564,   474,
   559,   560,   563,   561,   558,   470,   465,   472,     0,     0,
   427,     0,     0,   402,   396,   398,   401,   399,   395,   415,
   416,   418,   414,   417,   419,   420,   421,   407,   403,   404,
     0,     0,   408,   409,   410,   411,   412,   438,   433,   430,
     0,   431,   529,   531,   370,   526,   527,   530,   528,   524,
   525,   510,   372,   374,   376,   378,   380,   382,   384,   386,
   388,   390,   394,   509,   361,   581,   363,     0,     0,   367,
   365,     0,     0,   513,   511,     0,     0,     0,   549,   460,
   539,   463,   535,   536,   538,   537,   533,   534,   457,   512,
   459,   557,   509,     0,   511,   467,   469,     0,   397,   400,
   406,   405,     0,   509,     0,   523,   335,   338,   490,   486,
   481,   488,     0,     0,     0,     0,    29,    31,    32,    47,
    49,     0,     0,     0,    57,    60,    64,    67,    22,    30,
    41,    35,    33,    36,    73,    76,    25,    34,    72,    43,
    39,    40,    37,     0,     0,     0,     0,    28,    38,    80,
    45,     0,   509,     0,   570,   572,   479,   568,   475,   571,
   569,   566,   567,   471,   477,     0,     0,   425,     0,   585,
     0,   511,   483,   485,    71,   258,   253,   256,   254,   257,
   255,   102,   251,   252,     0,   100,   101,   248,   249,   250,
     0,     0,    51,    97,     0,    95,     0,    94,   172,   172,
   176,   176,   180,   180,     0,    83,    85,     0,   461,     0,
   565,   509,     0,   511,   473,   428,   532,   578,   579,   497,
   576,   491,   493,   577,   574,   575,   487,   495,     0,   168,
   108,    99,    55,   188,   187,     0,   185,   194,   208,   209,
   210,   211,   161,     0,   159,   164,   158,   168,    54,   172,
     0,    93,     0,     0,     0,     0,     0,     0,    82,     0,
   158,    81,   511,   540,     0,   476,     0,   509,     0,     0,
   511,   489,     0,     0,   168,   190,   186,   193,   212,   213,
   214,   192,   160,   163,   162,     0,     0,    96,   276,   274,
   275,   273,   110,     0,   109,   270,   271,   272,    58,   169,
   171,    61,   236,   232,   234,   233,   235,   231,    65,   173,
   229,   230,   175,   226,   227,   228,    68,   225,   221,    74,
   222,   224,   220,   223,   177,   218,   219,   179,   215,   216,
   217,    77,    88,     0,     0,     0,   573,   478,     0,   492,
   502,   498,   494,   500,     0,   165,   103,   167,   105,   106,
     0,   107,     0,   168,   269,   264,   267,   265,   268,   263,
   266,   262,    52,   157,   259,   260,   261,    98,     0,    56,
     0,   168,   184,     0,   168,   184,     0,   168,   184,    89,
    90,     0,    84,    86,   462,   580,     0,   511,   496,   168,
   115,   189,     0,     0,     0,   113,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   507,   503,
   499,   505,     0,     0,     0,     0,   191,     0,   111,     0,
   186,   170,   247,   243,   246,   244,    62,   242,   245,   181,
   240,   241,   183,   237,   238,   239,   186,   174,    69,   186,
   178,    78,    91,    92,     0,     0,   511,   501,   166,   121,
   122,   118,   125,   126,     0,     0,     0,     0,     0,   134,
   136,   135,     0,     0,   139,   140,   141,   145,     0,     0,
   123,   117,   104,   160,   112,     0,   168,     0,     0,   160,
   504,     0,   119,   120,   127,   128,   132,   137,   142,     0,
   130,   114,   116,     0,     0,     0,     0,     0,   506,     0,
     0,     0,     0,     0,     0,     0,     0,   149,     0,   201,
   200,   124,   195,   197,   198,   199,   186,   182,   186,   186,
   147,     0,     0,     0,     0,   150,     0,     0,   144,   148,
     0,   168,   196,   129,   146,   133,   138,   143,   151,   153,
   155,   131,     0,   168,   168,   168,   202,     0,     0,     0,
   152,   154,   156,     0,     0,     0
};

static const short yydefgoto[] = {   924,
    34,    35,    96,    94,    91,    92,    93,    36,    41,   361,
    42,   362,    43,   363,   499,   500,   507,   508,   518,   519,
   446,   447,   448,   509,   561,   562,   617,   764,   569,   741,
   570,   743,   846,   571,   744,   572,   746,   848,   510,   573,
   747,   574,   749,   849,   521,   630,   631,   778,   704,   750,
   751,   567,   565,   620,   618,   555,   556,   600,   603,   721,
   644,   664,   739,   765,   786,   840,   841,   842,   864,   870,
   879,   871,   872,   873,   892,   877,   878,   914,   915,   916,
   656,   614,   615,   643,   760,   623,   742,   625,   745,   627,
   748,   769,   847,   606,   607,   645,   724,   882,   883,   902,
   718,   608,   648,   698,   683,   803,   557,   734,   665,   160,
   161,   162,   163,   164,   165,    37,    79,   346,    90,   350,
    44,    89,   266,   267,   268,   269,    46,    97,    45,    95,
   242,   243,   255,   254,   228,   231,   232,   233,   234,   235,
   236,   237,   238,   239,   240,   241,   225,   411,   282,   468,
    40,   209,    77,    78,    82,    38,    39,   271,   177,   276,
   277,   459,   522,   633,   189,   279,   280,   281,   377,   464,
   465,   534,   583,   584,   358,   443,   444,   445,   481,   541,
   542,   597,   639,   640,   641,   713,   757,   758,   781,   816,
   817,   263,   326,   365,   352,   345,   422,   474,   460,   523,
   178,   275,   190,   278,   378,   463,   535,   582,   598,   638,
   341,   342,   434,   343
};

static const short yypact[] = {   796,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    40,
   236,    29,-32768,    45,    95,   -10,-32768,   -50,   -43,   -38,
   -20,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   132,   -17,
  2977,  2977,  2977,     2,     2,  4217,    -7,   195,   343,     1,
    84,   129,   129,   129,   -46,-32768,    46,   129,-32768,    88,
    51,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4253,-32768,
-32768,-32768,-32768,     3,-32768,-32768,-32768,-32768,     2,  4253,
   135,   138,   146,   170,-32768,   174,  4217,-32768,-32768,-32768,
-32768,   110,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    89,-32768,
-32768,-32768,-32768,-32768,-32768,   102,   107,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   167,   129,   129,   129,   129,   129,   129,-32768,-32768,
   129,   129,   129,   129,   129,   129,   129,   129,   100,   129,
   129,   129,   190,   129,   129,   129,   129,   129,   129,   103,
   105,   119,   129,   129,   240,   129,   128,-32768,   133,   136,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   218,   218,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   218,   218,   145,-32768,-32768,-32768,-32768,
-32768,-32768,   158,-32768,-32768,     2,  4217,  4217,  4262,-32768,
   147,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4271,-32768,
-32768,   240,   129,   129,   148,   149,   150,   153,   155,   163,
   164,   166,   168,   180,   181,   182,   184,   185,-32768,   186,
   191,   192,   129,   129,   193,   194,   198,   200,   202,   204,
-32768,-32768,-32768,   205,   207,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   208,-32768,  4307,-32768,-32768,  4316,  4325,
  4361,  4370,  4379,  4415,  4424,  4433,  4469,  4478,  4487,-32768,
  4523,-32768,-32768,  4532,-32768,-32768,  4541,  4577,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   303,  4586,  4595,   389,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4586,  4631,
-32768,   210,   212,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   213,   215,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   129,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   402,  4640,-32768,
-32768,  4649,  4685,-32768,-32768,   674,   575,   387,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  4694,-32768,-32768,-32768,   129,-32768,-32768,
-32768,-32768,   217,-32768,   539,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  4586,  4703,   223,  3038,-32768,-32768,-32768,-32768,
-32768,  2977,  2233,  3400,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  3038,  2977,  2977,  2233,-32768,-32768,-32768,
-32768,  4253,-32768,  4145,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  4739,   224,-32768,  4154,-32768,
  4748,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2295,-32768,-32768,-32768,-32768,-32768,
  2357,  3097,-32768,-32768,   111,-32768,  3158,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2295,-32768,-32768,   111,-32768,  4163,
-32768,-32768,     2,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4757,-32768,
-32768,-32768,-32768,-32768,-32768,  3752,  3728,-32768,-32768,-32768,
-32768,-32768,-32768,  4032,  3728,-32768,-32768,-32768,-32768,-32768,
  3579,-32768,  2419,  2481,  2543,  2605,  2667,  2729,-32768,   124,
-32768,-32768,-32768,-32768,  4199,-32768,  4793,-32768,     2,  4802,
-32768,-32768,  1037,  3520,-32768,-32768,   462,-32768,-32768,-32768,
-32768,-32768,   648,-32768,-32768,  3219,  1129,  3280,-32768,-32768,
-32768,-32768,-32768,   225,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  3459,   227,  3339,  4811,-32768,-32768,  4208,-32768,
-32768,-32768,-32768,-32768,  4847,-32768,-32768,-32768,-32768,-32768,
  3579,-32768,  1221,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  3636,-32768,
  2357,-32768,-32768,  2357,-32768,-32768,  2357,-32768,-32768,   131,
-32768,   142,-32768,-32768,-32768,-32768,  4856,-32768,-32768,-32768,
   144,-32768,  1313,  3097,   113,-32768,  3792,  1405,  2791,  3832,
  1497,  2853,  3872,  1589,  2915,  3459,  2977,  3097,-32768,-32768,
-32768,-32768,  4865,  1681,  1062,   228,-32768,  4072,-32768,  3636,
   797,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   821,-32768,-32768,   852,
-32768,-32768,-32768,-32768,  4112,     2,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   187,   222,   160,   235,   247,-32768,
   248,-32768,   257,   264,-32768,-32768,-32768,-32768,   268,   978,
-32768,-32768,-32768,   875,-32768,  2357,-32768,  2357,  2357,   906,
-32768,  4901,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    85,
-32768,-32768,-32768,  3693,  3912,  1773,  3952,  3992,-32768,   237,
   237,   237,   379,  2977,  2977,  2977,   -13,-32768,   237,-32768,
-32768,  3693,-32768,-32768,-32768,-32768,   929,-32768,   960,   983,
-32768,   -72,   -69,   -59,   274,   277,   278,   280,-32768,-32768,
   -57,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1865,-32768,-32768,-32768,-32768,  1957,  2049,  2141,
-32768,-32768,-32768,   395,   397,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   -45,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -44,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -371,-32768,  -110,-32768,-32768,  -103,  -513,-32768,  -480,-32768,
-32768,  -621,-32768,-32768,-32768,-32768,-32768,  -428,-32768,-32768,
-32768,-32768,-32768,-32768,  -766,-32768,  -464,-32768,-32768,-32768,
  -211,  -709,-32768,  -535,-32768,  -529,-32768,  -147,-32768,  -146,
-32768,  -697,-32768,  -712,-32768,-32768,-32768,-32768,  -453,-32768,
   -41,  -518,  -595,-32768,-32768,-32768,  -460,-32768,  -714,  -422,
    16,  -819,  -152,  -159,  -593,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -36,   415,-32768,-32768,-32768,-32768,-32768,   -42,-32768,
-32768,  -358,-32768,-32768,   -73,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -248,  -227,  -244,   -64,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   162,-32768,  -423,-32768,  -324,-32768,-32768,-32768,
  -184,   -91,-32768,  -192
};


#define	YYLAST		5048


static const short yytable[] = {   159,
   166,   167,   179,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   253,   220,   221,   222,   654,   482,
   466,   227,   722,   265,   766,   258,   364,   668,   767,   367,
   223,   770,   323,   568,   773,   379,   210,   211,   212,   213,
   624,   602,   904,   616,   885,   906,   257,    47,   772,   366,
   668,   775,    84,   380,   788,   907,   191,   912,   344,    73,
    74,   602,   885,   558,    48,    85,   214,    49,   815,   347,
   348,   558,    86,   905,    50,   845,   905,    87,   215,   216,
   217,    51,   657,    52,   619,   224,   905,    53,   905,   381,
   658,   558,    75,    76,   629,    88,   438,   632,   103,   761,
    54,   899,    55,    56,   893,   894,   622,    57,   219,   723,
    80,    81,   901,   168,   226,   169,    58,   170,   439,   171,
   172,   173,   442,   229,   543,    73,    74,   668,   874,   875,
   876,   230,   558,   865,   256,   867,   868,   259,   609,   609,
   260,   218,    98,    99,   558,   668,   174,   175,   176,   261,
   100,   101,   558,   102,   199,   200,   285,   286,   287,   288,
   289,   290,   671,   671,   291,   292,   293,   294,   295,   296,
   297,   298,   262,   300,   301,   302,   264,   305,   306,   307,
   308,   309,   310,   649,   752,   475,   314,   315,   763,   324,
   270,   649,   654,   354,   355,   272,   668,   671,   666,   483,
   558,   558,   684,   684,   699,   699,   768,   192,   273,   771,
   283,   284,   774,   274,   524,   299,   714,   484,   311,   654,
   312,   666,   601,   353,   784,   539,   874,   875,   876,   303,
   304,   789,   790,   735,   313,   558,   193,   536,   194,   195,
   196,   197,    59,   325,   703,   616,   382,   383,   327,   436,
   776,   328,   436,   777,   198,   436,   436,   752,    60,   616,
   349,   785,   360,   384,   385,   386,   401,   402,   387,   244,
   388,   245,   351,   246,   580,   247,   248,   249,   389,   390,
   609,   391,   735,   392,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,   393,   394,   395,   666,   396,
   397,   398,   250,   251,   252,   855,   399,   400,   403,   404,
   853,   866,    72,   405,   599,   406,   666,   407,   609,   408,
   409,   609,   410,   412,   609,   469,   560,   470,   471,   316,
   472,   340,   538,   635,   560,   317,   318,   319,   545,   586,
   740,   609,   753,   843,   649,   854,   804,   649,   856,   804,
   649,   316,   804,   609,   560,   609,   637,   317,   318,   319,
   857,   858,   320,   321,   322,   649,   913,   666,   199,   200,
   859,   201,   202,   203,   473,   204,   205,   860,   918,   919,
   920,   861,   891,   895,   320,   321,   322,   485,   908,   709,
   909,   910,   649,   911,   925,   560,   926,   206,   207,   208,
   501,   612,   612,   520,   813,   706,   578,   560,   611,   611,
   575,   863,   900,   715,   244,   560,   245,   449,   246,   705,
   247,   248,   249,   609,   626,   609,   609,   628,   903,    83,
   359,   537,   782,     0,     0,     0,     0,     0,     0,   486,
     0,   884,   649,     0,   649,   649,   651,   250,   251,   252,
   563,   566,     0,   650,   651,     0,     0,   579,     0,   884,
     0,   650,   -48,   560,   560,   686,   686,   701,   701,     0,
     0,     0,     0,   576,   577,   566,   511,   512,   513,   490,
   491,   492,   493,   514,   494,   515,   516,   495,   496,   497,
   498,   505,   506,     0,     0,     0,   737,     0,   560,     0,
   244,   559,   245,   462,   246,     0,   247,   248,   249,   559,
     0,     0,     0,   244,   -48,   245,   476,   246,     0,   247,
   248,   249,     0,     0,     0,   517,     0,     0,     0,   559,
   783,     0,     0,   250,   251,   252,     0,     0,     0,     0,
   636,     0,     0,   612,     0,   737,   250,   251,   252,     0,
   611,   -48,   -48,   -48,   -48,   -48,   -48,   -48,   -48,   -48,
   -48,   -48,   -48,   -48,   -48,   -48,   -48,   -48,     0,     0,
   559,     0,     0,     0,     0,   485,   610,   610,     0,     0,
     0,   612,   559,     0,   612,     0,     0,   612,   611,   852,
   559,   611,     0,     0,   611,     0,   710,     0,     0,     0,
   -48,     0,     0,     0,   612,     0,     0,   651,     0,   806,
   651,   611,   806,   651,   650,   806,   612,   650,   612,     0,
   650,     0,   652,   611,     0,   611,     0,   486,   651,     0,
   655,     0,     0,     0,     0,   650,   667,     0,   559,   559,
   685,   685,   700,   700,     0,     0,     0,     0,   -50,     0,
   244,     0,   245,   540,   246,   651,   247,   248,   249,   667,
     0,     0,   650,     0,   502,   503,   504,   490,   491,   492,
   493,   736,   494,   559,   485,   495,   496,   497,   498,   505,
   506,     0,     0,   250,   251,   252,   612,     0,   612,   612,
     0,     0,     0,   611,     0,   611,   611,     0,     0,     0,
   -50,     0,     0,     0,     0,   651,     0,   651,   651,     0,
     0,   886,   650,     0,   650,   650,     0,     0,   610,     0,
   736,     0,     0,     0,     0,     0,   486,     0,     0,   886,
     0,     0,     0,     0,     0,   814,   667,   -50,   -50,   -50,
   -50,   -50,   -50,   -50,   -50,   -50,   -50,   -50,   -50,   -50,
   -50,   -50,   -50,   -50,   667,     0,   610,     0,     0,   610,
     0,     0,   610,   487,   488,   489,   490,   491,   492,   493,
     0,   494,     0,   851,   495,   496,   497,   498,     0,   610,
     0,     0,     0,     0,   805,     0,   -50,   805,     0,     0,
   805,   610,     0,   610,     0,    -2,     1,   -59,     0,     0,
     0,     2,     3,     4,     5,   667,  -453,  -453,     6,     0,
     7,     8,     0,     0,  -453,  -453,     0,  -453,     9,    10,
    11,   -66,     0,    12,     0,     0,    13,     0,     0,     0,
    14,     0,   896,   897,   898,     0,     0,     0,     0,     0,
     0,     0,     0,    15,     0,     0,     0,     0,     0,   -59,
     0,     0,   -75,     0,     0,     0,     0,    16,     0,     0,
     0,   610,     0,   610,   610,    17,    18,    19,    20,    21,
    22,    23,     0,   -66,     0,   -53,     0,    24,    25,    26,
    27,    28,    29,    30,    31,     0,   -59,   -59,   -59,   -59,
   -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,
   -59,   -59,   -59,     0,   -75,     0,   -87,     0,     0,    32,
   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -53,     0,   -63,
     0,     0,     0,     0,     0,   -59,     0,     0,     0,     0,
    33,   -75,   -75,   -75,   -75,   -75,   -75,   -75,   -75,   -75,
   -75,   -75,   -75,   -75,   -75,   -75,   -75,   -75,   -87,   -66,
   -70,     0,     0,     0,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,   -63,     0,   -79,     0,     0,     0,     0,     0,     0,
   -75,     0,     0,     0,     0,   -87,   -87,   -87,   -87,   -87,
   -87,   -87,   -87,   -87,   -87,   -87,   -87,   -87,   -87,   -87,
   -87,   -87,   -70,   -53,     0,     0,     0,     0,   -63,   -63,
   -63,   -63,   -63,   -63,   -63,   -63,   -63,   -63,   -63,   -63,
   -63,   -63,   -63,   -63,   -63,   -79,     0,     0,     0,     0,
     0,     0,     0,     0,   -87,     0,     0,     0,     0,   -70,
   -70,   -70,   -70,   -70,   -70,   -70,   -70,   -70,   -70,   -70,
   -70,   -70,   -70,   -70,   -70,   -70,     0,   -63,     0,     0,
     0,     0,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,
   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   104,
     0,     0,     0,     0,     0,     0,   862,     0,   -70,   820,
   821,   822,   823,   824,   825,   826,   827,   828,   829,   830,
   831,   832,   833,   834,   835,   836,   837,   838,   839,     0,
     0,   -79,     0,     0,     0,     0,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   716,   717,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   104,   158,   820,   821,   822,   823,   824,   825,   826,
   827,   828,   829,   830,   831,   832,   833,   834,   835,   836,
   837,   838,   839,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   716,   738,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   104,   158,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   716,   762,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   104,   158,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   716,   787,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   104,   158,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   716,   792,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   104,
   158,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   716,   808,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   104,   158,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   716,   811,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   104,   158,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   716,   819,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   104,   158,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   716,   888,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   104,   158,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   716,   917,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   104,
   158,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   716,   921,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   104,   158,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   716,   922,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   104,   158,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   716,   923,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   104,   158,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   564,   104,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,     0,   158,     0,
     0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   546,   547,   548,   549,   550,   601,   551,   552,   104,
   553,   554,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,     0,
   158,     0,     0,     0,     0,     0,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   604,   104,   605,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,     0,   158,     0,     0,     0,     0,     0,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   546,   547,   548,   549,   550,
   669,   551,   670,   104,   553,   554,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,     0,   158,     0,     0,     0,     0,     0,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   546,   547,   548,
   549,   550,   672,   551,   670,   104,   553,   554,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,     0,   158,     0,     0,     0,
     0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   673,
   674,   675,   676,   677,   678,   679,   680,   104,   681,   682,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,     0,   158,     0,
     0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   673,   674,   675,   676,   677,   678,   687,   680,   104,
   681,   682,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,     0,
   158,     0,     0,     0,     0,     0,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   688,   689,   690,   691,   692,   693,   694,
   695,   104,   696,   697,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,     0,   158,     0,     0,     0,     0,     0,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   688,   689,   702,   691,   692,
   693,   694,   695,   104,   696,   697,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,     0,   158,     0,     0,     0,     0,     0,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   793,   794,   795,
   796,   797,   798,   799,   800,   104,   801,   802,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,     0,   158,     0,     0,     0,
     0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   793,
   794,   795,   796,   809,   798,   799,   800,   104,   801,   802,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,     0,   158,     0,
     0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   793,   794,   795,   796,   812,   798,   799,   800,   104,
   801,   802,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,     0,
   158,     0,     0,     0,     0,     0,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   104,     0,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,     0,   158,     0,     0,     0,     0,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   546,   547,   548,   549,   550,   104,
   551,   552,     0,   553,   554,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,     0,   158,     0,     0,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   104,     0,   613,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,     0,   158,     0,     0,     0,     0,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   546,   547,   548,   549,   550,   621,
   551,   104,     0,   553,   554,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,     0,   158,     0,     0,     0,     0,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   725,   726,   727,   728,   729,
   730,   731,   104,     0,   732,   733,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,     0,   158,     0,     0,     0,     0,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   546,   547,   548,   549,
   550,   104,   551,   670,     0,   553,   554,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,     0,   158,     0,     0,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   725,   726,   727,   728,   729,
   730,   731,   104,     0,   732,   754,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,     0,   158,     0,     0,     0,     0,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   546,   547,   548,   549,
   550,   104,   551,     0,     0,   553,   554,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,     0,   158,     0,     0,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   104,     0,     0,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,     0,   158,     0,     0,     0,     0,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   659,   719,   660,   720,
   661,   104,   662,     0,     0,     0,     0,   663,     0,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,     0,   158,     0,     0,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   659,     0,   660,   104,   661,
     0,   662,     0,     0,     0,     0,   663,     0,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,     0,   158,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   659,     0,   660,   104,   661,     0,   662,     0,
     0,     0,     0,     0,     0,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   104,   158,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   880,     0,   881,   130,
     0,     0,   133,   134,     0,     0,     0,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,     0,     0,     0,     0,   158,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
   124,   125,   126,   127,   128,   646,   152,   647,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     0,   153,   154,   155,   156,   157,     0,   158,   122,   123,
   124,   125,   126,   127,   128,   646,     0,   791,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     0,   153,   154,   155,   156,   157,     0,   158,   122,   123,
   124,   125,   126,   127,   128,   646,     0,   807,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     0,   153,   154,   155,   156,   157,     0,   158,   122,   123,
   124,   125,   126,   127,   128,   646,     0,   810,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     0,   153,   154,   155,   156,   157,     0,   158,   122,   123,
   124,   125,   126,   127,   128,   646,     0,   887,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     0,   153,   154,   155,   156,   157,     0,   158,   122,   123,
   124,   125,   126,   127,   128,   646,     0,   889,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     0,   153,   154,   155,   156,   157,     0,   158,   122,   123,
   124,   125,   126,   127,   128,   646,     0,   890,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     0,   153,   154,   155,   156,   157,     0,   158,   122,   123,
   124,   125,   126,   127,   128,     0,     0,   653,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     0,   153,   154,   155,   156,   157,     0,   158,   122,   123,
   124,   125,   126,   127,   128,     0,     0,   844,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     0,   153,   154,   155,   156,   157,     0,   158,   122,   123,
   124,   125,   126,   127,   128,     0,     0,   850,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     0,   153,   154,   155,   156,   157,   244,   158,   245,   581,
   246,     0,   247,   248,   249,   244,     0,   245,   587,   246,
     0,   247,   248,   249,   244,     0,   245,   634,   246,     0,
   247,   248,   249,     0,     0,     0,     0,     0,     0,   250,
   251,   252,     0,     0,     0,     0,     0,     0,   250,   251,
   252,     0,     0,     0,     0,     0,     0,   250,   251,   252,
   244,     0,   245,   707,   246,     0,   247,   248,   249,   244,
     0,   245,   756,   246,     0,   247,   248,   249,   180,     0,
   181,     0,   182,     0,   183,   184,   185,     0,     0,     0,
     0,     0,     0,   250,   251,   252,     0,     0,     0,     0,
     0,     0,   250,   251,   252,     0,     0,     0,     0,     0,
     0,   186,   187,   188,   244,     0,   245,     0,   246,     0,
   247,   248,   249,   180,     0,   181,     0,   182,     0,   356,
   184,   185,   368,     0,   369,     0,   370,     0,   371,   372,
   373,     0,     0,     0,     0,     0,     0,   250,   251,   252,
     0,     0,     0,     0,     0,     0,   357,   187,   188,     0,
     0,     0,     0,     0,     0,   374,   375,   376,   413,     0,
   414,     0,   415,     0,   416,   417,   418,   413,     0,   414,
     0,   423,     0,   416,   417,   418,   413,     0,   414,     0,
   424,     0,   416,   417,   418,     0,     0,     0,     0,     0,
     0,   419,   420,   421,     0,     0,     0,     0,     0,     0,
   419,   420,   421,     0,     0,     0,     0,     0,     0,   419,
   420,   421,   413,     0,   414,     0,   425,     0,   416,   417,
   418,   413,     0,   414,     0,   426,     0,   416,   417,   418,
   413,     0,   414,     0,   427,     0,   416,   417,   418,     0,
     0,     0,     0,     0,     0,   419,   420,   421,     0,     0,
     0,     0,     0,     0,   419,   420,   421,     0,     0,     0,
     0,     0,     0,   419,   420,   421,   413,     0,   414,     0,
   428,     0,   416,   417,   418,   413,     0,   414,     0,   429,
     0,   416,   417,   418,   413,     0,   414,     0,   430,     0,
   416,   417,   418,     0,     0,     0,     0,     0,     0,   419,
   420,   421,     0,     0,     0,     0,     0,     0,   419,   420,
   421,     0,     0,     0,     0,     0,     0,   419,   420,   421,
   413,     0,   414,     0,   431,     0,   416,   417,   418,   413,
     0,   414,     0,   432,     0,   416,   417,   418,   413,     0,
   414,     0,   433,     0,   416,   417,   418,     0,     0,     0,
     0,     0,     0,   419,   420,   421,     0,     0,     0,     0,
     0,     0,   419,   420,   421,     0,     0,     0,     0,     0,
     0,   419,   420,   421,   316,     0,   340,     0,   435,     0,
   317,   318,   319,   316,     0,   340,     0,   437,     0,   317,
   318,   319,   316,     0,   340,     0,   440,     0,   317,   318,
   319,     0,     0,     0,     0,     0,     0,   320,   321,   322,
     0,     0,     0,     0,     0,     0,   320,   321,   322,     0,
     0,     0,     0,     0,     0,   320,   321,   322,   316,     0,
   340,     0,   441,     0,   317,   318,   319,   450,     0,   451,
     0,   452,     0,   453,   454,   455,   413,     0,   414,     0,
   461,     0,   416,   417,   418,     0,     0,     0,     0,     0,
     0,   320,   321,   322,     0,     0,     0,     0,     0,     0,
   456,   457,   458,     0,     0,     0,     0,     0,     0,   419,
   420,   421,   413,     0,   414,     0,   467,     0,   416,   417,
   418,   413,     0,   414,     0,   477,     0,   416,   417,   418,
   413,     0,   414,     0,   478,     0,   416,   417,   418,     0,
     0,     0,     0,     0,     0,   419,   420,   421,     0,     0,
     0,     0,     0,     0,   419,   420,   421,     0,     0,     0,
     0,     0,     0,   419,   420,   421,   368,     0,   369,     0,
   479,     0,   371,   372,   373,   525,     0,   526,     0,   527,
     0,   528,   529,   530,   413,     0,   414,     0,   544,     0,
   416,   417,   418,     0,     0,     0,     0,     0,     0,   374,
   375,   480,     0,     0,     0,     0,     0,     0,   531,   532,
   533,     0,     0,     0,     0,     0,     0,   419,   420,   421,
   413,     0,   414,     0,   585,     0,   416,   417,   418,   588,
     0,   589,     0,   590,     0,   591,   592,   593,   413,     0,
   414,     0,   642,     0,   416,   417,   418,     0,     0,     0,
     0,     0,     0,   419,   420,   421,     0,     0,     0,     0,
     0,     0,   594,   595,   596,     0,     0,     0,     0,     0,
     0,   419,   420,   421,   413,     0,   414,     0,   708,     0,
   416,   417,   418,   368,     0,   369,     0,   711,     0,   371,
   372,   373,   413,     0,   414,     0,   755,     0,   416,   417,
   418,     0,     0,     0,     0,     0,     0,   419,   420,   421,
     0,     0,     0,     0,     0,     0,   374,   375,   712,     0,
     0,     0,     0,     0,     0,   419,   420,   421,   413,     0,
   414,     0,   759,     0,   416,   417,   418,   525,     0,   526,
     0,   779,     0,   528,   780,   530,   413,     0,   414,     0,
   818,     0,   416,   417,   418,     0,     0,     0,     0,     0,
     0,   419,   420,   421,     0,     0,     0,     0,     0,     0,
   531,   532,   533,     0,     0,     0,     0,     0,     0,   419,
   420,   421,   413,     0,   414,     0,   869,     0,   416,   417,
   418,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   419,   420,   421
};

static const short yycheck[] = {    41,
    42,    43,    45,   231,   232,   233,   234,   235,   236,   237,
   238,   239,   240,   241,    79,    52,    53,    54,   614,   443,
   379,    58,   644,    97,   739,    90,   275,   621,   741,   278,
    77,   744,   225,   494,   747,   280,    36,    37,    38,    39,
   570,   555,   115,   562,   864,   115,    89,     8,   746,   277,
   644,   749,    63,   281,   764,   115,    64,   115,   243,    31,
    32,   575,   882,   486,    25,   116,    66,    28,   778,   254,
   255,   494,   116,   146,    35,   790,   146,   116,    78,    79,
    80,    42,   618,    44,   565,   132,   146,    48,   146,   282,
   620,   514,    64,    65,   575,   116,   345,   578,   116,   721,
    61,   115,    63,    64,   871,   872,   567,    68,    25,   645,
    66,    67,   879,   112,    69,   114,    77,   116,   346,   118,
   119,   120,   350,    36,   483,    31,    32,   721,   142,   143,
   144,    81,   555,   846,   132,   848,   849,     3,   561,   562,
     3,   141,    11,    12,   567,   739,   145,   146,   147,     4,
    19,    20,   575,    22,    26,    27,   193,   194,   195,   196,
   197,   198,   623,   624,   201,   202,   203,   204,   205,   206,
   207,   208,     3,   210,   211,   212,     3,   214,   215,   216,
   217,   218,   219,   606,   703,   434,   223,   224,   724,   226,
    81,   614,   788,   267,   268,   107,   790,   658,   621,   444,
   623,   624,   625,   626,   627,   628,   742,    13,   107,   745,
    44,    45,   748,   107,   463,   116,   640,   445,   116,   815,
   116,   644,   112,   266,   760,   474,   142,   143,   144,    40,
    41,   119,   120,   656,   116,   658,    42,   465,    44,    45,
    46,    47,     7,   116,   121,   764,   283,   284,   116,   341,
   120,   116,   344,   112,    60,   347,   348,   776,    23,   778,
   116,   118,   116,   116,   116,   116,   303,   304,   116,   112,
   116,   114,   115,   116,   523,   118,   119,   120,   116,   116,
   703,   116,   705,   116,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,   116,   116,   116,   721,   116,
   116,   116,   145,   146,   147,   146,   116,   116,   116,   116,
   124,   847,    77,   116,   542,   116,   739,   116,   741,   116,
   116,   744,   116,   116,   747,   116,   486,   116,   116,   112,
   116,   114,   116,   582,   494,   118,   119,   120,   116,   116,
   116,   764,   116,   116,   767,   124,   769,   770,   114,   772,
   773,   112,   775,   776,   514,   778,   584,   118,   119,   120,
   114,   114,   145,   146,   147,   788,   902,   790,    26,    27,
   114,    29,    30,    31,   411,    33,    34,   114,   914,   915,
   916,   114,   146,     5,   145,   146,   147,     1,   115,   638,
   114,   114,   815,   114,     0,   555,     0,    55,    56,    57,
   446,   561,   562,   448,   776,   633,   517,   567,   561,   562,
   514,   840,   877,   641,   112,   575,   114,   115,   116,   631,
   118,   119,   120,   846,   572,   848,   849,   574,   882,    15,
   269,   468,   757,    -1,    -1,    -1,    -1,    -1,    -1,    53,
    -1,   864,   865,    -1,   867,   868,   606,   145,   146,   147,
   492,   493,    -1,   606,   614,    -1,    -1,   522,    -1,   882,
    -1,   614,     1,   623,   624,   625,   626,   627,   628,    -1,
    -1,    -1,    -1,   515,   516,   517,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,    -1,    -1,    -1,   656,    -1,   658,    -1,
   112,   486,   114,   115,   116,    -1,   118,   119,   120,   494,
    -1,    -1,    -1,   112,    53,   114,   115,   116,    -1,   118,
   119,   120,    -1,    -1,    -1,   139,    -1,    -1,    -1,   514,
   758,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,    -1,
   583,    -1,    -1,   703,    -1,   705,   145,   146,   147,    -1,
   703,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,    -1,    -1,
   555,    -1,    -1,    -1,    -1,     1,   561,   562,    -1,    -1,
    -1,   741,   567,    -1,   744,    -1,    -1,   747,   741,   817,
   575,   744,    -1,    -1,   747,    -1,   639,    -1,    -1,    -1,
   139,    -1,    -1,    -1,   764,    -1,    -1,   767,    -1,   769,
   770,   764,   772,   773,   767,   775,   776,   770,   778,    -1,
   773,    -1,   607,   776,    -1,   778,    -1,    53,   788,    -1,
   615,    -1,    -1,    -1,    -1,   788,   621,    -1,   623,   624,
   625,   626,   627,   628,    -1,    -1,    -1,    -1,     1,    -1,
   112,    -1,   114,   115,   116,   815,   118,   119,   120,   644,
    -1,    -1,   815,    -1,    90,    91,    92,    93,    94,    95,
    96,   656,    98,   658,     1,   101,   102,   103,   104,   105,
   106,    -1,    -1,   145,   146,   147,   846,    -1,   848,   849,
    -1,    -1,    -1,   846,    -1,   848,   849,    -1,    -1,    -1,
    53,    -1,    -1,    -1,    -1,   865,    -1,   867,   868,    -1,
    -1,   864,   865,    -1,   867,   868,    -1,    -1,   703,    -1,
   705,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,   882,
    -1,    -1,    -1,    -1,    -1,   777,   721,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   739,    -1,   741,    -1,    -1,   744,
    -1,    -1,   747,    90,    91,    92,    93,    94,    95,    96,
    -1,    98,    -1,   816,   101,   102,   103,   104,    -1,   764,
    -1,    -1,    -1,    -1,   769,    -1,   139,   772,    -1,    -1,
   775,   776,    -1,   778,    -1,     0,     1,     1,    -1,    -1,
    -1,     6,     7,     8,     9,   790,    11,    12,    13,    -1,
    15,    16,    -1,    -1,    19,    20,    -1,    22,    23,    24,
    25,     1,    -1,    28,    -1,    -1,    31,    -1,    -1,    -1,
    35,    -1,   874,   875,   876,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    53,
    -1,    -1,     1,    -1,    -1,    -1,    -1,    62,    -1,    -1,
    -1,   846,    -1,   848,   849,    70,    71,    72,    73,    74,
    75,    76,    -1,    53,    -1,     1,    -1,    82,    83,    84,
    85,    86,    87,    88,    89,    -1,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,    -1,    53,    -1,     1,    -1,    -1,   114,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,    53,    -1,     1,
    -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,
   145,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,    53,   139,
     1,    -1,    -1,    -1,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,    53,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   139,    -1,    -1,    -1,    -1,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,    53,   139,    -1,    -1,    -1,    -1,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,    53,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,    -1,   139,    -1,    -1,
    -1,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,    53,
    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,   139,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,    -1,
    -1,   139,    -1,    -1,    -1,    -1,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,    53,   146,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,    53,   146,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,    53,   146,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,    53,   146,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,    53,
   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,    53,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,    53,   146,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,    53,   146,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,    53,   146,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,    53,
   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,    53,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,    53,   146,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,    53,   146,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,    53,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,    -1,   146,    -1,
    -1,    -1,    -1,    -1,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,    53,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,    -1,
   146,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,    53,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,    -1,   146,    -1,    -1,    -1,    -1,    -1,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,    53,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,    -1,   146,    -1,    -1,    -1,    -1,    -1,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,    53,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,    -1,   146,    -1,    -1,    -1,
    -1,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,    53,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,    -1,   146,    -1,
    -1,    -1,    -1,    -1,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,    53,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,    -1,
   146,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,    53,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,    -1,   146,    -1,    -1,    -1,    -1,    -1,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,    53,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,    -1,   146,    -1,    -1,    -1,    -1,    -1,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,    53,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,    -1,   146,    -1,    -1,    -1,
    -1,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,    53,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,    -1,   146,    -1,
    -1,    -1,    -1,    -1,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,    53,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,    -1,
   146,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
    53,    -1,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,    -1,   146,    -1,    -1,    -1,    -1,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,    53,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,    -1,   146,    -1,    -1,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
    53,    -1,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,    -1,   146,    -1,    -1,    -1,    -1,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,    53,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,    -1,   146,    -1,    -1,    -1,    -1,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,    53,    -1,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,    -1,   146,    -1,    -1,    -1,    -1,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,    53,   113,   114,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,    -1,   146,    -1,    -1,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,    53,    -1,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,    -1,   146,    -1,    -1,    -1,    -1,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,    53,   113,    -1,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,    -1,   146,    -1,    -1,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,    53,    -1,    -1,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,    -1,   146,    -1,    -1,    -1,    -1,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,    53,   113,    -1,    -1,    -1,    -1,   118,    -1,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,    -1,   146,    -1,    -1,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,    -1,   109,    53,   111,
    -1,   113,    -1,    -1,    -1,    -1,   118,    -1,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,    -1,   146,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,    -1,   109,    53,   111,    -1,   113,    -1,
    -1,    -1,    -1,    -1,    -1,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
    53,   146,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
    -1,    -1,   120,   121,    -1,    -1,    -1,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,    -1,    -1,    -1,    -1,   146,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
   109,   110,   111,   112,   113,   114,   139,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
    -1,   140,   141,   142,   143,   144,    -1,   146,   107,   108,
   109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
    -1,   140,   141,   142,   143,   144,    -1,   146,   107,   108,
   109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
    -1,   140,   141,   142,   143,   144,    -1,   146,   107,   108,
   109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
    -1,   140,   141,   142,   143,   144,    -1,   146,   107,   108,
   109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
    -1,   140,   141,   142,   143,   144,    -1,   146,   107,   108,
   109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
    -1,   140,   141,   142,   143,   144,    -1,   146,   107,   108,
   109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
    -1,   140,   141,   142,   143,   144,    -1,   146,   107,   108,
   109,   110,   111,   112,   113,    -1,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
    -1,   140,   141,   142,   143,   144,    -1,   146,   107,   108,
   109,   110,   111,   112,   113,    -1,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
    -1,   140,   141,   142,   143,   144,    -1,   146,   107,   108,
   109,   110,   111,   112,   113,    -1,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
    -1,   140,   141,   142,   143,   144,   112,   146,   114,   115,
   116,    -1,   118,   119,   120,   112,    -1,   114,   115,   116,
    -1,   118,   119,   120,   112,    -1,   114,   115,   116,    -1,
   118,   119,   120,    -1,    -1,    -1,    -1,    -1,    -1,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,
   112,    -1,   114,   115,   116,    -1,   118,   119,   120,   112,
    -1,   114,   115,   116,    -1,   118,   119,   120,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,    -1,    -1,    -1,
    -1,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
    -1,   145,   146,   147,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,    -1,   145,   146,   147,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,    -1,    -1,    -1,    -1,    -1,
    -1,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,   145,
   146,   147,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,    -1,
    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,    -1,   145,   146,   147,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,
    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,    -1,    -1,    -1,    -1,    -1,    -1,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,    -1,    -1,    -1,
    -1,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
    -1,   145,   146,   147,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,    -1,   145,   146,   147,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,    -1,    -1,    -1,    -1,    -1,
    -1,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,   145,
   146,   147,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,    -1,
    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,    -1,   145,   146,   147,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,
    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,    -1,    -1,    -1,    -1,    -1,    -1,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,    -1,    -1,    -1,
    -1,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
    -1,   145,   146,   147,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,    -1,   145,   146,   147,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,    -1,    -1,    -1,    -1,    -1,
    -1,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,   145,
   146,   147,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   145,   146,   147
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/csl/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/csl/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 177 "surface.yy"
{ YYACCEPT; ;
    break;}
case 2:
#line 179 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::QUIT;
			;
    break;}
case 6:
#line 192 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 7:
#line 194 "surface.yy"
{
			  int lineNr = lineNumber;
			  eatComment(false); // eat \n so that line number is correct
			  string directory;
			  string fileName;
			  if (findFile(yyvsp[0].yyString, directory, fileName, lineNr))
			    includeFile(directory, fileName, false, lineNr);
			;
    break;}
case 8:
#line 202 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 9:
#line 204 "surface.yy"
{
			  int lineNr = lineNumber;
			  eatComment(false); // eat \n so that line number is correct
			  string directory;
			  string fileName;
			  if (findFile(yyvsp[0].yyString, directory, fileName, lineNr))
			    includeFile(directory, fileName, true, lineNr);
			;
    break;}
case 10:
#line 213 "surface.yy"
{
			  cout << directoryManager.getCwd() << '\n';
			;
    break;}
case 11:
#line 216 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 12:
#line 218 "surface.yy"
{
			  string directory;
			  directoryManager.realPath(yyvsp[0].yyString, directory);
			  if (!directoryManager.cd(directory))
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": cd failed");
			    }
			;
    break;}
case 13:
#line 227 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 14:
#line 229 "surface.yy"
{
			  string directory;
			  directoryManager.realPath(yyvsp[0].yyString, directory);
			  if (directoryManager.pushd(directory) == UNDEFINED)
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": pushd failed");
			    }
			;
    break;}
case 15:
#line 239 "surface.yy"
{
			  const char* path = directoryManager.popd();
			  if (path != 0)
			    cout << path << '\n';
			  else
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": popd failed");
			    }
			;
    break;}
case 16:
#line 249 "surface.yy"
{ lexerStringMode(); ;
    break;}
case 17:
#line 251 "surface.yy"
{
			  system((string("ls") + yyvsp[0].yyString).c_str());
			;
    break;}
case 18:
#line 255 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::QUIT;
			  YYACCEPT;
			;
    break;}
case 19:
#line 260 "surface.yy"
{
			  if(!handleEof())
			    {
			      PARSE_RESULT = UserLevelRewritingContext::QUIT;
			    }
			;
    break;}
case 20:
#line 292 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 21:
#line 294 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::FUNCTIONAL_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 22:
#line 300 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 23:
#line 305 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 24:
#line 307 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::SYSTEM_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 25:
#line 313 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 26:
#line 318 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 27:
#line 320 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::SYSTEM_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 28:
#line 326 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 29:
#line 333 "surface.yy"
{;
    break;}
case 30:
#line 335 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": fmod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 33:
#line 344 "surface.yy"
{;
    break;}
case 34:
#line 346 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": mod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 37:
#line 355 "surface.yy"
{;
    break;}
case 38:
#line 357 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": omod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 47:
#line 378 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 48:
#line 379 "surface.yy"
{ CM->addImport(bubble); ;
    break;}
case 49:
#line 385 "surface.yy"
{ clear(); ;
    break;}
case 50:
#line 386 "surface.yy"
{ CM->addSortDecl(bubble); ;
    break;}
case 51:
#line 388 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 52:
#line 389 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 53:
#line 390 "surface.yy"
{ CM->addSubsortDecl(bubble); ;
    break;}
case 54:
#line 392 "surface.yy"
{;
    break;}
case 55:
#line 394 "surface.yy"
{;
    break;}
case 56:
#line 396 "surface.yy"
{;
    break;}
case 57:
#line 398 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 58:
#line 399 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 59:
#line 400 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 60:
#line 402 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 61:
#line 403 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 62:
#line 404 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 63:
#line 405 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 64:
#line 407 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 65:
#line 408 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 66:
#line 409 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 67:
#line 411 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 68:
#line 412 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 69:
#line 413 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 70:
#line 414 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 71:
#line 416 "surface.yy"
{ CM->makeOpDeclsConsistent(); ;
    break;}
case 73:
#line 420 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 74:
#line 421 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 75:
#line 422 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 76:
#line 424 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 77:
#line 425 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 78:
#line 426 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 79:
#line 427 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 81:
#line 432 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 82:
#line 436 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 83:
#line 440 "surface.yy"
{
			;
    break;}
case 84:
#line 443 "surface.yy"
{
			;
    break;}
case 85:
#line 445 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 86:
#line 446 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 87:
#line 447 "surface.yy"
{ CM->addSubsortDecl(bubble); ;
    break;}
case 88:
#line 450 "surface.yy"
{;
    break;}
case 89:
#line 451 "surface.yy"
{;
    break;}
case 92:
#line 459 "surface.yy"
{
			;
    break;}
case 93:
#line 463 "surface.yy"
{ CM->addVarDecl(yyvsp[0].yyToken); ;
    break;}
case 94:
#line 464 "surface.yy"
{ CM->addVarDecl(yyvsp[0].yyToken); ;
    break;}
case 95:
#line 467 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 96:
#line 468 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 97:
#line 469 "surface.yy"
{ clear(); ;
    break;}
case 98:
#line 470 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 101:
#line 478 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  CM->addOpDecl(bubble);
			;
    break;}
case 102:
#line 483 "surface.yy"
{ clear(); ;
    break;}
case 103:
#line 484 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 104:
#line 488 "surface.yy"
{
			  if (yyvsp[-3].yyBool)
			    CM->convertSortsToKinds();
			;
    break;}
case 105:
#line 494 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 106:
#line 495 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 109:
#line 503 "surface.yy"
{
			  clear();
			  bubble.append(yyvsp[0].yyToken);
			  CM->addType(false, bubble);
			;
    break;}
case 110:
#line 508 "surface.yy"
{ clear(); ;
    break;}
case 111:
#line 510 "surface.yy"
{
			  CM->addType(true, bubble);
			;
    break;}
case 112:
#line 515 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 113:
#line 516 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 114:
#line 519 "surface.yy"
{;
    break;}
case 118:
#line 528 "surface.yy"
{
			  CM->setFlag(SymbolType::LEFT_ID | SymbolType::RIGHT_ID);
			;
    break;}
case 119:
#line 532 "surface.yy"
{
			  CM->setFlag(SymbolType::LEFT_ID);
			;
    break;}
case 120:
#line 536 "surface.yy"
{
			  CM->setFlag(SymbolType::RIGHT_ID);
			;
    break;}
case 121:
#line 542 "surface.yy"
{
			  CM->setFlag(SymbolType::ASSOC);
			;
    break;}
case 122:
#line 546 "surface.yy"
{
			  CM->setFlag(SymbolType::COMM);
			;
    break;}
case 123:
#line 549 "surface.yy"
{ clear(); ;
    break;}
case 124:
#line 550 "surface.yy"
{ CM->setIdentity(bubble); ;
    break;}
case 125:
#line 552 "surface.yy"
{
			  CM->setFlag(SymbolType::IDEM);
			;
    break;}
case 126:
#line 556 "surface.yy"
{
			  CM->setFlag(SymbolType::ITER);
			;
    break;}
case 127:
#line 559 "surface.yy"
{ CM->setPrec(yyvsp[0].yyToken); ;
    break;}
case 128:
#line 560 "surface.yy"
{ clear(); ;
    break;}
case 129:
#line 561 "surface.yy"
{ CM->setGather(bubble); ;
    break;}
case 130:
#line 562 "surface.yy"
{ clear(); ;
    break;}
case 131:
#line 563 "surface.yy"
{ CM->setFormat(bubble); ;
    break;}
case 132:
#line 564 "surface.yy"
{ clear(); ;
    break;}
case 133:
#line 565 "surface.yy"
{ CM->setStrat(bubble); ;
    break;}
case 134:
#line 567 "surface.yy"
{
			  CM->setFlag(SymbolType::MEMO);
			;
    break;}
case 135:
#line 571 "surface.yy"
{
			  CM->setFlag(SymbolType::CTOR);
			;
    break;}
case 136:
#line 575 "surface.yy"
{
			  clear();
			  CM->setFrozen(bubble);
			;
    break;}
case 137:
#line 579 "surface.yy"
{ clear(); ;
    break;}
case 138:
#line 580 "surface.yy"
{ CM->setFrozen(bubble); ;
    break;}
case 139:
#line 582 "surface.yy"
{
			  CM->setFlag(SymbolType::CONFIG);
			;
    break;}
case 140:
#line 586 "surface.yy"
{
			  CM->setFlag(SymbolType::OBJECT);
			;
    break;}
case 141:
#line 590 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 142:
#line 593 "surface.yy"
{ lexerLatexMode(); ;
    break;}
case 143:
#line 594 "surface.yy"
{ CM->setLatexMacro(yyvsp[-1].yyString); ;
    break;}
case 144:
#line 595 "surface.yy"
{;
    break;}
case 145:
#line 597 "surface.yy"
{
			  CM->setFlag(SymbolType::DITTO);
			;
    break;}
case 146:
#line 602 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 147:
#line 603 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 150:
#line 611 "surface.yy"
{
			  clear();
			  CM->addHook(PreModule::ID_HOOK, yyvsp[0].yyToken, bubble);
			;
    break;}
case 151:
#line 615 "surface.yy"
{ clear(); ;
    break;}
case 152:
#line 617 "surface.yy"
{
			  CM->addHook(PreModule::ID_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 153:
#line 620 "surface.yy"
{ clear(); ;
    break;}
case 154:
#line 622 "surface.yy"
{
			  CM->addHook(PreModule::OP_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 155:
#line 625 "surface.yy"
{ clear(); ;
    break;}
case 156:
#line 627 "surface.yy"
{
			  CM->addHook(PreModule::TERM_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 157:
#line 635 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 160:
#line 640 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 161:
#line 641 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 162:
#line 644 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 163:
#line 645 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 164:
#line 646 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 165:
#line 652 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 166:
#line 653 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 167:
#line 654 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 169:
#line 658 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 170:
#line 659 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 171:
#line 660 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 173:
#line 664 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 174:
#line 665 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 175:
#line 666 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 177:
#line 670 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 178:
#line 671 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 179:
#line 672 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 181:
#line 676 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 182:
#line 677 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 183:
#line 678 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 186:
#line 683 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 187:
#line 684 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 188:
#line 687 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 189:
#line 688 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 190:
#line 689 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 191:
#line 690 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 192:
#line 691 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 193:
#line 692 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 194:
#line 693 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 195:
#line 699 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 196:
#line 700 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 201:
#line 704 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 202:
#line 705 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 333:
#line 792 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 334:
#line 793 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 335:
#line 795 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.setCurrentModule(bubble);
			;
    break;}
case 336:
#line 799 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 337:
#line 800 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 338:
#line 802 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->dump();
			;
    break;}
case 339:
#line 808 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 340:
#line 814 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.parse(bubble);
			;
    break;}
case 341:
#line 821 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 342:
#line 827 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.creduce(bubble);
			;
    break;}
case 343:
#line 834 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 344:
#line 840 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.reduce(bubble, yyvsp[-3].yyBool);
			;
    break;}
case 345:
#line 847 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 346:
#line 854 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.rewrite(bubble, number, yyvsp[-3].yyBool);
			;
    break;}
case 347:
#line 860 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 348:
#line 867 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    ;
			;
    break;}
case 349:
#line 873 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			  number2 = NONE;
			;
    break;}
case 350:
#line 881 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.fRewrite(bubble, number, number2, yyvsp[-3].yyBool);
			;
    break;}
case 351:
#line 887 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 352:
#line 894 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.search(bubble, number);
			;
    break;}
case 353:
#line 900 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 354:
#line 907 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.match(bubble, yyvsp[-2].yyBool, number);
			;
    break;}
case 355:
#line 913 "surface.yy"
{
			  interpreter.cont(yyvsp[-1].yyInt64, yyvsp[-3].yyBool);
			;
    break;}
case 356:
#line 917 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 357:
#line 923 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.loop(bubble);
			;
    break;}
case 358:
#line 928 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 359:
#line 930 "surface.yy"
{
			  lexerInitialMode();
			  moduleExpr.contractTo(0);
			  if (interpreter.setCurrentModule(moduleExpr))  // HACK
			    interpreter.contLoop(bubble);
			;
    break;}
case 360:
#line 937 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 361:
#line 939 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.traceSelect(yyvsp[-3].yyBool);
			;
    break;}
case 362:
#line 943 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 363:
#line 945 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.traceExclude(yyvsp[-3].yyBool);
			;
    break;}
case 364:
#line 949 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 365:
#line 951 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.breakSelect(yyvsp[-3].yyBool);
			;
    break;}
case 366:
#line 955 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 367:
#line 957 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.printConceal(yyvsp[-3].yyBool);
			;
    break;}
case 368:
#line 962 "surface.yy"
{
			  if (CM != 0)  // HACK
			    CM->getFlatSignature()->clearMemo();
			;
    break;}
case 369:
#line 969 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 370:
#line 971 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->showModule();
			;
    break;}
case 371:
#line 976 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 372:
#line 978 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->showModule();
			;
    break;}
case 373:
#line 983 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 374:
#line 985 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showModule(true);
			;
    break;}
case 375:
#line 990 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 376:
#line 992 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showSortsAndSubsorts();
			;
    break;}
case 377:
#line 997 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 378:
#line 999 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showOps();
			;
    break;}
case 379:
#line 1004 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 380:
#line 1006 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showVars();
			;
    break;}
case 381:
#line 1011 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 382:
#line 1013 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showMbs();
			;
    break;}
case 383:
#line 1018 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 384:
#line 1020 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showEqs();
			;
    break;}
case 385:
#line 1025 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 386:
#line 1027 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showRls();
			;
    break;}
case 387:
#line 1032 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 388:
#line 1034 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showSummary();
			;
    break;}
case 389:
#line 1039 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 390:
#line 1041 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showKinds();
			;
    break;}
case 391:
#line 1047 "surface.yy"
{
			  interpreter.showSearchPath(yyvsp[-1].yyInt64);
			;
    break;}
case 392:
#line 1051 "surface.yy"
{
			  interpreter.showSearchGraph();
			;
    break;}
case 393:
#line 1054 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 394:
#line 1056 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showProfile();
			;
    break;}
case 395:
#line 1065 "surface.yy"
{
			  globalAdvisoryFlag = yyvsp[-1].yyBool;
			;
    break;}
case 396:
#line 1069 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 397:
#line 1073 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_LOOP_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 398:
#line 1077 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_TIMING, yyvsp[-1].yyBool);
			;
    break;}
case 399:
#line 1081 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_BREAKDOWN, yyvsp[-1].yyBool);
			;
    break;}
case 400:
#line 1085 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_LOOP_TIMING, yyvsp[-1].yyBool);
			;
    break;}
case 401:
#line 1089 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_COMMAND, yyvsp[-1].yyBool);
			;
    break;}
case 402:
#line 1093 "surface.yy"
{
			  MemoryCell::setShowGC(yyvsp[-1].yyBool);
			;
    break;}
case 403:
#line 1097 "surface.yy"
{
			  MixfixModule::setPrintMixfix(yyvsp[-1].yyBool);
			;
    break;}
case 404:
#line 1101 "surface.yy"
{
			  MixfixModule::setPrintFlat(yyvsp[-1].yyBool);
			;
    break;}
case 405:
#line 1105 "surface.yy"
{
			  MixfixModule::setPrintWithAliases(yyvsp[-1].yyBool);
			;
    break;}
case 406:
#line 1109 "surface.yy"
{
			  MixfixModule::setPrintWithParens(yyvsp[-1].yyBool);
			;
    break;}
case 407:
#line 1113 "surface.yy"
{
			  MixfixModule::setPrintGraph(yyvsp[-1].yyBool);
			;
    break;}
case 408:
#line 1117 "surface.yy"
{
			  MixfixModule::setPrintConceal(yyvsp[-1].yyBool);
			;
    break;}
case 409:
#line 1121 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_NUMBER, yyvsp[-1].yyBool);
			;
    break;}
case 410:
#line 1125 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_RAT, yyvsp[-1].yyBool);
			;
    break;}
case 411:
#line 1129 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_COLOR, yyvsp[-1].yyBool);
			;
    break;}
case 412:
#line 1133 "surface.yy"
{
			  MixfixModule::setPrintFormat(yyvsp[-1].yyBool);
			;
    break;}
case 413:
#line 1137 "surface.yy"
{
			  interpreter.setFlag(Interpreter::TRACE, yyvsp[-1].yyBool);
			;
    break;}
case 414:
#line 1141 "surface.yy"
{
			  UserLevelRewritingContext::setTraceConditionFlag(yyvsp[-1].yyBool);
			;
    break;}
case 415:
#line 1145 "surface.yy"
{
			// ??? what is this supposed to do?
			;
    break;}
case 416:
#line 1149 "surface.yy"
{
			  UserLevelRewritingContext::setTraceWholeFlag(yyvsp[-1].yyBool);
			;
    break;}
case 417:
#line 1153 "surface.yy"
{
			  UserLevelRewritingContext::setTraceSubstitutionFlag(yyvsp[-1].yyBool);
			;
    break;}
case 418:
#line 1157 "surface.yy"
{
			  UserLevelRewritingContext::setTraceSelectFlag(yyvsp[-1].yyBool);
			;
    break;}
case 419:
#line 1161 "surface.yy"
{
			  UserLevelRewritingContext::setTraceScFlag(yyvsp[-1].yyBool);
			;
    break;}
case 420:
#line 1165 "surface.yy"
{
			  UserLevelRewritingContext::setTraceEqFlag(yyvsp[-1].yyBool);
			;
    break;}
case 421:
#line 1169 "surface.yy"
{
			  UserLevelRewritingContext::setTraceRuleFlag(yyvsp[-1].yyBool);
			;
    break;}
case 422:
#line 1173 "surface.yy"
{
			  interpreter.setFlag(Interpreter::BREAK, yyvsp[-1].yyBool);
			;
    break;}
case 423:
#line 1176 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 424:
#line 1177 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 425:
#line 1179 "surface.yy"
{
			  interpreter.setInclude(yyvsp[-3].yyToken, yyvsp[-1].yyBool);
			;
    break;}
case 426:
#line 1182 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 427:
#line 1183 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 428:
#line 1185 "surface.yy"
{
			  interpreter.setOmodInclude(yyvsp[-3].yyToken, yyvsp[-1].yyBool);
			;
    break;}
case 429:
#line 1189 "surface.yy"
{
			  globalVerboseFlag = yyvsp[-1].yyBool;
			;
    break;}
case 430:
#line 1193 "surface.yy"
{
			  interpreter.setFlag(Interpreter::AUTO_CLEAR_MEMO, yyvsp[-1].yyBool);
			;
    break;}
case 431:
#line 1197 "surface.yy"
{
			  interpreter.setFlag(Interpreter::COMPILE_COUNT, yyvsp[-1].yyBool);
			;
    break;}
case 432:
#line 1201 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PROFILE, yyvsp[-1].yyBool);
			;
    break;}
case 433:
#line 1205 "surface.yy"
{
			  interpreter.setFlag(Interpreter::AUTO_CLEAR_PROFILE, yyvsp[-1].yyBool);
			;
    break;}
case 434:
#line 1212 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::RESUME;
			;
    break;}
case 435:
#line 1216 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::ABORT;
			;
    break;}
case 436:
#line 1220 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::STEP;
			;
    break;}
case 437:
#line 1224 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::WHERE;
			;
    break;}
case 438:
#line 1231 "surface.yy"
{
			  MemoryCell::setShowGC(yyvsp[-1].yyBool);
			;
    break;}
case 439:
#line 1235 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 440:
#line 1241 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 442:
#line 1248 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 443:
#line 1249 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 444:
#line 1252 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 445:
#line 1253 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 446:
#line 1256 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 447:
#line 1257 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 448:
#line 1260 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 449:
#line 1261 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 450:
#line 1264 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 451:
#line 1265 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 452:
#line 1268 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 453:
#line 1269 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 454:
#line 1272 "surface.yy"
{ yyval.yyInt64 = yyvsp[0].yyInt64; ;
    break;}
case 455:
#line 1273 "surface.yy"
{ yyval.yyInt64 = NONE; ;
    break;}
case 456:
#line 1281 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 458:
#line 1283 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 460:
#line 1287 "surface.yy"
{ moduleExpr = bubble; clear(); ;
    break;}
case 461:
#line 1288 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 462:
#line 1289 "surface.yy"
{;
    break;}
case 463:
#line 1290 "surface.yy"
{;
    break;}
case 464:
#line 1299 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 466:
#line 1301 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 468:
#line 1303 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 470:
#line 1308 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 472:
#line 1310 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 474:
#line 1312 "surface.yy"
{;
    break;}
case 475:
#line 1317 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  clear();
			;
    break;}
case 477:
#line 1322 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 479:
#line 1324 "surface.yy"
{;
    break;}
case 480:
#line 1333 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 482:
#line 1335 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 484:
#line 1337 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 486:
#line 1342 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 488:
#line 1344 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 490:
#line 1346 "surface.yy"
{;
    break;}
case 491:
#line 1351 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  clear();
			;
    break;}
case 493:
#line 1356 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 495:
#line 1358 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 497:
#line 1360 "surface.yy"
{;
    break;}
case 498:
#line 1364 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 500:
#line 1366 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 502:
#line 1368 "surface.yy"
{;
    break;}
case 503:
#line 1373 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  number2 = Token::codeToInt64(bubble[3].code());
			  clear();
			;
    break;}
case 505:
#line 1379 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 507:
#line 1381 "surface.yy"
{;
    break;}
case 508:
#line 1387 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 510:
#line 1391 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 512:
#line 1396 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 522:
#line 1404 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 523:
#line 1405 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 531:
#line 1409 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 532:
#line 1410 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 539:
#line 1415 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 540:
#line 1416 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 548:
#line 1420 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 549:
#line 1421 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 556:
#line 1425 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 557:
#line 1426 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 564:
#line 1431 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 565:
#line 1432 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 572:
#line 1437 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 573:
#line 1438 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 579:
#line 1443 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 580:
#line 1444 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 583:
#line 1455 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  interpreter.addSelected(bubble);
			;
    break;}
case 584:
#line 1460 "surface.yy"
{ clear(); ;
    break;}
case 585:
#line 1462 "surface.yy"
{
			  interpreter.addSelected(bubble);
			;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/csl/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1492 "surface.yy"


static void
yyerror(char *s)
{
  if (!(UserLevelRewritingContext::interrupted()))
    IssueWarning(LineNumber(lineNumber) << ": " << s);
}

void
cleanUpParser()
{
  //bubble.contractTo(0);
  //moduleExpr.contractTo(0);
  //pattern.contractTo(0);
  interpreter.makeClean(lineNumber);
  /*
  if (currentModule != 0 && !(currentModule->isComplete()))
    {
      IssueAdvisory(cerr << LineNumber(lineNumber) << ": discarding incomplete module.");
      delete currentModule;
      currentModule = 0;
    }
  */
}
