
/*  A Bison parser, made from surface.yy
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FILE_NAME_STRING	257
#define	UNINTERPRETED_STRING	258
#define	LATEX_STRING	259
#define	KW_MOD	260
#define	KW_OMOD	261
#define	KW_PARSE	262
#define	KW_NORMALIZE	263
#define	KW_REDUCE	264
#define	KW_REWRITE	265
#define	KW_LOOP	266
#define	KW_NARROW	267
#define	KW_MATCH	268
#define	KW_XMATCH	269
#define	KW_UNIFY	270
#define	KW_XUNIFY	271
#define	KW_EREWRITE	272
#define	KW_FREWRITE	273
#define	KW_OREWRITE	274
#define	KW_CONTINUE	275
#define	KW_SEARCH	276
#define	KW_SET	277
#define	KW_SHOW	278
#define	KW_ON	279
#define	KW_OFF	280
#define	KW_TRACE	281
#define	KW_CONTEXT	282
#define	KW_WHOLE	283
#define	KW_SELECT	284
#define	KW_DESELECT	285
#define	KW_CONDITION	286
#define	KW_SUBSTITUTION	287
#define	KW_PRINT	288
#define	KW_GRAPH	289
#define	KW_MIXFIX	290
#define	KW_FLAT	291
#define	KW_WITH	292
#define	KW_PARENS	293
#define	KW_ALIASES	294
#define	KW_GC	295
#define	KW_TIME	296
#define	KW_STATS	297
#define	KW_TIMING	298
#define	KW_CMD	299
#define	KW_BREAKDOWN	300
#define	KW_BREAK	301
#define	KW_PATH	302
#define	KW_MODULE	303
#define	KW_MODULES	304
#define	KW_ALL	305
#define	KW_SORTS	306
#define	KW_OPS	307
#define	KW_VARS	308
#define	KW_MBS	309
#define	KW_EQS	310
#define	KW_RLS	311
#define	KW_SUMMARY	312
#define	KW_KINDS	313
#define	KW_ADVISE	314
#define	KW_VERBOSE	315
#define	KW_DO	316
#define	KW_CLEAR	317
#define	KW_PROTECT	318
#define	KW_EXTEND	319
#define	KW_INCLUDE	320
#define	KW_EXCLUDE	321
#define	KW_CONCEAL	322
#define	KW_REVEAL	323
#define	KW_COMPILE	324
#define	KW_COUNT	325
#define	KW_DEBUG	326
#define	KW_RESUME	327
#define	KW_ABORT	328
#define	KW_STEP	329
#define	KW_WHERE	330
#define	KW_CREDUCE	331
#define	KW_DUMP	332
#define	KW_PROFILE	333
#define	KW_NUMBER	334
#define	KW_RAT	335
#define	KW_COLOR	336
#define	SIMPLE_NUMBER	337
#define	KW_PWD	338
#define	KW_CD	339
#define	KW_PUSHD	340
#define	KW_POPD	341
#define	KW_LS	342
#define	KW_LOAD	343
#define	KW_QUIT	344
#define	KW_EOF	345
#define	KW_ENDM	346
#define	KW_IMPORT	347
#define	KW_SORT	348
#define	KW_SUBSORT	349
#define	KW_OP	350
#define	KW_MSGS	351
#define	KW_VAR	352
#define	KW_CLASS	353
#define	KW_SUBCLASS	354
#define	KW_MB	355
#define	KW_CMB	356
#define	KW_EQ	357
#define	KW_CEQ	358
#define	KW_RL	359
#define	KW_CRL	360
#define	KW_IS	361
#define	KW_ARROW	362
#define	KW_ARROW2	363
#define	KW_PARTIAL	364
#define	KW_IF	365
#define	KW_LABEL	366
#define	KW_TO	367
#define	KW_ASSOC	368
#define	KW_COMM	369
#define	KW_ID	370
#define	KW_IDEM	371
#define	KW_ITER	372
#define	KW_LEFT	373
#define	KW_RIGHT	374
#define	KW_PREC	375
#define	KW_GATHER	376
#define	KW_STRAT	377
#define	KW_POLY	378
#define	KW_MEMO	379
#define	KW_FROZEN	380
#define	KW_CTOR	381
#define	KW_LATEX	382
#define	KW_SPECIAL	383
#define	KW_CONFIG	384
#define	KW_OBJ	385
#define	KW_MSG	386
#define	KW_DITTO	387
#define	KW_FORMAT	388
#define	KW_ID_HOOK	389
#define	KW_OP_HOOK	390
#define	KW_TERM_HOOK	391
#define	KW_IN	392
#define	IDENTIFIER	393
#define	NUMERIC_ID	394
#define	ENDS_IN_DOT	395

#line 27 "surface.yy"

#include <string>
#include <stack>

//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "renaming.hh"
#include "moduleExpression.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "visibleModule.hh"  // HACK
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

#include "main.hh"
#define clear()		bubble.contractTo(0);
#define store(token)	bubble.append(token)
#define YYPARSE_PARAM	parseResult
#define PARSE_RESULT	(*((UserLevelRewritingContext::ParseResult*) parseResult))

#define CM		interpreter.getCurrentModule()

void lexerInitialMode();
void lexerIdMode();
void lexerCmdMode();
void lexerFileNameMode();
void lexerStringMode();
void lexerLatexMode();
bool handleEof();
bool includeFile(const string& directory, const string& fileName, bool silent, int lineNr);
void eatComment(bool firstNonWhite);

Vector<Token> bubble;
Vector<Token> moduleExpr;
stack<ModuleExpression*> moduleExpressions;
Renaming* currentRenaming = 0;

Int64 number;
Int64 number2;

static void yyerror(char *s);

void cleanUpModuleExpression();
void cleanUpParser();

#line 88 "surface.yy"
typedef union
{
  bool yyBool;
  Int64 yyInt64;
  const char* yyString;
  Token yyToken;
  ImportModule::ImportMode yyImportMode;
} YYSTYPE;
#line 97 "surface.yy"

int yylex(YYSTYPE* lvalp);
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1039
#define	YYFLAG		-32768
#define	YYNTBASE	154

#define YYTRANSLATE(x) ((unsigned)(x) <= 395 ? yytranslate[x] : 389)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   114,
   115,   125,   124,   120,     2,   116,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   112,     2,   117,
   113,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   118,     2,   119,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,   121,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   122,   123,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,     9,    10,    14,    15,    19,
    21,    22,    26,    27,    31,    33,    34,    38,    40,    42,
    45,    49,    51,    53,    57,    61,    65,    67,    68,    73,
    77,    79,    84,    89,    96,    97,   101,   102,   107,   112,
   113,   116,   117,   119,   120,   125,   126,   130,   131,   136,
   140,   141,   144,   146,   149,   150,   156,   157,   163,   164,
   170,   171,   172,   180,   182,   184,   186,   189,   191,   194,
   196,   198,   200,   203,   204,   207,   208,   213,   214,   219,
   223,   227,   232,   233,   234,   241,   242,   243,   244,   254,
   255,   256,   263,   264,   265,   266,   276,   277,   278,   285,
   286,   287,   288,   298,   302,   306,   307,   313,   314,   319,
   322,   324,   327,   329,   333,   337,   340,   342,   343,   347,
   348,   353,   356,   358,   360,   361,   366,   371,   375,   377,
   379,   381,   384,   385,   387,   388,   393,   397,   399,   403,
   404,   407,   409,   411,   414,   417,   419,   421,   422,   426,
   428,   430,   433,   434,   440,   441,   447,   448,   454,   455,
   461,   463,   465,   467,   468,   474,   476,   478,   480,   481,
   487,   492,   494,   497,   499,   502,   504,   507,   508,   515,
   516,   523,   524,   531,   534,   535,   538,   541,   542,   547,
   548,   554,   557,   558,   559,   565,   568,   569,   570,   576,
   579,   580,   581,   587,   590,   591,   592,   598,   601,   602,
   603,   609,   612,   613,   614,   620,   623,   624,   626,   629,
   631,   632,   637,   638,   644,   647,   650,   652,   654,   657,
   659,   661,   663,   665,   666,   671,   673,   675,   677,   679,
   681,   683,   685,   687,   689,   691,   693,   695,   697,   699,
   701,   703,   705,   707,   709,   711,   713,   715,   717,   719,
   721,   723,   725,   727,   729,   731,   733,   735,   737,   739,
   741,   743,   745,   747,   749,   751,   753,   755,   757,   759,
   761,   763,   765,   767,   769,   771,   773,   775,   777,   779,
   781,   783,   785,   787,   789,   791,   793,   795,   797,   799,
   801,   803,   805,   807,   809,   811,   813,   815,   817,   819,
   821,   823,   825,   827,   829,   831,   833,   835,   837,   839,
   841,   843,   845,   847,   849,   851,   853,   855,   857,   859,
   861,   863,   865,   867,   869,   871,   873,   875,   877,   879,
   881,   883,   885,   887,   889,   891,   893,   895,   897,   899,
   901,   903,   905,   907,   909,   911,   913,   915,   917,   919,
   921,   923,   925,   927,   929,   931,   933,   935,   937,   939,
   941,   943,   945,   947,   949,   951,   953,   955,   957,   959,
   961,   963,   965,   967,   969,   971,   973,   975,   977,   979,
   981,   983,   985,   987,   989,   991,   993,   995,   997,   999,
  1001,  1003,  1005,  1007,  1009,  1011,  1013,  1014,  1015,  1022,
  1023,  1024,  1031,  1032,  1036,  1037,  1041,  1042,  1047,  1048,
  1053,  1054,  1059,  1060,  1065,  1066,  1070,  1071,  1075,  1080,
  1081,  1085,  1086,  1091,  1092,  1098,  1099,  1105,  1106,  1112,
  1113,  1119,  1124,  1125,  1131,  1132,  1138,  1139,  1145,  1149,
  1150,  1156,  1157,  1163,  1164,  1170,  1171,  1177,  1178,  1184,
  1185,  1191,  1192,  1198,  1199,  1205,  1210,  1215,  1216,  1222,
  1228,  1234,  1241,  1247,  1253,  1260,  1266,  1272,  1278,  1284,
  1291,  1298,  1304,  1310,  1316,  1322,  1328,  1334,  1339,  1345,
  1351,  1357,  1363,  1369,  1375,  1381,  1387,  1392,  1393,  1394,
  1402,  1403,  1404,  1413,  1418,  1424,  1430,  1435,  1441,  1444,
  1447,  1450,  1453,  1459,  1464,  1465,  1469,  1471,  1473,  1475,
  1477,  1479,  1481,  1483,  1485,  1487,  1489,  1491,  1492,  1494,
  1495,  1497,  1499,  1501,  1502,  1507,  1508,  1513,  1514,  1515,
  1522,  1524,  1525,  1529,  1530,  1535,  1536,  1541,  1542,  1546,
  1547,  1552,  1554,  1555,  1559,  1560,  1565,  1567,  1568,  1572,
  1573,  1578,  1579,  1584,  1585,  1589,  1590,  1595,  1597,  1598,
  1602,  1603,  1607,  1608,  1613,  1615,  1616,  1620,  1621,  1626,
  1628,  1629,  1633,  1634,  1639,  1641,  1644,  1645,  1648,  1649,
  1652,  1653,  1655,  1657,  1659,  1661,  1663,  1665,  1667,  1669,
  1670,  1675,  1677,  1679,  1681,  1683,  1685,  1687,  1689,  1690,
  1695,  1697,  1699,  1701,  1703,  1705,  1707,  1708,  1713,  1715,
  1717,  1719,  1721,  1723,  1725,  1727,  1728,  1733,  1735,  1737,
  1739,  1741,  1743,  1745,  1746,  1751,  1753,  1755,  1757,  1759,
  1761,  1763,  1764,  1769,  1771,  1773,  1775,  1777,  1779,  1781,
  1782,  1787,  1789,  1791,  1793,  1795,  1797,  1798,  1803,  1806,
  1808,  1810,  1811,  1816,  1818,  1820,  1822,  1824,  1826,  1828
};

static const short yyrhs[] = {   155,
     0,     0,   185,     0,   156,     0,   289,     0,     0,   150,
   157,     3,     0,     0,    89,   158,     3,     0,    84,     0,
     0,    85,   159,     3,     0,     0,    86,   160,     3,     0,
    87,     0,     0,    88,   161,     4,     0,    90,     0,    91,
     0,   164,   116,     0,   163,   124,   162,     0,   153,     0,
   164,     0,   163,   124,   163,     0,   114,   163,   115,     0,
   164,   125,   165,     0,   272,     0,     0,   114,   166,   167,
   115,     0,   167,   120,   168,     0,   168,     0,    94,   281,
   123,   281,     0,   122,   272,   123,   272,     0,    96,   169,
   172,   123,   176,   179,     0,     0,   272,   170,   255,     0,
     0,   114,   171,   251,   115,     0,   112,   173,   226,   174,
     0,     0,   173,   174,     0,     0,   281,     0,     0,   118,
   175,   230,   119,     0,     0,   272,   177,   257,     0,     0,
   114,   178,   251,   115,     0,   118,   180,   119,     0,     0,
   180,   181,     0,   181,     0,   133,   151,     0,     0,   134,
   114,   182,   242,   115,     0,     0,   146,   114,   183,   242,
   115,     0,     0,   140,   114,   184,     5,   115,     0,     0,
     0,   192,   186,   272,   107,   187,   193,    92,     0,   116,
     0,   153,     0,   153,     0,   228,   116,     0,   189,     0,
   265,   188,     0,   153,     0,     6,     0,     7,     0,   193,
   194,     0,     0,    93,   162,     0,     0,    94,   195,   248,
   188,     0,     0,    95,   196,   249,   188,     0,    96,   218,
   224,     0,    53,   221,   224,     0,    98,   217,   112,   190,
     0,     0,     0,   101,   197,   253,   112,   198,   191,     0,
     0,     0,     0,   102,   199,   253,   112,   200,   263,   111,
   201,   191,     0,     0,     0,   103,   202,   259,   113,   203,
   191,     0,     0,     0,     0,   104,   204,   259,   113,   205,
   263,   111,   206,   191,     0,     0,     0,   105,   207,   261,
   109,   208,   191,     0,     0,     0,     0,   106,   209,   261,
   109,   210,   263,   111,   211,   191,     0,   144,   218,   224,
     0,    97,   221,   224,     0,     0,    99,   272,   212,   214,
   116,     0,     0,   100,   213,   249,   188,     0,     1,   116,
     0,   121,     0,   121,   215,     0,   216,     0,   215,   120,
   216,     0,   273,   112,   272,     0,   217,   278,     0,   278,
     0,     0,   272,   219,   253,     0,     0,   114,   220,   251,
   115,     0,   221,   222,     0,   222,     0,   278,     0,     0,
   114,   223,   251,   115,     0,   112,   227,   226,   225,     0,
   228,   231,   116,     0,   189,     0,   108,     0,   110,     0,
   227,   228,     0,     0,   281,     0,     0,   118,   229,   230,
   119,     0,   230,   120,   281,     0,   281,     0,   118,   232,
   119,     0,     0,   232,   234,     0,   234,     0,   128,     0,
   131,   128,     0,   132,   128,     0,   126,     0,   127,     0,
     0,   233,   235,   269,     0,   129,     0,   130,     0,   133,
   151,     0,     0,   134,   114,   236,   242,   115,     0,     0,
   146,   114,   237,   242,   115,     0,     0,   135,   114,   238,
   242,   115,     0,     0,   136,   114,   239,   242,   115,     0,
   137,     0,   139,     0,   138,     0,     0,   138,   114,   240,
   242,   115,     0,   142,     0,   143,     0,   144,     0,     0,
   140,   114,   241,     5,   115,     0,   141,   114,   243,   115,
     0,   145,     0,   242,   151,     0,   151,     0,   243,   244,
     0,   244,     0,   147,   272,     0,     0,   147,   272,   114,
   245,   251,   115,     0,     0,   148,   272,   114,   246,   251,
   115,     0,     0,   149,   272,   114,   247,   251,   115,     0,
   248,   281,     0,     0,   249,   281,     0,   249,   117,     0,
     0,   281,   250,   248,   117,     0,     0,   251,   114,   252,
   251,   115,     0,   251,   272,     0,     0,     0,   253,   114,
   254,   251,   115,     0,   253,   278,     0,     0,     0,   255,
   114,   256,   251,   115,     0,   255,   279,     0,     0,     0,
   257,   114,   258,   251,   115,     0,   257,   280,     0,     0,
     0,   259,   114,   260,   251,   115,     0,   259,   276,     0,
     0,     0,   261,   114,   262,   251,   115,     0,   261,   275,
     0,     0,     0,   263,   114,   264,   251,   115,     0,   263,
   277,     0,     0,   266,     0,   265,   282,     0,   282,     0,
     0,   114,   267,   251,   115,     0,     0,   265,   114,   268,
   251,   115,     0,   266,   284,     0,   265,   274,     0,   273,
     0,   270,     0,   269,   270,     0,   283,     0,   285,     0,
   286,     0,   116,     0,     0,   114,   271,   251,   115,     0,
   283,     0,   284,     0,   286,     0,   287,     0,   116,     0,
   151,     0,   120,     0,   121,     0,   122,     0,   123,     0,
   124,     0,   125,     0,   284,     0,   286,     0,   287,     0,
   151,     0,   120,     0,   121,     0,   122,     0,   123,     0,
   124,     0,   125,     0,   286,     0,   287,     0,   283,     0,
   284,     0,   287,     0,   116,     0,   117,     0,   112,     0,
   108,     0,   110,     0,   113,     0,   111,     0,   107,     0,
   283,     0,   284,     0,   287,     0,   116,     0,   117,     0,
   112,     0,   108,     0,   110,     0,   109,     0,   111,     0,
   107,     0,   283,     0,   284,     0,   287,     0,   116,     0,
   117,     0,   112,     0,   108,     0,   110,     0,   113,     0,
   109,     0,   107,     0,   283,     0,   284,     0,   287,     0,
   116,     0,   117,     0,   108,     0,   110,     0,   113,     0,
   109,     0,   111,     0,   107,     0,   151,     0,   153,     0,
   120,     0,   121,     0,   122,     0,   124,     0,   125,     0,
   284,     0,   287,     0,   116,     0,   117,     0,   108,     0,
   110,     0,   113,     0,   109,     0,   111,     0,   107,     0,
   151,     0,   153,     0,   121,     0,   122,     0,   123,     0,
   124,     0,   125,     0,   284,     0,   288,     0,   116,     0,
   119,     0,   286,     0,   151,     0,   284,     0,   288,     0,
   113,     0,   121,     0,   124,     0,   125,     0,   109,     0,
   111,     0,   107,     0,   122,     0,   123,     0,   116,     0,
   153,     0,   151,     0,   153,     0,   120,     0,   121,     0,
   122,     0,   123,     0,   124,     0,   125,     0,   144,     0,
   285,     0,    93,     0,    94,     0,    95,     0,    96,     0,
    53,     0,    98,     0,    97,     0,    99,     0,   100,     0,
   101,     0,   102,     0,   103,     0,   104,     0,   105,     0,
   106,     0,    92,     0,   117,     0,   112,     0,   108,     0,
   110,     0,   113,     0,   109,     0,   111,     0,   107,     0,
   118,     0,   119,     0,   288,     0,   126,     0,   127,     0,
   128,     0,   129,     0,   130,     0,   131,     0,   132,     0,
   133,     0,   134,     0,   135,     0,   136,     0,   137,     0,
   139,     0,   140,     0,   141,     0,   138,     0,   142,     0,
   143,     0,   145,     0,   146,     0,   147,     0,   148,     0,
   149,     0,     0,     0,    30,   290,   369,   291,   367,   116,
     0,     0,     0,    78,   292,   369,   293,   367,   116,     0,
     0,     8,   294,   333,     0,     0,    77,   295,   333,     0,
     0,   330,    10,   296,   333,     0,     0,   330,    11,   297,
   339,     0,     0,   330,    18,   298,   339,     0,     0,   330,
    19,   299,   349,     0,     0,    22,   300,   339,     0,     0,
   329,   301,   339,     0,   330,    21,   331,   116,     0,     0,
    12,   302,   333,     0,     0,   114,   303,   366,   115,     0,
     0,    27,   326,   304,   385,   116,     0,     0,    27,   327,
   305,   385,   116,     0,     0,    47,   326,   306,   385,   116,
     0,     0,    34,   328,   307,   385,   116,     0,    62,    63,
   137,   116,     0,     0,    24,     6,   308,   367,   116,     0,
     0,    24,    49,   309,   367,   116,     0,     0,    24,    51,
   310,   367,   116,     0,    24,    50,   116,     0,     0,    24,
    52,   311,   367,   116,     0,     0,    24,    53,   312,   367,
   116,     0,     0,    24,    54,   313,   367,   116,     0,     0,
    24,    55,   314,   367,   116,     0,     0,    24,    56,   315,
   367,   116,     0,     0,    24,    57,   316,   367,   116,     0,
     0,    24,    58,   317,   367,   116,     0,     0,    24,    59,
   318,   367,   116,     0,    24,    48,    83,   116,     0,    24,
    22,    35,   116,     0,     0,    24,    79,   319,   367,   116,
     0,    23,    24,    60,   325,   116,     0,    23,    24,    43,
   325,   116,     0,    23,    24,    12,    43,   325,   116,     0,
    23,    24,    44,   325,   116,     0,    23,    24,    46,   325,
   116,     0,    23,    24,    12,    44,   325,   116,     0,    23,
    24,    45,   325,   116,     0,    23,    24,    41,   325,   116,
     0,    23,    34,    36,   325,   116,     0,    23,    34,    37,
   325,   116,     0,    23,    34,    38,    40,   325,   116,     0,
    23,    34,    38,    39,   325,   116,     0,    23,    34,    35,
   325,   116,     0,    23,    34,    68,   325,   116,     0,    23,
    34,    80,   325,   116,     0,    23,    34,    81,   325,   116,
     0,    23,    34,    82,   325,   116,     0,    23,    34,   146,
   325,   116,     0,    23,    27,   325,   116,     0,    23,    27,
    32,   325,   116,     0,    23,    27,    28,   325,   116,     0,
    23,    27,    29,   325,   116,     0,    23,    27,    33,   325,
   116,     0,    23,    27,    30,   325,   116,     0,    23,    27,
    55,   325,   116,     0,    23,    27,    56,   325,   116,     0,
    23,    27,    57,   325,   116,     0,    23,    47,   325,   116,
     0,     0,     0,    23,   332,   320,   388,   321,   325,   116,
     0,     0,     0,    23,     7,    66,   322,   388,   323,   325,
   116,     0,    23,    61,   325,   116,     0,    23,    63,   137,
   325,   116,     0,    23,    70,    71,   325,   116,     0,    23,
    79,   325,   116,     0,    23,    63,    79,   325,   116,     0,
    73,   116,     0,    74,   116,     0,    75,   116,     0,    76,
   116,     0,    23,    41,    24,   325,   116,     0,    23,    43,
   325,   116,     0,     0,     1,   324,   116,     0,    25,     0,
    26,     0,    30,     0,    31,     0,    67,     0,    66,     0,
    68,     0,    69,     0,    15,     0,    14,     0,    72,     0,
     0,    83,     0,     0,    64,     0,    65,     0,    66,     0,
     0,   150,   334,   368,   336,     0,     0,   375,   335,   367,
   116,     0,     0,     0,   112,   337,   369,   338,   367,   116,
     0,   116,     0,     0,   118,   340,   343,     0,     0,   150,
   341,   368,   336,     0,     0,   377,   342,   367,   116,     0,
     0,   152,   344,   346,     0,     0,   379,   345,   367,   116,
     0,   116,     0,     0,   119,   347,   333,     0,     0,   381,
   348,   367,   116,     0,   116,     0,     0,   118,   350,   353,
     0,     0,   150,   351,   368,   336,     0,     0,   377,   352,
   367,   116,     0,     0,   152,   354,   356,     0,     0,   379,
   355,   367,   116,     0,   116,     0,     0,   119,   357,   333,
     0,     0,   120,   358,   360,     0,     0,   383,   359,   367,
   116,     0,   116,     0,     0,   152,   361,   363,     0,     0,
   379,   362,   367,   116,     0,   116,     0,     0,   119,   364,
   333,     0,     0,   381,   365,   367,   116,     0,   116,     0,
   366,   369,     0,     0,   367,   371,     0,     0,   368,   373,
     0,     0,   151,     0,   152,     0,   118,     0,   119,     0,
   150,     0,   112,     0,   116,     0,   120,     0,     0,   114,
   370,   366,   115,     0,   151,     0,   152,     0,   118,     0,
   119,     0,   150,     0,   112,     0,   120,     0,     0,   114,
   372,   366,   115,     0,   151,     0,   152,     0,   118,     0,
   119,     0,   150,     0,   120,     0,     0,   114,   374,   366,
   115,     0,   151,     0,   152,     0,   118,     0,   119,     0,
   112,     0,   116,     0,   120,     0,     0,   114,   376,   366,
   115,     0,   151,     0,   152,     0,   119,     0,   112,     0,
   116,     0,   120,     0,     0,   114,   378,   366,   115,     0,
   151,     0,   118,     0,   119,     0,   150,     0,   112,     0,
   120,     0,     0,   114,   380,   366,   115,     0,   151,     0,
   152,     0,   118,     0,   150,     0,   112,     0,   120,     0,
     0,   114,   382,   366,   115,     0,   151,     0,   152,     0,
   118,     0,   150,     0,   112,     0,     0,   114,   384,   366,
   115,     0,   385,   386,     0,   386,     0,   388,     0,     0,
   114,   387,   366,   115,     0,   151,     0,   152,     0,   118,
     0,   119,     0,   150,     0,   112,     0,   120,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   196,   197,   203,   204,   205,   211,   213,   221,   223,   231,
   235,   237,   246,   248,   257,   268,   270,   273,   278,   311,
   312,   320,   330,   331,   341,   342,   349,   358,   362,   365,
   366,   369,   373,   377,   380,   382,   385,   386,   392,   393,
   396,   397,   400,   406,   407,   413,   414,   415,   416,   419,
   420,   423,   424,   427,   428,   429,   430,   431,   432,   433,
   439,   440,   445,   453,   454,   464,   476,   477,   480,   481,
   491,   491,   494,   495,   498,   505,   506,   508,   509,   511,
   513,   515,   517,   518,   519,   521,   522,   523,   524,   526,
   527,   528,   530,   531,   532,   533,   535,   536,   537,   539,
   540,   541,   542,   544,   549,   554,   557,   561,   562,   564,
   575,   576,   579,   580,   583,   588,   589,   592,   593,   594,
   595,   598,   599,   602,   608,   609,   612,   619,   620,   623,
   624,   627,   628,   631,   637,   638,   644,   645,   648,   649,
   652,   653,   656,   660,   664,   670,   674,   678,   679,   680,
   684,   688,   689,   690,   691,   692,   693,   694,   695,   696,
   697,   701,   705,   710,   711,   712,   716,   720,   724,   725,
   726,   727,   733,   734,   737,   738,   741,   746,   747,   751,
   752,   756,   757,   766,   767,   770,   771,   772,   773,   779,
   780,   781,   782,   785,   786,   787,   788,   791,   792,   793,
   794,   797,   798,   799,   800,   803,   804,   805,   806,   809,
   810,   811,   812,   815,   816,   817,   818,   821,   822,   823,
   826,   827,   828,   829,   830,   831,   832,   838,   839,   842,
   842,   842,   842,   843,   844,   850,   850,   850,   850,   850,
   853,   853,   853,   853,   853,   853,   853,   854,   854,   854,
   857,   857,   857,   857,   857,   857,   857,   858,   858,   861,
   861,   861,   861,   862,   862,   862,   862,   862,   862,   862,
   865,   865,   865,   865,   866,   866,   866,   866,   866,   866,
   866,   869,   869,   869,   869,   870,   870,   870,   870,   870,
   870,   870,   873,   873,   873,   873,   874,   874,   874,   874,
   874,   874,   874,   877,   877,   877,   877,   877,   877,   877,
   878,   878,   878,   879,   879,   879,   879,   879,   879,   879,
   882,   882,   882,   882,   882,   882,   882,   883,   883,   883,
   883,   883,   886,   886,   886,   887,   887,   887,   887,   888,
   888,   888,   888,   888,   891,   891,   897,   897,   897,   897,
   897,   897,   897,   897,   900,   900,   903,   903,   903,   903,
   903,   903,   904,   904,   904,   905,   905,   905,   905,   905,
   905,   905,   908,   908,   908,   908,   908,   908,   908,   908,
   911,   911,   911,   914,   914,   914,   914,   914,   914,   914,
   915,   915,   915,   915,   915,   915,   916,   916,   916,   917,
   917,   917,   917,   918,   918,   918,   945,   946,   947,   952,
   953,   954,   960,   967,   973,   980,   986,   993,   999,  1007,
  1012,  1020,  1025,  1034,  1039,  1047,  1052,  1060,  1065,  1069,
  1076,  1081,  1082,  1090,  1091,  1096,  1097,  1102,  1103,  1108,
  1109,  1114,  1122,  1123,  1129,  1130,  1136,  1137,  1143,  1147,
  1148,  1154,  1155,  1161,  1162,  1168,  1169,  1175,  1176,  1182,
  1183,  1189,  1190,  1196,  1197,  1203,  1207,  1211,  1212,  1221,
  1225,  1229,  1233,  1237,  1241,  1245,  1249,  1253,  1257,  1261,
  1265,  1269,  1273,  1277,  1281,  1285,  1289,  1293,  1297,  1301,
  1305,  1309,  1313,  1317,  1321,  1325,  1329,  1333,  1334,  1335,
  1339,  1340,  1341,  1345,  1349,  1353,  1357,  1361,  1368,  1372,
  1376,  1380,  1387,  1391,  1398,  1400,  1405,  1406,  1409,  1410,
  1413,  1414,  1417,  1418,  1421,  1422,  1425,  1426,  1429,  1430,
  1433,  1434,  1435,  1443,  1444,  1445,  1446,  1449,  1450,  1451,
  1452,  1461,  1463,  1463,  1464,  1465,  1466,  1470,  1472,  1472,
  1473,  1474,  1478,  1484,  1484,  1485,  1486,  1495,  1497,  1497,
  1498,  1499,  1500,  1504,  1506,  1506,  1507,  1508,  1512,  1518,
  1518,  1520,  1520,  1521,  1522,  1526,  1528,  1528,  1529,  1530,
  1534,  1541,  1541,  1542,  1543,  1549,  1550,  1553,  1554,  1558,
  1559,  1565,  1565,  1565,  1565,  1565,  1565,  1565,  1565,  1566,
  1567,  1570,  1570,  1570,  1570,  1570,  1570,  1570,  1571,  1572,
  1576,  1576,  1576,  1576,  1576,  1576,  1577,  1578,  1581,  1581,
  1581,  1581,  1581,  1581,  1581,  1582,  1583,  1586,  1586,  1586,
  1586,  1586,  1586,  1587,  1588,  1592,  1592,  1592,  1592,  1592,
  1592,  1593,  1594,  1598,  1598,  1598,  1598,  1598,  1598,  1599,
  1600,  1604,  1604,  1604,  1604,  1604,  1605,  1606,  1612,  1613,
  1616,  1622,  1623,  1630,  1630,  1630,  1630,  1630,  1630,  1630
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FILE_NAME_STRING",
"UNINTERPRETED_STRING","LATEX_STRING","KW_MOD","KW_OMOD","KW_PARSE","KW_NORMALIZE",
"KW_REDUCE","KW_REWRITE","KW_LOOP","KW_NARROW","KW_MATCH","KW_XMATCH","KW_UNIFY",
"KW_XUNIFY","KW_EREWRITE","KW_FREWRITE","KW_OREWRITE","KW_CONTINUE","KW_SEARCH",
"KW_SET","KW_SHOW","KW_ON","KW_OFF","KW_TRACE","KW_CONTEXT","KW_WHOLE","KW_SELECT",
"KW_DESELECT","KW_CONDITION","KW_SUBSTITUTION","KW_PRINT","KW_GRAPH","KW_MIXFIX",
"KW_FLAT","KW_WITH","KW_PARENS","KW_ALIASES","KW_GC","KW_TIME","KW_STATS","KW_TIMING",
"KW_CMD","KW_BREAKDOWN","KW_BREAK","KW_PATH","KW_MODULE","KW_MODULES","KW_ALL",
"KW_SORTS","KW_OPS","KW_VARS","KW_MBS","KW_EQS","KW_RLS","KW_SUMMARY","KW_KINDS",
"KW_ADVISE","KW_VERBOSE","KW_DO","KW_CLEAR","KW_PROTECT","KW_EXTEND","KW_INCLUDE",
"KW_EXCLUDE","KW_CONCEAL","KW_REVEAL","KW_COMPILE","KW_COUNT","KW_DEBUG","KW_RESUME",
"KW_ABORT","KW_STEP","KW_WHERE","KW_CREDUCE","KW_DUMP","KW_PROFILE","KW_NUMBER",
"KW_RAT","KW_COLOR","SIMPLE_NUMBER","KW_PWD","KW_CD","KW_PUSHD","KW_POPD","KW_LS",
"KW_LOAD","KW_QUIT","KW_EOF","KW_ENDM","KW_IMPORT","KW_SORT","KW_SUBSORT","KW_OP",
"KW_MSGS","KW_VAR","KW_CLASS","KW_SUBCLASS","KW_MB","KW_CMB","KW_EQ","KW_CEQ",
"KW_RL","KW_CRL","KW_IS","KW_ARROW","KW_ARROW2","KW_PARTIAL","KW_IF","':'","'='",
"'('","')'","'.'","'<'","'['","']'","','","'|'","KW_LABEL","KW_TO","'+'","'*'",
"KW_ASSOC","KW_COMM","KW_ID","KW_IDEM","KW_ITER","KW_LEFT","KW_RIGHT","KW_PREC",
"KW_GATHER","KW_STRAT","KW_POLY","KW_MEMO","KW_FROZEN","KW_CTOR","KW_LATEX",
"KW_SPECIAL","KW_CONFIG","KW_OBJ","KW_MSG","KW_DITTO","KW_FORMAT","KW_ID_HOOK",
"KW_OP_HOOK","KW_TERM_HOOK","KW_IN","IDENTIFIER","NUMERIC_ID","ENDS_IN_DOT",
"top","item","directive","@1","@2","@3","@4","@5","moduleExprDot","moduleExpr",
"moduleExpr2","renaming","@6","mappingList","mapping","fromOpName","@7","@8",
"fromSpec","fromTypeList","fromType","@9","toOpName","@10","@11","toAttributes",
"toAttributeList","toAttribute","@12","@13","@14","module","@15","@16","dot",
"badType","typeDot","endStatement","startModule","decList","declaration","@17",
"@18","@19","@20","@21","@22","@23","@24","@25","@26","@27","@28","@29","@30",
"@31","@32","@33","@34","@35","classDef","cPairList","cPair","varNameList","opName",
"@36","@37","opNameList","simpleOpName","@38","domainRangeAttr","typeAttr","arrow",
"typeList","type","@39","sortTokens","attributes","attributeList","idKeyword",
"attribute","@40","@41","@42","@43","@44","@45","@46","idList","hookList","hook",
"@47","@48","@49","sortTokenList","subsortList","@50","tokens","@51","tokensBarColon",
"@52","tokensBarColonTo","@53","tokensBarCommaLeft","@54","tokensBarEqual","@55",
"tokensBarArrow2","@56","tokensBarIf","@57","endTokens","noTrailingDot","@58",
"@59","identity","identityChunk","@60","token","tokenBarDot","endToken","tokenBarArrow2",
"tokenBarEqual","tokenBarIf","tokenBarColon","tokenBarColonTo","tokenBarCommaLeft",
"sortToken","endsInDot","identifier","startKeyword","startKeyword2","midKeyword",
"attrKeyword","attrKeyword2","command","@61","@62","@63","@64","@65","@66","@67",
"@68","@69","@70","@71","@72","@73","@74","@75","@76","@77","@78","@79","@80",
"@81","@82","@83","@84","@85","@86","@87","@88","@89","@90","@91","@92","@93",
"@94","@95","polarity","select","exclude","conceal","match","optDebug","optNumber",
"importMode","moduleAndTerm","@96","@97","inEnd","@98","@99","numberModuleTerm",
"@100","@101","@102","numberModuleTerm1","@103","@104","numberModuleTerm2","@105",
"@106","numbersModuleTerm","@107","@108","@109","numbersModuleTerm1","@110",
"@111","numbersModuleTerm2","@112","@113","@114","numbersModuleTerm3","@115",
"@116","numbersModuleTerm4","@117","@118","cTokens","cTokensBarDot","cTokensBarDotColon",
"cToken","@119","cTokenBarDot","@120","cTokenBarDotColon","@121","cTokenBarIn",
"@122","cTokenBarLeftIn","@123","cTokenBarDotNumber","@124","cTokenBarDotRight",
"@125","cTokenBarDotCommaRight","@126","cOpNameList","cSimpleOpName","@127",
"cSimpleTokenBarDot", NULL
};
#endif

static const short yyr1[] = {     0,
   154,   154,   155,   155,   155,   157,   156,   158,   156,   156,
   159,   156,   160,   156,   156,   161,   156,   156,   156,   162,
   162,   162,   163,   163,   164,   164,   164,   166,   165,   167,
   167,   168,   168,   168,   170,   169,   171,   169,   172,   172,
   173,   173,   174,   175,   174,   177,   176,   178,   176,   179,
   179,   180,   180,   181,   182,   181,   183,   181,   184,   181,
   186,   187,   185,   188,   188,   189,   190,   190,   191,   191,
   192,   192,   193,   193,   194,   195,   194,   196,   194,   194,
   194,   194,   197,   198,   194,   199,   200,   201,   194,   202,
   203,   194,   204,   205,   206,   194,   207,   208,   194,   209,
   210,   211,   194,   194,   194,   212,   194,   213,   194,   194,
   214,   214,   215,   215,   216,   217,   217,   219,   218,   220,
   218,   221,   221,   222,   223,   222,   224,   225,   225,   226,
   226,   227,   227,   228,   229,   228,   230,   230,   231,   231,
   232,   232,   233,   233,   233,   234,   234,   235,   234,   234,
   234,   234,   236,   234,   237,   234,   238,   234,   239,   234,
   234,   234,   234,   240,   234,   234,   234,   234,   241,   234,
   234,   234,   242,   242,   243,   243,   244,   245,   244,   246,
   244,   247,   244,   248,   248,   249,   249,   250,   249,   252,
   251,   251,   251,   254,   253,   253,   253,   256,   255,   255,
   255,   258,   257,   257,   257,   260,   259,   259,   259,   262,
   261,   261,   261,   264,   263,   263,   263,   265,   265,   265,
   267,   266,   268,   266,   266,   266,   266,   269,   269,   270,
   270,   270,   270,   271,   270,   272,   272,   272,   272,   272,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   274,   274,   274,   274,   274,   274,   274,   274,   274,   275,
   275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
   276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
   276,   277,   277,   277,   277,   277,   277,   277,   277,   277,
   277,   277,   278,   278,   278,   278,   278,   278,   278,   278,
   278,   278,   278,   279,   279,   279,   279,   279,   279,   279,
   279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
   280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
   280,   280,   281,   281,   281,   281,   281,   281,   281,   281,
   281,   281,   281,   281,   282,   282,   283,   283,   283,   283,
   283,   283,   283,   283,   284,   284,   285,   285,   285,   285,
   285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
   285,   285,   286,   286,   286,   286,   286,   286,   286,   286,
   287,   287,   287,   288,   288,   288,   288,   288,   288,   288,
   288,   288,   288,   288,   288,   288,   288,   288,   288,   288,
   288,   288,   288,   288,   288,   288,   290,   291,   289,   292,
   293,   289,   294,   289,   295,   289,   296,   289,   297,   289,
   298,   289,   299,   289,   300,   289,   301,   289,   289,   302,
   289,   303,   289,   304,   289,   305,   289,   306,   289,   307,
   289,   289,   308,   289,   309,   289,   310,   289,   289,   311,
   289,   312,   289,   313,   289,   314,   289,   315,   289,   316,
   289,   317,   289,   318,   289,   289,   289,   319,   289,   289,
   289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
   289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
   289,   289,   289,   289,   289,   289,   289,   320,   321,   289,
   322,   323,   289,   289,   289,   289,   289,   289,   289,   289,
   289,   289,   289,   289,   324,   289,   325,   325,   326,   326,
   327,   327,   328,   328,   329,   329,   330,   330,   331,   331,
   332,   332,   332,   334,   333,   335,   333,   337,   338,   336,
   336,   340,   339,   341,   339,   342,   339,   344,   343,   345,
   343,   343,   347,   346,   348,   346,   346,   350,   349,   351,
   349,   352,   349,   354,   353,   355,   353,   353,   357,   356,
   358,   356,   359,   356,   356,   361,   360,   362,   360,   360,
   364,   363,   365,   363,   363,   366,   366,   367,   367,   368,
   368,   369,   369,   369,   369,   369,   369,   369,   369,   370,
   369,   371,   371,   371,   371,   371,   371,   371,   372,   371,
   373,   373,   373,   373,   373,   373,   374,   373,   375,   375,
   375,   375,   375,   375,   375,   376,   375,   377,   377,   377,
   377,   377,   377,   378,   377,   379,   379,   379,   379,   379,
   379,   380,   379,   381,   381,   381,   381,   381,   381,   382,
   381,   383,   383,   383,   383,   383,   384,   383,   385,   385,
   386,   387,   386,   388,   388,   388,   388,   388,   388,   388
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     1,     0,     3,     0,     3,     1,
     0,     3,     0,     3,     1,     0,     3,     1,     1,     2,
     3,     1,     1,     3,     3,     3,     1,     0,     4,     3,
     1,     4,     4,     6,     0,     3,     0,     4,     4,     0,
     2,     0,     1,     0,     4,     0,     3,     0,     4,     3,
     0,     2,     1,     2,     0,     5,     0,     5,     0,     5,
     0,     0,     7,     1,     1,     1,     2,     1,     2,     1,
     1,     1,     2,     0,     2,     0,     4,     0,     4,     3,
     3,     4,     0,     0,     6,     0,     0,     0,     9,     0,
     0,     6,     0,     0,     0,     9,     0,     0,     6,     0,
     0,     0,     9,     3,     3,     0,     5,     0,     4,     2,
     1,     2,     1,     3,     3,     2,     1,     0,     3,     0,
     4,     2,     1,     1,     0,     4,     4,     3,     1,     1,
     1,     2,     0,     1,     0,     4,     3,     1,     3,     0,
     2,     1,     1,     2,     2,     1,     1,     0,     3,     1,
     1,     2,     0,     5,     0,     5,     0,     5,     0,     5,
     1,     1,     1,     0,     5,     1,     1,     1,     0,     5,
     4,     1,     2,     1,     2,     1,     2,     0,     6,     0,
     6,     0,     6,     2,     0,     2,     2,     0,     4,     0,
     5,     2,     0,     0,     5,     2,     0,     0,     5,     2,
     0,     0,     5,     2,     0,     0,     5,     2,     0,     0,
     5,     2,     0,     0,     5,     2,     0,     1,     2,     1,
     0,     4,     0,     5,     2,     2,     1,     1,     2,     1,
     1,     1,     1,     0,     4,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     0,     0,     6,     0,
     0,     6,     0,     3,     0,     3,     0,     4,     0,     4,
     0,     4,     0,     4,     0,     3,     0,     3,     4,     0,
     3,     0,     4,     0,     5,     0,     5,     0,     5,     0,
     5,     4,     0,     5,     0,     5,     0,     5,     3,     0,
     5,     0,     5,     0,     5,     0,     5,     0,     5,     0,
     5,     0,     5,     0,     5,     4,     4,     0,     5,     5,
     5,     6,     5,     5,     6,     5,     5,     5,     5,     6,
     6,     5,     5,     5,     5,     5,     5,     4,     5,     5,
     5,     5,     5,     5,     5,     5,     4,     0,     0,     7,
     0,     0,     8,     4,     5,     5,     4,     5,     2,     2,
     2,     2,     5,     4,     0,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     0,     1,     0,
     1,     1,     1,     0,     4,     0,     4,     0,     0,     6,
     1,     0,     3,     0,     4,     0,     4,     0,     3,     0,
     4,     1,     0,     3,     0,     4,     1,     0,     3,     0,
     4,     0,     4,     0,     3,     0,     4,     1,     0,     3,
     0,     3,     0,     4,     1,     0,     3,     0,     4,     1,
     0,     3,     0,     4,     1,     2,     0,     2,     0,     2,
     0,     1,     1,     1,     1,     1,     1,     1,     1,     0,
     4,     1,     1,     1,     1,     1,     1,     1,     0,     4,
     1,     1,     1,     1,     1,     1,     0,     4,     1,     1,
     1,     1,     1,     1,     1,     0,     4,     1,     1,     1,
     1,     1,     1,     0,     4,     1,     1,     1,     1,     1,
     1,     0,     4,     1,     1,     1,     1,     1,     1,     0,
     4,     1,     1,     1,     1,     1,     0,     4,     2,     1,
     1,     0,     4,     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
   515,    71,    72,   413,   430,   526,   525,   425,     0,     0,
     0,   407,     0,     0,     0,   527,     0,     0,     0,     0,
   415,   410,    10,    11,    13,    15,    16,     8,    18,    19,
   432,     6,     1,     4,     3,    61,     5,   427,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   531,   532,   533,     0,     0,   498,   443,     0,
     0,   445,     0,   447,   450,   452,   454,   456,   458,   460,
   462,   464,   468,   519,   520,   522,   521,   434,   436,     0,
   523,   524,   440,   438,     0,   509,   510,   511,   512,     0,
     0,     0,     0,     0,     0,   587,     0,     0,     0,   417,
   419,   421,   423,   530,   516,   623,   626,   624,   621,   622,
   625,   534,   619,   620,   414,   536,   431,   631,   634,   632,
   542,   630,   633,   544,   628,   629,   426,   546,   501,     0,
     0,     0,     0,     0,     0,     0,   517,   518,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   589,     0,     0,   589,   449,
   589,   589,   589,   589,   589,   589,   589,   589,   589,   589,
     0,     0,   597,   600,   598,   594,   595,   599,   596,   592,
   593,   408,     0,     0,     0,   416,   411,    12,    14,    17,
     9,     0,     7,   361,   372,   357,   358,   359,   360,   363,
   362,   364,   365,   366,   367,   368,   369,   370,   371,   380,
   375,   378,   376,   379,   374,   377,   240,   373,   381,   382,
   349,   350,   351,   352,   353,   354,   384,   385,   386,   387,
   388,   389,   390,   391,   392,   393,   394,   395,   399,   396,
   397,   398,   400,   401,   355,   402,   403,   404,   405,   406,
   347,   348,     0,   236,   237,   356,   238,   239,   383,   428,
     0,     0,     0,     0,   529,     0,   587,   591,   589,   587,
     0,   591,   589,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   488,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   514,   497,   504,     0,     0,     0,   507,   669,
   666,   667,   670,   668,   664,   665,   499,     0,   467,   466,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   662,     0,   660,   661,     0,   587,   589,     0,     0,
   442,   589,   433,   586,    62,   418,   420,   422,   558,   560,
   424,   562,   429,     0,     0,     0,     0,   640,   642,   552,
   637,   638,   641,   639,   636,   548,   543,   550,     0,     0,
   502,     0,     0,   477,   471,   473,   476,   474,   470,   490,
   491,   493,   489,   492,   494,   495,   496,   482,   478,   479,
     0,     0,   483,   484,   485,   486,   487,   513,   508,   505,
   506,     0,   607,   609,   444,   604,   605,   608,   606,   602,
   603,   588,   446,   448,   451,   453,   455,   457,   459,   461,
   463,   465,   469,   587,   435,   659,   437,     0,     0,   441,
   439,     0,    74,     0,   591,   589,   627,   538,   617,   541,
   613,   614,   616,   615,   611,   612,   535,   590,   537,   635,
   587,     0,   589,   545,   547,     0,   472,   475,   481,   480,
     0,   587,     0,   601,   409,   412,     0,   568,   564,   559,
   566,     0,     0,     0,   587,     0,   648,   650,   557,   646,
   553,   649,   647,   644,   645,   549,   555,     0,     0,   500,
     0,   663,     0,     0,    63,     0,    76,    78,     0,     0,
     0,     0,   108,    83,    86,    90,    93,    97,   100,     0,
    73,     0,   589,   561,   563,   539,     0,   643,   587,     0,
   589,   551,   503,   610,   110,   303,   298,   301,   299,   302,
   300,   125,   296,   297,     0,   123,   124,   293,   294,   295,
     0,    22,    75,     0,    23,    27,   185,     0,   120,     0,
   118,     0,     0,   117,   106,     0,   197,   197,   209,   209,
   213,   213,     0,   656,   657,   575,   654,   569,   571,   655,
   652,   653,   565,   573,     0,   589,   618,     0,   554,     0,
   193,   133,   122,    81,     0,    23,     0,    20,     0,     0,
   342,   340,   341,   336,   337,   343,   344,   338,   339,   333,
     0,   188,   334,   335,   193,    80,   197,   105,     0,   116,
     0,     0,     0,     0,     0,     0,     0,     0,   104,   587,
     0,     0,   589,   567,     0,   651,   556,     0,     0,    25,
     0,    21,    24,    28,    26,    64,    65,    77,   184,   187,
    79,   186,   185,     0,   119,   135,    66,    68,    82,     0,
   134,   111,     0,   109,    84,   194,   196,    87,   281,   277,
   279,   278,   280,   276,    91,   206,   274,   275,   208,   271,
   272,   273,    94,   270,   266,    98,   267,   269,   265,   268,
   210,   263,   264,   212,   260,   261,   262,   101,     0,   570,
   580,   576,   572,   578,     0,   540,   190,   126,   192,   130,
   131,     0,   132,    24,     0,     0,   121,     0,    67,   242,
   243,   244,   245,   246,   247,   241,   112,   113,     0,   248,
   249,   250,   107,     0,   193,   217,     0,   193,   217,     0,
   193,   217,   658,     0,   589,   574,   193,   129,   127,   140,
     0,     0,     0,     0,    31,   189,     0,   138,     0,     0,
   221,   345,   346,    85,     0,   218,   227,   220,     0,     0,
    92,     0,     0,    99,     0,     0,   585,   581,   577,   583,
     0,     0,     0,     0,     0,    37,    40,    35,     0,    29,
     0,   136,     0,   114,   115,   193,   223,   345,   252,   253,
   254,   255,   256,   257,   251,   346,    69,   226,   219,   258,
   259,   225,   195,   292,   288,   291,   289,    88,   287,   290,
   214,   285,   286,   216,   282,   283,   284,   207,    95,   211,
   102,     0,   589,   579,   191,   146,   147,   143,   150,   151,
     0,     0,     0,     0,     0,     0,   161,   163,   162,     0,
     0,   166,   167,   168,   172,     0,     0,   148,   142,   128,
     0,   193,    42,     0,   201,     0,    30,   137,     0,   193,
     0,   193,     0,     0,   582,     0,   144,   145,   152,   153,
   157,   159,   164,   169,     0,   155,   139,   141,     0,    32,
     0,     0,     0,    36,    33,   222,     0,    89,     0,    96,
   103,   584,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   176,     0,   234,   233,   149,   228,   230,   231,   232,
    38,    44,    41,     0,    43,    48,    51,    46,   320,   315,
   318,   316,   319,   317,   198,   313,   314,   306,   307,   308,
   309,   310,   304,   305,   200,   311,   312,   224,   215,   174,
     0,     0,     0,     0,     0,   177,     0,     0,   171,   175,
     0,   193,   229,     0,    39,   193,     0,    34,   205,   193,
   154,   173,   158,   160,   165,   170,   178,   180,   182,   156,
     0,     0,     0,     0,     0,     0,     0,     0,    53,    47,
     0,   193,   193,   193,   235,    45,    49,    54,    55,    59,
    57,    50,    52,   202,   330,   331,   323,   324,   325,   326,
   327,   321,   322,   204,   328,   332,   329,   199,     0,     0,
     0,     0,     0,     0,   193,   179,   181,   183,     0,     0,
     0,     0,    56,    60,    58,   203,     0,     0,     0
};

static const short yydefgoto[] = {  1037,
    33,    34,    97,    95,    92,    93,    94,   553,   554,   555,
   645,   715,   754,   755,   787,   865,   862,   864,   892,   923,
   964,   927,   969,   966,   968,   988,   989,  1022,  1024,  1023,
    35,    98,   443,   648,   658,   659,   764,    36,   477,   521,
   557,   558,   567,   734,   568,   736,   871,   569,   737,   570,
   739,   873,   571,   740,   572,   742,   874,   621,   566,   663,
   727,   728,   563,   560,   617,   615,   545,   546,   591,   594,
   749,   712,   639,   660,   718,   757,   784,   857,   858,   859,
   889,   903,   913,   904,   905,   906,   907,   951,   911,   912,
   992,   993,   994,   600,   611,   653,   638,   747,   623,   735,
   894,   970,   990,  1025,   625,   738,   627,   741,   770,   872,
   765,   766,   796,   870,   916,   917,   962,   709,   767,   808,
   694,   679,   824,   547,   945,  1014,   661,   768,   264,   265,
   266,   267,   268,   269,    37,    80,   348,    91,   352,    41,
    90,   271,   272,   273,   274,    43,    99,    42,    96,   181,
   182,   194,   193,   166,   169,   171,   172,   173,   174,   175,
   176,   177,   178,   179,   180,   165,   412,   284,   466,    40,
   147,    78,    79,    83,    38,    39,   276,    58,   115,   278,
   279,   457,   484,   586,   127,   281,   282,   283,   377,   462,
   463,   496,   530,   531,   361,   444,   445,   446,   480,   522,
   523,   583,   631,   632,   633,   703,   744,   745,   779,   832,
   833,   202,   328,   365,   354,   347,   422,   472,   458,   485,
   116,   277,   128,   280,   378,   461,   497,   529,   584,   630,
   343,   344,   434,   345
};

static const short yypact[] = {   676,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4570,    45,
    61,-32768,    78,   129,    -5,-32768,   -52,     3,    63,    67,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   227,    92,
   621,   621,  4583,    97,   221,   536,     2,   191,   161,   161,
   161,   -48,-32768,-32768,-32768,   150,   161,-32768,-32768,   192,
   149,-32768,   118,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4592,
-32768,-32768,-32768,-32768,   112,-32768,-32768,-32768,-32768,   621,
  4592,   250,   253,   254,   265,-32768,   279,  3464,  4583,-32768,
-32768,-32768,-32768,   202,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   151,
   161,   161,   161,   161,   161,   161,-32768,-32768,   161,   161,
   161,   161,   161,   161,   161,   161,   173,   161,   161,   161,
   201,   161,   161,   161,   161,   161,   161,   177,   179,   184,
   161,   161,   161,   185,   172,-32768,   186,   190,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   407,   407,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   407,   407,   193,-32768,-32768,-32768,-32768,-32768,
-32768,   216,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   200,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   621,  4583,  4583,  4601,-32768,   195,-32768,-32768,-32768,-32768,
  4642,-32768,-32768,   172,   161,   161,   197,   198,   203,   204,
   209,   210,   213,   217,   222,   223,   225,   228,   229,   231,
-32768,   238,   239,   241,   161,   161,   243,   244,   245,   249,
   256,   257,-32768,-32768,-32768,   258,   259,   260,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4651,-32768,-32768,
  4660,  4669,  4710,  4719,  4728,  4737,  4778,  4787,  4796,  4805,
  4846,-32768,  4855,-32768,-32768,  4864,-32768,-32768,  4873,  4914,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   277,  4923,  4932,   321,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4923,  4941,
-32768,   261,   263,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   266,   269,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   161,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   365,  4982,-32768,
-32768,  4991,-32768,  5000,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  5009,-32768,-32768,-32768,   161,-32768,-32768,-32768,-32768,
   271,-32768,   432,-32768,-32768,-32768,   503,-32768,-32768,-32768,
-32768,  4923,  5050,  4592,-32768,   593,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  5059,   278,-32768,
   606,-32768,   282,  3526,-32768,  2472,-32768,-32768,  2534,  3526,
  3712,  3464,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2534,
-32768,  5068,-32768,-32768,-32768,-32768,  4468,-32768,-32768,   621,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2596,-32768,-32768,-32768,-32768,-32768,
  2658,   -68,-32768,   246,   -63,-32768,-32768,  4427,-32768,   196,
-32768,  2596,  3588,-32768,-32768,  4427,-32768,-32768,-32768,-32768,
-32768,-32768,   196,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  5077,-32768,-32768,  4487,-32768,  5118,
-32768,-32768,-32768,-32768,   -55,   212,  2472,-32768,   255,  3960,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  3898,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4022,-32768,
   280,  3898,  2720,  2782,  2844,  2906,  2968,  3030,-32768,-32768,
   621,  5127,-32768,-32768,  5136,-32768,-32768,   823,  4183,-32768,
  2658,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   920,  3650,-32768,-32768,-32768,-32768,   283,
-32768,  4121,   287,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4574,-32768,
-32768,-32768,-32768,-32768,  5145,-32768,-32768,-32768,-32768,-32768,
-32768,  4022,-32768,-32768,   -35,  4305,-32768,  4427,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   285,-32768,   205,-32768,
-32768,-32768,-32768,  3092,-32768,-32768,  3092,-32768,-32768,  3092,
-32768,-32768,-32768,  5186,-32768,-32768,-32768,-32768,-32768,   288,
  4427,  3154,  3464,    47,-32768,-32768,   155,-32768,  4121,  3464,
-32768,-32768,   735,-32768,  4534,   527,-32768,-32768,  1017,  3216,
-32768,  1114,  3278,-32768,  1211,  3340,-32768,-32768,-32768,-32768,
  5195,  1308,   948,   291,   290,-32768,   305,-32768,   295,-32768,
   -35,-32768,  4427,-32768,-32768,-32768,-32768,   754,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   769,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   621,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   293,   296,   272,   311,   312,   317,-32768,   318,-32768,   324,
   328,-32768,-32768,-32768,-32768,   329,   856,-32768,-32768,-32768,
  4427,-32768,-32768,   323,-32768,  3464,-32768,-32768,  1405,-32768,
  3092,-32768,  3092,  3092,-32768,  5204,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    76,-32768,-32768,-32768,  4084,-32768,
  1502,  4244,  3402,  3774,-32768,-32768,  1599,-32768,  1696,-32768,
-32768,-32768,   297,   297,   297,   297,   439,  3464,  3464,  3464,
   124,-32768,   297,-32768,-32768,  4084,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  4366,-32768,-32768,   331,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -73,   -71,   -40,   -29,   332,   337,   343,   344,-32768,-32768,
    -6,-32768,-32768,  4427,-32768,-32768,   164,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1793,   158,  1890,   308,   346,   347,   348,    24,-32768,  3836,
  1987,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2084,  2181,
  2278,   297,   458,   297,-32768,-32768,-32768,-32768,    10,   349,
    15,  2375,-32768,-32768,-32768,-32768,   465,   475,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -121,  -518,  -521,
-32768,-32768,-32768,  -303,-32768,-32768,-32768,-32768,-32768,  -434,
-32768,-32768,-32768,-32768,-32768,-32768,  -497,-32768,-32768,-32768,
-32768,-32768,-32768,  -596,  -220,-32768,  -718,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -266,-32768,   -26,-32768,-32768,   -14,  -499,-32768,  -508,
-32768,  -390,-32768,  -594,-32768,  -461,-32768,-32768,-32768,  -352,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -870,-32768,  -405,
-32768,-32768,-32768,  -146,   -54,-32768,  -484,-32768,  -527,-32768,
-32768,-32768,-32768,-32768,   -59,-32768,   -58,-32768,  -668,-32768,
-32768,-32768,-32768,-32768,-32768,  -403,-32768,   -98,  -644,-32768,
-32768,-32768,-32768,  -482,-32768,-32768,  -306,  -247,  -275,  -490,
  -776,  -419,   -95,  -534,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    57,   506,-32768,-32768,-32768,-32768,-32768,-32768,   -41,-32768,
-32768,  -356,-32768,-32768,   -96,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -230,  -167,  -265,   -64,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   248,-32768,  -416,-32768,  -210,-32768,-32768,-32768,
   -43,  -175,-32768,  -140
};


#define	YYLAST		5356


static const short yytable[] = {   263,
   117,   331,   270,   332,   333,   334,   335,   336,   337,   338,
   339,   340,   341,   549,   651,   192,   379,   729,   771,   549,
   549,   774,   464,   614,   327,   664,   197,   481,   564,   596,
   161,   614,   595,   952,   953,   954,   148,   149,   150,   151,
   624,   971,   961,   973,   713,   593,   364,  -348,   196,   367,
    59,   616,   598,   618,   549,  -348,  -348,    85,   751,   640,
   752,   599,   593,    86,   629,   614,    60,   613,   641,   152,
   773,   549,   549,   776,   974,   613,   614,   972,   643,   972,
   620,   153,   154,   155,   614,   975,   753,   614,   162,   655,
    74,    75,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,   614,   158,   159,   160,   980,   613,
   972,   366,   919,   164,   729,   380,   438,   750,    87,   596,
   613,   972,   714,    73,  1033,   524,    76,    77,   613,  1035,
   654,   613,   549,   549,   681,   681,   696,   696,   346,   919,
   667,   667,  1002,   381,   972,    81,    82,   156,   613,   349,
   350,  1029,   898,  1031,   900,   901,   984,   985,    74,    75,
   972,   790,   129,   986,   549,   972,   791,   436,   807,   987,
   436,   730,   667,   436,   436,   357,   358,   614,    88,   482,
   439,   614,    89,   614,   442,   137,   138,   287,   288,   289,
   290,   291,   292,   285,   286,   293,   294,   295,   296,   297,
   298,   299,   300,   473,   302,   303,   304,   105,   307,   308,
   309,   310,   311,   312,   157,   704,   614,   316,   317,   318,
   163,   613,   908,   909,   910,   613,   167,   613,   548,   356,
   486,   168,   130,   170,   548,   548,   100,   101,   959,   305,
   306,   501,   731,   730,   102,   103,   730,   104,   195,   730,
   769,   612,   198,   772,   527,   199,   775,   200,   614,   612,
   613,   131,   782,   132,   133,   134,   135,   201,   730,   548,
   908,   909,   910,   792,   793,   812,   996,   793,   483,   826,
   136,   203,   826,   320,   275,   826,   548,   548,   301,   321,
   322,   323,   313,   649,   314,   498,   984,   985,   588,   315,
   319,   329,   613,   986,   652,   330,   355,   592,   351,   987,
   363,   869,   384,   385,   731,   652,   760,   731,   386,   387,
   731,   324,   325,   326,   388,   389,   614,   183,   390,   184,
   353,   185,   391,   186,   187,   188,   599,   392,   393,   731,
   394,   382,   383,   395,   396,   810,   397,   548,   548,   680,
   680,   695,   695,   398,   399,   585,   400,   614,   403,   404,
   405,   401,   402,   590,   406,   189,   190,   191,   644,   597,
   613,   407,   408,   409,   410,   411,   467,   891,   468,   548,
   730,   469,   730,   730,   470,   897,   500,   899,   183,   614,
   184,   447,   185,   533,   186,   187,   188,   535,   719,   699,
   662,   613,   733,   946,   759,   783,   860,   556,   550,   649,
   561,   758,   861,   565,   550,   550,   863,   866,   635,   526,
   877,   561,   879,   878,   880,   881,   189,   190,   191,   614,
   882,   883,   183,   613,   184,   460,   185,   884,   186,   187,
   188,   885,   886,   955,   785,   893,   976,   950,   967,   550,
   977,   731,   556,   731,   731,  1017,   978,   979,   998,   999,
  1000,  1001,  1030,  1034,  1038,   705,   550,   550,   471,   920,
   189,   190,   191,   613,  1039,   642,   183,   981,   184,   474,
   185,   983,   186,   187,   188,   991,   868,   867,   589,   965,
  1003,   748,   794,   573,   825,   562,   920,   825,   556,  1015,
   825,   924,   982,   503,   888,   960,   716,  1019,  1020,  1021,
   626,   622,   963,   628,   189,   190,   191,   809,   320,    84,
   342,   362,   499,     0,   321,   322,   323,   550,   550,   682,
   682,   697,   697,   780,     0,     0,     0,     0,     0,     0,
  1032,     0,   556,   183,     0,   184,   502,   185,     0,   186,
   187,   188,     0,     0,   890,   504,   324,   325,   326,   550,
   137,   138,     0,   139,   140,   141,   732,   142,   143,     0,
  1016,     0,     0,     0,     0,     0,     0,   781,     0,   204,
     0,   189,   190,   191,     0,   925,     0,     0,     0,   700,
   144,   145,   146,     0,   505,   506,   507,   508,   509,   510,
   511,   512,   513,   514,   515,   516,   517,   518,   519,     0,
     0,     0,     0,   918,     0,     0,     0,   925,   205,   206,
   207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
   217,   218,   219,     0,     0,     0,     0,     0,   732,     0,
   918,   732,     0,     0,   732,     0,   520,     0,     0,     0,
     0,     0,     0,   788,   789,     0,     0,   758,     0,     0,
     0,   795,     0,   732,     0,   876,     0,     0,     0,   811,
   255,     0,     0,     0,   827,    -2,     1,   827,     0,     0,
   827,     2,     3,     4,     0,  -528,  -528,     5,     0,     6,
     7,     0,     0,  -528,  -528,     0,  -528,     8,     9,    10,
     0,     0,    11,     0,   183,    12,   184,   528,   185,    13,
   186,   187,   188,     0,     0,     0,     0,   183,     0,   184,
   534,   185,    14,   186,   187,   188,     0,     0,     0,     0,
     0,     0,   106,     0,   107,   -70,   108,    15,   109,   110,
   111,     0,   189,   190,   191,     0,     0,    16,    17,    18,
    19,    20,    21,    22,   -64,   189,   190,   191,     0,    23,
    24,    25,    26,    27,    28,    29,    30,   895,     0,   -65,
   112,   113,   114,     0,     0,   732,     0,   732,   732,     0,
     0,     0,     0,     0,     0,     0,     0,   -70,     0,    31,
   875,     0,     0,     0,   928,     0,     0,     0,   947,     0,
     0,     0,     0,     0,     0,     0,   -64,     0,     0,   956,
   957,   958,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   -65,     0,     0,     0,    32,   -70,   -70,   -70,   -70,
   -70,   -70,   -70,   -70,   -70,   -70,   -70,   -70,   -70,   -70,
   -70,     0,     0,     0,     0,   -64,   -64,   -64,   -64,   -64,
   -64,   -64,   -64,   -64,   -64,   -64,   -64,   -64,   -64,   -64,
   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,
   -65,   -65,   -65,   -65,   -65,   204,     0,     0,   -70,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   -64,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   -65,     0,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   707,   708,   227,   228,
   229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
   239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
   259,   260,   204,   261,   887,   262,     0,     0,     0,     0,
     0,   836,   837,   838,   839,   840,   841,   842,   843,   844,
   845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
   855,   856,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   209,   210,   211,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   707,   717,   227,   228,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,   204,
   261,     0,   262,   836,   837,   838,   839,   840,   841,   842,
   843,   844,   845,   846,   847,   848,   849,   850,   851,   852,
   853,   854,   855,   856,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   707,   813,   227,   228,   229,   230,   231,   232,   233,   234,
   235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
   255,   256,   257,   258,   259,   260,   204,   261,     0,   262,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   707,   828,   227,
   228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,   204,   261,     0,   262,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   209,   210,   211,   212,
   213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   707,   830,   227,   228,   229,   230,
   231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
   241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
   251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
   204,   261,     0,   262,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   707,   835,   227,   228,   229,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   204,   261,     0,
   262,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   205,   206,   207,   208,
   209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   707,   896,
   227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
   257,   258,   259,   260,   204,   261,     0,   262,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   707,   921,   227,   228,   229,
   230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,   204,   261,     0,   262,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
   215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   707,   948,   227,   228,   229,   230,   231,   232,
   233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
   253,   254,   255,   256,   257,   258,   259,   260,   204,   261,
     0,   262,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   707,
   949,   227,   228,   229,   230,   231,   232,   233,   234,   235,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,   204,   261,     0,   262,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   707,   995,   227,   228,
   229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
   239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
   259,   260,   204,   261,     0,   262,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   209,   210,   211,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   707,   997,   227,   228,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,   204,
   261,     0,   262,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   707,  1018,   227,   228,   229,   230,   231,   232,   233,   234,
   235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
   255,   256,   257,   258,   259,   260,   204,   261,     0,   262,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   707,  1026,   227,
   228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,   204,   261,     0,   262,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   209,   210,   211,   212,
   213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   707,  1027,   227,   228,   229,   230,
   231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
   241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
   251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
   204,   261,     0,   262,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   707,  1028,   227,   228,   229,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   204,   261,     0,
   262,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   205,   206,   207,   208,
   209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   707,  1036,
   227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
   257,   258,   259,   260,   204,   261,     0,   262,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   551,   204,   227,   228,   229,
   230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,     0,   261,     0,   552,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   559,   204,   227,
   228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,     0,   261,     0,   262,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   536,   537,   538,   539,   540,   592,   541,   542,
   204,   543,   544,   229,   230,   231,   232,   233,   234,   235,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,     0,   261,     0,   262,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   551,   204,   227,   228,   229,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,     0,   261,     0,
   262,   205,   206,   207,   208,   209,   210,   211,   212,   213,
   214,   215,   216,   217,   218,   219,   536,   537,   538,   539,
   540,   665,   541,   666,   204,   543,   544,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,     0,
   261,     0,   262,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   536,   537,
   538,   539,   540,   668,   541,   666,   204,   543,   544,   229,
   230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,     0,   261,     0,   262,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   669,   670,   671,   672,   673,   674,   675,   676,   204,   677,
   678,   229,   230,   231,   232,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,     0,   261,     0,   262,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   669,   670,   671,   672,   673,   674,   683,   676,
   204,   677,   678,   229,   230,   231,   232,   233,   234,   235,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,     0,   261,     0,   262,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   684,   685,   686,   687,   688,   689,
   690,   691,   204,   692,   693,   229,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,     0,   261,     0,
   262,   205,   206,   207,   208,   209,   210,   211,   212,   213,
   214,   215,   216,   217,   218,   219,   684,   685,   698,   687,
   688,   689,   690,   691,   204,   692,   693,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,     0,
   261,     0,   262,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   761,   204,   762,   228,   229,
   230,   720,   721,   722,   723,   724,   725,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,     0,   726,     0,   763,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   786,   204,   227,
   228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,     0,   261,     0,   262,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   814,   815,   816,   817,   818,   819,   820,   821,
   204,   822,   823,   229,   230,   231,   232,   233,   234,   235,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,     0,   261,     0,   262,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   814,   815,   816,   817,   829,   819,
   820,   821,   204,   822,   823,   229,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,     0,   261,     0,
   262,   205,   206,   207,   208,   209,   210,   211,   212,   213,
   214,   215,   216,   217,   218,   219,   814,   815,   816,   817,
   831,   819,   820,   821,   204,   822,   823,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,     0,
   261,     0,   262,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   926,   204,   227,   228,   229,
   230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,     0,   261,     0,   262,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,     0,   204,   227,
   228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,     0,   261,     0,   262,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   536,   537,   538,   539,   540,     0,   541,   542,
   204,   543,   544,   229,   230,   231,   232,   233,   234,   235,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,     0,   261,     0,   262,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   536,   537,   538,   539,   540,   619,
   541,     0,   204,   543,   544,   229,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,     0,   261,     0,
   262,   205,   206,   207,   208,   209,   210,   211,   212,   213,
   214,   215,   216,   217,   218,   219,   536,   537,   538,   539,
   540,     0,   541,   666,   204,   543,   544,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,     0,
   261,     0,   262,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   536,   537,
   538,   539,   540,     0,   541,     0,   204,   543,   544,   229,
   230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,     0,   261,     0,   262,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   929,   930,   931,   932,   933,     0,   934,   935,   204,   936,
   937,   229,   230,   938,   939,   940,     0,   941,   942,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,     0,   943,     0,   944,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,  1004,
   204,  1005,   228,     0,  1006,     0,  1007,  1008,  1009,  1010,
  1011,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,     0,  1012,     0,  1013,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   601,     0,   602,     0,   603,     0,
   604,     0,   204,   646,   650,     0,     0,     0,   605,   606,
   607,   608,   609,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,     0,   610,     0,
   647,   205,   206,   207,   208,   209,   210,   211,   212,   213,
   214,   215,   216,   217,   218,   219,   601,     0,   602,     0,
   603,     0,   604,     0,   204,   646,     0,     0,     0,     0,
   605,   606,   607,   608,   609,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,     0,
   610,     0,   647,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   601,     0,
   602,     0,   603,     0,   604,     0,   204,     0,     0,   656,
     0,     0,   605,   606,   607,   608,   609,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,     0,   610,   204,   657,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   914,     0,   915,
   228,     0,     0,   231,   232,   233,   234,   235,   236,     0,
     0,     0,   205,   206,   207,   208,   209,   210,   211,   212,
   213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   261,   204,   262,   228,   229,   230,
   720,   721,   722,   723,   724,   725,   237,   238,   239,   240,
   241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
   251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     0,   726,     0,     0,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   601,
   710,   602,   711,   603,     0,   604,   204,     0,     0,     0,
   656,     0,     0,   605,   606,   607,   608,   609,   237,   238,
   239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
   259,   260,     0,   610,     0,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   601,   710,   602,   711,   603,     0,   604,   204,     0,     0,
     0,   922,     0,     0,   605,   606,   607,   608,   609,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,     0,   610,     0,   205,   206,   207,   208,
   209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
   219,   601,     0,   602,     0,   603,     0,   604,   204,     0,
     0,   756,     0,     0,     0,   605,   606,   607,   608,   609,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
   257,   258,   259,   260,     0,   610,     0,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   601,     0,   602,     0,   603,     0,   604,   204,
     0,     0,     0,   922,     0,     0,   605,   606,   607,   608,
   609,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,     0,   610,     0,   205,   206,
   207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
   217,   218,   219,   601,     0,   602,     0,   603,     0,   604,
     0,     0,     0,     0,     0,     0,     0,   605,   606,   607,
   608,   609,   237,   238,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
   255,   256,   257,   258,   259,   260,    44,   610,     0,   183,
     0,   184,   587,   185,     0,   186,   187,   188,     0,     0,
     0,     0,     0,    45,     0,     0,    46,     0,   183,     0,
   184,   636,   185,    47,   186,   187,   188,     0,     0,     0,
    48,     0,    49,     0,     0,     0,    50,   189,   190,   191,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    51,     0,    52,    53,    54,    55,   189,   190,   191,    56,
   220,   221,   222,   223,   224,   225,   226,   797,    57,   798,
   228,   229,   230,   799,   800,   801,   802,   803,   804,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,     0,   256,   257,
   258,   259,   260,     0,   805,   183,   806,   184,   743,   185,
     0,   186,   187,   188,   118,     0,   119,     0,   120,     0,
   121,   122,   123,   183,     0,   184,     0,   185,     0,   186,
   187,   188,   118,     0,   119,     0,   120,     0,   359,   122,
   123,     0,     0,   189,   190,   191,     0,     0,     0,     0,
     0,     0,   124,   125,   126,     0,     0,     0,     0,     0,
     0,   189,   190,   191,     0,     0,     0,     0,     0,     0,
   360,   125,   126,   368,     0,   369,     0,   370,     0,   371,
   372,   373,   413,     0,   414,     0,   415,     0,   416,   417,
   418,   413,     0,   414,     0,   423,     0,   416,   417,   418,
   413,     0,   414,     0,   424,     0,   416,   417,   418,     0,
     0,   374,   375,   376,     0,     0,     0,     0,     0,     0,
   419,   420,   421,     0,     0,     0,     0,     0,     0,   419,
   420,   421,     0,     0,     0,     0,     0,     0,   419,   420,
   421,   413,     0,   414,     0,   425,     0,   416,   417,   418,
   413,     0,   414,     0,   426,     0,   416,   417,   418,   413,
     0,   414,     0,   427,     0,   416,   417,   418,   413,     0,
   414,     0,   428,     0,   416,   417,   418,     0,     0,   419,
   420,   421,     0,     0,     0,     0,     0,     0,   419,   420,
   421,     0,     0,     0,     0,     0,     0,   419,   420,   421,
     0,     0,     0,     0,     0,     0,   419,   420,   421,   413,
     0,   414,     0,   429,     0,   416,   417,   418,   413,     0,
   414,     0,   430,     0,   416,   417,   418,   413,     0,   414,
     0,   431,     0,   416,   417,   418,   413,     0,   414,     0,
   432,     0,   416,   417,   418,     0,     0,   419,   420,   421,
     0,     0,     0,     0,     0,     0,   419,   420,   421,     0,
     0,     0,     0,     0,     0,   419,   420,   421,     0,     0,
     0,     0,     0,     0,   419,   420,   421,   413,     0,   414,
     0,   433,     0,   416,   417,   418,   320,     0,   342,     0,
   435,     0,   321,   322,   323,   320,     0,   342,     0,   437,
     0,   321,   322,   323,   320,     0,   342,     0,   440,     0,
   321,   322,   323,     0,     0,   419,   420,   421,     0,     0,
     0,     0,     0,     0,   324,   325,   326,     0,     0,     0,
     0,     0,     0,   324,   325,   326,     0,     0,     0,     0,
     0,     0,   324,   325,   326,   320,     0,   342,     0,   441,
     0,   321,   322,   323,   448,     0,   449,     0,   450,     0,
   451,   452,   453,   413,     0,   414,     0,   459,     0,   416,
   417,   418,   413,     0,   414,     0,   465,     0,   416,   417,
   418,     0,     0,   324,   325,   326,     0,     0,     0,     0,
     0,     0,   454,   455,   456,     0,     0,     0,     0,     0,
     0,   419,   420,   421,     0,     0,     0,     0,     0,     0,
   419,   420,   421,   413,     0,   414,     0,   475,     0,   416,
   417,   418,   413,     0,   414,     0,   476,     0,   416,   417,
   418,   368,     0,   369,     0,   478,     0,   371,   372,   373,
   487,     0,   488,     0,   489,     0,   490,   491,   492,     0,
     0,   419,   420,   421,     0,     0,     0,     0,     0,     0,
   419,   420,   421,     0,     0,     0,     0,     0,     0,   374,
   375,   479,     0,     0,     0,     0,     0,     0,   493,   494,
   495,   413,     0,   414,     0,   525,     0,   416,   417,   418,
   413,     0,   414,     0,   532,     0,   416,   417,   418,   574,
     0,   575,     0,   576,     0,   577,   578,   579,   413,     0,
   414,     0,   634,     0,   416,   417,   418,     0,     0,   419,
   420,   421,     0,     0,     0,     0,     0,     0,   419,   420,
   421,     0,     0,     0,     0,     0,     0,   580,   581,   582,
     0,     0,     0,     0,     0,     0,   419,   420,   421,   413,
     0,   414,     0,   637,     0,   416,   417,   418,   368,     0,
   369,     0,   701,     0,   371,   372,   373,   413,     0,   414,
     0,   706,     0,   416,   417,   418,   413,     0,   414,     0,
   746,     0,   416,   417,   418,     0,     0,   419,   420,   421,
     0,     0,     0,     0,     0,     0,   374,   375,   702,     0,
     0,     0,     0,     0,     0,   419,   420,   421,     0,     0,
     0,     0,     0,     0,   419,   420,   421,   487,     0,   488,
     0,   777,     0,   490,   778,   492,   413,     0,   414,     0,
   834,     0,   416,   417,   418,   413,     0,   414,     0,   902,
     0,   416,   417,   418,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   493,   494,   495,     0,     0,
     0,     0,     0,     0,   419,   420,   421,     0,     0,     0,
     0,     0,     0,   419,   420,   421
};

static const short yycheck[] = {    98,
    42,   169,    99,   171,   172,   173,   174,   175,   176,   177,
   178,   179,   180,   504,   611,    80,   282,   662,   737,   510,
   511,   740,   379,   558,   165,   622,    91,   444,   511,   551,
    79,   566,   551,   904,   905,   906,    35,    36,    37,    38,
   568,   115,   913,   115,   639,   545,   277,   116,    90,   280,
     6,   560,   116,   562,   545,   124,   125,    63,    94,   115,
    96,   125,   562,   116,   573,   600,    22,   558,   124,    68,
   739,   562,   563,   742,   115,   566,   611,   151,   597,   151,
   563,    80,    81,    82,   619,   115,   122,   622,   137,   617,
    30,    31,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,   639,    49,    50,    51,   115,   600,
   151,   279,   889,    57,   759,   283,   347,   712,   116,   641,
   611,   151,   641,    79,   115,   482,    66,    67,   619,   115,
   615,   622,   623,   624,   625,   626,   627,   628,   182,   916,
   623,   624,   119,   284,   151,    68,    69,   146,   639,   193,
   194,  1022,   871,  1024,   873,   874,   133,   134,    30,    31,
   151,   115,    66,   140,   655,   151,   120,   343,   765,   146,
   346,   662,   655,   349,   350,   272,   273,   712,   116,   445,
   348,   716,   116,   718,   352,    25,    26,   131,   132,   133,
   134,   135,   136,    43,    44,   139,   140,   141,   142,   143,
   144,   145,   146,   434,   148,   149,   150,   116,   152,   153,
   154,   155,   156,   157,    24,   632,   751,   161,   162,   163,
    71,   712,   147,   148,   149,   716,    35,   718,   504,   271,
   461,    83,    12,   116,   510,   511,    10,    11,   115,    39,
    40,   472,   662,   734,    18,    19,   737,    21,   137,   740,
   735,   558,     3,   738,   485,     3,   741,     4,   793,   566,
   751,    41,   747,    43,    44,    45,    46,     3,   759,   545,
   147,   148,   149,   119,   120,   766,   119,   120,   446,   770,
    60,     3,   773,   112,    83,   776,   562,   563,   116,   118,
   119,   120,   116,   600,   116,   463,   133,   134,   529,   116,
   116,   116,   793,   140,   611,   116,   107,   112,   116,   146,
   116,   796,   116,   116,   734,   622,   112,   737,   116,   116,
   740,   150,   151,   152,   116,   116,   861,   112,   116,   114,
   115,   116,   116,   118,   119,   120,   125,   116,   116,   759,
   116,   285,   286,   116,   116,   765,   116,   623,   624,   625,
   626,   627,   628,   116,   116,   523,   116,   892,   116,   116,
   116,   305,   306,   531,   116,   150,   151,   152,   114,   124,
   861,   116,   116,   116,   116,   116,   116,   862,   116,   655,
   871,   116,   873,   874,   116,   870,   116,   872,   112,   924,
   114,   115,   116,   116,   118,   119,   120,   116,   116,   630,
   121,   892,   116,   894,   120,   118,   116,   506,   504,   716,
   509,   718,   123,   512,   510,   511,   112,   123,   586,   484,
   128,   520,   151,   128,   114,   114,   150,   151,   152,   964,
   114,   114,   112,   924,   114,   115,   116,   114,   118,   119,
   120,   114,   114,     5,   751,   123,   115,   151,   118,   545,
   114,   871,   551,   873,   874,   990,   114,   114,   151,   114,
   114,   114,     5,   115,     0,   633,   562,   563,   412,   889,
   150,   151,   152,   964,     0,   597,   112,   962,   114,   115,
   116,   966,   118,   119,   120,   970,   793,   791,   530,   924,
   988,   712,   759,   520,   770,   510,   916,   773,   597,   990,
   776,   892,   964,     1,   857,   911,   653,   992,   993,   994,
   570,   566,   916,   572,   150,   151,   152,   765,   112,    14,
   114,   274,   466,    -1,   118,   119,   120,   623,   624,   625,
   626,   627,   628,   744,    -1,    -1,    -1,    -1,    -1,    -1,
  1025,    -1,   641,   112,    -1,   114,   115,   116,    -1,   118,
   119,   120,    -1,    -1,   861,    53,   150,   151,   152,   655,
    25,    26,    -1,    28,    29,    30,   662,    32,    33,    -1,
   990,    -1,    -1,    -1,    -1,    -1,    -1,   745,    -1,    53,
    -1,   150,   151,   152,    -1,   892,    -1,    -1,    -1,   631,
    55,    56,    57,    -1,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,    -1,
    -1,    -1,    -1,   889,    -1,    -1,    -1,   924,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,    -1,    -1,    -1,    -1,    -1,   734,    -1,
   916,   737,    -1,    -1,   740,    -1,   144,    -1,    -1,    -1,
    -1,    -1,    -1,   752,   753,    -1,    -1,   964,    -1,    -1,
    -1,   760,    -1,   759,    -1,   833,    -1,    -1,    -1,   765,
   144,    -1,    -1,    -1,   770,     0,     1,   773,    -1,    -1,
   776,     6,     7,     8,    -1,    10,    11,    12,    -1,    14,
    15,    -1,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    27,    -1,   112,    30,   114,   115,   116,    34,
   118,   119,   120,    -1,    -1,    -1,    -1,   112,    -1,   114,
   115,   116,    47,   118,   119,   120,    -1,    -1,    -1,    -1,
    -1,    -1,   112,    -1,   114,     1,   116,    62,   118,   119,
   120,    -1,   150,   151,   152,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,     1,   150,   151,   152,    -1,    84,
    85,    86,    87,    88,    89,    90,    91,   866,    -1,     1,
   150,   151,   152,    -1,    -1,   871,    -1,   873,   874,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,   114,
   832,    -1,    -1,    -1,   893,    -1,    -1,    -1,   894,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,   908,
   909,   910,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    53,    -1,    -1,    -1,   150,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,    -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,    53,    -1,    -1,   144,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   144,    -1,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,    53,   151,   119,   153,    -1,    -1,    -1,    -1,
    -1,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,    53,
   151,    -1,   153,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,    53,   151,    -1,   153,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,    53,   151,    -1,   153,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
    53,   151,    -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,    53,   151,    -1,
   153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,    53,   151,    -1,   153,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,    53,   151,    -1,   153,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,    53,   151,
    -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,    53,   151,    -1,   153,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,    53,   151,    -1,   153,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,    53,
   151,    -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,    53,   151,    -1,   153,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,    53,   151,    -1,   153,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
    53,   151,    -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,    53,   151,    -1,
   153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,    53,   151,    -1,   153,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,    53,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,    -1,   151,    -1,   153,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,    53,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,    -1,   151,    -1,   153,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
    53,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,    -1,   151,    -1,   153,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,    53,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,    -1,   151,    -1,
   153,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,    53,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,    -1,
   151,    -1,   153,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,    53,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,    -1,   151,    -1,   153,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,    53,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,    -1,   151,    -1,   153,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
    53,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,    -1,   151,    -1,   153,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,    53,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,    -1,   151,    -1,
   153,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,    53,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,    -1,
   151,    -1,   153,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,    53,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,    -1,   151,    -1,   153,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,    53,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,    -1,   151,    -1,   153,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
    53,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,    -1,   151,    -1,   153,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,    53,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,    -1,   151,    -1,
   153,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,    53,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,    -1,
   151,    -1,   153,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,    53,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,    -1,   151,    -1,   153,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,    -1,    53,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,    -1,   151,    -1,   153,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,    -1,   113,   114,
    53,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,    -1,   151,    -1,   153,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,    -1,    53,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,    -1,   151,    -1,
   153,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,    -1,   113,   114,    53,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,    -1,
   151,    -1,   153,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,    -1,   113,    -1,    53,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,    -1,   151,    -1,   153,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,    -1,   113,   114,    53,   116,
   117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,    -1,   151,    -1,   153,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
    53,   116,   117,    -1,   119,    -1,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,    -1,   151,    -1,   153,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,    -1,   109,    -1,   111,    -1,
   113,    -1,    53,   116,   117,    -1,    -1,    -1,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,    -1,   151,    -1,
   153,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,    -1,   109,    -1,
   111,    -1,   113,    -1,    53,   116,    -1,    -1,    -1,    -1,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,    -1,
   151,    -1,   153,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,    -1,
   109,    -1,   111,    -1,   113,    -1,    53,    -1,    -1,   118,
    -1,    -1,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,    -1,   151,    53,   153,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
   117,    -1,    -1,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   151,    53,   153,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
    -1,   151,    -1,    -1,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,    -1,   113,    53,    -1,    -1,    -1,
   118,    -1,    -1,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,    -1,   151,    -1,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,    -1,   113,    53,    -1,    -1,
    -1,   118,    -1,    -1,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,    -1,   151,    -1,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,    -1,   109,    -1,   111,    -1,   113,    53,    -1,
    -1,   117,    -1,    -1,    -1,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,    -1,   151,    -1,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,    -1,   109,    -1,   111,    -1,   113,    53,
    -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,    -1,   151,    -1,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,    -1,   109,    -1,   111,    -1,   113,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,     7,   151,    -1,   112,
    -1,   114,   115,   116,    -1,   118,   119,   120,    -1,    -1,
    -1,    -1,    -1,    24,    -1,    -1,    27,    -1,   112,    -1,
   114,   115,   116,    34,   118,   119,   120,    -1,    -1,    -1,
    41,    -1,    43,    -1,    -1,    -1,    47,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    61,    -1,    63,    64,    65,    66,   150,   151,   152,    70,
   107,   108,   109,   110,   111,   112,   113,   114,    79,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,    -1,   145,   146,
   147,   148,   149,    -1,   151,   112,   153,   114,   115,   116,
    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
   150,   151,   152,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,    -1,
    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
   152,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,    -1,    -1,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,    -1,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,    -1,   150,   151,   152,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,
    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,    -1,    -1,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,   150,   151,   152,   112,    -1,   114,    -1,   116,
    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,
   118,   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
   150,   151,   152,   112,    -1,   114,    -1,   116,    -1,   118,
   119,   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,
   120,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,    -1,
    -1,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
   152,   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,
   112,    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,    -1,    -1,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,   112,
    -1,   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,
   114,    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,    -1,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,    -1,   150,   151,   152,   112,    -1,   114,
    -1,   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,
   116,    -1,   118,   119,   120,   112,    -1,   114,    -1,   116,
    -1,   118,   119,   120,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,    -1,   150,   151,   152
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/csl/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/csl/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 196 "surface.yy"
{ YYACCEPT; ;
    break;}
case 2:
#line 198 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::QUIT;
			;
    break;}
case 6:
#line 211 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 7:
#line 213 "surface.yy"
{
			  int lineNr = lineNumber;
			  eatComment(false); // eat \n so that line number is correct
			  string directory;
			  string fileName;
			  if (findFile(yyvsp[0].yyString, directory, fileName, lineNr))
			    includeFile(directory, fileName, false, lineNr);
			;
    break;}
case 8:
#line 221 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 9:
#line 223 "surface.yy"
{
			  int lineNr = lineNumber;
			  eatComment(false); // eat \n so that line number is correct
			  string directory;
			  string fileName;
			  if (findFile(yyvsp[0].yyString, directory, fileName, lineNr))
			    includeFile(directory, fileName, true, lineNr);
			;
    break;}
case 10:
#line 232 "surface.yy"
{
			  cout << directoryManager.getCwd() << '\n';
			;
    break;}
case 11:
#line 235 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 12:
#line 237 "surface.yy"
{
			  string directory;
			  directoryManager.realPath(yyvsp[0].yyString, directory);
			  if (!directoryManager.cd(directory))
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": cd failed");
			    }
			;
    break;}
case 13:
#line 246 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 14:
#line 248 "surface.yy"
{
			  string directory;
			  directoryManager.realPath(yyvsp[0].yyString, directory);
			  if (directoryManager.pushd(directory) == UNDEFINED)
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": pushd failed");
			    }
			;
    break;}
case 15:
#line 258 "surface.yy"
{
			  const char* path = directoryManager.popd();
			  if (path != 0)
			    cout << path << '\n';
			  else
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": popd failed");
			    }
			;
    break;}
case 16:
#line 268 "surface.yy"
{ lexerStringMode(); ;
    break;}
case 17:
#line 270 "surface.yy"
{
			  system((string("ls") + yyvsp[0].yyString).c_str());
			;
    break;}
case 18:
#line 274 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::QUIT;
			  YYACCEPT;
			;
    break;}
case 19:
#line 279 "surface.yy"
{
			  if(!handleEof())
			    {
			      PARSE_RESULT = UserLevelRewritingContext::QUIT;
			    }
			;
    break;}
case 21:
#line 313 "surface.yy"
{
			  ModuleExpression* m1 = moduleExpressions.top();
			  moduleExpressions.pop();
			  ModuleExpression* m2 = moduleExpressions.top();
			  moduleExpressions.pop();
			  moduleExpressions.push(new ModuleExpression(m1, m2));
			;
    break;}
case 22:
#line 321 "surface.yy"
{
			  IssueWarning(LineNumber(yyvsp[0].yyToken.lineNumber()) <<
                                       ": missing space before period.");
			  Token t;
			  t.dropChar(yyvsp[0].yyToken);
			  moduleExpressions.push(new ModuleExpression(t));
			;
    break;}
case 24:
#line 332 "surface.yy"
{
			  ModuleExpression* m1 = moduleExpressions.top();
			  moduleExpressions.pop();
			  ModuleExpression* m2 = moduleExpressions.top();
			  moduleExpressions.pop();
			  moduleExpressions.push(new ModuleExpression(m1, m2));
			;
    break;}
case 25:
#line 341 "surface.yy"
{;
    break;}
case 26:
#line 343 "surface.yy"
{
			  ModuleExpression* m = moduleExpressions.top();
			  moduleExpressions.pop();
			  moduleExpressions.push(new ModuleExpression(m, currentRenaming));
			  currentRenaming = 0;
			;
    break;}
case 27:
#line 350 "surface.yy"
{
			  moduleExpressions.push(new ModuleExpression(yyvsp[0].yyToken));
			;
    break;}
case 28:
#line 359 "surface.yy"
{
			  currentRenaming = new Renaming;
			;
    break;}
case 32:
#line 370 "surface.yy"
{
			  currentRenaming->addSortMapping(yyvsp[-2].yyToken, yyvsp[0].yyToken);
			;
    break;}
case 33:
#line 374 "surface.yy"
{
			  currentRenaming->addLabelMapping(yyvsp[-2].yyToken, yyvsp[0].yyToken);
			;
    break;}
case 34:
#line 377 "surface.yy"
{;
    break;}
case 35:
#line 380 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 36:
#line 382 "surface.yy"
{
			  currentRenaming->addOpMapping(bubble);
			;
    break;}
case 37:
#line 385 "surface.yy"
{ clear(); ;
    break;}
case 38:
#line 387 "surface.yy"
{
			  currentRenaming->addOpMapping(bubble);
			;
    break;}
case 39:
#line 392 "surface.yy"
{;
    break;}
case 43:
#line 401 "surface.yy"
{
			  clear();
			  bubble.append(yyvsp[0].yyToken);
			  currentRenaming->addType(bubble);
			;
    break;}
case 44:
#line 406 "surface.yy"
{ clear(); ;
    break;}
case 45:
#line 408 "surface.yy"
{
			  currentRenaming->addType(bubble);
			;
    break;}
case 46:
#line 413 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 47:
#line 414 "surface.yy"
{ currentRenaming->addOpTarget(bubble); ;
    break;}
case 48:
#line 415 "surface.yy"
{ clear(); ;
    break;}
case 49:
#line 416 "surface.yy"
{ currentRenaming->addOpTarget(bubble); ;
    break;}
case 50:
#line 419 "surface.yy"
{;
    break;}
case 54:
#line 427 "surface.yy"
{ currentRenaming->setPrec(yyvsp[0].yyToken); ;
    break;}
case 55:
#line 428 "surface.yy"
{ clear(); ;
    break;}
case 56:
#line 429 "surface.yy"
{ currentRenaming->setGather(bubble); ;
    break;}
case 57:
#line 430 "surface.yy"
{ clear(); ;
    break;}
case 58:
#line 431 "surface.yy"
{ currentRenaming->setFormat(bubble); ;
    break;}
case 59:
#line 432 "surface.yy"
{ lexerLatexMode(); ;
    break;}
case 60:
#line 433 "surface.yy"
{ currentRenaming->setLatexMacro(yyvsp[-1].yyString); ;
    break;}
case 61:
#line 439 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 62:
#line 441 "surface.yy"
{
			  interpreter.setCurrentModule(new PreModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 63:
#line 446 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule(yyvsp[0].yyToken);
			;
    break;}
case 64:
#line 453 "surface.yy"
{;
    break;}
case 65:
#line 455 "surface.yy"
{
			  IssueWarning(LineNumber(yyvsp[0].yyToken.lineNumber()) <<
                                       ": missing space before period.");
			  Token t;
			  t.dropChar(yyvsp[0].yyToken);
			  store(t);
			;
    break;}
case 66:
#line 465 "surface.yy"
{
			  IssueWarning(LineNumber(yyvsp[0].yyToken.lineNumber()) <<
                                       ": missing space before period.");
			  Token t;
			  t.dropChar(yyvsp[0].yyToken);
			  clear();
			  store(t);
			  CM->addType(false, bubble);
			;
    break;}
case 70:
#line 482 "surface.yy"
{
			  IssueWarning(LineNumber(yyvsp[0].yyToken.lineNumber()) <<
                                       ": missing space before period.");
			  Token t;
			  t.dropChar(yyvsp[0].yyToken);
			  store(t);
			;
    break;}
case 75:
#line 499 "surface.yy"
{
			  ModuleExpression* me = moduleExpressions.top();
			  moduleExpressions.pop();
			  CM->addImport(yyvsp[-1].yyToken, me);
			;
    break;}
case 76:
#line 505 "surface.yy"
{ clear(); ;
    break;}
case 77:
#line 506 "surface.yy"
{ CM->addSortDecl(bubble); ;
    break;}
case 78:
#line 508 "surface.yy"
{ clear(); ;
    break;}
case 79:
#line 509 "surface.yy"
{ CM->addSubsortDecl(bubble); ;
    break;}
case 80:
#line 511 "surface.yy"
{;
    break;}
case 81:
#line 513 "surface.yy"
{;
    break;}
case 82:
#line 515 "surface.yy"
{;
    break;}
case 83:
#line 517 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 84:
#line 518 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 85:
#line 519 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 86:
#line 521 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 87:
#line 522 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 88:
#line 523 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 89:
#line 524 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 90:
#line 526 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 91:
#line 527 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 92:
#line 528 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 93:
#line 530 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 94:
#line 531 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 95:
#line 532 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 96:
#line 533 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 97:
#line 535 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 98:
#line 536 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 99:
#line 537 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 100:
#line 539 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 101:
#line 540 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 102:
#line 541 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 103:
#line 542 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 104:
#line 545 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 105:
#line 550 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 106:
#line 555 "surface.yy"
{
			;
    break;}
case 107:
#line 558 "surface.yy"
{
			;
    break;}
case 108:
#line 561 "surface.yy"
{ clear(); ;
    break;}
case 109:
#line 562 "surface.yy"
{ CM->addSubsortDecl(bubble); ;
    break;}
case 110:
#line 565 "surface.yy"
{
			  //
			  //	Fix things that might be in a bad state due
			  //	to a partially processed declaration.
			  //
			  cleanUpModuleExpression();
			  CM->makeOpDeclsConsistent();
			;
    break;}
case 111:
#line 575 "surface.yy"
{;
    break;}
case 112:
#line 576 "surface.yy"
{;
    break;}
case 115:
#line 584 "surface.yy"
{
			;
    break;}
case 116:
#line 588 "surface.yy"
{ CM->addVarDecl(yyvsp[0].yyToken); ;
    break;}
case 117:
#line 589 "surface.yy"
{ CM->addVarDecl(yyvsp[0].yyToken); ;
    break;}
case 118:
#line 592 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 119:
#line 593 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 120:
#line 594 "surface.yy"
{ clear(); ;
    break;}
case 121:
#line 595 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 124:
#line 603 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  CM->addOpDecl(bubble);
			;
    break;}
case 125:
#line 608 "surface.yy"
{ clear(); ;
    break;}
case 126:
#line 609 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 127:
#line 613 "surface.yy"
{
			  if (yyvsp[-1].yyBool)
			    CM->convertSortsToKinds();
			;
    break;}
case 130:
#line 623 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 131:
#line 624 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 134:
#line 632 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  CM->addType(false, bubble);
			;
    break;}
case 135:
#line 637 "surface.yy"
{ clear(); ;
    break;}
case 136:
#line 639 "surface.yy"
{
			  CM->addType(true, bubble);
			;
    break;}
case 137:
#line 644 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 138:
#line 645 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 139:
#line 648 "surface.yy"
{;
    break;}
case 143:
#line 657 "surface.yy"
{
			  CM->setFlag(SymbolType::LEFT_ID | SymbolType::RIGHT_ID);
			;
    break;}
case 144:
#line 661 "surface.yy"
{
			  CM->setFlag(SymbolType::LEFT_ID);
			;
    break;}
case 145:
#line 665 "surface.yy"
{
			  CM->setFlag(SymbolType::RIGHT_ID);
			;
    break;}
case 146:
#line 671 "surface.yy"
{
			  CM->setFlag(SymbolType::ASSOC);
			;
    break;}
case 147:
#line 675 "surface.yy"
{
			  CM->setFlag(SymbolType::COMM);
			;
    break;}
case 148:
#line 678 "surface.yy"
{ clear(); ;
    break;}
case 149:
#line 679 "surface.yy"
{ CM->setIdentity(bubble); ;
    break;}
case 150:
#line 681 "surface.yy"
{
			  CM->setFlag(SymbolType::IDEM);
			;
    break;}
case 151:
#line 685 "surface.yy"
{
			  CM->setFlag(SymbolType::ITER);
			;
    break;}
case 152:
#line 688 "surface.yy"
{ CM->setPrec(yyvsp[0].yyToken); ;
    break;}
case 153:
#line 689 "surface.yy"
{ clear(); ;
    break;}
case 154:
#line 690 "surface.yy"
{ CM->setGather(bubble); ;
    break;}
case 155:
#line 691 "surface.yy"
{ clear(); ;
    break;}
case 156:
#line 692 "surface.yy"
{ CM->setFormat(bubble); ;
    break;}
case 157:
#line 693 "surface.yy"
{ clear(); ;
    break;}
case 158:
#line 694 "surface.yy"
{ CM->setStrat(bubble); ;
    break;}
case 159:
#line 695 "surface.yy"
{ clear(); ;
    break;}
case 160:
#line 696 "surface.yy"
{ CM->setPoly(bubble); ;
    break;}
case 161:
#line 698 "surface.yy"
{
			  CM->setFlag(SymbolType::MEMO);
			;
    break;}
case 162:
#line 702 "surface.yy"
{
			  CM->setFlag(SymbolType::CTOR);
			;
    break;}
case 163:
#line 706 "surface.yy"
{
			  clear();
			  CM->setFrozen(bubble);
			;
    break;}
case 164:
#line 710 "surface.yy"
{ clear(); ;
    break;}
case 165:
#line 711 "surface.yy"
{ CM->setFrozen(bubble); ;
    break;}
case 166:
#line 713 "surface.yy"
{
			  CM->setFlag(SymbolType::CONFIG);
			;
    break;}
case 167:
#line 717 "surface.yy"
{
			  CM->setFlag(SymbolType::OBJECT);
			;
    break;}
case 168:
#line 721 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 169:
#line 724 "surface.yy"
{ lexerLatexMode(); ;
    break;}
case 170:
#line 725 "surface.yy"
{ CM->setLatexMacro(yyvsp[-1].yyString); ;
    break;}
case 171:
#line 726 "surface.yy"
{;
    break;}
case 172:
#line 728 "surface.yy"
{
			  CM->setFlag(SymbolType::DITTO);
			;
    break;}
case 173:
#line 733 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 174:
#line 734 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 177:
#line 742 "surface.yy"
{
			  clear();
			  CM->addHook(PreModule::ID_HOOK, yyvsp[0].yyToken, bubble);
			;
    break;}
case 178:
#line 746 "surface.yy"
{ clear(); ;
    break;}
case 179:
#line 748 "surface.yy"
{
			  CM->addHook(PreModule::ID_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 180:
#line 751 "surface.yy"
{ clear(); ;
    break;}
case 181:
#line 753 "surface.yy"
{
			  CM->addHook(PreModule::OP_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 182:
#line 756 "surface.yy"
{ clear(); ;
    break;}
case 183:
#line 758 "surface.yy"
{
			  CM->addHook(PreModule::TERM_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 184:
#line 766 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 186:
#line 770 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 187:
#line 771 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 188:
#line 772 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 189:
#line 773 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 190:
#line 779 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 191:
#line 780 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 192:
#line 781 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 194:
#line 785 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 195:
#line 786 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 196:
#line 787 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 198:
#line 791 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 199:
#line 792 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 200:
#line 793 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 202:
#line 797 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 203:
#line 798 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 204:
#line 799 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 206:
#line 803 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 207:
#line 804 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 208:
#line 805 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 210:
#line 809 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 211:
#line 810 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 212:
#line 811 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 214:
#line 815 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 215:
#line 816 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 216:
#line 817 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 219:
#line 822 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 220:
#line 823 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 221:
#line 826 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 222:
#line 827 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 223:
#line 828 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 224:
#line 829 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 225:
#line 830 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 226:
#line 831 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 227:
#line 832 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 228:
#line 838 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 229:
#line 839 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 234:
#line 843 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 235:
#line 844 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 407:
#line 945 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 408:
#line 946 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 409:
#line 948 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.setCurrentModule(bubble);
			;
    break;}
case 410:
#line 952 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 411:
#line 953 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 412:
#line 955 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->dump();
			;
    break;}
case 413:
#line 961 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 414:
#line 967 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.parse(bubble);
			;
    break;}
case 415:
#line 974 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 416:
#line 980 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.creduce(bubble);
			;
    break;}
case 417:
#line 987 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 418:
#line 993 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.reduce(bubble, yyvsp[-3].yyBool);
			;
    break;}
case 419:
#line 1000 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 420:
#line 1007 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.rewrite(bubble, number, yyvsp[-3].yyBool);
			;
    break;}
case 421:
#line 1013 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 422:
#line 1020 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    ;
			;
    break;}
case 423:
#line 1026 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			  number2 = NONE;
			;
    break;}
case 424:
#line 1034 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.fRewrite(bubble, number, number2, yyvsp[-3].yyBool);
			;
    break;}
case 425:
#line 1040 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 426:
#line 1047 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.search(bubble, number);
			;
    break;}
case 427:
#line 1053 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 428:
#line 1060 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.match(bubble, yyvsp[-2].yyBool, number);
			;
    break;}
case 429:
#line 1066 "surface.yy"
{
			  interpreter.cont(yyvsp[-1].yyInt64, yyvsp[-3].yyBool);
			;
    break;}
case 430:
#line 1070 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 431:
#line 1076 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.loop(bubble);
			;
    break;}
case 432:
#line 1081 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 433:
#line 1083 "surface.yy"
{
			  lexerInitialMode();
			  moduleExpr.contractTo(0);
			  if (interpreter.setCurrentModule(moduleExpr))  // HACK
			    interpreter.contLoop(bubble);
			;
    break;}
case 434:
#line 1090 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 435:
#line 1092 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.traceSelect(yyvsp[-3].yyBool);
			;
    break;}
case 436:
#line 1096 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 437:
#line 1098 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.traceExclude(yyvsp[-3].yyBool);
			;
    break;}
case 438:
#line 1102 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 439:
#line 1104 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.breakSelect(yyvsp[-3].yyBool);
			;
    break;}
case 440:
#line 1108 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 441:
#line 1110 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.printConceal(yyvsp[-3].yyBool);
			;
    break;}
case 442:
#line 1115 "surface.yy"
{
			  if (CM != 0)  // HACK
			    CM->getFlatSignature()->clearMemo();
			;
    break;}
case 443:
#line 1122 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 444:
#line 1124 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->showModule();
			;
    break;}
case 445:
#line 1129 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 446:
#line 1131 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->showModule();
			;
    break;}
case 447:
#line 1136 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 448:
#line 1138 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showModule(true);
			;
    break;}
case 449:
#line 1144 "surface.yy"
{
			  interpreter.showModules(true);
			;
    break;}
case 450:
#line 1147 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 451:
#line 1149 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showSortsAndSubsorts();
			;
    break;}
case 452:
#line 1154 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 453:
#line 1156 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showOps();
			;
    break;}
case 454:
#line 1161 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 455:
#line 1163 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showVars();
			;
    break;}
case 456:
#line 1168 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 457:
#line 1170 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showMbs();
			;
    break;}
case 458:
#line 1175 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 459:
#line 1177 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showEqs();
			;
    break;}
case 460:
#line 1182 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 461:
#line 1184 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showRls();
			;
    break;}
case 462:
#line 1189 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 463:
#line 1191 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showSummary();
			;
    break;}
case 464:
#line 1196 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 465:
#line 1198 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showKinds();
			;
    break;}
case 466:
#line 1204 "surface.yy"
{
			  interpreter.showSearchPath(yyvsp[-1].yyInt64);
			;
    break;}
case 467:
#line 1208 "surface.yy"
{
			  interpreter.showSearchGraph();
			;
    break;}
case 468:
#line 1211 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 469:
#line 1213 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showProfile();
			;
    break;}
case 470:
#line 1222 "surface.yy"
{
			  globalAdvisoryFlag = yyvsp[-1].yyBool;
			;
    break;}
case 471:
#line 1226 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 472:
#line 1230 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_LOOP_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 473:
#line 1234 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_TIMING, yyvsp[-1].yyBool);
			;
    break;}
case 474:
#line 1238 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_BREAKDOWN, yyvsp[-1].yyBool);
			;
    break;}
case 475:
#line 1242 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_LOOP_TIMING, yyvsp[-1].yyBool);
			;
    break;}
case 476:
#line 1246 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_COMMAND, yyvsp[-1].yyBool);
			;
    break;}
case 477:
#line 1250 "surface.yy"
{
			  MemoryCell::setShowGC(yyvsp[-1].yyBool);
			;
    break;}
case 478:
#line 1254 "surface.yy"
{
			  MixfixModule::setPrintMixfix(yyvsp[-1].yyBool);
			;
    break;}
case 479:
#line 1258 "surface.yy"
{
			  MixfixModule::setPrintFlat(yyvsp[-1].yyBool);
			;
    break;}
case 480:
#line 1262 "surface.yy"
{
			  MixfixModule::setPrintWithAliases(yyvsp[-1].yyBool);
			;
    break;}
case 481:
#line 1266 "surface.yy"
{
			  MixfixModule::setPrintWithParens(yyvsp[-1].yyBool);
			;
    break;}
case 482:
#line 1270 "surface.yy"
{
			  MixfixModule::setPrintGraph(yyvsp[-1].yyBool);
			;
    break;}
case 483:
#line 1274 "surface.yy"
{
			  MixfixModule::setPrintConceal(yyvsp[-1].yyBool);
			;
    break;}
case 484:
#line 1278 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_NUMBER, yyvsp[-1].yyBool);
			;
    break;}
case 485:
#line 1282 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_RAT, yyvsp[-1].yyBool);
			;
    break;}
case 486:
#line 1286 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_COLOR, yyvsp[-1].yyBool);
			;
    break;}
case 487:
#line 1290 "surface.yy"
{
			  MixfixModule::setPrintFormat(yyvsp[-1].yyBool);
			;
    break;}
case 488:
#line 1294 "surface.yy"
{
			  interpreter.setFlag(Interpreter::TRACE, yyvsp[-1].yyBool);
			;
    break;}
case 489:
#line 1298 "surface.yy"
{
			  UserLevelRewritingContext::setTraceConditionFlag(yyvsp[-1].yyBool);
			;
    break;}
case 490:
#line 1302 "surface.yy"
{
			// ??? what is this supposed to do?
			;
    break;}
case 491:
#line 1306 "surface.yy"
{
			  UserLevelRewritingContext::setTraceWholeFlag(yyvsp[-1].yyBool);
			;
    break;}
case 492:
#line 1310 "surface.yy"
{
			  UserLevelRewritingContext::setTraceSubstitutionFlag(yyvsp[-1].yyBool);
			;
    break;}
case 493:
#line 1314 "surface.yy"
{
			  UserLevelRewritingContext::setTraceSelectFlag(yyvsp[-1].yyBool);
			;
    break;}
case 494:
#line 1318 "surface.yy"
{
			  UserLevelRewritingContext::setTraceScFlag(yyvsp[-1].yyBool);
			;
    break;}
case 495:
#line 1322 "surface.yy"
{
			  UserLevelRewritingContext::setTraceEqFlag(yyvsp[-1].yyBool);
			;
    break;}
case 496:
#line 1326 "surface.yy"
{
			  UserLevelRewritingContext::setTraceRuleFlag(yyvsp[-1].yyBool);
			;
    break;}
case 497:
#line 1330 "surface.yy"
{
			  interpreter.setFlag(Interpreter::BREAK, yyvsp[-1].yyBool);
			;
    break;}
case 498:
#line 1333 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 499:
#line 1334 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 500:
#line 1336 "surface.yy"
{
			  interpreter.setAutoImport(yyvsp[-5].yyImportMode, yyvsp[-3].yyToken, yyvsp[-1].yyBool);
			;
    break;}
case 501:
#line 1339 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 502:
#line 1340 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 503:
#line 1342 "surface.yy"
{
			  interpreter.setOmodInclude(yyvsp[-3].yyToken, yyvsp[-1].yyBool);
			;
    break;}
case 504:
#line 1346 "surface.yy"
{
			  globalVerboseFlag = yyvsp[-1].yyBool;
			;
    break;}
case 505:
#line 1350 "surface.yy"
{
			  interpreter.setFlag(Interpreter::AUTO_CLEAR_MEMO, yyvsp[-1].yyBool);
			;
    break;}
case 506:
#line 1354 "surface.yy"
{
			  interpreter.setFlag(Interpreter::COMPILE_COUNT, yyvsp[-1].yyBool);
			;
    break;}
case 507:
#line 1358 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PROFILE, yyvsp[-1].yyBool);
			;
    break;}
case 508:
#line 1362 "surface.yy"
{
			  interpreter.setFlag(Interpreter::AUTO_CLEAR_PROFILE, yyvsp[-1].yyBool);
			;
    break;}
case 509:
#line 1369 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::RESUME;
			;
    break;}
case 510:
#line 1373 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::ABORT;
			;
    break;}
case 511:
#line 1377 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::STEP;
			;
    break;}
case 512:
#line 1381 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::WHERE;
			;
    break;}
case 513:
#line 1388 "surface.yy"
{
			  MemoryCell::setShowGC(yyvsp[-1].yyBool);
			;
    break;}
case 514:
#line 1392 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 515:
#line 1398 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 517:
#line 1405 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 518:
#line 1406 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 519:
#line 1409 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 520:
#line 1410 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 521:
#line 1413 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 522:
#line 1414 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 523:
#line 1417 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 524:
#line 1418 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 525:
#line 1421 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 526:
#line 1422 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 527:
#line 1425 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 528:
#line 1426 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 529:
#line 1429 "surface.yy"
{ yyval.yyInt64 = yyvsp[0].yyInt64; ;
    break;}
case 530:
#line 1430 "surface.yy"
{ yyval.yyInt64 = NONE; ;
    break;}
case 531:
#line 1433 "surface.yy"
{ yyval.yyImportMode = ImportModule::PROTECTING; ;
    break;}
case 532:
#line 1434 "surface.yy"
{ yyval.yyImportMode = ImportModule::EXTENDING; ;
    break;}
case 533:
#line 1435 "surface.yy"
{ yyval.yyImportMode = ImportModule::INCLUDING; ;
    break;}
case 534:
#line 1443 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 536:
#line 1445 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 538:
#line 1449 "surface.yy"
{ moduleExpr = bubble; clear(); ;
    break;}
case 539:
#line 1450 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 540:
#line 1451 "surface.yy"
{;
    break;}
case 541:
#line 1452 "surface.yy"
{;
    break;}
case 542:
#line 1461 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 544:
#line 1463 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 546:
#line 1465 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 548:
#line 1470 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 550:
#line 1472 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 552:
#line 1474 "surface.yy"
{;
    break;}
case 553:
#line 1479 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  clear();
			;
    break;}
case 555:
#line 1484 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 557:
#line 1486 "surface.yy"
{;
    break;}
case 558:
#line 1495 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 560:
#line 1497 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 562:
#line 1499 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 564:
#line 1504 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 566:
#line 1506 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 568:
#line 1508 "surface.yy"
{;
    break;}
case 569:
#line 1513 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  clear();
			;
    break;}
case 571:
#line 1518 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 573:
#line 1520 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 575:
#line 1522 "surface.yy"
{;
    break;}
case 576:
#line 1526 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 578:
#line 1528 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 580:
#line 1530 "surface.yy"
{;
    break;}
case 581:
#line 1535 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  number2 = Token::codeToInt64(bubble[3].code());
			  clear();
			;
    break;}
case 583:
#line 1541 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 585:
#line 1543 "surface.yy"
{;
    break;}
case 586:
#line 1549 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 588:
#line 1553 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 590:
#line 1558 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 600:
#line 1566 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 601:
#line 1567 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 609:
#line 1571 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 610:
#line 1572 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 617:
#line 1577 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 618:
#line 1578 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 626:
#line 1582 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 627:
#line 1583 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 634:
#line 1587 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 635:
#line 1588 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 642:
#line 1593 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 643:
#line 1594 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 650:
#line 1599 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 651:
#line 1600 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 657:
#line 1605 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 658:
#line 1606 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 661:
#line 1617 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  interpreter.addSelected(bubble);
			;
    break;}
case 662:
#line 1622 "surface.yy"
{ clear(); ;
    break;}
case 663:
#line 1624 "surface.yy"
{
			  interpreter.addSelected(bubble);
			;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/csl/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1654 "surface.yy"


static void
yyerror(char *s)
{
  if (!(UserLevelRewritingContext::interrupted()))
    IssueWarning(LineNumber(lineNumber) << ": " << s);
}

void
cleanUpModuleExpression()
{
  //
  //	Delete pieces of a partly built module expression.
  //
  delete currentRenaming;
  currentRenaming = 0;
  while (!moduleExpressions.empty())
    {
      moduleExpressions.top()->deepSelfDestruct();
      moduleExpressions.pop();
    }
}

void
cleanUpParser()
{
  //bubble.contractTo(0);
  //moduleExpr.contractTo(0);
  //pattern.contractTo(0);
  interpreter.makeClean(lineNumber);
  /*
  if (currentModule != 0 && !(currentModule->isComplete()))
    {
      IssueAdvisory(cerr << LineNumber(lineNumber) << ": discarding incomplete module.");
      delete currentModule;
      currentModule = 0;
    }
  */
}
