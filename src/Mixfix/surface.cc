
/*  A Bison parser, made from surface.yy
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FILE_NAME_STRING	257
#define	UNINTERPRETED_STRING	258
#define	LATEX_STRING	259
#define	KW_FMOD	260
#define	KW_MOD	261
#define	KW_OMOD	262
#define	KW_PARSE	263
#define	KW_NORMALIZE	264
#define	KW_REDUCE	265
#define	KW_REWRITE	266
#define	KW_LOOP	267
#define	KW_NARROW	268
#define	KW_MATCH	269
#define	KW_XMATCH	270
#define	KW_UNIFY	271
#define	KW_XUNIFY	272
#define	KW_EREWRITE	273
#define	KW_FREWRITE	274
#define	KW_OREWRITE	275
#define	KW_CONTINUE	276
#define	KW_SEARCH	277
#define	KW_SET	278
#define	KW_SHOW	279
#define	KW_ON	280
#define	KW_OFF	281
#define	KW_TRACE	282
#define	KW_CONTEXT	283
#define	KW_WHOLE	284
#define	KW_SELECT	285
#define	KW_DESELECT	286
#define	KW_CONDITION	287
#define	KW_SUBSTITUTION	288
#define	KW_PRINT	289
#define	KW_GRAPH	290
#define	KW_MIXFIX	291
#define	KW_FLAT	292
#define	KW_WITH	293
#define	KW_PARENS	294
#define	KW_ALIASES	295
#define	KW_GC	296
#define	KW_TIME	297
#define	KW_STATS	298
#define	KW_TIMING	299
#define	KW_CMD	300
#define	KW_BREAKDOWN	301
#define	KW_BREAK	302
#define	KW_PATH	303
#define	KW_MODULE	304
#define	KW_MODULES	305
#define	KW_ALL	306
#define	KW_SORTS	307
#define	KW_OPS	308
#define	KW_VARS	309
#define	KW_MBS	310
#define	KW_EQS	311
#define	KW_RLS	312
#define	KW_SUMMARY	313
#define	KW_KINDS	314
#define	KW_ADVISE	315
#define	KW_VERBOSE	316
#define	KW_DO	317
#define	KW_CLEAR	318
#define	KW_PROTECT	319
#define	KW_EXTEND	320
#define	KW_INCLUDE	321
#define	KW_EXCLUDE	322
#define	KW_CONCEAL	323
#define	KW_REVEAL	324
#define	KW_COMPILE	325
#define	KW_COUNT	326
#define	KW_DEBUG	327
#define	KW_RESUME	328
#define	KW_ABORT	329
#define	KW_STEP	330
#define	KW_WHERE	331
#define	KW_CREDUCE	332
#define	KW_DUMP	333
#define	KW_PROFILE	334
#define	KW_NUMBER	335
#define	KW_RAT	336
#define	KW_COLOR	337
#define	SIMPLE_NUMBER	338
#define	KW_PWD	339
#define	KW_CD	340
#define	KW_PUSHD	341
#define	KW_POPD	342
#define	KW_LS	343
#define	KW_LOAD	344
#define	KW_QUIT	345
#define	KW_EOF	346
#define	KW_ENDFM	347
#define	KW_ENDM	348
#define	KW_ENDOM	349
#define	KW_IMPORT	350
#define	KW_SORT	351
#define	KW_SUBSORT	352
#define	KW_OP	353
#define	KW_MSGS	354
#define	KW_VAR	355
#define	KW_CLASS	356
#define	KW_SUBCLASS	357
#define	KW_MB	358
#define	KW_CMB	359
#define	KW_EQ	360
#define	KW_CEQ	361
#define	KW_RL	362
#define	KW_CRL	363
#define	KW_IS	364
#define	KW_ARROW	365
#define	KW_ARROW2	366
#define	KW_PARTIAL	367
#define	KW_IF	368
#define	KW_LABEL	369
#define	KW_TO	370
#define	KW_ASSOC	371
#define	KW_COMM	372
#define	KW_ID	373
#define	KW_IDEM	374
#define	KW_ITER	375
#define	KW_LEFT	376
#define	KW_RIGHT	377
#define	KW_PREC	378
#define	KW_GATHER	379
#define	KW_STRAT	380
#define	KW_POLY	381
#define	KW_MEMO	382
#define	KW_FROZEN	383
#define	KW_CTOR	384
#define	KW_LATEX	385
#define	KW_SPECIAL	386
#define	KW_CONFIG	387
#define	KW_OBJ	388
#define	KW_MSG	389
#define	KW_DITTO	390
#define	KW_FORMAT	391
#define	KW_ID_HOOK	392
#define	KW_OP_HOOK	393
#define	KW_TERM_HOOK	394
#define	KW_IN	395
#define	IDENTIFIER	396
#define	NUMERIC_ID	397

#line 27 "surface.yy"

#include <string>
#include <stack>

//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "renaming.hh"
#include "moduleExpression.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "visibleModule.hh"  // HACK
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

#include "main.hh"
#define clear()		bubble.contractTo(0);
#define store(token)	bubble.append(token)
#define YYPARSE_PARAM	parseResult
#define PARSE_RESULT	(*((UserLevelRewritingContext::ParseResult*) parseResult))

#define CM		interpreter.getCurrentModule()

void lexerInitialMode();
void lexerIdMode();
void lexerCmdMode();
void lexerFileNameMode();
void lexerStringMode();
void lexerLatexMode();
bool handleEof();
bool includeFile(const string& directory, const string& fileName, bool silent, int lineNr);
void eatComment(bool firstNonWhite);

Vector<Token> bubble;
Vector<Token> moduleExpr;
stack<ModuleExpression*> moduleExpressions;
Renaming* currentRenaming = 0;

Int64 number;
Int64 number2;

static void yyerror(char *s);

void cleanUpModuleExpression();
void cleanUpParser();

#line 88 "surface.yy"
typedef union
{
  bool yyBool;
  Int64 yyInt64;
  const char* yyString;
  Token yyToken;
  ModuleDatabase::ImportMode yyImportMode;
} YYSTYPE;
#line 97 "surface.yy"

int yylex(YYSTYPE* lvalp);
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1048
#define	YYFLAG		-32768
#define	YYNTBASE	156

#define YYTRANSLATE(x) ((unsigned)(x) <= 397 ? yytranslate[x] : 398)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   117,
   118,   128,   127,   123,     2,   119,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   115,     2,   120,
   116,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   121,     2,   122,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,   124,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   125,   126,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,     9,    10,    14,    15,    19,
    21,    22,    26,    27,    31,    33,    34,    38,    40,    42,
    44,    48,    52,    56,    57,    62,    66,    68,    73,    78,
    85,    86,    90,    91,    96,   101,   102,   105,   106,   108,
   109,   114,   115,   119,   120,   125,   129,   130,   133,   135,
   138,   139,   145,   146,   152,   153,   159,   160,   161,   169,
   170,   171,   179,   180,   181,   189,   191,   193,   195,   197,
   199,   201,   203,   205,   207,   209,   211,   213,   216,   217,
   220,   221,   224,   225,   229,   230,   235,   236,   237,   246,
   250,   254,   260,   261,   262,   270,   271,   272,   273,   284,
   285,   286,   294,   295,   296,   297,   308,   311,   313,   314,
   315,   323,   324,   325,   326,   337,   339,   343,   347,   348,
   354,   355,   356,   365,   367,   370,   372,   376,   380,   383,
   385,   386,   390,   391,   396,   399,   401,   403,   404,   409,
   416,   418,   420,   423,   424,   426,   427,   432,   436,   438,
   442,   443,   446,   448,   450,   453,   456,   458,   460,   461,
   465,   467,   469,   472,   473,   479,   480,   486,   487,   493,
   494,   500,   502,   504,   506,   507,   513,   515,   517,   519,
   520,   526,   531,   533,   536,   538,   541,   543,   546,   547,
   554,   555,   562,   563,   570,   573,   574,   577,   578,   579,
   585,   588,   589,   590,   596,   599,   600,   601,   607,   610,
   611,   612,   618,   621,   622,   623,   629,   632,   633,   634,
   640,   643,   644,   645,   651,   654,   655,   657,   660,   662,
   663,   668,   669,   675,   678,   681,   683,   685,   688,   690,
   692,   694,   696,   697,   702,   704,   706,   708,   710,   712,
   714,   716,   718,   720,   722,   724,   726,   728,   730,   732,
   734,   736,   738,   740,   742,   744,   746,   748,   750,   752,
   754,   756,   758,   760,   762,   764,   766,   768,   770,   772,
   774,   776,   778,   780,   782,   784,   786,   788,   790,   792,
   794,   796,   798,   800,   802,   804,   806,   808,   810,   812,
   814,   816,   818,   820,   822,   824,   826,   828,   830,   832,
   834,   836,   838,   840,   842,   844,   846,   848,   850,   852,
   854,   856,   858,   860,   862,   864,   866,   868,   870,   872,
   874,   876,   878,   880,   882,   884,   886,   888,   890,   892,
   894,   896,   898,   900,   902,   904,   906,   908,   910,   912,
   914,   916,   918,   920,   922,   924,   926,   928,   930,   932,
   934,   936,   938,   940,   942,   944,   946,   948,   950,   952,
   954,   956,   958,   960,   962,   964,   966,   968,   970,   972,
   974,   976,   978,   980,   982,   984,   986,   988,   990,   992,
   994,   996,   998,  1000,  1002,  1004,  1006,  1008,  1010,  1012,
  1014,  1016,  1018,  1020,  1022,  1024,  1026,  1027,  1028,  1035,
  1036,  1037,  1044,  1045,  1049,  1050,  1054,  1055,  1060,  1061,
  1066,  1067,  1072,  1073,  1078,  1079,  1083,  1084,  1088,  1093,
  1094,  1098,  1099,  1104,  1105,  1111,  1112,  1118,  1119,  1125,
  1126,  1132,  1137,  1138,  1144,  1145,  1151,  1152,  1158,  1162,
  1163,  1169,  1170,  1176,  1177,  1183,  1184,  1190,  1191,  1197,
  1198,  1204,  1205,  1211,  1212,  1218,  1223,  1228,  1229,  1235,
  1241,  1247,  1254,  1260,  1266,  1273,  1279,  1285,  1291,  1297,
  1304,  1311,  1317,  1323,  1329,  1335,  1341,  1347,  1352,  1358,
  1364,  1370,  1376,  1382,  1388,  1394,  1400,  1405,  1406,  1407,
  1415,  1416,  1417,  1426,  1431,  1437,  1443,  1448,  1454,  1457,
  1460,  1463,  1466,  1472,  1477,  1478,  1482,  1484,  1486,  1488,
  1490,  1492,  1494,  1496,  1498,  1500,  1502,  1504,  1505,  1507,
  1508,  1510,  1512,  1514,  1515,  1520,  1521,  1526,  1527,  1528,
  1535,  1537,  1538,  1542,  1543,  1548,  1549,  1554,  1555,  1559,
  1560,  1565,  1567,  1568,  1572,  1573,  1578,  1580,  1581,  1585,
  1586,  1591,  1592,  1597,  1598,  1602,  1603,  1608,  1610,  1611,
  1615,  1616,  1620,  1621,  1626,  1628,  1629,  1633,  1634,  1639,
  1641,  1642,  1646,  1647,  1652,  1654,  1657,  1658,  1661,  1662,
  1665,  1666,  1668,  1670,  1672,  1674,  1676,  1678,  1680,  1682,
  1683,  1688,  1690,  1692,  1694,  1696,  1698,  1700,  1702,  1703,
  1708,  1710,  1712,  1714,  1716,  1718,  1720,  1721,  1726,  1728,
  1730,  1732,  1734,  1736,  1738,  1740,  1741,  1746,  1748,  1750,
  1752,  1754,  1756,  1758,  1759,  1764,  1766,  1768,  1770,  1772,
  1774,  1776,  1777,  1782,  1784,  1786,  1788,  1790,  1792,  1794,
  1795,  1800,  1802,  1804,  1806,  1808,  1810,  1811,  1816,  1819,
  1821,  1823,  1824,  1829,  1831,  1833,  1835,  1837,  1839,  1841
};

static const short yyrhs[] = {   157,
     0,     0,   185,     0,   158,     0,   298,     0,     0,   153,
   159,     3,     0,     0,    90,   160,     3,     0,    85,     0,
     0,    86,   161,     3,     0,     0,    87,   162,     3,     0,
    88,     0,     0,    89,   163,     4,     0,    91,     0,    92,
     0,   281,     0,   164,   127,   164,     0,   164,   128,   165,
     0,   117,   164,   118,     0,     0,   117,   166,   167,   118,
     0,   167,   123,   168,     0,   168,     0,    97,   281,   126,
   281,     0,   125,   292,   126,   292,     0,    99,   169,   172,
   126,   176,   179,     0,     0,   281,   170,   264,     0,     0,
   117,   171,   260,   118,     0,   115,   173,   236,   174,     0,
     0,   173,   174,     0,     0,   291,     0,     0,   121,   175,
   240,   122,     0,     0,   281,   177,   266,     0,     0,   117,
   178,   260,   118,     0,   121,   180,   122,     0,     0,   180,
   181,     0,   181,     0,   136,   154,     0,     0,   137,   117,
   182,   252,   118,     0,     0,   149,   117,   183,   252,   118,
     0,     0,   143,   117,   184,     5,   118,     0,     0,     0,
     6,   186,   281,   110,   187,   198,   192,     0,     0,     0,
     7,   188,   281,   110,   189,   199,   194,     0,     0,     0,
     8,   190,   281,   110,   191,   200,   196,     0,    93,     0,
   193,     0,    94,     0,    95,     0,    94,     0,   195,     0,
    93,     0,    95,     0,    95,     0,   197,     0,    93,     0,
    94,     0,   198,   201,     0,     0,   199,   215,     0,     0,
   200,   221,     0,     0,    96,   164,   119,     0,     0,    97,
   202,   259,   119,     0,     0,     0,    98,   281,   203,   258,
   120,   204,   259,   119,     0,    99,   229,   235,     0,    54,
   232,   235,     0,   101,   228,   115,   238,   119,     0,     0,
     0,   104,   205,   262,   115,   206,   274,   119,     0,     0,
     0,     0,   105,   207,   262,   115,   208,   272,   114,   209,
   274,   119,     0,     0,     0,   106,   210,   268,   116,   211,
   274,   119,     0,     0,     0,     0,   107,   212,   268,   116,
   213,   272,   114,   214,   274,   119,     0,     1,   119,     0,
   201,     0,     0,     0,   108,   216,   270,   112,   217,   274,
   119,     0,     0,     0,     0,   109,   218,   270,   112,   219,
   272,   114,   220,   274,   119,     0,   215,     0,   147,   229,
   235,     0,   100,   232,   235,     0,     0,   102,   281,   222,
   225,   119,     0,     0,     0,   103,   281,   223,   258,   120,
   224,   259,   119,     0,   124,     0,   124,   226,     0,   227,
     0,   226,   123,   227,     0,   282,   115,   281,     0,   228,
   287,     0,   287,     0,     0,   281,   230,   262,     0,     0,
   117,   231,   260,   118,     0,   232,   233,     0,   233,     0,
   287,     0,     0,   117,   234,   260,   118,     0,   115,   237,
   236,   238,   241,   119,     0,   111,     0,   113,     0,   237,
   238,     0,     0,   291,     0,     0,   121,   239,   240,   122,
     0,   240,   123,   291,     0,   291,     0,   121,   242,   122,
     0,     0,   242,   244,     0,   244,     0,   131,     0,   134,
   131,     0,   135,   131,     0,   129,     0,   130,     0,     0,
   243,   245,   278,     0,   132,     0,   133,     0,   136,   154,
     0,     0,   137,   117,   246,   252,   118,     0,     0,   149,
   117,   247,   252,   118,     0,     0,   138,   117,   248,   252,
   118,     0,     0,   139,   117,   249,   252,   118,     0,   140,
     0,   142,     0,   141,     0,     0,   141,   117,   250,   252,
   118,     0,   145,     0,   146,     0,   147,     0,     0,   143,
   117,   251,     5,   118,     0,   144,   117,   253,   118,     0,
   148,     0,   252,   154,     0,   154,     0,   253,   254,     0,
   254,     0,   150,   281,     0,     0,   150,   281,   117,   255,
   260,   118,     0,     0,   151,   281,   117,   256,   260,   118,
     0,     0,   152,   281,   117,   257,   260,   118,     0,   258,
   288,     0,     0,   259,   282,     0,     0,     0,   260,   117,
   261,   260,   118,     0,   260,   281,     0,     0,     0,   262,
   117,   263,   260,   118,     0,   262,   287,     0,     0,     0,
   264,   117,   265,   260,   118,     0,   264,   289,     0,     0,
     0,   266,   117,   267,   260,   118,     0,   266,   290,     0,
     0,     0,   268,   117,   269,   260,   118,     0,   268,   285,
     0,     0,     0,   270,   117,   271,   260,   118,     0,   270,
   284,     0,     0,     0,   272,   117,   273,   260,   118,     0,
   272,   286,     0,     0,   275,     0,   274,   119,     0,   119,
     0,     0,   117,   276,   260,   118,     0,     0,   274,   117,
   277,   260,   118,     0,   275,   293,     0,   274,   283,     0,
   282,     0,   279,     0,   278,   279,     0,   292,     0,   294,
     0,   295,     0,   119,     0,     0,   117,   280,   260,   118,
     0,   292,     0,   293,     0,   295,     0,   296,     0,   119,
     0,   292,     0,   293,     0,   295,     0,   296,     0,   292,
     0,   295,     0,   296,     0,   292,     0,   293,     0,   296,
     0,   119,     0,   120,     0,   115,     0,   111,     0,   113,
     0,   116,     0,   114,     0,   110,     0,   292,     0,   293,
     0,   296,     0,   119,     0,   120,     0,   115,     0,   111,
     0,   113,     0,   112,     0,   114,     0,   110,     0,   292,
     0,   293,     0,   296,     0,   119,     0,   120,     0,   115,
     0,   111,     0,   113,     0,   116,     0,   112,     0,   110,
     0,   292,     0,   293,     0,   296,     0,   119,     0,   120,
     0,   111,     0,   113,     0,   116,     0,   112,     0,   114,
     0,   110,     0,   292,     0,   293,     0,   296,     0,   119,
     0,   115,     0,   111,     0,   113,     0,   116,     0,   112,
     0,   114,     0,   110,     0,   154,     0,   123,     0,   124,
     0,   125,     0,   127,     0,   128,     0,   293,     0,   296,
     0,   119,     0,   120,     0,   111,     0,   113,     0,   116,
     0,   112,     0,   114,     0,   110,     0,   154,     0,   124,
     0,   125,     0,   126,     0,   127,     0,   128,     0,   293,
     0,   297,     0,   119,     0,   122,     0,   295,     0,   292,
     0,   293,     0,   297,     0,   116,     0,   112,     0,   114,
     0,   110,     0,   154,     0,   123,     0,   124,     0,   125,
     0,   126,     0,   127,     0,   128,     0,   147,     0,   294,
     0,    96,     0,    97,     0,    98,     0,    99,     0,    54,
     0,   101,     0,   100,     0,   102,     0,   103,     0,   104,
     0,   105,     0,   106,     0,   107,     0,   108,     0,   109,
     0,    93,     0,    94,     0,    95,     0,   120,     0,   115,
     0,   111,     0,   113,     0,   116,     0,   112,     0,   114,
     0,   110,     0,   121,     0,   122,     0,   297,     0,   129,
     0,   130,     0,   131,     0,   132,     0,   133,     0,   134,
     0,   135,     0,   136,     0,   137,     0,   138,     0,   139,
     0,   140,     0,   142,     0,   143,     0,   144,     0,   141,
     0,   145,     0,   146,     0,   148,     0,   149,     0,   150,
     0,   151,     0,   152,     0,     0,     0,    31,   299,   378,
   300,   376,   119,     0,     0,     0,    79,   301,   378,   302,
   376,   119,     0,     0,     9,   303,   342,     0,     0,    78,
   304,   342,     0,     0,   339,    11,   305,   342,     0,     0,
   339,    12,   306,   348,     0,     0,   339,    19,   307,   348,
     0,     0,   339,    20,   308,   358,     0,     0,    23,   309,
   348,     0,     0,   338,   310,   348,     0,   339,    22,   340,
   119,     0,     0,    13,   311,   342,     0,     0,   117,   312,
   375,   118,     0,     0,    28,   335,   313,   394,   119,     0,
     0,    28,   336,   314,   394,   119,     0,     0,    48,   335,
   315,   394,   119,     0,     0,    35,   337,   316,   394,   119,
     0,    63,    64,   140,   119,     0,     0,    25,     7,   317,
   376,   119,     0,     0,    25,    50,   318,   376,   119,     0,
     0,    25,    52,   319,   376,   119,     0,    25,    51,   119,
     0,     0,    25,    53,   320,   376,   119,     0,     0,    25,
    54,   321,   376,   119,     0,     0,    25,    55,   322,   376,
   119,     0,     0,    25,    56,   323,   376,   119,     0,     0,
    25,    57,   324,   376,   119,     0,     0,    25,    58,   325,
   376,   119,     0,     0,    25,    59,   326,   376,   119,     0,
     0,    25,    60,   327,   376,   119,     0,    25,    49,    84,
   119,     0,    25,    23,    36,   119,     0,     0,    25,    80,
   328,   376,   119,     0,    24,    25,    61,   334,   119,     0,
    24,    25,    44,   334,   119,     0,    24,    25,    13,    44,
   334,   119,     0,    24,    25,    45,   334,   119,     0,    24,
    25,    47,   334,   119,     0,    24,    25,    13,    45,   334,
   119,     0,    24,    25,    46,   334,   119,     0,    24,    25,
    42,   334,   119,     0,    24,    35,    37,   334,   119,     0,
    24,    35,    38,   334,   119,     0,    24,    35,    39,    41,
   334,   119,     0,    24,    35,    39,    40,   334,   119,     0,
    24,    35,    36,   334,   119,     0,    24,    35,    69,   334,
   119,     0,    24,    35,    81,   334,   119,     0,    24,    35,
    82,   334,   119,     0,    24,    35,    83,   334,   119,     0,
    24,    35,   149,   334,   119,     0,    24,    28,   334,   119,
     0,    24,    28,    33,   334,   119,     0,    24,    28,    29,
   334,   119,     0,    24,    28,    30,   334,   119,     0,    24,
    28,    34,   334,   119,     0,    24,    28,    31,   334,   119,
     0,    24,    28,    56,   334,   119,     0,    24,    28,    57,
   334,   119,     0,    24,    28,    58,   334,   119,     0,    24,
    48,   334,   119,     0,     0,     0,    24,   341,   329,   397,
   330,   334,   119,     0,     0,     0,    24,     8,    67,   331,
   397,   332,   334,   119,     0,    24,    62,   334,   119,     0,
    24,    64,   140,   334,   119,     0,    24,    71,    72,   334,
   119,     0,    24,    80,   334,   119,     0,    24,    64,    80,
   334,   119,     0,    74,   119,     0,    75,   119,     0,    76,
   119,     0,    77,   119,     0,    24,    42,    25,   334,   119,
     0,    24,    44,   334,   119,     0,     0,     1,   333,   119,
     0,    26,     0,    27,     0,    31,     0,    32,     0,    68,
     0,    67,     0,    69,     0,    70,     0,    16,     0,    15,
     0,    73,     0,     0,    84,     0,     0,    65,     0,    66,
     0,    67,     0,     0,   153,   343,   377,   345,     0,     0,
   384,   344,   376,   119,     0,     0,     0,   115,   346,   378,
   347,   376,   119,     0,   119,     0,     0,   121,   349,   352,
     0,     0,   153,   350,   377,   345,     0,     0,   386,   351,
   376,   119,     0,     0,   155,   353,   355,     0,     0,   388,
   354,   376,   119,     0,   119,     0,     0,   122,   356,   342,
     0,     0,   390,   357,   376,   119,     0,   119,     0,     0,
   121,   359,   362,     0,     0,   153,   360,   377,   345,     0,
     0,   386,   361,   376,   119,     0,     0,   155,   363,   365,
     0,     0,   388,   364,   376,   119,     0,   119,     0,     0,
   122,   366,   342,     0,     0,   123,   367,   369,     0,     0,
   392,   368,   376,   119,     0,   119,     0,     0,   155,   370,
   372,     0,     0,   388,   371,   376,   119,     0,   119,     0,
     0,   122,   373,   342,     0,     0,   390,   374,   376,   119,
     0,   119,     0,   375,   378,     0,     0,   376,   380,     0,
     0,   377,   382,     0,     0,   154,     0,   155,     0,   121,
     0,   122,     0,   153,     0,   115,     0,   119,     0,   123,
     0,     0,   117,   379,   375,   118,     0,   154,     0,   155,
     0,   121,     0,   122,     0,   153,     0,   115,     0,   123,
     0,     0,   117,   381,   375,   118,     0,   154,     0,   155,
     0,   121,     0,   122,     0,   153,     0,   123,     0,     0,
   117,   383,   375,   118,     0,   154,     0,   155,     0,   121,
     0,   122,     0,   115,     0,   119,     0,   123,     0,     0,
   117,   385,   375,   118,     0,   154,     0,   155,     0,   122,
     0,   115,     0,   119,     0,   123,     0,     0,   117,   387,
   375,   118,     0,   154,     0,   121,     0,   122,     0,   153,
     0,   115,     0,   123,     0,     0,   117,   389,   375,   118,
     0,   154,     0,   155,     0,   121,     0,   153,     0,   115,
     0,   123,     0,     0,   117,   391,   375,   118,     0,   154,
     0,   155,     0,   121,     0,   153,     0,   115,     0,     0,
   117,   393,   375,   118,     0,   394,   395,     0,   395,     0,
   397,     0,     0,   117,   396,   375,   118,     0,   154,     0,
   155,     0,   121,     0,   122,     0,   153,     0,   115,     0,
   123,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   197,   198,   204,   205,   206,   212,   214,   222,   224,   232,
   236,   238,   247,   249,   258,   269,   271,   274,   279,   312,
   316,   324,   331,   334,   338,   341,   342,   345,   349,   353,
   356,   357,   358,   359,   362,   363,   366,   367,   370,   376,
   377,   383,   384,   385,   386,   389,   390,   393,   394,   397,
   398,   399,   400,   401,   402,   403,   409,   410,   416,   422,
   423,   429,   435,   436,   442,   450,   451,   458,   458,   461,
   462,   469,   469,   472,   473,   480,   480,   483,   484,   487,
   488,   491,   492,   495,   502,   503,   505,   506,   507,   509,
   511,   513,   515,   516,   517,   519,   520,   521,   522,   524,
   525,   526,   528,   529,   530,   531,   533,   544,   545,   546,
   547,   549,   550,   551,   552,   555,   556,   560,   564,   567,
   570,   571,   572,   575,   576,   579,   580,   583,   588,   589,
   592,   593,   594,   595,   598,   599,   602,   608,   609,   612,
   619,   620,   623,   624,   627,   633,   634,   640,   641,   644,
   645,   648,   649,   652,   656,   660,   666,   670,   674,   675,
   676,   680,   684,   685,   686,   687,   688,   689,   690,   691,
   692,   693,   697,   701,   706,   707,   708,   712,   716,   720,
   721,   722,   723,   729,   730,   733,   734,   737,   742,   743,
   747,   748,   752,   753,   762,   763,   766,   767,   773,   774,
   775,   776,   779,   780,   781,   782,   785,   786,   787,   788,
   791,   792,   793,   794,   797,   798,   799,   800,   803,   804,
   805,   806,   809,   810,   811,   812,   815,   816,   817,   820,
   821,   822,   823,   824,   825,   826,   832,   833,   836,   836,
   836,   836,   837,   838,   844,   844,   844,   844,   844,   847,
   847,   847,   847,   850,   850,   850,   853,   853,   853,   853,
   854,   854,   854,   854,   854,   854,   854,   856,   856,   856,
   856,   857,   857,   857,   857,   857,   857,   857,   859,   859,
   859,   859,   860,   860,   860,   860,   860,   860,   860,   862,
   862,   862,   862,   863,   863,   863,   863,   863,   863,   863,
   865,   865,   865,   865,   866,   866,   866,   866,   866,   866,
   866,   868,   868,   868,   868,   868,   868,   869,   869,   869,
   870,   870,   870,   870,   870,   870,   870,   872,   872,   872,
   872,   872,   872,   873,   873,   873,   873,   873,   876,   876,
   876,   876,   877,   877,   877,   883,   883,   883,   883,   883,
   883,   883,   886,   886,   889,   889,   889,   889,   889,   889,
   890,   890,   890,   891,   891,   891,   891,   891,   891,   892,
   892,   892,   895,   895,   895,   895,   895,   895,   895,   895,
   898,   898,   898,   901,   901,   901,   901,   901,   901,   901,
   902,   902,   902,   902,   902,   902,   903,   903,   903,   904,
   904,   904,   904,   905,   905,   905,   932,   933,   934,   939,
   940,   941,   947,   954,   960,   967,   973,   980,   986,   994,
   999,  1007,  1012,  1021,  1026,  1034,  1039,  1047,  1052,  1056,
  1063,  1068,  1069,  1077,  1078,  1083,  1084,  1089,  1090,  1095,
  1096,  1101,  1109,  1110,  1116,  1117,  1123,  1124,  1130,  1134,
  1135,  1141,  1142,  1148,  1149,  1155,  1156,  1162,  1163,  1169,
  1170,  1176,  1177,  1183,  1184,  1190,  1194,  1198,  1199,  1208,
  1212,  1216,  1220,  1224,  1228,  1232,  1236,  1240,  1244,  1248,
  1252,  1256,  1260,  1264,  1268,  1272,  1276,  1280,  1284,  1288,
  1292,  1296,  1300,  1304,  1308,  1312,  1316,  1320,  1321,  1322,
  1326,  1327,  1328,  1332,  1336,  1340,  1344,  1348,  1355,  1359,
  1363,  1367,  1374,  1378,  1385,  1387,  1392,  1393,  1396,  1397,
  1400,  1401,  1404,  1405,  1408,  1409,  1412,  1413,  1416,  1417,
  1420,  1421,  1422,  1430,  1431,  1432,  1433,  1436,  1437,  1438,
  1439,  1448,  1450,  1450,  1451,  1452,  1453,  1457,  1459,  1459,
  1460,  1461,  1465,  1471,  1471,  1472,  1473,  1482,  1484,  1484,
  1485,  1486,  1487,  1491,  1493,  1493,  1494,  1495,  1499,  1505,
  1505,  1507,  1507,  1508,  1509,  1513,  1515,  1515,  1516,  1517,
  1521,  1528,  1528,  1529,  1530,  1536,  1537,  1540,  1541,  1545,
  1546,  1552,  1552,  1552,  1552,  1552,  1552,  1552,  1552,  1553,
  1554,  1557,  1557,  1557,  1557,  1557,  1557,  1557,  1558,  1559,
  1563,  1563,  1563,  1563,  1563,  1563,  1564,  1565,  1568,  1568,
  1568,  1568,  1568,  1568,  1568,  1569,  1570,  1573,  1573,  1573,
  1573,  1573,  1573,  1574,  1575,  1579,  1579,  1579,  1579,  1579,
  1579,  1580,  1581,  1585,  1585,  1585,  1585,  1585,  1585,  1586,
  1587,  1591,  1591,  1591,  1591,  1591,  1592,  1593,  1599,  1600,
  1603,  1609,  1610,  1617,  1617,  1617,  1617,  1617,  1617,  1617
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FILE_NAME_STRING",
"UNINTERPRETED_STRING","LATEX_STRING","KW_FMOD","KW_MOD","KW_OMOD","KW_PARSE",
"KW_NORMALIZE","KW_REDUCE","KW_REWRITE","KW_LOOP","KW_NARROW","KW_MATCH","KW_XMATCH",
"KW_UNIFY","KW_XUNIFY","KW_EREWRITE","KW_FREWRITE","KW_OREWRITE","KW_CONTINUE",
"KW_SEARCH","KW_SET","KW_SHOW","KW_ON","KW_OFF","KW_TRACE","KW_CONTEXT","KW_WHOLE",
"KW_SELECT","KW_DESELECT","KW_CONDITION","KW_SUBSTITUTION","KW_PRINT","KW_GRAPH",
"KW_MIXFIX","KW_FLAT","KW_WITH","KW_PARENS","KW_ALIASES","KW_GC","KW_TIME","KW_STATS",
"KW_TIMING","KW_CMD","KW_BREAKDOWN","KW_BREAK","KW_PATH","KW_MODULE","KW_MODULES",
"KW_ALL","KW_SORTS","KW_OPS","KW_VARS","KW_MBS","KW_EQS","KW_RLS","KW_SUMMARY",
"KW_KINDS","KW_ADVISE","KW_VERBOSE","KW_DO","KW_CLEAR","KW_PROTECT","KW_EXTEND",
"KW_INCLUDE","KW_EXCLUDE","KW_CONCEAL","KW_REVEAL","KW_COMPILE","KW_COUNT","KW_DEBUG",
"KW_RESUME","KW_ABORT","KW_STEP","KW_WHERE","KW_CREDUCE","KW_DUMP","KW_PROFILE",
"KW_NUMBER","KW_RAT","KW_COLOR","SIMPLE_NUMBER","KW_PWD","KW_CD","KW_PUSHD",
"KW_POPD","KW_LS","KW_LOAD","KW_QUIT","KW_EOF","KW_ENDFM","KW_ENDM","KW_ENDOM",
"KW_IMPORT","KW_SORT","KW_SUBSORT","KW_OP","KW_MSGS","KW_VAR","KW_CLASS","KW_SUBCLASS",
"KW_MB","KW_CMB","KW_EQ","KW_CEQ","KW_RL","KW_CRL","KW_IS","KW_ARROW","KW_ARROW2",
"KW_PARTIAL","KW_IF","':'","'='","'('","')'","'.'","'<'","'['","']'","','","'|'",
"KW_LABEL","KW_TO","'+'","'*'","KW_ASSOC","KW_COMM","KW_ID","KW_IDEM","KW_ITER",
"KW_LEFT","KW_RIGHT","KW_PREC","KW_GATHER","KW_STRAT","KW_POLY","KW_MEMO","KW_FROZEN",
"KW_CTOR","KW_LATEX","KW_SPECIAL","KW_CONFIG","KW_OBJ","KW_MSG","KW_DITTO","KW_FORMAT",
"KW_ID_HOOK","KW_OP_HOOK","KW_TERM_HOOK","KW_IN","IDENTIFIER","NUMERIC_ID","top",
"item","directive","@1","@2","@3","@4","@5","moduleExpr","renaming","@6","mappingList",
"mapping","fromOpName","@7","@8","fromSpec","fromTypeList","fromType","@9","toOpName",
"@10","@11","toAttributes","toAttributeList","toAttribute","@12","@13","@14",
"module","@15","@16","@17","@18","@19","@20","endfm","notEndfm","endm","notEndm",
"endom","notEndom","fDecList","decList","oDecList","fDeclaration","@21","@22",
"@23","@24","@25","@26","@27","@28","@29","@30","@31","@32","@33","declaration",
"@34","@35","@36","@37","@38","oDeclaration","@39","@40","@41","classDef","cPairList",
"cPair","varNameList","opName","@42","@43","opNameList","simpleOpName","@44",
"domainRangeAttr","arrow","typeList","type","@45","sortTokens","attributes",
"attributeList","idKeyword","attribute","@46","@47","@48","@49","@50","@51",
"@52","idList","hookList","hook","@53","@54","@55","listBarLt","listBarDot",
"tokens","@56","tokensBarColon","@57","tokensBarColonTo","@58","tokensBarCommaLeft",
"@59","tokensBarEqual","@60","tokensBarArrow2","@61","tokensBarIf","@62","endTokens",
"noTrailingDot","@63","@64","identity","identityChunk","@65","token","tokenBarDot",
"endToken","tokenBarArrow2","tokenBarEqual","tokenBarIf","tokenBarColon","tokenBarLt",
"tokenBarColonTo","tokenBarCommaLeft","sortToken","identifier","startKeyword",
"startKeyword2","midKeyword","attrKeyword","attrKeyword2","command","@66","@67",
"@68","@69","@70","@71","@72","@73","@74","@75","@76","@77","@78","@79","@80",
"@81","@82","@83","@84","@85","@86","@87","@88","@89","@90","@91","@92","@93",
"@94","@95","@96","@97","@98","@99","@100","polarity","select","exclude","conceal",
"match","optDebug","optNumber","importMode","moduleAndTerm","@101","@102","inEnd",
"@103","@104","numberModuleTerm","@105","@106","@107","numberModuleTerm1","@108",
"@109","numberModuleTerm2","@110","@111","numbersModuleTerm","@112","@113","@114",
"numbersModuleTerm1","@115","@116","numbersModuleTerm2","@117","@118","@119",
"numbersModuleTerm3","@120","@121","numbersModuleTerm4","@122","@123","cTokens",
"cTokensBarDot","cTokensBarDotColon","cToken","@124","cTokenBarDot","@125","cTokenBarDotColon",
"@126","cTokenBarIn","@127","cTokenBarLeftIn","@128","cTokenBarDotNumber","@129",
"cTokenBarDotRight","@130","cTokenBarDotCommaRight","@131","cOpNameList","cSimpleOpName",
"@132","cSimpleTokenBarDot", NULL
};
#endif

static const short yyr1[] = {     0,
   156,   156,   157,   157,   157,   159,   158,   160,   158,   158,
   161,   158,   162,   158,   158,   163,   158,   158,   158,   164,
   164,   164,   164,   166,   165,   167,   167,   168,   168,   168,
   170,   169,   171,   169,   172,   172,   173,   173,   174,   175,
   174,   177,   176,   178,   176,   179,   179,   180,   180,   181,
   182,   181,   183,   181,   184,   181,   186,   187,   185,   188,
   189,   185,   190,   191,   185,   192,   192,   193,   193,   194,
   194,   195,   195,   196,   196,   197,   197,   198,   198,   199,
   199,   200,   200,   201,   202,   201,   203,   204,   201,   201,
   201,   201,   205,   206,   201,   207,   208,   209,   201,   210,
   211,   201,   212,   213,   214,   201,   201,   215,   216,   217,
   215,   218,   219,   220,   215,   221,   221,   221,   222,   221,
   223,   224,   221,   225,   225,   226,   226,   227,   228,   228,
   230,   229,   231,   229,   232,   232,   233,   234,   233,   235,
   236,   236,   237,   237,   238,   239,   238,   240,   240,   241,
   241,   242,   242,   243,   243,   243,   244,   244,   245,   244,
   244,   244,   244,   246,   244,   247,   244,   248,   244,   249,
   244,   244,   244,   244,   250,   244,   244,   244,   244,   251,
   244,   244,   244,   252,   252,   253,   253,   254,   255,   254,
   256,   254,   257,   254,   258,   258,   259,   259,   261,   260,
   260,   260,   263,   262,   262,   262,   265,   264,   264,   264,
   267,   266,   266,   266,   269,   268,   268,   268,   271,   270,
   270,   270,   273,   272,   272,   272,   274,   274,   274,   276,
   275,   277,   275,   275,   275,   275,   278,   278,   279,   279,
   279,   279,   280,   279,   281,   281,   281,   281,   281,   282,
   282,   282,   282,   283,   283,   283,   284,   284,   284,   284,
   284,   284,   284,   284,   284,   284,   284,   285,   285,   285,
   285,   285,   285,   285,   285,   285,   285,   285,   286,   286,
   286,   286,   286,   286,   286,   286,   286,   286,   286,   287,
   287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
   288,   288,   288,   288,   288,   288,   288,   288,   288,   288,
   288,   289,   289,   289,   289,   289,   289,   289,   289,   289,
   289,   289,   289,   289,   289,   289,   289,   290,   290,   290,
   290,   290,   290,   290,   290,   290,   290,   290,   291,   291,
   291,   291,   291,   291,   291,   292,   292,   292,   292,   292,
   292,   292,   293,   293,   294,   294,   294,   294,   294,   294,
   294,   294,   294,   294,   294,   294,   294,   294,   294,   294,
   294,   294,   295,   295,   295,   295,   295,   295,   295,   295,
   296,   296,   296,   297,   297,   297,   297,   297,   297,   297,
   297,   297,   297,   297,   297,   297,   297,   297,   297,   297,
   297,   297,   297,   297,   297,   297,   299,   300,   298,   301,
   302,   298,   303,   298,   304,   298,   305,   298,   306,   298,
   307,   298,   308,   298,   309,   298,   310,   298,   298,   311,
   298,   312,   298,   313,   298,   314,   298,   315,   298,   316,
   298,   298,   317,   298,   318,   298,   319,   298,   298,   320,
   298,   321,   298,   322,   298,   323,   298,   324,   298,   325,
   298,   326,   298,   327,   298,   298,   298,   328,   298,   298,
   298,   298,   298,   298,   298,   298,   298,   298,   298,   298,
   298,   298,   298,   298,   298,   298,   298,   298,   298,   298,
   298,   298,   298,   298,   298,   298,   298,   329,   330,   298,
   331,   332,   298,   298,   298,   298,   298,   298,   298,   298,
   298,   298,   298,   298,   333,   298,   334,   334,   335,   335,
   336,   336,   337,   337,   338,   338,   339,   339,   340,   340,
   341,   341,   341,   343,   342,   344,   342,   346,   347,   345,
   345,   349,   348,   350,   348,   351,   348,   353,   352,   354,
   352,   352,   356,   355,   357,   355,   355,   359,   358,   360,
   358,   361,   358,   363,   362,   364,   362,   362,   366,   365,
   367,   365,   368,   365,   365,   370,   369,   371,   369,   369,
   373,   372,   374,   372,   372,   375,   375,   376,   376,   377,
   377,   378,   378,   378,   378,   378,   378,   378,   378,   379,
   378,   380,   380,   380,   380,   380,   380,   380,   381,   380,
   382,   382,   382,   382,   382,   382,   383,   382,   384,   384,
   384,   384,   384,   384,   384,   385,   384,   386,   386,   386,
   386,   386,   386,   387,   386,   388,   388,   388,   388,   388,
   388,   389,   388,   390,   390,   390,   390,   390,   390,   391,
   390,   392,   392,   392,   392,   392,   393,   392,   394,   394,
   395,   396,   395,   397,   397,   397,   397,   397,   397,   397
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     1,     0,     3,     0,     3,     1,
     0,     3,     0,     3,     1,     0,     3,     1,     1,     1,
     3,     3,     3,     0,     4,     3,     1,     4,     4,     6,
     0,     3,     0,     4,     4,     0,     2,     0,     1,     0,
     4,     0,     3,     0,     4,     3,     0,     2,     1,     2,
     0,     5,     0,     5,     0,     5,     0,     0,     7,     0,
     0,     7,     0,     0,     7,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     0,     2,
     0,     2,     0,     3,     0,     4,     0,     0,     8,     3,
     3,     5,     0,     0,     7,     0,     0,     0,    10,     0,
     0,     7,     0,     0,     0,    10,     2,     1,     0,     0,
     7,     0,     0,     0,    10,     1,     3,     3,     0,     5,
     0,     0,     8,     1,     2,     1,     3,     3,     2,     1,
     0,     3,     0,     4,     2,     1,     1,     0,     4,     6,
     1,     1,     2,     0,     1,     0,     4,     3,     1,     3,
     0,     2,     1,     1,     2,     2,     1,     1,     0,     3,
     1,     1,     2,     0,     5,     0,     5,     0,     5,     0,
     5,     1,     1,     1,     0,     5,     1,     1,     1,     0,
     5,     4,     1,     2,     1,     2,     1,     2,     0,     6,
     0,     6,     0,     6,     2,     0,     2,     0,     0,     5,
     2,     0,     0,     5,     2,     0,     0,     5,     2,     0,
     0,     5,     2,     0,     0,     5,     2,     0,     0,     5,
     2,     0,     0,     5,     2,     0,     1,     2,     1,     0,
     4,     0,     5,     2,     2,     1,     1,     2,     1,     1,
     1,     1,     0,     4,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     0,     0,     6,     0,
     0,     6,     0,     3,     0,     3,     0,     4,     0,     4,
     0,     4,     0,     4,     0,     3,     0,     3,     4,     0,
     3,     0,     4,     0,     5,     0,     5,     0,     5,     0,
     5,     4,     0,     5,     0,     5,     0,     5,     3,     0,
     5,     0,     5,     0,     5,     0,     5,     0,     5,     0,
     5,     0,     5,     0,     5,     4,     4,     0,     5,     5,
     5,     6,     5,     5,     6,     5,     5,     5,     5,     6,
     6,     5,     5,     5,     5,     5,     5,     4,     5,     5,
     5,     5,     5,     5,     5,     5,     4,     0,     0,     7,
     0,     0,     8,     4,     5,     5,     4,     5,     2,     2,
     2,     2,     5,     4,     0,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     0,     1,     0,
     1,     1,     1,     0,     4,     0,     4,     0,     0,     6,
     1,     0,     3,     0,     4,     0,     4,     0,     3,     0,
     4,     1,     0,     3,     0,     4,     1,     0,     3,     0,
     4,     0,     4,     0,     3,     0,     4,     1,     0,     3,
     0,     3,     0,     4,     1,     0,     3,     0,     4,     1,
     0,     3,     0,     4,     1,     2,     0,     2,     0,     2,
     0,     1,     1,     1,     1,     1,     1,     1,     1,     0,
     4,     1,     1,     1,     1,     1,     1,     1,     0,     4,
     1,     1,     1,     1,     1,     1,     0,     4,     1,     1,
     1,     1,     1,     1,     1,     0,     4,     1,     1,     1,
     1,     1,     1,     0,     4,     1,     1,     1,     1,     1,
     1,     0,     4,     1,     1,     1,     1,     1,     1,     0,
     4,     1,     1,     1,     1,     1,     0,     4,     2,     1,
     1,     0,     4,     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
   515,    57,    60,    63,   413,   430,   526,   525,   425,     0,
     0,     0,   407,     0,     0,     0,   527,     0,     0,     0,
     0,   415,   410,    10,    11,    13,    15,    16,     8,    18,
    19,   432,     6,     1,     4,     3,     5,   427,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   531,   532,   533,     0,     0,
   498,   443,     0,     0,   445,     0,   447,   450,   452,   454,
   456,   458,   460,   462,   464,   468,   519,   520,   522,   521,
   434,   436,     0,   523,   524,   440,   438,     0,   509,   510,
   511,   512,     0,     0,     0,     0,     0,     0,   587,     0,
     0,   417,   419,   421,   423,   530,   516,   359,   370,   371,
   372,   355,   356,   357,   358,   361,   360,   362,   363,   364,
   365,   366,   367,   368,   369,   380,   375,   378,   376,   379,
   374,   377,   249,   373,   381,   382,   347,   348,   349,   350,
   351,   352,   384,   385,   386,   387,   388,   389,   390,   391,
   392,   393,   394,   395,   399,   396,   397,   398,   400,   401,
   353,   402,   403,   404,   405,   406,   346,     0,   245,   246,
   354,   247,   248,   383,     0,     0,   623,   626,   624,   621,
   622,   625,   534,   619,   620,   414,   536,   431,   631,   634,
   632,   542,   630,   633,   544,   628,   629,   426,   546,   501,
     0,     0,     0,     0,     0,     0,     0,   517,   518,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   589,     0,     0,   589,
   449,   589,   589,   589,   589,   589,   589,   589,   589,   589,
   589,     0,     0,   597,   600,   598,   594,   595,   599,   596,
   592,   593,   408,     0,     0,     0,   416,   411,    12,    14,
    17,     9,     0,     7,   428,     0,     0,     0,     0,   529,
     0,    58,    61,    64,   587,   591,   589,   587,     0,   591,
   589,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   488,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   514,   497,   504,     0,     0,     0,   507,   669,   666,   667,
   670,   668,   664,   665,   499,     0,   467,   466,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   662,
     0,   660,   661,     0,   587,   589,     0,     0,   442,   589,
   433,   586,   418,   420,   422,   558,   560,   424,   562,   429,
    79,    81,    83,     0,     0,     0,     0,   640,   642,   552,
   637,   638,   641,   639,   636,   548,   543,   550,     0,     0,
   502,     0,     0,   477,   471,   473,   476,   474,   470,   490,
   491,   493,   489,   492,   494,   495,   496,   482,   478,   479,
     0,     0,   483,   484,   485,   486,   487,   513,   508,   505,
   506,     0,   607,   609,   444,   604,   605,   608,   606,   602,
   603,   588,   446,   448,   451,   453,   455,   457,   459,   461,
   463,   465,   469,   587,   435,   659,   437,     0,     0,   441,
   439,     0,     0,   591,   589,     0,     0,     0,   627,   538,
   617,   541,   613,   614,   616,   615,   611,   612,   535,   590,
   537,   635,   587,     0,   589,   545,   547,     0,   472,   475,
   481,   480,     0,   587,     0,   601,   409,   412,   568,   564,
   559,   566,     0,     0,     0,     0,    66,    68,    69,     0,
    85,     0,     0,     0,    93,    96,   100,   103,    59,    67,
    78,    72,    70,    73,   109,   112,    62,    71,   108,    80,
    76,    77,    74,     0,     0,     0,     0,    65,    75,   116,
    82,     0,   587,     0,   648,   650,   557,   646,   553,   649,
   647,   644,   645,   549,   555,     0,     0,   500,     0,   663,
     0,   589,   561,   563,   107,   300,   295,   298,   296,   299,
   297,   138,   293,   294,     0,   136,   137,   290,   291,   292,
     0,     0,    20,   198,    87,   133,     0,   131,     0,   130,
   206,   206,   218,   218,   222,   222,     0,   119,   121,     0,
   539,     0,   643,   587,     0,   589,   551,   503,   610,   656,
   657,   575,   654,   569,   571,   655,   652,   653,   565,   573,
     0,   202,   144,   135,    91,     0,    84,     0,     0,     0,
   196,   202,    90,   206,     0,   129,     0,     0,     0,     0,
     0,     0,   118,     0,   196,   117,   589,   618,     0,   554,
     0,   587,     0,     0,   589,   567,     0,     0,    23,    21,
    24,    22,    86,   197,   250,   251,   252,   253,     0,     0,
   132,   345,   343,   344,   342,   146,     0,   145,   339,   340,
   341,    94,   203,   205,    97,   278,   274,   276,   275,   277,
   273,   101,   215,   271,   272,   217,   268,   269,   270,   104,
   267,   263,   110,   264,   266,   262,   265,   219,   260,   261,
   221,   257,   258,   259,   113,   124,     0,     0,     0,   651,
   556,     0,   570,   580,   576,   572,   578,     0,   199,   139,
   201,   141,   142,     0,   143,     0,   311,   306,   309,   307,
   310,   305,   308,   304,    88,   195,   301,   302,   303,   134,
     0,    92,     0,   202,   226,     0,   202,   226,     0,   202,
   226,   125,   126,     0,   120,   122,   540,   658,     0,   589,
   574,   202,   151,     0,     0,     0,     0,    27,   198,     0,
   149,   230,   229,     0,   227,   236,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   198,   585,   581,   577,
   583,     0,     0,     0,     0,     0,    33,    36,    31,     0,
    25,     0,     0,   147,     0,   202,   232,   228,   235,   254,
   255,   256,   234,   204,   289,   285,   288,   286,    98,   284,
   287,   223,   282,   283,   225,   279,   280,   281,   228,   216,
   105,   228,   220,   114,   127,   128,     0,     0,   589,   579,
   200,   157,   158,   154,   161,   162,     0,     0,     0,     0,
     0,     0,   172,   174,   173,     0,     0,   177,   178,   179,
   183,     0,     0,   159,   153,   140,     0,   202,    38,     0,
   210,     0,    26,    89,   148,     0,   202,     0,   202,     0,
     0,   123,   582,     0,   155,   156,   163,   164,   168,   170,
   175,   180,     0,   166,   150,   152,     0,    28,     0,     0,
     0,    32,    29,   231,     0,     0,     0,     0,     0,   584,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   187,
     0,   243,   242,   160,   237,   239,   240,   241,    34,    40,
    37,     0,    39,    44,    47,    42,   327,   322,   325,   323,
   326,   324,   207,   320,   321,   313,   314,   315,   316,   317,
   312,   209,   318,   319,   233,   228,   224,   228,   228,   185,
     0,     0,     0,     0,     0,   188,     0,     0,   182,   186,
     0,   202,   238,     0,    35,   202,     0,    30,   214,   202,
   165,   184,   169,   171,   176,   181,   189,   191,   193,   167,
     0,     0,     0,     0,     0,     0,     0,     0,    49,    43,
     0,   202,   202,   202,   244,    41,    45,    50,    51,    55,
    53,    46,    48,   211,   336,   337,   329,   330,   331,   332,
   333,   328,   213,   334,   338,   335,   208,     0,     0,     0,
     0,     0,     0,   202,   190,   192,   194,     0,     0,     0,
     0,    52,    56,    54,   212,     0,     0,     0
};

static const short yydefgoto[] = {  1046,
    34,    35,   100,    98,    95,    96,    97,   572,   652,   726,
   767,   768,   798,   871,   868,   870,   900,   931,   974,   935,
   979,   976,   978,   998,   999,  1031,  1033,  1032,    36,    41,
   371,    42,   372,    43,   373,   509,   510,   517,   518,   528,
   529,   456,   457,   458,   519,   574,   621,   769,   581,   743,
   582,   745,   878,   583,   746,   584,   748,   880,   520,   585,
   749,   586,   751,   881,   531,   634,   635,   787,   707,   752,
   753,   579,   577,   624,   622,   565,   566,   612,   615,   724,
   648,   667,   741,   770,   795,   863,   864,   865,   897,   911,
   921,   912,   913,   914,   915,   961,   919,   920,  1002,  1003,
  1004,   659,   620,   647,   762,   627,   744,   902,   980,  1000,
  1034,   629,   747,   631,   750,   778,   879,   774,   775,   806,
   877,   924,   925,   972,   721,   776,   809,   701,   686,   825,
   567,   736,   952,  1023,   668,   169,   170,   171,   172,   173,
   174,    37,    83,   356,    94,   360,    44,    93,   276,   277,
   278,   279,    46,   101,    45,    99,   252,   253,   265,   264,
   237,   240,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   236,   422,   292,   478,    40,   218,    81,    82,
    86,    38,    39,   281,    61,   186,   286,   287,   469,   532,
   637,   198,   289,   290,   291,   387,   474,   475,   544,   595,
   596,   368,   453,   454,   455,   491,   551,   552,   609,   643,
   644,   645,   716,   759,   760,   790,   838,   839,   273,   336,
   375,   362,   355,   432,   484,   470,   533,   187,   285,   199,
   288,   388,   473,   545,   594,   610,   642,   351,   352,   444,
   353
};

static const short yypact[] = {   680,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4967,
  4930,    13,-32768,    72,   135,   -25,-32768,   -76,   -46,   -36,
   -32,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   233,   -22,
  3681,  3681,  3681,   120,   120,   708,    -9,    23,  1068,    25,
    46,   184,   184,   184,   -48,-32768,-32768,-32768,    40,   184,
-32768,-32768,    88,    43,-32768,    16,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  5219,-32768,-32768,-32768,-32768,    -1,-32768,-32768,
-32768,-32768,   120,  5219,   142,   144,   145,   153,-32768,   157,
   708,-32768,-32768,-32768,-32768,    91,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    68,-32768,-32768,
-32768,-32768,-32768,-32768,    79,    84,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   177,   184,   184,   184,   184,   184,   184,-32768,-32768,   184,
   184,   184,   184,   184,   184,   184,   184,    66,   184,   184,
   184,   222,   184,   184,   184,   184,   184,   184,    81,    94,
    97,   184,   184,   184,    99,    15,-32768,   109,   114,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   273,   273,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   273,   273,   127,-32768,-32768,-32768,-32768,
-32768,-32768,   252,-32768,-32768,   120,   708,   708,  5260,-32768,
   130,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  5269,-32768,
-32768,    15,   184,   184,   139,   146,   148,   152,   158,   161,
   165,   173,   175,   176,   178,   180,   181,   183,-32768,   186,
   187,   190,   184,   184,   191,   193,   196,   205,   206,   208,
-32768,-32768,-32768,   218,   221,   228,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  5278,-32768,-32768,  5287,  5328,
  5337,  5346,  5355,  5396,  5405,  5414,  5423,  5464,  5473,-32768,
  5482,-32768,-32768,  5491,-32768,-32768,  5532,  5541,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   397,  5550,  5559,   439,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  5550,  5600,
-32768,   230,   232,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   234,   238,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   184,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   595,  5609,-32768,
-32768,  5618,  5627,-32768,-32768,   512,   237,   438,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  5668,-32768,-32768,-32768,   184,-32768,-32768,
-32768,-32768,   240,-32768,   869,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  5550,  5677,   244,  3744,-32768,-32768,-32768,  2721,
-32768,  3681,  2785,  4250,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  3744,  3681,  3681,  2785,-32768,-32768,-32768,
-32768,  5219,-32768,   910,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  5686,   245,-32768,  4843,-32768,
  5695,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2849,-32768,-32768,-32768,-32768,-32768,
  2721,    53,-32768,-32768,-32768,-32768,    82,-32768,  3808,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  2849,-32768,-32768,    82,
-32768,  5192,-32768,-32768,   120,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  5736,-32768,-32768,-32768,-32768,    65,-32768,  2721,    90,  3871,
-32768,-32768,-32768,-32768,  4630,-32768,  2913,  2977,  3041,  3105,
  3169,  3233,-32768,   179,-32768,-32768,-32768,-32768,  5201,-32768,
  5745,-32768,   120,  5754,-32768,-32768,  1038,  4504,-32768,   248,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  3934,  1137,
  3997,-32768,-32768,-32768,-32768,-32768,   246,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  4313,   247,  4061,  5763,-32768,
-32768,  5210,-32768,-32768,-32768,-32768,-32768,  5804,-32768,-32768,
-32768,-32768,-32768,  4630,-32768,   -51,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  4756,-32768,  3297,-32768,-32768,  3297,-32768,-32768,  3297,-32768,
-32768,   249,-32768,   241,-32768,-32768,-32768,-32768,  5813,-32768,
-32768,-32768,   257,  3681,  3361,    78,    -5,-32768,-32768,   164,
-32768,-32768,-32768,  4929,   949,-32768,  1236,  3425,  4974,  1335,
  3489,  5019,  1434,  3553,  4313,  3681,-32768,-32768,-32768,-32768,
-32768,  5822,  1533,   974,   260,   242,-32768,   265,-32768,   256,
-32768,   -51,  4124,-32768,  4756,-32768,-32768,   706,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   785,-32768,
-32768,   817,-32768,-32768,-32768,-32768,  4187,   120,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   262,   267,   229,   270,
   283,   292,-32768,   294,-32768,   295,   296,-32768,-32768,-32768,
-32768,   297,  1071,-32768,-32768,-32768,  3681,-32768,-32768,   298,
-32768,    78,-32768,-32768,-32768,  1632,-32768,  3297,-32768,  3297,
  3297,-32768,-32768,  5831,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    75,-32768,-32768,-32768,  4819,-32768,  1731,  4567,
  3617,  4376,-32768,-32768,  1830,  5064,  1929,  5109,  5154,-32768,
   264,   264,   264,   264,   416,  3681,  3681,  3681,   -52,-32768,
   264,-32768,-32768,  4819,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  4693,-32768,-32768,   301,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   853,-32768,   873,   982,-32768,
   -68,   -65,   -61,   -59,   311,   313,   314,   316,-32768,-32768,
   -58,-32768,-32768,  4756,-32768,-32768,    87,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  2028,   166,  2127,   282,   321,   324,   325,    -3,-32768,  4440,
  2226,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2325,  2424,  2523,
   264,   440,   264,-32768,-32768,-32768,-32768,   -43,   326,   -40,
  2622,-32768,-32768,-32768,-32768,   443,   446,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -533,-32768,-32768,
-32768,  -355,-32768,-32768,-32768,-32768,-32768,  -484,-32768,-32768,
-32768,-32768,-32768,-32768,  -549,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    -6,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    -7,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -333,-32768,   -74,-32768,-32768,   -70,  -510,-32768,  -414,  -444,
-32768,  -623,-32768,  -516,-32768,-32768,-32768,  -403,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -872,-32768,  -456,-32768,-32768,
-32768,  -171,  -715,  -618,-32768,  -545,-32768,-32768,-32768,-32768,
-32768,  -117,-32768,  -118,-32768,  -628,-32768,  -716,-32768,-32768,
-32768,-32768,  -453,-32768,   -41,  -589,-32768,-32768,-32768,-32768,
  -470,-32768,-32768,-32768,  -723,  -309,  -477,  -821,  -489,   160,
  -619,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   427,   459,-32768,
-32768,-32768,-32768,-32768,-32768,   -42,-32768,-32768,  -365,-32768,
-32768,   -79,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -265,  -235,
  -264,   -66,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   198,
-32768,  -432,-32768,  -281,-32768,-32768,-32768,  -149,   -75,-32768,
  -201
};


#define	YYLAST		5986


static const short yytable[] = {   168,
   175,   176,   188,   660,   339,   671,   340,   341,   342,   343,
   344,   345,   346,   347,   348,   349,   263,   771,   569,   374,
   492,   275,   377,   476,   725,   389,   569,   268,   671,   779,
   654,   232,   782,   580,   335,   201,   628,   616,    88,   962,
   963,   964,    89,    77,    78,   764,   569,   765,   971,   981,
   267,   376,   983,   803,   614,   390,   984,   200,   985,   990,
   219,   220,   221,   222,   202,   969,   203,   204,   205,   206,
   228,   837,    90,   766,  1042,   927,   614,  1044,   661,    79,
    80,   875,    91,   207,   650,   982,    92,   569,   982,   448,
   391,   233,   982,   223,   982,   982,   107,   916,   917,   918,
   763,   569,   927,   354,   671,   224,   225,   226,   626,   569,
   982,   234,   801,   982,   357,   358,   754,   802,  1012,   781,
   449,   671,   784,   238,   452,   777,   239,   553,   780,   328,
   657,   783,   994,   995,   241,   329,   330,   331,   266,   996,
    84,    85,   656,   793,   269,   997,   270,   670,   271,   569,
   569,   688,   688,   703,   703,   272,   674,   674,  1038,   274,
  1040,   906,   623,   908,   909,    77,    78,   332,   333,   334,
   670,   617,   633,   227,   280,   636,   933,   282,   485,   618,
   619,   738,   649,   569,   309,   671,   568,   876,   283,   493,
   674,   618,   619,   284,   568,   754,   613,   364,   365,   321,
   137,   138,   139,   140,   141,   142,   651,   534,   933,   208,
   209,   717,   322,   654,   568,   323,   657,   327,   549,   494,
   293,   294,   994,   995,   916,   917,   918,   337,   656,   996,
   738,   167,   338,   363,   177,   997,   178,   495,   179,   546,
   180,   181,   182,   102,   103,   359,   670,   654,   370,   899,
   771,   104,   105,   657,   106,   568,   657,   394,   905,   657,
   907,   313,   314,   670,   395,   656,   396,   592,   656,   568,
   397,   656,   183,   184,   185,   446,   398,   568,   446,   399,
   671,   446,   446,   400,   811,   804,   805,  1006,   805,   811,
   496,   401,   811,   402,   403,   657,   404,   813,   405,   406,
   827,   407,   706,   827,   408,   409,   827,   656,   410,   413,
   655,   414,   671,   657,   415,   669,   611,   568,   568,   687,
   687,   702,   702,   416,   417,   656,   418,   670,   639,   512,
   513,   514,   500,   501,   502,   503,   419,   504,   669,   420,
   505,   506,   507,   508,   515,   516,   421,   657,   479,   737,
   480,   568,   481,   991,   671,   786,   482,   993,   548,   656,
   641,  1001,   555,   598,   742,   755,   254,   867,   255,   361,
   256,   785,   257,   258,   259,   619,   712,   794,   866,   869,
  1026,   872,   887,  1028,  1029,  1030,   888,   328,   657,   350,
   657,   657,   885,   329,   330,   331,   655,   886,   737,   889,
   656,   709,   656,   656,   260,   261,   262,   928,   890,   718,
   891,   892,   893,   894,   669,  1041,   811,   960,   811,   811,
   965,   977,   670,   901,   953,   332,   333,   334,   986,   987,
   988,   669,   989,   655,   928,  1008,   655,  1009,   495,   655,
  1010,  1011,  1047,  1043,  1039,  1048,   873,   975,  1013,   511,
   530,   835,   590,   587,   670,   932,   800,   992,   573,   896,
   575,   578,   970,   708,   810,   591,   630,   632,   826,   810,
   973,   826,   810,    87,   826,   655,   369,   791,   229,   230,
   231,     0,     0,   588,   589,   578,   235,     0,     0,     0,
     0,   496,     0,   655,     0,   669,   670,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1025,   254,   495,   255,   459,   256,     0,   257,   258,   259,
     0,     0,  1024,     0,   792,     0,     0,   655,     0,   573,
   521,   522,   523,   500,   501,   502,   503,   524,   504,   525,
   526,   505,   506,   507,   508,   515,   516,     0,     0,   260,
   261,   262,   640,   254,     0,   255,   472,   256,     0,   257,
   258,   259,   903,     0,     0,   496,     0,     0,   655,     0,
   655,   655,     0,     0,     0,     0,   573,     0,     0,     0,
     0,     0,     0,     0,   527,     0,     0,   926,     0,     0,
   669,   260,   261,   262,     0,     0,   810,     0,   810,   810,
   713,     0,     0,   884,   497,   498,   499,   500,   501,   502,
   503,     0,   504,     0,   926,   505,   506,   507,   508,     0,
     0,     0,   669,     0,     0,     0,     0,     0,   295,   296,
   297,   298,   299,   300,     0,     0,   301,   302,   303,   304,
   305,   306,   307,   308,     0,   310,   311,   312,     0,   315,
   316,   317,   318,   319,   320,   570,     0,     0,   324,   325,
   326,     0,     0,   570,   669,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    -2,
     1,     0,     0,   570,     0,     2,     3,     4,     5,     0,
  -528,  -528,     6,     0,     7,     8,     0,     0,  -528,  -528,
     0,  -528,     9,    10,    11,     0,   -95,    12,     0,   254,
    13,   255,   486,   256,    14,   257,   258,   259,     0,   392,
   393,     0,   796,   799,   570,     0,     0,    15,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   570,   411,
   412,     0,    16,     0,   836,     0,   570,   260,   261,   262,
     0,     0,    17,    18,    19,    20,    21,    22,    23,   -95,
     0,     0,     0,     0,    24,    25,    26,    27,    28,    29,
    30,    31,     0,     0,     0,     0,     0,     0,     0,   658,
     0,     0,     0,     0,     0,  -102,   570,   570,   689,   689,
   704,   704,     0,     0,     0,   883,    32,     0,   -95,   -95,
   -95,   -95,   -95,   -95,   -95,   -95,   -95,   -95,   -95,   -95,
   -95,   -95,   -95,   -95,   -95,     0,     0,  -111,   739,     0,
   570,     0,   189,     0,   190,   898,   191,     0,   192,   193,
   194,     0,    33,     0,     0,     0,     0,     0,  -102,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   483,     0,
     0,     0,   -95,   -99,     0,     0,     0,     0,     0,   936,
   195,   196,   197,     0,     0,   658,     0,   739,     0,     0,
  -111,     0,     0,  -106,   966,   967,   968,  -102,  -102,  -102,
  -102,  -102,  -102,  -102,  -102,  -102,  -102,  -102,  -102,  -102,
  -102,  -102,  -102,  -102,     0,     0,     0,     0,     0,     0,
     0,     0,   658,     0,   547,   658,   -99,     0,   658,  -111,
  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,
  -111,  -111,  -111,  -111,  -111,  -111,  -106,     0,     0,     0,
     0,  -102,     0,   812,     0,     0,     0,   828,   812,     0,
   828,   812,     0,   828,   658,   -99,   -99,   -99,   -99,   -99,
   -99,   -99,   -99,   -99,   -99,   -99,   -99,   -99,   -99,   -99,
   -99,   -99,   658,  -111,     0,  -106,  -106,  -106,  -106,  -106,
  -106,  -106,  -106,  -106,  -106,  -106,  -106,  -106,  -106,  -106,
  -106,  -106,  -115,   254,     0,   255,   550,   256,     0,   257,
   258,   259,     0,     0,     0,     0,   658,     0,     0,   -99,
     0,     0,   108,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  -106,
     0,   260,   261,   262,   254,     0,   255,   593,   256,     0,
   257,   258,   259,     0,     0,  -115,     0,   658,     0,   658,
   658,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,     0,     0,
     0,   954,   260,   261,   262,   812,     0,   812,   812,     0,
     0,     0,     0,     0,  -115,  -115,  -115,  -115,  -115,  -115,
  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,
  -115,   108,     0,   208,   209,   161,   210,   211,   212,     0,
   213,   214,   842,   843,   844,   845,   846,   847,   848,   849,
   850,   851,   852,   853,   854,   855,   856,   857,   858,   859,
   860,   861,   862,   215,   216,   217,     0,     0,  -115,     0,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   719,   720,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   108,   167,   895,     0,     0,     0,     0,     0,     0,   842,
   843,   844,   845,   846,   847,   848,   849,   850,   851,   852,
   853,   854,   855,   856,   857,   858,   859,   860,   861,   862,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   719,   740,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   108,
   167,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   719,   814,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   108,   167,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   719,   830,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   108,   167,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   719,   833,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   108,   167,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   719,
   841,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   108,   167,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   719,   904,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   108,   167,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   719,   929,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   108,   167,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   719,   955,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   108,   167,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   719,   957,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   108,   167,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   719,  1005,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   108,   167,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   719,  1007,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   108,
   167,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   719,  1027,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   108,   167,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   719,  1035,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   108,   167,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   719,  1036,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   108,   167,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   719,
  1037,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   108,   167,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   719,  1045,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   108,   167,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   571,   108,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,     0,   167,     0,     0,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   576,   108,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,     0,   167,     0,
     0,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   556,   557,
   558,   559,   560,   613,   561,   562,   108,   563,   564,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,     0,   167,     0,     0,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   556,   557,   558,   559,   560,   672,   561,   673,
   108,   563,   564,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,     0,   167,     0,     0,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   556,   557,   558,   559,
   560,   675,   561,   673,   108,   563,   564,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
   167,     0,     0,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   676,   677,   678,   679,   680,   681,   682,   683,   108,   684,
   685,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,     0,   167,     0,     0,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   676,   677,   678,   679,   680,   681,
   690,   683,   108,   684,   685,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,     0,   167,     0,
     0,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   691,   692,
   693,   694,   695,   696,   697,   698,   108,   699,   700,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,     0,   167,     0,     0,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   691,   692,   705,   694,   695,   696,   697,   698,
   108,   699,   700,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,     0,   167,     0,     0,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   772,   108,   773,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
   167,     0,     0,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   797,   108,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,     0,   167,     0,     0,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   815,   816,   817,   818,   819,   820,
   821,   822,   108,   823,   824,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,     0,   167,     0,
     0,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   815,   816,
   817,   818,   831,   820,   821,   822,   108,   823,   824,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,     0,   167,     0,     0,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   815,   816,   817,   818,   834,   820,   821,   822,
   108,   823,   824,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,     0,   167,     0,     0,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   934,   108,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
   167,     0,     0,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   108,     0,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,     0,   167,     0,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   556,   557,   558,   559,   560,     0,   561,
   562,   108,   563,   564,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,     0,   167,     0,     0,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   556,   557,   558,
   559,   560,   625,   561,   108,     0,   563,   564,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     0,   167,     0,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   108,     0,   653,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,     0,   167,     0,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   727,   728,   729,   730,   731,   732,   733,
   108,     0,   734,   735,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,     0,   167,     0,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   556,   557,   558,   559,
   560,     0,   561,   673,   108,   563,   564,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
   167,     0,     0,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   727,   728,   729,   730,   731,   732,   733,   108,     0,   734,
   756,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,     0,   167,     0,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   108,     0,   874,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,     0,   167,     0,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   108,     0,   882,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
   167,     0,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   556,
   557,   558,   559,   560,     0,   561,   108,     0,   563,   564,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,     0,   167,     0,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   108,
     0,     0,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,     0,   167,     0,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   937,   938,   939,   940,   941,
     0,   942,   943,   108,   944,   945,   135,   136,   946,   947,
   948,     0,   949,   950,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,     0,   951,
     0,     0,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,  1014,   108,  1015,   134,
     0,  1016,     0,  1017,  1018,  1019,  1020,  1021,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,     0,  1022,     0,     0,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   662,   722,   663,   723,   664,     0,   665,
   108,     0,     0,     0,   666,     0,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,     0,   167,     0,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   662,   722,   663,   723,
   664,     0,   665,   108,     0,     0,     0,   930,     0,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
   167,     0,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   662,
     0,   663,     0,   664,     0,   665,   108,     0,     0,     0,
   666,     0,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,     0,   167,     0,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   662,     0,   663,     0,   664,     0,   665,   108,
     0,     0,     0,   930,     0,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,     0,   167,     0,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   662,     0,   663,     0,   664,
     0,   665,   108,     0,     0,     0,     0,     0,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,     0,   167,
     0,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   922,    62,   923,   134,     0,
     0,   137,   138,   139,   140,   141,   142,     0,     0,     0,
     0,     0,    63,     0,     0,     0,     0,   254,     0,   255,
   599,   256,     0,   257,   258,   259,     0,     0,     0,     0,
     0,     0,   167,     0,    47,     0,     0,     0,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
     0,    48,     0,     0,    49,   260,   261,   262,     0,     0,
     0,    50,     0,     0,     0,     0,     0,     0,    51,    76,
    52,     0,     0,     0,    53,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    54,     0,
    55,    56,    57,    58,     0,     0,     0,    59,   126,   127,
   128,   129,   130,   131,   132,   807,    60,   808,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,     0,   162,   163,   164,   165,
   166,     0,   167,   126,   127,   128,   129,   130,   131,   132,
   807,     0,   829,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     0,   162,   163,   164,   165,   166,     0,   167,   126,   127,
   128,   129,   130,   131,   132,   807,     0,   832,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,     0,   162,   163,   164,   165,
   166,     0,   167,   126,   127,   128,   129,   130,   131,   132,
   807,     0,   956,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     0,   162,   163,   164,   165,   166,     0,   167,   126,   127,
   128,   129,   130,   131,   132,   807,     0,   958,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,     0,   162,   163,   164,   165,
   166,     0,   167,   126,   127,   128,   129,   130,   131,   132,
   807,     0,   959,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     0,   162,   163,   164,   165,   166,   254,   167,   255,   638,
   256,     0,   257,   258,   259,   254,     0,   255,   710,   256,
     0,   257,   258,   259,   254,     0,   255,   758,   256,     0,
   257,   258,   259,   254,     0,   255,     0,   256,     0,   257,
   258,   259,     0,     0,   260,   261,   262,     0,     0,     0,
     0,     0,     0,   260,   261,   262,     0,     0,     0,     0,
     0,     0,   260,   261,   262,     0,     0,     0,     0,     0,
     0,   260,   261,   262,   189,     0,   190,     0,   191,     0,
   366,   193,   194,   378,     0,   379,     0,   380,     0,   381,
   382,   383,   423,     0,   424,     0,   425,     0,   426,   427,
   428,   423,     0,   424,     0,   433,     0,   426,   427,   428,
     0,     0,   367,   196,   197,     0,     0,     0,     0,     0,
     0,   384,   385,   386,     0,     0,     0,     0,     0,     0,
   429,   430,   431,     0,     0,     0,     0,     0,     0,   429,
   430,   431,   423,     0,   424,     0,   434,     0,   426,   427,
   428,   423,     0,   424,     0,   435,     0,   426,   427,   428,
   423,     0,   424,     0,   436,     0,   426,   427,   428,   423,
     0,   424,     0,   437,     0,   426,   427,   428,     0,     0,
   429,   430,   431,     0,     0,     0,     0,     0,     0,   429,
   430,   431,     0,     0,     0,     0,     0,     0,   429,   430,
   431,     0,     0,     0,     0,     0,     0,   429,   430,   431,
   423,     0,   424,     0,   438,     0,   426,   427,   428,   423,
     0,   424,     0,   439,     0,   426,   427,   428,   423,     0,
   424,     0,   440,     0,   426,   427,   428,   423,     0,   424,
     0,   441,     0,   426,   427,   428,     0,     0,   429,   430,
   431,     0,     0,     0,     0,     0,     0,   429,   430,   431,
     0,     0,     0,     0,     0,     0,   429,   430,   431,     0,
     0,     0,     0,     0,     0,   429,   430,   431,   423,     0,
   424,     0,   442,     0,   426,   427,   428,   423,     0,   424,
     0,   443,     0,   426,   427,   428,   328,     0,   350,     0,
   445,     0,   329,   330,   331,   328,     0,   350,     0,   447,
     0,   329,   330,   331,     0,     0,   429,   430,   431,     0,
     0,     0,     0,     0,     0,   429,   430,   431,     0,     0,
     0,     0,     0,     0,   332,   333,   334,     0,     0,     0,
     0,     0,     0,   332,   333,   334,   328,     0,   350,     0,
   450,     0,   329,   330,   331,   328,     0,   350,     0,   451,
     0,   329,   330,   331,   460,     0,   461,     0,   462,     0,
   463,   464,   465,   423,     0,   424,     0,   471,     0,   426,
   427,   428,     0,     0,   332,   333,   334,     0,     0,     0,
     0,     0,     0,   332,   333,   334,     0,     0,     0,     0,
     0,     0,   466,   467,   468,     0,     0,     0,     0,     0,
     0,   429,   430,   431,   423,     0,   424,     0,   477,     0,
   426,   427,   428,   423,     0,   424,     0,   487,     0,   426,
   427,   428,   423,     0,   424,     0,   488,     0,   426,   427,
   428,   378,     0,   379,     0,   489,     0,   381,   382,   383,
     0,     0,   429,   430,   431,     0,     0,     0,     0,     0,
     0,   429,   430,   431,     0,     0,     0,     0,     0,     0,
   429,   430,   431,     0,     0,     0,     0,     0,     0,   384,
   385,   490,   535,     0,   536,     0,   537,     0,   538,   539,
   540,   423,     0,   424,     0,   554,     0,   426,   427,   428,
   423,     0,   424,     0,   597,     0,   426,   427,   428,   600,
     0,   601,     0,   602,     0,   603,   604,   605,     0,     0,
   541,   542,   543,     0,     0,     0,     0,     0,     0,   429,
   430,   431,     0,     0,     0,     0,     0,     0,   429,   430,
   431,     0,     0,     0,     0,     0,     0,   606,   607,   608,
   423,     0,   424,     0,   646,     0,   426,   427,   428,   423,
     0,   424,     0,   711,     0,   426,   427,   428,   378,     0,
   379,     0,   714,     0,   381,   382,   383,   423,     0,   424,
     0,   757,     0,   426,   427,   428,     0,     0,   429,   430,
   431,     0,     0,     0,     0,     0,     0,   429,   430,   431,
     0,     0,     0,     0,     0,     0,   384,   385,   715,     0,
     0,     0,     0,     0,     0,   429,   430,   431,   423,     0,
   424,     0,   761,     0,   426,   427,   428,   535,     0,   536,
     0,   788,     0,   538,   789,   540,   423,     0,   424,     0,
   840,     0,   426,   427,   428,   423,     0,   424,     0,   910,
     0,   426,   427,   428,     0,     0,   429,   430,   431,     0,
     0,     0,     0,     0,     0,   541,   542,   543,     0,     0,
     0,     0,     0,     0,   429,   430,   431,     0,     0,     0,
     0,     0,     0,   429,   430,   431
};

static const short yycheck[] = {    41,
    42,    43,    45,   622,   240,   625,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   251,    83,   741,   496,   285,
   453,   101,   288,   389,   648,   290,   504,    94,   648,   746,
   620,    80,   749,   504,   236,    13,   582,   571,    64,   912,
   913,   914,   119,    31,    32,    97,   524,    99,   921,   118,
    93,   287,   118,   769,   565,   291,   118,    67,   118,   118,
    36,    37,    38,    39,    42,   118,    44,    45,    46,    47,
    25,   787,   119,   125,   118,   897,   587,   118,   624,    67,
    68,   805,   119,    61,   618,   154,   119,   565,   154,   355,
   292,   140,   154,    69,   154,   154,   119,   150,   151,   152,
   724,   579,   924,   253,   724,    81,    82,    83,   579,   587,
   154,    72,   118,   154,   264,   265,   706,   123,   122,   748,
   356,   741,   751,    36,   360,   744,    84,   493,   747,   115,
   620,   750,   136,   137,   119,   121,   122,   123,   140,   143,
    69,    70,   620,   762,     3,   149,     3,   625,     4,   627,
   628,   629,   630,   631,   632,     3,   627,   628,  1031,     3,
  1033,   878,   577,   880,   881,    31,    32,   153,   154,   155,
   648,   119,   587,   149,    84,   590,   900,   110,   444,   127,
   128,   659,   118,   661,   119,   805,   496,   806,   110,   454,
   661,   127,   128,   110,   504,   785,   115,   277,   278,   119,
   123,   124,   125,   126,   127,   128,   117,   473,   932,    26,
    27,   644,   119,   803,   524,   119,   706,   119,   484,   455,
    44,    45,   136,   137,   150,   151,   152,   119,   706,   143,
   708,   154,   119,   276,   115,   149,   117,     1,   119,   475,
   121,   122,   123,    11,    12,   119,   724,   837,   119,   868,
   974,    19,    20,   743,    22,   565,   746,   119,   877,   749,
   879,    40,    41,   741,   119,   743,   119,   533,   746,   579,
   119,   749,   153,   154,   155,   351,   119,   587,   354,   119,
   900,   357,   358,   119,   774,   122,   123,   122,   123,   779,
    54,   119,   782,   119,   119,   785,   119,   775,   119,   119,
   778,   119,   124,   781,   119,   119,   784,   785,   119,   119,
   620,   119,   932,   803,   119,   625,   552,   627,   628,   629,
   630,   631,   632,   119,   119,   803,   119,   805,   594,    93,
    94,    95,    96,    97,    98,    99,   119,   101,   648,   119,
   104,   105,   106,   107,   108,   109,   119,   837,   119,   659,
   119,   661,   119,   972,   974,   115,   119,   976,   119,   837,
   596,   980,   119,   119,   119,   119,   115,   126,   117,   118,
   119,   123,   121,   122,   123,   128,   642,   121,   119,   115,
  1000,   126,   154,  1002,  1003,  1004,   117,   115,   878,   117,
   880,   881,   131,   121,   122,   123,   706,   131,   708,   117,
   878,   637,   880,   881,   153,   154,   155,   897,   117,   645,
   117,   117,   117,   117,   724,  1034,   906,   154,   908,   909,
     5,   121,   900,   126,   902,   153,   154,   155,   118,   117,
   117,   741,   117,   743,   924,   154,   746,   117,     1,   749,
   117,   117,     0,   118,     5,     0,   802,   932,   998,   456,
   458,   785,   527,   524,   932,   900,   766,   974,   500,   863,
   502,   503,   919,   635,   774,   532,   584,   586,   778,   779,
   924,   781,   782,    15,   784,   785,   279,   759,    52,    53,
    54,    -1,    -1,   525,   526,   527,    60,    -1,    -1,    -1,
    -1,    54,    -1,   803,    -1,   805,   974,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1000,   115,     1,   117,   118,   119,    -1,   121,   122,   123,
    -1,    -1,  1000,    -1,   760,    -1,    -1,   837,    -1,   571,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,    -1,    -1,   153,
   154,   155,   595,   115,    -1,   117,   118,   119,    -1,   121,
   122,   123,   872,    -1,    -1,    54,    -1,    -1,   878,    -1,
   880,   881,    -1,    -1,    -1,    -1,   618,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   897,    -1,    -1,
   900,   153,   154,   155,    -1,    -1,   906,    -1,   908,   909,
   643,    -1,    -1,   839,    93,    94,    95,    96,    97,    98,
    99,    -1,   101,    -1,   924,   104,   105,   106,   107,    -1,
    -1,    -1,   932,    -1,    -1,    -1,    -1,    -1,   202,   203,
   204,   205,   206,   207,    -1,    -1,   210,   211,   212,   213,
   214,   215,   216,   217,    -1,   219,   220,   221,    -1,   223,
   224,   225,   226,   227,   228,   496,    -1,    -1,   232,   233,
   234,    -1,    -1,   504,   974,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
     1,    -1,    -1,   524,    -1,     6,     7,     8,     9,    -1,
    11,    12,    13,    -1,    15,    16,    -1,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,     1,    28,    -1,   115,
    31,   117,   118,   119,    35,   121,   122,   123,    -1,   293,
   294,    -1,   764,   765,   565,    -1,    -1,    48,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   579,   313,
   314,    -1,    63,    -1,   786,    -1,   587,   153,   154,   155,
    -1,    -1,    73,    74,    75,    76,    77,    78,    79,    54,
    -1,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   620,
    -1,    -1,    -1,    -1,    -1,     1,   627,   628,   629,   630,
   631,   632,    -1,    -1,    -1,   838,   117,    -1,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,    -1,    -1,     1,   659,    -1,
   661,    -1,   115,    -1,   117,   867,   119,    -1,   121,   122,
   123,    -1,   153,    -1,    -1,    -1,    -1,    -1,    54,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   422,    -1,
    -1,    -1,   147,     1,    -1,    -1,    -1,    -1,    -1,   901,
   153,   154,   155,    -1,    -1,   706,    -1,   708,    -1,    -1,
    54,    -1,    -1,     1,   916,   917,   918,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   743,    -1,   478,   746,    54,    -1,   749,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,    54,    -1,    -1,    -1,
    -1,   147,    -1,   774,    -1,    -1,    -1,   778,   779,    -1,
   781,   782,    -1,   784,   785,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   803,   147,    -1,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,     1,   115,    -1,   117,   118,   119,    -1,   121,
   122,   123,    -1,    -1,    -1,    -1,   837,    -1,    -1,   147,
    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,
    -1,   153,   154,   155,   115,    -1,   117,   118,   119,    -1,
   121,   122,   123,    -1,    -1,    54,    -1,   878,    -1,   880,
   881,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
    -1,   902,   153,   154,   155,   906,    -1,   908,   909,    -1,
    -1,    -1,    -1,    -1,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,    54,    -1,    26,    27,   147,    29,    30,    31,    -1,
    33,    34,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,    56,    57,    58,    -1,    -1,   147,    -1,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
    54,   154,   122,    -1,    -1,    -1,    -1,    -1,    -1,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,    54,
   154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,    54,   154,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,    54,   154,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,    54,   154,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,    54,   154,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,    54,   154,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,    54,   154,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,    54,   154,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,    54,   154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
    54,   154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,    54,
   154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,    54,   154,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,    54,   154,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,    54,   154,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,    54,   154,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,    54,   154,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,    54,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,    -1,   154,    -1,    -1,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,    54,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,    -1,   154,    -1,
    -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,    54,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,    -1,   154,    -1,    -1,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
    54,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,    -1,   154,    -1,    -1,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,    54,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
   154,    -1,    -1,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,    54,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,    -1,   154,    -1,    -1,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,    54,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,    -1,   154,    -1,
    -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,    54,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,    -1,   154,    -1,    -1,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
    54,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,    -1,   154,    -1,    -1,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,    54,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
   154,    -1,    -1,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,    54,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,    -1,   154,    -1,    -1,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,    54,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,    -1,   154,    -1,
    -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,    54,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,    -1,   154,    -1,    -1,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
    54,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,    -1,   154,    -1,    -1,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,    54,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
   154,    -1,    -1,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,    54,    -1,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,    -1,   154,    -1,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
   117,    54,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,    -1,   154,    -1,    -1,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,    54,    -1,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
    -1,   154,    -1,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,    54,    -1,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,    -1,   154,    -1,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
    54,    -1,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,    -1,   154,    -1,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,    -1,   116,   117,    54,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
   154,    -1,    -1,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,    54,    -1,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,    -1,   154,    -1,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
    54,    -1,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,    -1,   154,    -1,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,    54,    -1,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
   154,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,    -1,   116,    54,    -1,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,    -1,   154,    -1,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,    54,
    -1,    -1,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,    -1,   154,    -1,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
    -1,   116,   117,    54,   119,   120,   121,   122,   123,   124,
   125,    -1,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
    -1,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,    54,   119,   120,
    -1,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,    -1,   154,    -1,    -1,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
    54,    -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,    -1,   154,    -1,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,    -1,   116,    54,    -1,    -1,    -1,   121,    -1,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
   154,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
    -1,   112,    -1,   114,    -1,   116,    54,    -1,    -1,    -1,
   121,    -1,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,    -1,   154,    -1,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,    -1,   112,    -1,   114,    -1,   116,    54,
    -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,    -1,   154,    -1,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,    -1,   112,    -1,   114,
    -1,   116,    54,    -1,    -1,    -1,    -1,    -1,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
    -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,     7,   119,   120,    -1,
    -1,   123,   124,   125,   126,   127,   128,    -1,    -1,    -1,
    -1,    -1,    23,    -1,    -1,    -1,    -1,   115,    -1,   117,
   118,   119,    -1,   121,   122,   123,    -1,    -1,    -1,    -1,
    -1,    -1,   154,    -1,     8,    -1,    -1,    -1,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    -1,    25,    -1,    -1,    28,   153,   154,   155,    -1,    -1,
    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    42,    80,
    44,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
    64,    65,    66,    67,    -1,    -1,    -1,    71,   110,   111,
   112,   113,   114,   115,   116,   117,    80,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,    -1,   148,   149,   150,   151,
   152,    -1,   154,   110,   111,   112,   113,   114,   115,   116,
   117,    -1,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
    -1,   148,   149,   150,   151,   152,    -1,   154,   110,   111,
   112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,    -1,   148,   149,   150,   151,
   152,    -1,   154,   110,   111,   112,   113,   114,   115,   116,
   117,    -1,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
    -1,   148,   149,   150,   151,   152,    -1,   154,   110,   111,
   112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,    -1,   148,   149,   150,   151,
   152,    -1,   154,   110,   111,   112,   113,   114,   115,   116,
   117,    -1,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
    -1,   148,   149,   150,   151,   152,   115,   154,   117,   118,
   119,    -1,   121,   122,   123,   115,    -1,   117,   118,   119,
    -1,   121,   122,   123,   115,    -1,   117,   118,   119,    -1,
   121,   122,   123,   115,    -1,   117,    -1,   119,    -1,   121,
   122,   123,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,    -1,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   115,    -1,   117,    -1,   119,    -1,
   121,   122,   123,   115,    -1,   117,    -1,   119,    -1,   121,
   122,   123,   115,    -1,   117,    -1,   119,    -1,   121,   122,
   123,   115,    -1,   117,    -1,   119,    -1,   121,   122,   123,
    -1,    -1,   153,   154,   155,    -1,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,    -1,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,    -1,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   115,    -1,   117,    -1,   119,    -1,   121,   122,
   123,   115,    -1,   117,    -1,   119,    -1,   121,   122,   123,
   115,    -1,   117,    -1,   119,    -1,   121,   122,   123,   115,
    -1,   117,    -1,   119,    -1,   121,   122,   123,    -1,    -1,
   153,   154,   155,    -1,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   115,    -1,   117,    -1,   119,    -1,   121,   122,   123,   115,
    -1,   117,    -1,   119,    -1,   121,   122,   123,   115,    -1,
   117,    -1,   119,    -1,   121,   122,   123,   115,    -1,   117,
    -1,   119,    -1,   121,   122,   123,    -1,    -1,   153,   154,
   155,    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,    -1,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   115,    -1,
   117,    -1,   119,    -1,   121,   122,   123,   115,    -1,   117,
    -1,   119,    -1,   121,   122,   123,   115,    -1,   117,    -1,
   119,    -1,   121,   122,   123,   115,    -1,   117,    -1,   119,
    -1,   121,   122,   123,    -1,    -1,   153,   154,   155,    -1,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,    -1,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,   115,    -1,   117,    -1,
   119,    -1,   121,   122,   123,   115,    -1,   117,    -1,   119,
    -1,   121,   122,   123,   115,    -1,   117,    -1,   119,    -1,
   121,   122,   123,   115,    -1,   117,    -1,   119,    -1,   121,
   122,   123,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,    -1,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   115,    -1,   117,    -1,   119,    -1,
   121,   122,   123,   115,    -1,   117,    -1,   119,    -1,   121,
   122,   123,   115,    -1,   117,    -1,   119,    -1,   121,   122,
   123,   115,    -1,   117,    -1,   119,    -1,   121,   122,   123,
    -1,    -1,   153,   154,   155,    -1,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,    -1,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,    -1,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   115,    -1,   117,    -1,   119,    -1,   121,   122,
   123,   115,    -1,   117,    -1,   119,    -1,   121,   122,   123,
   115,    -1,   117,    -1,   119,    -1,   121,   122,   123,   115,
    -1,   117,    -1,   119,    -1,   121,   122,   123,    -1,    -1,
   153,   154,   155,    -1,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   115,    -1,   117,    -1,   119,    -1,   121,   122,   123,   115,
    -1,   117,    -1,   119,    -1,   121,   122,   123,   115,    -1,
   117,    -1,   119,    -1,   121,   122,   123,   115,    -1,   117,
    -1,   119,    -1,   121,   122,   123,    -1,    -1,   153,   154,
   155,    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,    -1,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   115,    -1,
   117,    -1,   119,    -1,   121,   122,   123,   115,    -1,   117,
    -1,   119,    -1,   121,   122,   123,   115,    -1,   117,    -1,
   119,    -1,   121,   122,   123,   115,    -1,   117,    -1,   119,
    -1,   121,   122,   123,    -1,    -1,   153,   154,   155,    -1,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,    -1,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/csl/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/csl/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 197 "surface.yy"
{ YYACCEPT; ;
    break;}
case 2:
#line 199 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::QUIT;
			;
    break;}
case 6:
#line 212 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 7:
#line 214 "surface.yy"
{
			  int lineNr = lineNumber;
			  eatComment(false); // eat \n so that line number is correct
			  string directory;
			  string fileName;
			  if (findFile(yyvsp[0].yyString, directory, fileName, lineNr))
			    includeFile(directory, fileName, false, lineNr);
			;
    break;}
case 8:
#line 222 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 9:
#line 224 "surface.yy"
{
			  int lineNr = lineNumber;
			  eatComment(false); // eat \n so that line number is correct
			  string directory;
			  string fileName;
			  if (findFile(yyvsp[0].yyString, directory, fileName, lineNr))
			    includeFile(directory, fileName, true, lineNr);
			;
    break;}
case 10:
#line 233 "surface.yy"
{
			  cout << directoryManager.getCwd() << '\n';
			;
    break;}
case 11:
#line 236 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 12:
#line 238 "surface.yy"
{
			  string directory;
			  directoryManager.realPath(yyvsp[0].yyString, directory);
			  if (!directoryManager.cd(directory))
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": cd failed");
			    }
			;
    break;}
case 13:
#line 247 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 14:
#line 249 "surface.yy"
{
			  string directory;
			  directoryManager.realPath(yyvsp[0].yyString, directory);
			  if (directoryManager.pushd(directory) == UNDEFINED)
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": pushd failed");
			    }
			;
    break;}
case 15:
#line 259 "surface.yy"
{
			  const char* path = directoryManager.popd();
			  if (path != 0)
			    cout << path << '\n';
			  else
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": popd failed");
			    }
			;
    break;}
case 16:
#line 269 "surface.yy"
{ lexerStringMode(); ;
    break;}
case 17:
#line 271 "surface.yy"
{
			  system((string("ls") + yyvsp[0].yyString).c_str());
			;
    break;}
case 18:
#line 275 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::QUIT;
			  YYACCEPT;
			;
    break;}
case 19:
#line 280 "surface.yy"
{
			  if(!handleEof())
			    {
			      PARSE_RESULT = UserLevelRewritingContext::QUIT;
			    }
			;
    break;}
case 20:
#line 313 "surface.yy"
{
			  moduleExpressions.push(new ModuleExpression(yyvsp[0].yyToken));
			;
    break;}
case 21:
#line 317 "surface.yy"
{
			  ModuleExpression* m1 = moduleExpressions.top();
			  moduleExpressions.pop();
			  ModuleExpression* m2 = moduleExpressions.top();
			  moduleExpressions.pop();
			  moduleExpressions.push(new ModuleExpression(m1, m2));
			;
    break;}
case 22:
#line 325 "surface.yy"
{
			  ModuleExpression* m = moduleExpressions.top();
			  moduleExpressions.pop();
			  moduleExpressions.push(new ModuleExpression(m, currentRenaming));
			  currentRenaming = 0;
			;
    break;}
case 23:
#line 331 "surface.yy"
{;
    break;}
case 24:
#line 335 "surface.yy"
{
			  currentRenaming = new Renaming;
			;
    break;}
case 28:
#line 346 "surface.yy"
{
			  currentRenaming->addSortMapping(yyvsp[-2].yyToken, yyvsp[0].yyToken);
			;
    break;}
case 29:
#line 350 "surface.yy"
{
			  currentRenaming->addLabelMapping(yyvsp[-2].yyToken, yyvsp[0].yyToken);
			;
    break;}
case 30:
#line 353 "surface.yy"
{;
    break;}
case 31:
#line 356 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 32:
#line 357 "surface.yy"
{ currentRenaming->addOpMapping(bubble); ;
    break;}
case 33:
#line 358 "surface.yy"
{ clear(); ;
    break;}
case 34:
#line 359 "surface.yy"
{ currentRenaming->addOpMapping(bubble); ;
    break;}
case 35:
#line 362 "surface.yy"
{;
    break;}
case 39:
#line 371 "surface.yy"
{
			  clear();
			  bubble.append(yyvsp[0].yyToken);
			  currentRenaming->addType(bubble);
			;
    break;}
case 40:
#line 376 "surface.yy"
{ clear(); ;
    break;}
case 41:
#line 378 "surface.yy"
{
			  currentRenaming->addType(bubble);
			;
    break;}
case 42:
#line 383 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 43:
#line 384 "surface.yy"
{ currentRenaming->addOpTarget(bubble); ;
    break;}
case 44:
#line 385 "surface.yy"
{ clear(); ;
    break;}
case 45:
#line 386 "surface.yy"
{ currentRenaming->addOpTarget(bubble); ;
    break;}
case 46:
#line 389 "surface.yy"
{;
    break;}
case 50:
#line 397 "surface.yy"
{ currentRenaming->setPrec(yyvsp[0].yyToken); ;
    break;}
case 51:
#line 398 "surface.yy"
{ clear(); ;
    break;}
case 52:
#line 399 "surface.yy"
{ currentRenaming->setGather(bubble); ;
    break;}
case 53:
#line 400 "surface.yy"
{ clear(); ;
    break;}
case 54:
#line 401 "surface.yy"
{ currentRenaming->setFormat(bubble); ;
    break;}
case 55:
#line 402 "surface.yy"
{ lexerLatexMode(); ;
    break;}
case 56:
#line 403 "surface.yy"
{ currentRenaming->setLatexMacro(yyvsp[-1].yyString); ;
    break;}
case 57:
#line 409 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 58:
#line 411 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::FUNCTIONAL_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 59:
#line 417 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 60:
#line 422 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 61:
#line 424 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::SYSTEM_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 62:
#line 430 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 63:
#line 435 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 64:
#line 437 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::SYSTEM_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 65:
#line 443 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 66:
#line 450 "surface.yy"
{;
    break;}
case 67:
#line 452 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": fmod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 70:
#line 461 "surface.yy"
{;
    break;}
case 71:
#line 463 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": mod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 74:
#line 472 "surface.yy"
{;
    break;}
case 75:
#line 474 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": omod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 84:
#line 496 "surface.yy"
{
			  ModuleExpression* me = moduleExpressions.top();
			  moduleExpressions.pop();
			  CM->addImport(yyvsp[-2].yyToken, me);
			;
    break;}
case 85:
#line 502 "surface.yy"
{ clear(); ;
    break;}
case 86:
#line 503 "surface.yy"
{ CM->addSortDecl(bubble); ;
    break;}
case 87:
#line 505 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 88:
#line 506 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 89:
#line 507 "surface.yy"
{ CM->addSubsortDecl(bubble); ;
    break;}
case 90:
#line 509 "surface.yy"
{;
    break;}
case 91:
#line 511 "surface.yy"
{;
    break;}
case 92:
#line 513 "surface.yy"
{;
    break;}
case 93:
#line 515 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 94:
#line 516 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 95:
#line 517 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 96:
#line 519 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 97:
#line 520 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 98:
#line 521 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 99:
#line 522 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 100:
#line 524 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 101:
#line 525 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 102:
#line 526 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 103:
#line 528 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 104:
#line 529 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 105:
#line 530 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 106:
#line 531 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 107:
#line 534 "surface.yy"
{
			  //
			  //	Fix things that might be in a bad state due
			  //	to a partially processed declaration.
			  //
			  cleanUpModuleExpression();
			  CM->makeOpDeclsConsistent();
			;
    break;}
case 109:
#line 545 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 110:
#line 546 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 111:
#line 547 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 112:
#line 549 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 113:
#line 550 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 114:
#line 551 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 115:
#line 552 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 117:
#line 557 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 118:
#line 561 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 119:
#line 565 "surface.yy"
{
			;
    break;}
case 120:
#line 568 "surface.yy"
{
			;
    break;}
case 121:
#line 570 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 122:
#line 571 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 123:
#line 572 "surface.yy"
{ CM->addSubsortDecl(bubble); ;
    break;}
case 124:
#line 575 "surface.yy"
{;
    break;}
case 125:
#line 576 "surface.yy"
{;
    break;}
case 128:
#line 584 "surface.yy"
{
			;
    break;}
case 129:
#line 588 "surface.yy"
{ CM->addVarDecl(yyvsp[0].yyToken); ;
    break;}
case 130:
#line 589 "surface.yy"
{ CM->addVarDecl(yyvsp[0].yyToken); ;
    break;}
case 131:
#line 592 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 132:
#line 593 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 133:
#line 594 "surface.yy"
{ clear(); ;
    break;}
case 134:
#line 595 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 137:
#line 603 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  CM->addOpDecl(bubble);
			;
    break;}
case 138:
#line 608 "surface.yy"
{ clear(); ;
    break;}
case 139:
#line 609 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 140:
#line 613 "surface.yy"
{
			  if (yyvsp[-3].yyBool)
			    CM->convertSortsToKinds();
			;
    break;}
case 141:
#line 619 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 142:
#line 620 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 145:
#line 628 "surface.yy"
{
			  clear();
			  bubble.append(yyvsp[0].yyToken);
			  CM->addType(false, bubble);
			;
    break;}
case 146:
#line 633 "surface.yy"
{ clear(); ;
    break;}
case 147:
#line 635 "surface.yy"
{
			  CM->addType(true, bubble);
			;
    break;}
case 148:
#line 640 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 149:
#line 641 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 150:
#line 644 "surface.yy"
{;
    break;}
case 154:
#line 653 "surface.yy"
{
			  CM->setFlag(SymbolType::LEFT_ID | SymbolType::RIGHT_ID);
			;
    break;}
case 155:
#line 657 "surface.yy"
{
			  CM->setFlag(SymbolType::LEFT_ID);
			;
    break;}
case 156:
#line 661 "surface.yy"
{
			  CM->setFlag(SymbolType::RIGHT_ID);
			;
    break;}
case 157:
#line 667 "surface.yy"
{
			  CM->setFlag(SymbolType::ASSOC);
			;
    break;}
case 158:
#line 671 "surface.yy"
{
			  CM->setFlag(SymbolType::COMM);
			;
    break;}
case 159:
#line 674 "surface.yy"
{ clear(); ;
    break;}
case 160:
#line 675 "surface.yy"
{ CM->setIdentity(bubble); ;
    break;}
case 161:
#line 677 "surface.yy"
{
			  CM->setFlag(SymbolType::IDEM);
			;
    break;}
case 162:
#line 681 "surface.yy"
{
			  CM->setFlag(SymbolType::ITER);
			;
    break;}
case 163:
#line 684 "surface.yy"
{ CM->setPrec(yyvsp[0].yyToken); ;
    break;}
case 164:
#line 685 "surface.yy"
{ clear(); ;
    break;}
case 165:
#line 686 "surface.yy"
{ CM->setGather(bubble); ;
    break;}
case 166:
#line 687 "surface.yy"
{ clear(); ;
    break;}
case 167:
#line 688 "surface.yy"
{ CM->setFormat(bubble); ;
    break;}
case 168:
#line 689 "surface.yy"
{ clear(); ;
    break;}
case 169:
#line 690 "surface.yy"
{ CM->setStrat(bubble); ;
    break;}
case 170:
#line 691 "surface.yy"
{ clear(); ;
    break;}
case 171:
#line 692 "surface.yy"
{ CM->setPoly(bubble); ;
    break;}
case 172:
#line 694 "surface.yy"
{
			  CM->setFlag(SymbolType::MEMO);
			;
    break;}
case 173:
#line 698 "surface.yy"
{
			  CM->setFlag(SymbolType::CTOR);
			;
    break;}
case 174:
#line 702 "surface.yy"
{
			  clear();
			  CM->setFrozen(bubble);
			;
    break;}
case 175:
#line 706 "surface.yy"
{ clear(); ;
    break;}
case 176:
#line 707 "surface.yy"
{ CM->setFrozen(bubble); ;
    break;}
case 177:
#line 709 "surface.yy"
{
			  CM->setFlag(SymbolType::CONFIG);
			;
    break;}
case 178:
#line 713 "surface.yy"
{
			  CM->setFlag(SymbolType::OBJECT);
			;
    break;}
case 179:
#line 717 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 180:
#line 720 "surface.yy"
{ lexerLatexMode(); ;
    break;}
case 181:
#line 721 "surface.yy"
{ CM->setLatexMacro(yyvsp[-1].yyString); ;
    break;}
case 182:
#line 722 "surface.yy"
{;
    break;}
case 183:
#line 724 "surface.yy"
{
			  CM->setFlag(SymbolType::DITTO);
			;
    break;}
case 184:
#line 729 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 185:
#line 730 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 188:
#line 738 "surface.yy"
{
			  clear();
			  CM->addHook(PreModule::ID_HOOK, yyvsp[0].yyToken, bubble);
			;
    break;}
case 189:
#line 742 "surface.yy"
{ clear(); ;
    break;}
case 190:
#line 744 "surface.yy"
{
			  CM->addHook(PreModule::ID_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 191:
#line 747 "surface.yy"
{ clear(); ;
    break;}
case 192:
#line 749 "surface.yy"
{
			  CM->addHook(PreModule::OP_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 193:
#line 752 "surface.yy"
{ clear(); ;
    break;}
case 194:
#line 754 "surface.yy"
{
			  CM->addHook(PreModule::TERM_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 195:
#line 762 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 197:
#line 766 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 199:
#line 773 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 200:
#line 774 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 201:
#line 775 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 203:
#line 779 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 204:
#line 780 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 205:
#line 781 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 207:
#line 785 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 208:
#line 786 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 209:
#line 787 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 211:
#line 791 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 212:
#line 792 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 213:
#line 793 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 215:
#line 797 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 216:
#line 798 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 217:
#line 799 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 219:
#line 803 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 220:
#line 804 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 221:
#line 805 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 223:
#line 809 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 224:
#line 810 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 225:
#line 811 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 228:
#line 816 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 229:
#line 817 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 230:
#line 820 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 231:
#line 821 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 232:
#line 822 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 233:
#line 823 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 234:
#line 824 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 235:
#line 825 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 236:
#line 826 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 237:
#line 832 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 238:
#line 833 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 243:
#line 837 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 244:
#line 838 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 407:
#line 932 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 408:
#line 933 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 409:
#line 935 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.setCurrentModule(bubble);
			;
    break;}
case 410:
#line 939 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 411:
#line 940 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 412:
#line 942 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->dump();
			;
    break;}
case 413:
#line 948 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 414:
#line 954 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.parse(bubble);
			;
    break;}
case 415:
#line 961 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 416:
#line 967 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.creduce(bubble);
			;
    break;}
case 417:
#line 974 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 418:
#line 980 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.reduce(bubble, yyvsp[-3].yyBool);
			;
    break;}
case 419:
#line 987 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 420:
#line 994 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.rewrite(bubble, number, yyvsp[-3].yyBool);
			;
    break;}
case 421:
#line 1000 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 422:
#line 1007 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    ;
			;
    break;}
case 423:
#line 1013 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			  number2 = NONE;
			;
    break;}
case 424:
#line 1021 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.fRewrite(bubble, number, number2, yyvsp[-3].yyBool);
			;
    break;}
case 425:
#line 1027 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 426:
#line 1034 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.search(bubble, number);
			;
    break;}
case 427:
#line 1040 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 428:
#line 1047 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.match(bubble, yyvsp[-2].yyBool, number);
			;
    break;}
case 429:
#line 1053 "surface.yy"
{
			  interpreter.cont(yyvsp[-1].yyInt64, yyvsp[-3].yyBool);
			;
    break;}
case 430:
#line 1057 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 431:
#line 1063 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.loop(bubble);
			;
    break;}
case 432:
#line 1068 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 433:
#line 1070 "surface.yy"
{
			  lexerInitialMode();
			  moduleExpr.contractTo(0);
			  if (interpreter.setCurrentModule(moduleExpr))  // HACK
			    interpreter.contLoop(bubble);
			;
    break;}
case 434:
#line 1077 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 435:
#line 1079 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.traceSelect(yyvsp[-3].yyBool);
			;
    break;}
case 436:
#line 1083 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 437:
#line 1085 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.traceExclude(yyvsp[-3].yyBool);
			;
    break;}
case 438:
#line 1089 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 439:
#line 1091 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.breakSelect(yyvsp[-3].yyBool);
			;
    break;}
case 440:
#line 1095 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 441:
#line 1097 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.printConceal(yyvsp[-3].yyBool);
			;
    break;}
case 442:
#line 1102 "surface.yy"
{
			  if (CM != 0)  // HACK
			    CM->getFlatSignature()->clearMemo();
			;
    break;}
case 443:
#line 1109 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 444:
#line 1111 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->showModule();
			;
    break;}
case 445:
#line 1116 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 446:
#line 1118 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->showModule();
			;
    break;}
case 447:
#line 1123 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 448:
#line 1125 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showModule(true);
			;
    break;}
case 449:
#line 1131 "surface.yy"
{
			  interpreter.showModules(true);
			;
    break;}
case 450:
#line 1134 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 451:
#line 1136 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showSortsAndSubsorts();
			;
    break;}
case 452:
#line 1141 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 453:
#line 1143 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showOps();
			;
    break;}
case 454:
#line 1148 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 455:
#line 1150 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showVars();
			;
    break;}
case 456:
#line 1155 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 457:
#line 1157 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showMbs();
			;
    break;}
case 458:
#line 1162 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 459:
#line 1164 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showEqs();
			;
    break;}
case 460:
#line 1169 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 461:
#line 1171 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showRls();
			;
    break;}
case 462:
#line 1176 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 463:
#line 1178 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showSummary();
			;
    break;}
case 464:
#line 1183 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 465:
#line 1185 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showKinds();
			;
    break;}
case 466:
#line 1191 "surface.yy"
{
			  interpreter.showSearchPath(yyvsp[-1].yyInt64);
			;
    break;}
case 467:
#line 1195 "surface.yy"
{
			  interpreter.showSearchGraph();
			;
    break;}
case 468:
#line 1198 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 469:
#line 1200 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showProfile();
			;
    break;}
case 470:
#line 1209 "surface.yy"
{
			  globalAdvisoryFlag = yyvsp[-1].yyBool;
			;
    break;}
case 471:
#line 1213 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 472:
#line 1217 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_LOOP_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 473:
#line 1221 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_TIMING, yyvsp[-1].yyBool);
			;
    break;}
case 474:
#line 1225 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_BREAKDOWN, yyvsp[-1].yyBool);
			;
    break;}
case 475:
#line 1229 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_LOOP_TIMING, yyvsp[-1].yyBool);
			;
    break;}
case 476:
#line 1233 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_COMMAND, yyvsp[-1].yyBool);
			;
    break;}
case 477:
#line 1237 "surface.yy"
{
			  MemoryCell::setShowGC(yyvsp[-1].yyBool);
			;
    break;}
case 478:
#line 1241 "surface.yy"
{
			  MixfixModule::setPrintMixfix(yyvsp[-1].yyBool);
			;
    break;}
case 479:
#line 1245 "surface.yy"
{
			  MixfixModule::setPrintFlat(yyvsp[-1].yyBool);
			;
    break;}
case 480:
#line 1249 "surface.yy"
{
			  MixfixModule::setPrintWithAliases(yyvsp[-1].yyBool);
			;
    break;}
case 481:
#line 1253 "surface.yy"
{
			  MixfixModule::setPrintWithParens(yyvsp[-1].yyBool);
			;
    break;}
case 482:
#line 1257 "surface.yy"
{
			  MixfixModule::setPrintGraph(yyvsp[-1].yyBool);
			;
    break;}
case 483:
#line 1261 "surface.yy"
{
			  MixfixModule::setPrintConceal(yyvsp[-1].yyBool);
			;
    break;}
case 484:
#line 1265 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_NUMBER, yyvsp[-1].yyBool);
			;
    break;}
case 485:
#line 1269 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_RAT, yyvsp[-1].yyBool);
			;
    break;}
case 486:
#line 1273 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_COLOR, yyvsp[-1].yyBool);
			;
    break;}
case 487:
#line 1277 "surface.yy"
{
			  MixfixModule::setPrintFormat(yyvsp[-1].yyBool);
			;
    break;}
case 488:
#line 1281 "surface.yy"
{
			  interpreter.setFlag(Interpreter::TRACE, yyvsp[-1].yyBool);
			;
    break;}
case 489:
#line 1285 "surface.yy"
{
			  UserLevelRewritingContext::setTraceConditionFlag(yyvsp[-1].yyBool);
			;
    break;}
case 490:
#line 1289 "surface.yy"
{
			// ??? what is this supposed to do?
			;
    break;}
case 491:
#line 1293 "surface.yy"
{
			  UserLevelRewritingContext::setTraceWholeFlag(yyvsp[-1].yyBool);
			;
    break;}
case 492:
#line 1297 "surface.yy"
{
			  UserLevelRewritingContext::setTraceSubstitutionFlag(yyvsp[-1].yyBool);
			;
    break;}
case 493:
#line 1301 "surface.yy"
{
			  UserLevelRewritingContext::setTraceSelectFlag(yyvsp[-1].yyBool);
			;
    break;}
case 494:
#line 1305 "surface.yy"
{
			  UserLevelRewritingContext::setTraceScFlag(yyvsp[-1].yyBool);
			;
    break;}
case 495:
#line 1309 "surface.yy"
{
			  UserLevelRewritingContext::setTraceEqFlag(yyvsp[-1].yyBool);
			;
    break;}
case 496:
#line 1313 "surface.yy"
{
			  UserLevelRewritingContext::setTraceRuleFlag(yyvsp[-1].yyBool);
			;
    break;}
case 497:
#line 1317 "surface.yy"
{
			  interpreter.setFlag(Interpreter::BREAK, yyvsp[-1].yyBool);
			;
    break;}
case 498:
#line 1320 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 499:
#line 1321 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 500:
#line 1323 "surface.yy"
{
			  interpreter.setAutoImport(yyvsp[-5].yyImportMode, yyvsp[-3].yyToken, yyvsp[-1].yyBool);
			;
    break;}
case 501:
#line 1326 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 502:
#line 1327 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 503:
#line 1329 "surface.yy"
{
			  interpreter.setOmodInclude(yyvsp[-3].yyToken, yyvsp[-1].yyBool);
			;
    break;}
case 504:
#line 1333 "surface.yy"
{
			  globalVerboseFlag = yyvsp[-1].yyBool;
			;
    break;}
case 505:
#line 1337 "surface.yy"
{
			  interpreter.setFlag(Interpreter::AUTO_CLEAR_MEMO, yyvsp[-1].yyBool);
			;
    break;}
case 506:
#line 1341 "surface.yy"
{
			  interpreter.setFlag(Interpreter::COMPILE_COUNT, yyvsp[-1].yyBool);
			;
    break;}
case 507:
#line 1345 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PROFILE, yyvsp[-1].yyBool);
			;
    break;}
case 508:
#line 1349 "surface.yy"
{
			  interpreter.setFlag(Interpreter::AUTO_CLEAR_PROFILE, yyvsp[-1].yyBool);
			;
    break;}
case 509:
#line 1356 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::RESUME;
			;
    break;}
case 510:
#line 1360 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::ABORT;
			;
    break;}
case 511:
#line 1364 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::STEP;
			;
    break;}
case 512:
#line 1368 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::WHERE;
			;
    break;}
case 513:
#line 1375 "surface.yy"
{
			  MemoryCell::setShowGC(yyvsp[-1].yyBool);
			;
    break;}
case 514:
#line 1379 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 515:
#line 1385 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 517:
#line 1392 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 518:
#line 1393 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 519:
#line 1396 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 520:
#line 1397 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 521:
#line 1400 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 522:
#line 1401 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 523:
#line 1404 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 524:
#line 1405 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 525:
#line 1408 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 526:
#line 1409 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 527:
#line 1412 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 528:
#line 1413 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 529:
#line 1416 "surface.yy"
{ yyval.yyInt64 = yyvsp[0].yyInt64; ;
    break;}
case 530:
#line 1417 "surface.yy"
{ yyval.yyInt64 = NONE; ;
    break;}
case 531:
#line 1420 "surface.yy"
{ yyval.yyImportMode = ModuleDatabase::PROTECTING; ;
    break;}
case 532:
#line 1421 "surface.yy"
{ yyval.yyImportMode = ModuleDatabase::EXTENDING; ;
    break;}
case 533:
#line 1422 "surface.yy"
{ yyval.yyImportMode = ModuleDatabase::INCLUDING; ;
    break;}
case 534:
#line 1430 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 536:
#line 1432 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 538:
#line 1436 "surface.yy"
{ moduleExpr = bubble; clear(); ;
    break;}
case 539:
#line 1437 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 540:
#line 1438 "surface.yy"
{;
    break;}
case 541:
#line 1439 "surface.yy"
{;
    break;}
case 542:
#line 1448 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 544:
#line 1450 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 546:
#line 1452 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 548:
#line 1457 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 550:
#line 1459 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 552:
#line 1461 "surface.yy"
{;
    break;}
case 553:
#line 1466 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  clear();
			;
    break;}
case 555:
#line 1471 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 557:
#line 1473 "surface.yy"
{;
    break;}
case 558:
#line 1482 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 560:
#line 1484 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 562:
#line 1486 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 564:
#line 1491 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 566:
#line 1493 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 568:
#line 1495 "surface.yy"
{;
    break;}
case 569:
#line 1500 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  clear();
			;
    break;}
case 571:
#line 1505 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 573:
#line 1507 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 575:
#line 1509 "surface.yy"
{;
    break;}
case 576:
#line 1513 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 578:
#line 1515 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 580:
#line 1517 "surface.yy"
{;
    break;}
case 581:
#line 1522 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  number2 = Token::codeToInt64(bubble[3].code());
			  clear();
			;
    break;}
case 583:
#line 1528 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 585:
#line 1530 "surface.yy"
{;
    break;}
case 586:
#line 1536 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 588:
#line 1540 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 590:
#line 1545 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 600:
#line 1553 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 601:
#line 1554 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 609:
#line 1558 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 610:
#line 1559 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 617:
#line 1564 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 618:
#line 1565 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 626:
#line 1569 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 627:
#line 1570 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 634:
#line 1574 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 635:
#line 1575 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 642:
#line 1580 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 643:
#line 1581 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 650:
#line 1586 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 651:
#line 1587 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 657:
#line 1592 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 658:
#line 1593 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 661:
#line 1604 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  interpreter.addSelected(bubble);
			;
    break;}
case 662:
#line 1609 "surface.yy"
{ clear(); ;
    break;}
case 663:
#line 1611 "surface.yy"
{
			  interpreter.addSelected(bubble);
			;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/csl/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1641 "surface.yy"


static void
yyerror(char *s)
{
  if (!(UserLevelRewritingContext::interrupted()))
    IssueWarning(LineNumber(lineNumber) << ": " << s);
}

void
cleanUpModuleExpression()
{
  //
  //	Delete pieces of a partly built module expression.
  //
  delete currentRenaming;
  currentRenaming = 0;
  while (!moduleExpressions.empty())
    {
      moduleExpressions.top()->deepSelfDestruct();
      moduleExpressions.pop();
    }
}

void
cleanUpParser()
{
  //bubble.contractTo(0);
  //moduleExpr.contractTo(0);
  //pattern.contractTo(0);
  interpreter.makeClean(lineNumber);
  /*
  if (currentModule != 0 && !(currentModule->isComplete()))
    {
      IssueAdvisory(cerr << LineNumber(lineNumber) << ": discarding incomplete module.");
      delete currentModule;
      currentModule = 0;
    }
  */
}
