/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/

//
//      Class for socket manager symbols.
//
#ifndef _socketManagerSymbol_hh_
#define _socketManagerSymbol_hh_
#include <map>
#include "externalObjectManagerSymbol.hh"
#include "pseudoThread.hh"

class SocketManagerSymbol
  : public ExternalObjectManagerSymbol,
    public PseudoThread
{
  NO_COPYING(SocketManagerSymbol);

public:
  SocketManagerSymbol(int id);

  bool attachData(const Vector<Sort*>& opDeclaration,
		  const char* purpose,
		  const Vector<const char*>& data);
  bool attachSymbol(const char* purpose, Symbol* symbol);
  void copyAttachments(Symbol* original, SymbolMap* map);
  void getDataAttachments(const Vector<Sort*>& opDeclaration,
			  Vector<const char*>& purposes,
			  Vector<Vector<const char*> >& data);
  void getSymbolAttachments(Vector<const char*>& purposes,
			    Vector<Symbol*>& symbols);
  //
  //	Overridden methods from ExternalObjectManagerSymbol.
  //
  bool handleManagerMessage(DagNode* message, ObjectSystemRewritingContext& context);
  bool handleMessage(DagNode* message, ObjectSystemRewritingContext& context);
  void cleanUp(DagNode* objectId);
  //
  //	Overridden methods from PseudoThread.
  //
  void doRead(int fd);
  void doWrite(int fd);
  void doError(int fd);
  void doHungUp(int fd);

private:
  enum SocketState
  {
    READY_TO_SEND
  };

  struct ActiveSocket
  {
    int state;
  };

  typedef map<int, ActiveSocket> SocketMap;

  bool getDomain(DagNode* domainArg, int& port);
  bool getPort(DagNode* protocolArg, int& protocol);
  bool getActiveSocket(DagNode* socketArg, int& socketId);
  bool getText(DagNode* textArg, crope& text);
  void errorReply(const char* errorMessage,
		  FreeDagNode* orignalMessage,
		  ObjectSystemRewritingContext& context);
  void closeSocket(DagNode* socketName,
		   int socketId,
		   DagNode* clientName,
		   ObjectSystemRewritingContext& context);

  bool createClientTcpSocket(FreeDagNode* message, ObjectSystemRewritingContext& context);
  bool createServerTcpSocket(FreeDagNode* message, ObjectSystemRewritingContext& context);
  bool acceptClient(FreeDagNode* message, ObjectSystemRewritingContext& context);
  bool send(FreeDagNode* message, ObjectSystemRewritingContext& context);
  bool receive(FreeDagNode* message, ObjectSystemRewritingContext& context);
  bool closeSocket(FreeDagNode* message, ObjectSystemRewritingContext& context);
  //
  //	Socket subsystem signature (generated by macro expansion).
  //
#define MACRO(SymbolName, SymbolClass, NrArgs) \
  SymbolClass* SymbolName;
#include "socketSignature.cc"
#undef MACRO

  SocketMap activeSockets;
};

#endif
