fmod BOOL
fmod TRUTH-VALUE
fmod TRUTH
fmod EXT-BOOL
fmod NAT
fmod INT
fmod RAT
fmod FLOAT
fmod STRING
fmod CONVERSION
fmod RANDOM
fmod QID
fth TRIV
fth STRICT-WEAK-ORDER
fth STRICT-TOTAL-ORDER
fth TOTAL-PREORDER
fth TOTAL-ORDER
fth DEFAULT
fmod LIST
fmod WEAKLY-SORTABLE-LIST
fmod SORTABLE-LIST
fmod WEAKLY-SORTABLE-LIST'
fmod SORTABLE-LIST'
fmod SET
fmod LIST-AND-SET
fmod SORTABLE-LIST-AND-SET
fmod SORTABLE-LIST-AND-SET'
fmod LIST*
fmod SET*
fmod MAP
fmod ARRAY
fmod NAT-LIST
fmod QID-LIST
fmod QID-SET
fmod META-TERM
fmod META-MODULE
fmod META-VIEW
fmod META-LEVEL
mod COUNTER
mod LOOP-MODE
mod CONFIGURATION
fmod PAIR
fmod ERROR-RAT
fmod RatxRat<
fmod LUB-MIN
mod WFCS
fth X :: TRIV
fth X :: STRICT-WEAK-ORDER
fmod LIST{STRICT-WEAK-ORDER}
fmod LIST{STRICT-WEAK-ORDER}{[X]}
fmod LIST{STRICT-WEAK-ORDER}{[X]} * (sort NeList{STRICT-WEAK-ORDER}{X} to
    NeList{X}, sort List{STRICT-WEAK-ORDER}{X} to List{X})
fth X :: STRICT-TOTAL-ORDER
fmod WEAKLY-SORTABLE-LIST{STRICT-TOTAL-ORDER}
fmod LIST{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}
fmod LIST{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{[X]}
fmod LIST{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{[X]} * (sort NeList{
    STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to NeList{STRICT-TOTAL-ORDER}{X},
    sort List{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to List{
    STRICT-TOTAL-ORDER}{X})
fmod WEAKLY-SORTABLE-LIST{STRICT-TOTAL-ORDER}{[X]}
fmod WEAKLY-SORTABLE-LIST{STRICT-TOTAL-ORDER}{[X]} * (sort NeList{
    STRICT-TOTAL-ORDER}{X} to NeList{X}, sort List{STRICT-TOTAL-ORDER}{X} to
    List{X})
fmod LIST{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{[X]} * (sort NeList{
    STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to NeList{STRICT-TOTAL-ORDER}{X},
    sort List{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to List{
    STRICT-TOTAL-ORDER}{X}) * (sort NeList{STRICT-TOTAL-ORDER}{X} to NeList{X},
    sort List{STRICT-TOTAL-ORDER}{X} to List{X})
fth X :: TOTAL-PREORDER
fmod LIST{TOTAL-PREORDER}
fmod LIST{TOTAL-PREORDER}{[X]}
fmod LIST{TOTAL-PREORDER}{[X]} * (sort NeList{TOTAL-PREORDER}{X} to NeList{X},
    sort List{TOTAL-PREORDER}{X} to List{X})
fth X :: TOTAL-ORDER
fmod WEAKLY-SORTABLE-LIST'{TOTAL-ORDER}
fmod LIST{TOTAL-PREORDER}{TOTAL-ORDER}
fmod LIST{TOTAL-PREORDER}{TOTAL-ORDER}{[X]}
fmod LIST{TOTAL-PREORDER}{TOTAL-ORDER}{[X]} * (sort NeList{TOTAL-PREORDER}{
    TOTAL-ORDER}{X} to NeList{TOTAL-ORDER}{X}, sort List{TOTAL-PREORDER}{
    TOTAL-ORDER}{X} to List{TOTAL-ORDER}{X})
fmod WEAKLY-SORTABLE-LIST'{TOTAL-ORDER}{[X]}
fmod WEAKLY-SORTABLE-LIST'{TOTAL-ORDER}{[X]} * (sort NeList{TOTAL-ORDER}{X} to
    NeList{X}, sort List{TOTAL-ORDER}{X} to List{X})
fmod LIST{TOTAL-PREORDER}{TOTAL-ORDER}{[X]} * (sort NeList{TOTAL-PREORDER}{
    TOTAL-ORDER}{X} to NeList{TOTAL-ORDER}{X}, sort List{TOTAL-PREORDER}{
    TOTAL-ORDER}{X} to List{TOTAL-ORDER}{X}) * (sort NeList{TOTAL-ORDER}{X} to
    NeList{X}, sort List{TOTAL-ORDER}{X} to List{X})
fmod LIST{[X]}
fmod SET{[X]}
fmod SORTABLE-LIST{[X]}
fmod LIST-AND-SET{STRICT-WEAK-ORDER}
fmod SET{STRICT-WEAK-ORDER}
fmod SET{STRICT-WEAK-ORDER}{[X]}
fmod LIST-AND-SET{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}
fmod SET{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}
fmod SET{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{[X]}
fmod LIST-AND-SET{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{[X]}
fmod LIST-AND-SET{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{[X]} * (sort NeList{
    STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to NeList{STRICT-TOTAL-ORDER}{X},
    sort List{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to List{
    STRICT-TOTAL-ORDER}{X})
fmod LIST-AND-SET{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{[X]} * (sort NeList{
    STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to NeList{STRICT-TOTAL-ORDER}{X},
    sort List{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to List{
    STRICT-TOTAL-ORDER}{X}) * (sort NeList{STRICT-TOTAL-ORDER}{X} to NeList{X},
    sort List{STRICT-TOTAL-ORDER}{X} to List{X}, sort NeSet{STRICT-WEAK-ORDER}{
    STRICT-TOTAL-ORDER}{X} to NeSet{X}, sort Set{STRICT-WEAK-ORDER}{
    STRICT-TOTAL-ORDER}{X} to Set{X})
fmod SET{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{[X]} * (sort NeSet{
    STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to NeSet{X}, sort Set{
    STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to Set{X})
fmod SORTABLE-LIST'{[X]}
fmod LIST-AND-SET{TOTAL-PREORDER}
fmod SET{TOTAL-PREORDER}
fmod SET{TOTAL-PREORDER}{[X]}
fmod LIST-AND-SET{TOTAL-PREORDER}{TOTAL-ORDER}
fmod SET{TOTAL-PREORDER}{TOTAL-ORDER}
fmod SET{TOTAL-PREORDER}{TOTAL-ORDER}{[X]}
fmod LIST-AND-SET{TOTAL-PREORDER}{TOTAL-ORDER}{[X]}
fmod LIST-AND-SET{TOTAL-PREORDER}{TOTAL-ORDER}{[X]} * (sort NeList{
    TOTAL-PREORDER}{TOTAL-ORDER}{X} to NeList{TOTAL-ORDER}{X}, sort List{
    TOTAL-PREORDER}{TOTAL-ORDER}{X} to List{TOTAL-ORDER}{X})
fmod LIST-AND-SET{TOTAL-PREORDER}{TOTAL-ORDER}{[X]} * (sort NeList{
    TOTAL-PREORDER}{TOTAL-ORDER}{X} to NeList{TOTAL-ORDER}{X}, sort List{
    TOTAL-PREORDER}{TOTAL-ORDER}{X} to List{TOTAL-ORDER}{X}) * (sort NeList{
    TOTAL-ORDER}{X} to NeList{X}, sort List{TOTAL-ORDER}{X} to List{X}, sort
    NeSet{TOTAL-PREORDER}{TOTAL-ORDER}{X} to NeSet{X}, sort Set{
    TOTAL-PREORDER}{TOTAL-ORDER}{X} to Set{X})
fmod SET{TOTAL-PREORDER}{TOTAL-ORDER}{[X]} * (sort NeSet{TOTAL-PREORDER}{
    TOTAL-ORDER}{X} to NeSet{X}, sort Set{TOTAL-PREORDER}{TOTAL-ORDER}{X} to
    Set{X})
fth Y :: TRIV
fth Y :: DEFAULT
fmod LIST{Nat}
fmod LIST{Nat} * (sort NeList{Nat} to NeNatList, sort List{Nat} to NatList)
fmod LIST{Qid}
fmod LIST{Qid} * (sort NeList{Qid} to NeQidList, sort List{Qid} to QidList)
fmod SET{Qid}
fmod SET{Qid} * (sort NeSet{Qid} to NeQidSet, sort Set{Qid} to QidSet)
fmod QID-SET * (op _`,_ to _;_ [prec 43], op empty to none)
fmod SET{Qid} * (sort NeSet{Qid} to NeQidSet, sort Set{Qid} to QidSet) * (op
    _`,_ to _;_ [prec 43], op empty to none)
fmod PAIR{Rat, Rat}
fmod LIST * (op __ : [NeList{X},List{X},X$Elt] [NeList{X},List{X},X$Elt] -> [
    NeList{X},List{X},X$Elt] to _:_)
fmod (LIST * (op __ : [NeList{X},List{X},X$Elt] [NeList{X},List{X},X$Elt] -> [
    NeList{X},List{X},X$Elt] to _:_)){Rat}
fmod SORTABLE-LIST * (op __ : [NeList{X},List{X},X$Elt] [NeList{X},List{X},
    X$Elt] -> [NeList{X},List{X},X$Elt] to _:_)
fmod WEAKLY-SORTABLE-LIST{STRICT-TOTAL-ORDER}{[X]} * (sort NeList{
    STRICT-TOTAL-ORDER}{X} to NeList{X}, sort List{STRICT-TOTAL-ORDER}{X} to
    List{X}) * (op __ : [NeList{X},List{X},X$Elt] [NeList{X},List{X},X$Elt] ->
    [NeList{X},List{X},X$Elt] to _:_)
fmod LIST{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{[X]} * (sort NeList{
    STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to NeList{STRICT-TOTAL-ORDER}{X},
    sort List{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to List{
    STRICT-TOTAL-ORDER}{X}) * (sort NeList{STRICT-TOTAL-ORDER}{X} to NeList{X},
    sort List{STRICT-TOTAL-ORDER}{X} to List{X}) * (op __ : [NeList{X},List{X},
    X$Elt] [NeList{X},List{X},X$Elt] -> [NeList{X},List{X},X$Elt] to _:_)
fmod (SORTABLE-LIST * (op __ : [NeList{X},List{X},X$Elt] [NeList{X},List{X},
    X$Elt] -> [NeList{X},List{X},X$Elt] to _:_)){RatxRat<}
fmod WEAKLY-SORTABLE-LIST{STRICT-TOTAL-ORDER}{RatxRat<}
fmod LIST{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{RatxRat<}
fmod LIST{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{RatxRat<} * (sort NeList{
    STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{RatxRat<} to NeList{
    STRICT-TOTAL-ORDER}{RatxRat<}, sort List{STRICT-WEAK-ORDER}{
    STRICT-TOTAL-ORDER}{RatxRat<} to List{STRICT-TOTAL-ORDER}{RatxRat<})
fmod WEAKLY-SORTABLE-LIST{STRICT-TOTAL-ORDER}{RatxRat<} * (sort NeList{
    STRICT-TOTAL-ORDER}{RatxRat<} to NeList{RatxRat<}, sort List{
    STRICT-TOTAL-ORDER}{RatxRat<} to List{RatxRat<})
fmod LIST{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{RatxRat<} * (sort NeList{
    STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{RatxRat<} to NeList{
    STRICT-TOTAL-ORDER}{RatxRat<}, sort List{STRICT-WEAK-ORDER}{
    STRICT-TOTAL-ORDER}{RatxRat<} to List{STRICT-TOTAL-ORDER}{RatxRat<}) * (
    sort NeList{STRICT-TOTAL-ORDER}{RatxRat<} to NeList{RatxRat<}, sort List{
    STRICT-TOTAL-ORDER}{RatxRat<} to List{RatxRat<})
fmod WEAKLY-SORTABLE-LIST{STRICT-TOTAL-ORDER}{RatxRat<} * (sort NeList{
    STRICT-TOTAL-ORDER}{RatxRat<} to NeList{RatxRat<}, sort List{
    STRICT-TOTAL-ORDER}{RatxRat<} to List{RatxRat<}) * (op __ : [Pair{Rat,Rat},
    List{RatxRat<},NeList{RatxRat<}] [Pair{Rat,Rat},List{RatxRat<},NeList{
    RatxRat<}] -> [Pair{Rat,Rat},List{RatxRat<},NeList{RatxRat<}] to _:_)
fmod LIST{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{RatxRat<} * (sort NeList{
    STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{RatxRat<} to NeList{
    STRICT-TOTAL-ORDER}{RatxRat<}, sort List{STRICT-WEAK-ORDER}{
    STRICT-TOTAL-ORDER}{RatxRat<} to List{STRICT-TOTAL-ORDER}{RatxRat<}) * (
    sort NeList{STRICT-TOTAL-ORDER}{RatxRat<} to NeList{RatxRat<}, sort List{
    STRICT-TOTAL-ORDER}{RatxRat<} to List{RatxRat<}) * (op __ : [Pair{Rat,Rat},
    List{RatxRat<},NeList{RatxRat<}] [Pair{Rat,Rat},List{RatxRat<},NeList{
    RatxRat<}] -> [Pair{Rat,Rat},List{RatxRat<},NeList{RatxRat<}] to _:_)
mod WFCS is
  sorts Bool Zero NzNat Nat NzInt Int PosRat NzRat Rat NeList{Rat} List{Rat}
    String Char FindResult Pair{Rat,Rat} NeList{RatxRat<} List{RatxRat<}
    $Split{STRICT-TOTAL-ORDER}{RatxRat<} .
  subsorts Zero NzNat NzNat < Nat .
  subsort NzNat < NzInt .
  subsorts NzInt Nat NzInt < Int .
  subsort NzNat < PosRat .
  subsorts NzInt PosRat < NzRat .
  subsorts NzRat Int < Rat .
  subsort Rat < NeList{Rat} .
  subsort NeList{Rat} < List{Rat} .
  subsort Char < String .
  subsort Nat < FindResult .
  subsort Pair{Rat,Rat} < NeList{RatxRat<} .
  subsort NeList{RatxRat<} < List{RatxRat<} .
  op if_then_else_fi : Bool Universal Universal -> Universal [poly (2 3 0) prec
    0 gather (& & &) special (
    id-hook BranchSymbol
    term-hook 1 (true)
    term-hook 2 (false))] .
  op _==_ : Universal Universal -> Bool [poly (1 2) prec 51 gather (E E)
    special (
    id-hook EqualitySymbol
    term-hook equalTerm (true)
    term-hook notEqualTerm (false))] .
  op _=/=_ : Universal Universal -> Bool [poly (1 2) prec 51 gather (E E)
    special (
    id-hook EqualitySymbol
    term-hook equalTerm (false)
    term-hook notEqualTerm (true))] .
  op true : -> Bool [ctor special (
    id-hook SystemTrue)] .
  op false : -> Bool [ctor special (
    id-hook SystemFalse)] .
  op _and_ : Bool Bool -> Bool [assoc comm prec 55 gather (e E)] .
  op _or_ : Bool Bool -> Bool [assoc comm prec 59 gather (e E)] .
  op _xor_ : Bool Bool -> Bool [assoc comm prec 57 gather (e E)] .
  op not_ : Bool -> Bool [prec 53 gather (E)] .
  op _implies_ : Bool Bool -> Bool [prec 61 gather (e E)] .
  op 0 : -> Zero [ctor] .
  op s_ : Nat -> NzNat [ctor iter prec 15 gather (E) special (
    id-hook SuccSymbol
    term-hook zeroTerm (0))] .
  op _+_ : NzNat Nat -> NzNat [assoc comm prec 33 gather (e E) special (
    id-hook ACU_NumberOpSymbol (+)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _+_ : Nat Nat -> Nat [assoc comm prec 33 gather (e E) special (
    id-hook ACU_NumberOpSymbol (+)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _+_ : Int Int -> Int [assoc comm prec 33 gather (e E) special (
    id-hook ACU_NumberOpSymbol (+)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _+_ : PosRat PosRat -> PosRat [assoc comm prec 33 gather (e E) special (
    id-hook ACU_NumberOpSymbol (+)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _+_ : PosRat Nat -> PosRat [assoc comm prec 33 gather (e E) special (
    id-hook ACU_NumberOpSymbol (+)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _+_ : Rat Rat -> Rat [assoc comm prec 33 gather (e E) special (
    id-hook ACU_NumberOpSymbol (+)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op sd : Nat Nat -> Nat [comm special (
    id-hook CUI_NumberOpSymbol (sd)
    op-hook succSymbol (s_ : Nat ~> NzNat))] .
  op _*_ : NzNat NzNat -> NzNat [assoc comm prec 31 gather (e E) special (
    id-hook ACU_NumberOpSymbol (*)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _*_ : Nat Nat -> Nat [assoc comm prec 31 gather (e E) special (
    id-hook ACU_NumberOpSymbol (*)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _*_ : NzInt NzInt -> NzInt [assoc comm prec 31 gather (e E) special (
    id-hook ACU_NumberOpSymbol (*)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _*_ : Int Int -> Int [assoc comm prec 31 gather (e E) special (
    id-hook ACU_NumberOpSymbol (*)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _*_ : PosRat PosRat -> PosRat [assoc comm prec 31 gather (e E) special (
    id-hook ACU_NumberOpSymbol (*)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _*_ : NzRat NzRat -> NzRat [assoc comm prec 31 gather (e E) special (
    id-hook ACU_NumberOpSymbol (*)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _*_ : Rat Rat -> Rat [assoc comm prec 31 gather (e E) special (
    id-hook ACU_NumberOpSymbol (*)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _quo_ : Nat NzNat -> Nat [prec 31 gather (E e) special (
    id-hook NumberOpSymbol (quo)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _quo_ : Int NzInt -> Int [prec 31 gather (E e) special (
    id-hook NumberOpSymbol (quo)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _quo_ : PosRat PosRat -> Nat [prec 31 gather (E e) special (
    id-hook NumberOpSymbol (quo)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _quo_ : Rat NzRat -> Int [prec 31 gather (E e) special (
    id-hook NumberOpSymbol (quo)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _rem_ : Nat NzNat -> Nat [prec 31 gather (E e) special (
    id-hook NumberOpSymbol (rem)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _rem_ : Int NzInt -> Int [prec 31 gather (E e) special (
    id-hook NumberOpSymbol (rem)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _rem_ : Rat NzRat -> Rat [prec 31 gather (E e) special (
    id-hook NumberOpSymbol (rem)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _^_ : Nat Nat -> Nat [prec 29 gather (E e) special (
    id-hook NumberOpSymbol (^)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _^_ : NzNat Nat -> NzNat [prec 29 gather (E e) special (
    id-hook NumberOpSymbol (^)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _^_ : Int Nat -> Int [prec 29 gather (E e) special (
    id-hook NumberOpSymbol (^)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _^_ : NzInt Nat -> NzInt [prec 29 gather (E e) special (
    id-hook NumberOpSymbol (^)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _^_ : PosRat Nat -> PosRat [prec 29 gather (E e) special (
    id-hook NumberOpSymbol (^)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _^_ : NzRat Nat -> NzRat [prec 29 gather (E e) special (
    id-hook NumberOpSymbol (^)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _^_ : Rat Nat -> Rat [prec 29 gather (E e) special (
    id-hook NumberOpSymbol (^)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op modExp : [List{Rat},FindResult] [List{Rat},FindResult] [List{Rat},
    FindResult] -> [List{Rat},FindResult] [special (
    id-hook NumberOpSymbol (modExp)
    op-hook succSymbol (s_ : Nat ~> NzNat))] .
  op gcd : NzNat Nat -> NzNat [assoc comm special (
    id-hook ACU_NumberOpSymbol (gcd)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op gcd : Nat Nat -> Nat [assoc comm special (
    id-hook ACU_NumberOpSymbol (gcd)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op gcd : NzInt Int -> NzNat [assoc comm special (
    id-hook ACU_NumberOpSymbol (gcd)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op gcd : Int Int -> Nat [assoc comm special (
    id-hook ACU_NumberOpSymbol (gcd)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op gcd : NzRat Rat -> PosRat [assoc comm special (
    id-hook ACU_NumberOpSymbol (gcd)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op gcd : Rat Rat -> Rat [assoc comm special (
    id-hook ACU_NumberOpSymbol (gcd)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op lcm : NzNat NzNat -> NzNat [assoc comm special (
    id-hook ACU_NumberOpSymbol (lcm)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op lcm : Nat Nat -> Nat [assoc comm special (
    id-hook ACU_NumberOpSymbol (lcm)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op lcm : NzInt NzInt -> NzNat [assoc comm special (
    id-hook ACU_NumberOpSymbol (lcm)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op lcm : Int Int -> Nat [assoc comm special (
    id-hook ACU_NumberOpSymbol (lcm)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op lcm : NzRat NzRat -> PosRat [assoc comm special (
    id-hook ACU_NumberOpSymbol (lcm)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op lcm : Rat Rat -> Rat [assoc comm special (
    id-hook ACU_NumberOpSymbol (lcm)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op min : NzNat NzNat -> NzNat [assoc comm special (
    id-hook ACU_NumberOpSymbol (min)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op min : Nat Nat -> Nat [assoc comm special (
    id-hook ACU_NumberOpSymbol (min)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op min : NzInt NzInt -> NzInt [assoc comm special (
    id-hook ACU_NumberOpSymbol (min)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op min : Int Int -> Int [assoc comm special (
    id-hook ACU_NumberOpSymbol (min)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op min : PosRat PosRat -> PosRat [assoc comm special (
    id-hook ACU_NumberOpSymbol (min)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op min : NzRat NzRat -> NzRat [assoc comm special (
    id-hook ACU_NumberOpSymbol (min)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op min : Rat Rat -> Rat [assoc comm special (
    id-hook ACU_NumberOpSymbol (min)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op max : NzNat Nat -> NzNat [assoc comm special (
    id-hook ACU_NumberOpSymbol (max)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op max : Nat Nat -> Nat [assoc comm special (
    id-hook ACU_NumberOpSymbol (max)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op max : NzInt NzInt -> NzInt [assoc comm special (
    id-hook ACU_NumberOpSymbol (max)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op max : Int Int -> Int [assoc comm special (
    id-hook ACU_NumberOpSymbol (max)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op max : NzNat Int -> NzNat [assoc comm special (
    id-hook ACU_NumberOpSymbol (max)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op max : Nat Int -> Nat [assoc comm special (
    id-hook ACU_NumberOpSymbol (max)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op max : PosRat Rat -> PosRat [assoc comm special (
    id-hook ACU_NumberOpSymbol (max)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op max : NzRat NzRat -> NzRat [assoc comm special (
    id-hook ACU_NumberOpSymbol (max)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op max : Rat Rat -> Rat [assoc comm special (
    id-hook ACU_NumberOpSymbol (max)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _xor_ : Nat Nat -> Nat [assoc comm prec 55 gather (e E) special (
    id-hook ACU_NumberOpSymbol (xor)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _xor_ : Int Int -> Int [assoc comm prec 55 gather (e E) special (
    id-hook ACU_NumberOpSymbol (xor)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _&_ : Nat Nat -> Nat [assoc comm prec 53 gather (e E) special (
    id-hook ACU_NumberOpSymbol (&)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _&_ : Nat Int -> Nat [assoc comm prec 53 gather (e E) special (
    id-hook ACU_NumberOpSymbol (&)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _&_ : Int Int -> Int [assoc comm prec 53 gather (e E) special (
    id-hook ACU_NumberOpSymbol (&)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _|_ : NzNat Nat -> NzNat [assoc comm prec 57 gather (e E) special (
    id-hook ACU_NumberOpSymbol (|)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _|_ : Nat Nat -> Nat [assoc comm prec 57 gather (e E) special (
    id-hook ACU_NumberOpSymbol (|)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _|_ : NzInt Int -> NzInt [assoc comm prec 57 gather (e E) special (
    id-hook ACU_NumberOpSymbol (|)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _|_ : Int Int -> Int [assoc comm prec 57 gather (e E) special (
    id-hook ACU_NumberOpSymbol (|)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _>>_ : Nat Nat -> Nat [prec 35 gather (E e) special (
    id-hook NumberOpSymbol (>>)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _>>_ : Int Nat -> Int [prec 35 gather (E e) special (
    id-hook NumberOpSymbol (>>)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _<<_ : Nat Nat -> Nat [prec 35 gather (E e) special (
    id-hook NumberOpSymbol (<<)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _<<_ : Int Nat -> Int [prec 35 gather (E e) special (
    id-hook NumberOpSymbol (<<)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _<_ : Nat Nat -> Bool [prec 37 gather (E E) special (
    id-hook NumberOpSymbol (<)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _<_ : Int Int -> Bool [prec 37 gather (E E) special (
    id-hook NumberOpSymbol (<)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _<_ : Rat Rat -> Bool [prec 37 gather (E E) special (
    id-hook NumberOpSymbol (<)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _<=_ : Nat Nat -> Bool [prec 37 gather (E E) special (
    id-hook NumberOpSymbol (<=)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _<=_ : Int Int -> Bool [prec 37 gather (E E) special (
    id-hook NumberOpSymbol (<=)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _<=_ : Rat Rat -> Bool [prec 37 gather (E E) special (
    id-hook NumberOpSymbol (<=)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _>_ : Nat Nat -> Bool [prec 37 gather (E E) special (
    id-hook NumberOpSymbol (>)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _>_ : Int Int -> Bool [prec 37 gather (E E) special (
    id-hook NumberOpSymbol (>)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _>_ : Rat Rat -> Bool [prec 37 gather (E E) special (
    id-hook NumberOpSymbol (>)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _>=_ : Nat Nat -> Bool [prec 37 gather (E E) special (
    id-hook NumberOpSymbol (>=)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _>=_ : Int Int -> Bool [prec 37 gather (E E) special (
    id-hook NumberOpSymbol (>=)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _>=_ : Rat Rat -> Bool [prec 37 gather (E E) special (
    id-hook NumberOpSymbol (>=)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _divides_ : NzNat Nat -> Bool [prec 51 gather (E E) special (
    id-hook NumberOpSymbol (divides)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _divides_ : NzInt Int -> Bool [prec 51 gather (E E) special (
    id-hook NumberOpSymbol (divides)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _divides_ : NzRat Rat -> Bool [prec 51 gather (E E) special (
    id-hook NumberOpSymbol (divides)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op -_ : NzNat -> NzInt [ctor prec 15 gather (E) special (
    id-hook MinusSymbol
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op -_ : NzInt -> NzInt [prec 15 gather (E) special (
    id-hook MinusSymbol
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op -_ : Int -> Int [prec 15 gather (E) special (
    id-hook MinusSymbol
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op -_ : NzRat -> NzRat [prec 15 gather (E) special (
    id-hook MinusSymbol
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op -_ : Rat -> Rat [prec 15 gather (E) special (
    id-hook MinusSymbol
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _-_ : Int Int -> Int [prec 33 gather (E e) special (
    id-hook NumberOpSymbol (-)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _-_ : Rat Rat -> Rat [prec 33 gather (E e) special (
    id-hook NumberOpSymbol (-)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op abs : NzInt -> NzNat [special (
    id-hook NumberOpSymbol (abs)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op abs : Int -> Nat [special (
    id-hook NumberOpSymbol (abs)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op abs : NzRat -> PosRat [special (
    id-hook NumberOpSymbol (abs)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op abs : Rat -> Rat [special (
    id-hook NumberOpSymbol (abs)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op ~_ : Int -> Int [prec 15 gather (E) special (
    id-hook NumberOpSymbol (~)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _/_ : NzInt NzNat -> NzRat [ctor prec 31 gather (E e) special (
    id-hook DivisionSymbol
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _/_ : NzNat NzNat -> PosRat [ctor prec 31 gather (E e) special (
    id-hook DivisionSymbol
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _/_ : PosRat PosRat -> PosRat [prec 31 gather (E e) special (
    id-hook DivisionSymbol
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _/_ : NzRat NzRat -> NzRat [prec 31 gather (E e) special (
    id-hook DivisionSymbol
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op _/_ : Rat NzRat -> Rat [prec 31 gather (E e) special (
    id-hook DivisionSymbol
    op-hook succSymbol (s_ : Nat ~> NzNat)
    op-hook minusSymbol (-_ : NzNat ~> NzInt))] .
  op trunc : PosRat -> Nat .
  op trunc : Rat -> Int .
  op frac : Rat -> Rat .
  op floor : PosRat -> Nat .
  op floor : Rat -> Int .
  op ceiling : PosRat -> NzNat .
  op ceiling : Rat -> Int .
  op nil : -> List{Rat} [ctor] .
  op _:_ : List{Rat} List{Rat} -> List{Rat} [ctor assoc id: (nil).List{Rat}
    prec 41 gather (e E)] .
  op _:_ : NeList{Rat} List{Rat} -> NeList{Rat} [ctor assoc id: (nil).List{Rat}
    prec 41 gather (e E)] .
  op _:_ : List{Rat} NeList{Rat} -> NeList{Rat} [ctor assoc id: (nil).List{Rat}
    prec 41 gather (e E)] .
  op append : List{Rat} List{Rat} -> List{Rat} .
  op append : NeList{Rat} List{Rat} -> NeList{Rat} .
  op append : List{Rat} NeList{Rat} -> NeList{Rat} .
  op head : NeList{Rat} -> Rat .
  op tail : NeList{Rat} -> List{Rat} .
  op last : NeList{Rat} -> Rat .
  op front : NeList{Rat} -> List{Rat} .
  op occurs : Rat List{Rat} -> Bool .
  op reverse : List{Rat} -> List{Rat} .
  op reverse : NeList{Rat} -> NeList{Rat} .
  op $reverse : List{Rat} List{Rat} -> List{Rat} .
  op size : List{Rat} -> Nat .
  op size : NeList{Rat} -> NzNat .
  op $size : List{Rat} Nat -> Nat .
  op <Strings> : -> Char [special (
    id-hook StringSymbol)] .
  op <Strings> : -> String [special (
    id-hook StringSymbol)] .
  op notFound : -> FindResult [ctor] .
  op ascii : Char -> Nat [special (
    id-hook StringOpSymbol (ascii)
    op-hook stringSymbol (<Strings> : ~> Char)
    op-hook succSymbol (s_ : Nat ~> NzNat))] .
  op char : [List{Rat},FindResult] -> [String] [special (
    id-hook StringOpSymbol (char)
    op-hook stringSymbol (<Strings> : ~> Char)
    op-hook succSymbol (s_ : Nat ~> NzNat))] .
  op _+_ : String String -> String [prec 33 gather (E e) special (
    id-hook StringOpSymbol (+)
    op-hook stringSymbol (<Strings> : ~> Char))] .
  op length : String -> Nat [special (
    id-hook StringOpSymbol (length)
    op-hook stringSymbol (<Strings> : ~> Char)
    op-hook succSymbol (s_ : Nat ~> NzNat))] .
  op substr : String Nat Nat -> String [special (
    id-hook StringOpSymbol (substr)
    op-hook stringSymbol (<Strings> : ~> Char)
    op-hook succSymbol (s_ : Nat ~> NzNat))] .
  op find : String String Nat -> FindResult [special (
    id-hook StringOpSymbol (find)
    op-hook stringSymbol (<Strings> : ~> Char)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    term-hook notFoundTerm (notFound))] .
  op rfind : String String Nat -> FindResult [special (
    id-hook StringOpSymbol (rfind)
    op-hook stringSymbol (<Strings> : ~> Char)
    op-hook succSymbol (s_ : Nat ~> NzNat)
    term-hook notFoundTerm (notFound))] .
  op _<_ : String String -> Bool [prec 37 gather (E E) special (
    id-hook StringOpSymbol (<)
    op-hook stringSymbol (<Strings> : ~> Char)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _<=_ : String String -> Bool [prec 37 gather (E E) special (
    id-hook StringOpSymbol (<=)
    op-hook stringSymbol (<Strings> : ~> Char)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _>_ : String String -> Bool [prec 37 gather (E E) special (
    id-hook StringOpSymbol (>)
    op-hook stringSymbol (<Strings> : ~> Char)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op _>=_ : String String -> Bool [prec 37 gather (E E) special (
    id-hook StringOpSymbol (>=)
    op-hook stringSymbol (<Strings> : ~> Char)
    term-hook trueTerm (true)
    term-hook falseTerm (false))] .
  op error-Rat_ : String -> Rat [prec 15 gather (E)] .
  op pair<_`,_> : Rat Rat -> Pair{Rat,Rat} [ctor prec 0 gather (& &)] .
  op left_ : Pair{Rat,Rat} -> Rat [prec 15 gather (E)] .
  op right_ : Pair{Rat,Rat} -> Rat [prec 15 gather (E)] .
  op _<_ : Pair{Rat,Rat} Pair{Rat,Rat} -> Bool [prec 41 gather (E E)] .
  op nil : -> List{RatxRat<} [ctor] .
  op _:_ : List{RatxRat<} List{RatxRat<} -> List{RatxRat<} [ctor assoc id: (
    nil).List{RatxRat<} prec 41 gather (e E)] .
  op _:_ : NeList{RatxRat<} List{RatxRat<} -> NeList{RatxRat<} [ctor assoc id:
    (nil).List{RatxRat<} prec 41 gather (e E)] .
  op _:_ : List{RatxRat<} NeList{RatxRat<} -> NeList{RatxRat<} [ctor assoc id:
    (nil).List{RatxRat<} prec 41 gather (e E)] .
  op append : List{RatxRat<} List{RatxRat<} -> List{RatxRat<} .
  op append : NeList{RatxRat<} List{RatxRat<} -> NeList{RatxRat<} .
  op append : List{RatxRat<} NeList{RatxRat<} -> NeList{RatxRat<} .
  op head : NeList{RatxRat<} -> Pair{Rat,Rat} .
  op tail : NeList{RatxRat<} -> List{RatxRat<} .
  op last : NeList{RatxRat<} -> Pair{Rat,Rat} .
  op front : NeList{RatxRat<} -> List{RatxRat<} .
  op occurs : Pair{Rat,Rat} List{RatxRat<} -> Bool .
  op reverse : List{RatxRat<} -> List{RatxRat<} .
  op reverse : NeList{RatxRat<} -> NeList{RatxRat<} .
  op $reverse : List{RatxRat<} List{RatxRat<} -> List{RatxRat<} .
  op size : List{RatxRat<} -> Nat .
  op size : NeList{RatxRat<} -> NzNat .
  op $size : List{RatxRat<} Nat -> Nat .
  op sort : List{RatxRat<} -> List{RatxRat<} .
  op sort : NeList{RatxRat<} -> NeList{RatxRat<} .
  op $sort : $Split{STRICT-TOTAL-ORDER}{RatxRat<} -> List{RatxRat<} .
  op $split : List{RatxRat<} List{RatxRat<} List{RatxRat<} -> $Split{
    STRICT-TOTAL-ORDER}{RatxRat<} [ctor] .
  op merge : List{RatxRat<} List{RatxRat<} -> List{RatxRat<} .
  op merge : NeList{RatxRat<} List{RatxRat<} -> NeList{RatxRat<} .
  op merge : List{RatxRat<} NeList{RatxRat<} -> NeList{RatxRat<} .
  op $merge : List{RatxRat<} List{RatxRat<} List{RatxRat<} -> List{RatxRat<} .
  op lub-min`(_`,_`) : List{Rat} List{Rat} -> Rat [prec 0 gather (& &)] .
  op #lub-min`(_`)with-sumbi/ai=_sum1/ai=_ : List{RatxRat<} Rat Rat -> Rat [
    prec 41 gather (& & E)] .
  op inv-list`(_`) : List{Rat} -> List{Rat} [prec 0 gather (&)] .
  op pair-list`(_`,_`) : List{Rat} List{Rat} -> List{RatxRat<} [prec 0 gather (
    & &)] .
  op sum_ : List{Rat} -> Rat [prec 15 gather (E)] .
  eq true and A:Bool = A:Bool .
  eq false and A:Bool = false .
  eq A:Bool and A:Bool = A:Bool .
  eq false xor A:Bool = A:Bool .
  eq A:Bool xor A:Bool = false .
  eq A:Bool and (B:Bool xor C:Bool) = A:Bool and B:Bool xor A:Bool and C:Bool .
  eq not A:Bool = true xor A:Bool .
  eq A:Bool or B:Bool = A:Bool and B:Bool xor A:Bool xor B:Bool .
  eq A:Bool implies B:Bool = not (A:Bool xor A:Bool and B:Bool) .
  eq 0 / Q:NzRat = 0 .
  eq I:NzInt / - N:NzNat = - I:NzInt / N:NzNat .
  eq I:NzInt / N:NzNat / (J:NzInt / M:NzNat) = (I:NzInt * M:NzNat) / (J:NzInt *
    N:NzNat) .
  eq I:NzInt / N:NzNat / J:NzInt = I:NzInt / (J:NzInt * N:NzNat) .
  eq I:NzInt / (J:NzInt / M:NzNat) = (I:NzInt * M:NzNat) / J:NzInt .
  eq - (I:NzInt / N:NzNat) = - I:NzInt / N:NzNat .
  eq I:NzInt / N:NzNat + J:NzInt / M:NzNat = (I:NzInt * M:NzNat + J:NzInt *
    N:NzNat) / (N:NzNat * M:NzNat) .
  eq K:Int + I:NzInt / N:NzNat = (I:NzInt + N:NzNat * K:Int) / N:NzNat .
  eq I:NzInt / N:NzNat - J:NzInt / M:NzNat = (I:NzInt * M:NzNat - J:NzInt *
    N:NzNat) / (N:NzNat * M:NzNat) .
  eq I:NzInt / N:NzNat - K:Int = (I:NzInt - N:NzNat * K:Int) / N:NzNat .
  eq K:Int - J:NzInt / M:NzNat = (M:NzNat * K:Int - J:NzInt) / M:NzNat .
  eq 0 * Q:NzRat = 0 .
  eq (I:NzInt / N:NzNat) * (J:NzInt / M:NzNat) = (I:NzInt * J:NzInt) / (N:NzNat
    * M:NzNat) .
  eq K:Int * (I:NzInt / N:NzNat) = (I:NzInt * K:Int) / N:NzNat .
  eq I:NzInt / N:NzNat quo Q:NzRat = I:NzInt quo (Q:NzRat * N:NzNat) .
  eq K:Int quo (J:NzInt / M:NzNat) = (M:NzNat * K:Int) quo J:NzInt .
  eq I:NzInt / N:NzNat rem (J:NzInt / M:NzNat) = (I:NzInt * M:NzNat) rem (
    J:NzInt * N:NzNat) / (N:NzNat * M:NzNat) .
  eq K:Int rem (J:NzInt / M:NzNat) = (M:NzNat * K:Int) rem J:NzInt / M:NzNat .
  eq I:NzInt / N:NzNat rem J:NzInt = I:NzInt rem (J:NzInt * N:NzNat) / N:NzNat
    .
  eq (I:NzInt / N:NzNat) ^ Z:Nat = I:NzInt ^ Z:Nat / N:NzNat ^ Z:Nat .
  eq abs(I:NzInt / N:NzNat) = abs(I:NzInt) / N:NzNat .
  eq gcd(R:Rat, I:NzInt / N:NzNat) = gcd(I:NzInt, N:NzNat * R:Rat) / N:NzNat .
  eq lcm(R:Rat, I:NzInt / N:NzNat) = lcm(I:NzInt, N:NzNat * R:Rat) / N:NzNat .
  eq min(R:Rat, I:NzInt / N:NzNat) = min(I:NzInt, N:NzNat * R:Rat) / N:NzNat .
  eq max(R:Rat, I:NzInt / N:NzNat) = max(I:NzInt, N:NzNat * R:Rat) / N:NzNat .
  eq I:NzInt / N:NzNat < J:NzInt / M:NzNat = I:NzInt * M:NzNat < J:NzInt *
    N:NzNat .
  eq I:NzInt / N:NzNat < K:Int = I:NzInt < N:NzNat * K:Int .
  eq K:Int < J:NzInt / M:NzNat = M:NzNat * K:Int < J:NzInt .
  eq I:NzInt / N:NzNat <= J:NzInt / M:NzNat = I:NzInt * M:NzNat <= J:NzInt *
    N:NzNat .
  eq I:NzInt / N:NzNat <= K:Int = I:NzInt <= N:NzNat * K:Int .
  eq K:Int <= J:NzInt / M:NzNat = M:NzNat * K:Int <= J:NzInt .
  eq I:NzInt / N:NzNat > J:NzInt / M:NzNat = I:NzInt * M:NzNat > J:NzInt *
    N:NzNat .
  eq I:NzInt / N:NzNat > K:Int = I:NzInt > N:NzNat * K:Int .
  eq K:Int > J:NzInt / M:NzNat = M:NzNat * K:Int > J:NzInt .
  eq I:NzInt / N:NzNat >= J:NzInt / M:NzNat = I:NzInt * M:NzNat >= J:NzInt *
    N:NzNat .
  eq I:NzInt / N:NzNat >= K:Int = I:NzInt >= N:NzNat * K:Int .
  eq K:Int >= J:NzInt / M:NzNat = M:NzNat * K:Int >= J:NzInt .
  eq I:NzInt / N:NzNat divides K:Int = I:NzInt divides N:NzNat * K:Int .
  eq Q:NzRat divides J:NzInt / M:NzNat = Q:NzRat * M:NzNat divides J:NzInt .
  eq trunc(K:Int) = K:Int .
  eq trunc(I:NzInt / N:NzNat) = I:NzInt quo N:NzNat .
  eq frac(K:Int) = 0 .
  eq frac(I:NzInt / N:NzNat) = I:NzInt rem N:NzNat / N:NzNat .
  eq floor(K:Int) = K:Int .
  eq ceiling(K:Int) = K:Int .
  eq floor(N:NzNat / M:NzNat) = N:NzNat quo M:NzNat .
  eq ceiling(N:NzNat / M:NzNat) = ((N:NzNat + M:NzNat) - 1) quo M:NzNat .
  eq floor(- N:NzNat / M:NzNat) = - ceiling(N:NzNat / M:NzNat) .
  eq ceiling(- N:NzNat / M:NzNat) = - floor(N:NzNat / M:NzNat) .
  eq append(A:List{Rat}, L:List{Rat}) = A:List{Rat} : L:List{Rat} .
  eq head(E:Rat : L:List{Rat}) = E:Rat .
  eq tail(E:Rat : L:List{Rat}) = L:List{Rat} .
  eq last(L:List{Rat} : E:Rat) = E:Rat .
  eq front(L:List{Rat} : E:Rat) = L:List{Rat} .
  eq occurs(E:Rat, (nil).List{Rat}) = false .
  eq occurs(E:Rat, E':Rat : L:List{Rat}) = if E:Rat == E':Rat then true else
    occurs(E:Rat, L:List{Rat}) fi .
  eq reverse(L:List{Rat}) = $reverse(L:List{Rat}, (nil).List{Rat}) .
  eq $reverse((nil).List{Rat}, A:List{Rat}) = A:List{Rat} .
  eq $reverse(E:Rat : L:List{Rat}, A:List{Rat}) = $reverse(L:List{Rat}, E:Rat :
    A:List{Rat}) .
  eq size(L:List{Rat}) = $size(L:List{Rat}, 0) .
  eq $size((nil).List{Rat}, C:Nat) = C:Nat .
  eq $size(E:Rat : L:List{Rat}, C:Nat) = $size(L:List{Rat}, C:Nat + 1) .
  eq left pair< le:Rat,re:Rat > = le:Rat .
  eq right pair< le:Rat,re:Rat > = re:Rat .
  eq pair< p:Rat,q:Rat > < pair< r:Rat,s:Rat > = p:Rat < r:Rat .
  eq append(A:List{RatxRat<}, L:List{RatxRat<}) = A:List{RatxRat<} : L:List{
    RatxRat<} .
  eq head(E:Pair{Rat,Rat} : L:List{RatxRat<}) = E:Pair{Rat,Rat} .
  eq tail(E:Pair{Rat,Rat} : L:List{RatxRat<}) = L:List{RatxRat<} .
  eq last(L:List{RatxRat<} : E:Pair{Rat,Rat}) = E:Pair{Rat,Rat} .
  eq front(L:List{RatxRat<} : E:Pair{Rat,Rat}) = L:List{RatxRat<} .
  eq occurs(E:Pair{Rat,Rat}, (nil).List{RatxRat<}) = false .
  eq occurs(E:Pair{Rat,Rat}, E':Pair{Rat,Rat} : L:List{RatxRat<}) = if E:Pair{
    Rat,Rat} == E':Pair{Rat,Rat} then true else occurs(E:Pair{Rat,Rat}, L:List{
    RatxRat<}) fi .
  eq reverse(L:List{RatxRat<}) = $reverse(L:List{RatxRat<}, (nil).List{
    RatxRat<}) .
  eq $reverse((nil).List{RatxRat<}, A:List{RatxRat<}) = A:List{RatxRat<} .
  eq $reverse(E:Pair{Rat,Rat} : L:List{RatxRat<}, A:List{RatxRat<}) = $reverse(
    L:List{RatxRat<}, E:Pair{Rat,Rat} : A:List{RatxRat<}) .
  eq size(L:List{RatxRat<}) = $size(L:List{RatxRat<}, 0) .
  eq $size((nil).List{RatxRat<}, C:Nat) = C:Nat .
  eq $size(E:Pair{Rat,Rat} : L:List{RatxRat<}, C:Nat) = $size(L:List{RatxRat<},
    C:Nat + 1) .
  eq sort(nil) = (nil).List{RatxRat<} .
  eq sort(E:Pair{Rat,Rat}) = E:Pair{Rat,Rat} .
  eq sort(E:Pair{Rat,Rat} : N:NeList{RatxRat<}) = $sort($split(E:Pair{Rat,Rat}
    : N:NeList{RatxRat<}, nil, nil)) .
  eq $sort($split(nil, L:List{RatxRat<}, L':List{RatxRat<})) = $merge(sort(
    L:List{RatxRat<}), sort(L':List{RatxRat<}), nil) .
  eq $split(E:Pair{Rat,Rat}, A:List{RatxRat<}, A':List{RatxRat<}) = $split(nil,
    A:List{RatxRat<} : E:Pair{Rat,Rat}, A':List{RatxRat<}) .
  eq $split(E:Pair{Rat,Rat} : L:List{RatxRat<} : E':Pair{Rat,Rat}, A:List{
    RatxRat<}, A':List{RatxRat<}) = $split(L:List{RatxRat<}, A:List{RatxRat<} :
    E:Pair{Rat,Rat}, E':Pair{Rat,Rat} : A':List{RatxRat<}) .
  eq merge(L:List{RatxRat<}, L':List{RatxRat<}) = $merge(L:List{RatxRat<},
    L':List{RatxRat<}, nil) .
  eq $merge(L:List{RatxRat<}, nil, A:List{RatxRat<}) = A:List{RatxRat<} :
    L:List{RatxRat<} .
  eq $merge(nil, L:List{RatxRat<}, A:List{RatxRat<}) = A:List{RatxRat<} :
    L:List{RatxRat<} .
  eq $merge(E:Pair{Rat,Rat} : L:List{RatxRat<}, E':Pair{Rat,Rat} : L':List{
    RatxRat<}, A:List{RatxRat<}) = if E':Pair{Rat,Rat} < E:Pair{Rat,Rat} then
    $merge(E:Pair{Rat,Rat} : L:List{RatxRat<}, L':List{RatxRat<}, A:List{
    RatxRat<} : E':Pair{Rat,Rat}) else $merge(L:List{RatxRat<}, E':Pair{Rat,
    Rat} : L':List{RatxRat<}, A:List{RatxRat<} : E:Pair{Rat,Rat}) fi .
  eq inv-list(r:Rat) = 1 / r:Rat .
  eq inv-list(r:Rat : tail:NeList{Rat}) = 1 / r:Rat : inv-list(tail:NeList{
    Rat}) .
  eq pair-list(r:Rat,r':Rat) = pair< r:Rat,r':Rat > .
  eq pair-list(r:Rat : tail:NeList{Rat},r':Rat : tail':NeList{Rat}) = pair<
    r:Rat,r':Rat > : pair-list(tail:NeList{Rat},tail':NeList{Rat}) .
  eq sum r:Rat = r:Rat .
  eq sum r:Rat : tail:NeList{Rat} = r:Rat + sum tail:NeList{Rat} .
  eq lub-min(a-list:List{Rat},b-list:List{Rat}) = #lub-min(sort(pair-list(
    b-list:List{Rat},a-list:List{Rat})))with-sumbi/ai= 0 sum1/ai= 0 .
  ceq #lub-min(nil)with-sumbi/ai= ba-sum:Rat sum1/ai= a-sum:Rat = ba-sum:Rat if
    a-sum:Rat <= 1 = true [label #lub-min-nil-leq-1] .
  ceq #lub-min(nil)with-sumbi/ai= ba-sum:Rat sum1/ai= a-sum:Rat = error-Rat
    "Internal error: #lubmin, rule #lub-min-nil-gt-1 should never be used" if
    a-sum:Rat > 1 = true [label #lub-min-nil-gt-1] .
  ceq #lub-min(ba-list:List{RatxRat<} : pair< bk:Rat,ak:Rat >)with-sumbi/ai=
    ba-sum:Rat sum1/ai= a-sum:Rat = (ba-sum:Rat + bk:Rat / ak:Rat) + bk:Rat * (
    1 - (a-sum:Rat + 1 / ak:Rat)) if a-sum:Rat + 1 / ak:Rat > 1 = true [label
    #lub-min-nelist-gt-1] .
  ceq #lub-min(ba-list:List{RatxRat<} : pair< bk:Rat,ak:Rat >)with-sumbi/ai=
    ba-sum:Rat sum1/ai= a-sum:Rat = #lub-min(ba-list:List{
    RatxRat<})with-sumbi/ai= ba-sum:Rat + bk:Rat / ak:Rat sum1/ai= a-sum:Rat +
    1 / ak:Rat if a-sum:Rat + 1 / ak:Rat <= 1 = true [label
    #lub-min-nelist-leq-1] .
endm
Bye.
