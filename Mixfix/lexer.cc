/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 156
#define YY_END_OF_BUFFER 157
static yyconst short int yy_accept[814] =
    {   0,
      153,  153,  153,  153,  153,  153,  142,  142,  144,  144,
        0,    0,  157,  155,  153,  154,  154,   91,  155,   89,
       91,   91,   91,   89,   90,   90,   91,  155,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   15,   91,   91,   91,   91,   91,   91,   91,
      141,  155,  140,  141,  141,  140,  140,  141,  155,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,   95,  155,
       93,   95,   93,   95,   95,   94,   93,   95,  155,   95,
       95,  143,  142,  156,  144,  145,  152,  146,  151,  151,

      147,  148,  146,  149,  150,  153,   91,    0,   91,    0,
        0,    0,   91,   91,   90,    0,   91,   91,   91,   91,
       11,   91,   91,   91,   91,   91,   40,   91,   91,   69,
       91,   91,   91,   91,   91,   91,   58,   91,    5,   91,
       91,   14,   91,   68,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   35,   66,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   70,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,  141,
        0,  141,    0,    0,    0,  141,  141,  137,  138,    0,
      141,  141,  141,  141,  141,  131,  141,  141,  141,  141,

      130,  119,  141,  141,  141,  141,  118,  141,  117,  141,
      141,  141,  141,  128,  141,  141,  141,  124,  119,  141,
      132,  141,  141,  141,  141,  141,  119,  141,  139,   95,
        0,   95,    0,    0,    0,   95,   95,    0,   92,   94,
        0,    5,  143,  142,  144,  146,  146,   91,    0,    2,
        2,   91,   91,   91,   63,   91,   91,   62,   91,   91,
       91,   91,   91,   91,   91,   91,   16,   69,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       68,   91,   91,    7,   27,   91,   91,    6,   36,   91,
       66,   91,   91,   91,   91,   91,   91,   91,   10,   91,

       88,   19,   91,   91,   21,   70,   91,   91,   33,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   67,   91,
       91,   91,   91,   91,   91,  141,    0,    2,    2,  141,
      141,  129,  141,  141,  133,  141,  141,  141,  141,  141,
      141,  141,  141,   98,  141,  119,  141,  134,  141,  141,
      141,  141,  112,  111,  141,  125,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  127,   95,    0,    2,    2,
        0,    0,    0,    0,    2,    2,    2,    1,    2,    2,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   48,
       26,   91,   20,   91,   91,   82,   22,   91,   54,   91,

       23,   91,   91,   91,    9,   25,   91,    3,   91,   91,
       91,   18,   91,    8,   24,   91,   91,   85,   13,   91,
       91,   91,   15,   91,   91,   91,   91,   91,   91,   91,
       34,   65,   91,   80,   91,   91,   59,   91,   91,   91,
       67,   91,   91,   91,   55,   91,   91,    0,    0,    2,
        2,    1,    2,    2,  141,  141,   97,  141,  141,  107,
      141,  141,  135,  134,  141,  141,  141,  141,  141,   99,
      141,  141,  100,  141,  101,    3,  141,  126,  141,  141,
      103,  141,  141,  120,  141,  141,  141,  141,  141,  141,
      127,    0,    0,    2,    2,    1,    2,    2,    0,    0,

        2,    2,    1,    1,    1,    1,    1,    2,    2,    2,
       79,   91,   57,   83,   41,   51,   91,   91,   91,   91,
       91,   91,   91,   74,   91,   77,   91,   91,   91,   91,
       91,   91,   52,   91,   72,   28,   91,   91,   91,   91,
       91,   91,   56,   17,   50,   91,   12,   91,   91,   91,
       91,   91,   91,   91,   65,   60,   49,   91,   91,   37,
       31,   91,   81,   43,   91,   91,    2,    2,    1,    1,
        1,    1,    2,    2,    2,   96,  122,  141,  141,  141,
      113,  136,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  108,  141,  141,  141,  141,  141,  102,  120,  141,

      105,  141,  141,  141,  119,    2,    2,    1,    1,    1,
        1,    2,    2,    2,    1,    1,    1,    1,    1,    2,
        2,   38,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,    4,   91,   91,
       53,   64,   27,   91,   87,   91,   56,   91,   91,   91,
       19,   78,   47,   91,   30,   44,   91,   91,   61,   91,
       29,   32,    1,    1,    1,    1,    1,    2,    2,  141,
      141,  110,  141,  141,    4,  106,  104,  141,  141,  141,
      141,  141,  141,  111,  141,  141,  141,  141,  141,  141,
      141,  141,    1,    1,    1,    1,    1,    2,    2,    1,

        1,   91,   57,   91,   73,   91,   46,   91,   42,   91,
       20,   91,   91,   76,   91,   91,   75,   91,   91,   91,
       86,   91,   21,   91,   71,   39,    1,    1,  141,  141,
      141,  141,  141,  114,  141,  141,  141,  141,  112,  115,
      141,  141,  109,  141,  141,  121,  141,    1,    1,   91,
       91,   73,   91,   91,   26,   45,   22,   91,   23,   91,
       24,   91,   88,   91,  141,  141,  141,  141,  141,  141,
      141,  141,  100,  141,  141,  105,  123,  121,  141,   91,
       84,   91,   48,   54,   18,   91,   91,  141,  141,  141,
      141,  141,  141,  141,  141,  116,   91,   91,  141,  141,

      141,  141,   99,  103,  123,   91,   96,   97,  141,   49,
      141,  110,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,    8,   13,   14,   15,    8,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,    8,   19,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   22,    8,   24,   25,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   19,   53,   54,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    8,    5,    5,    5,    5,    5,    5,    5,
        5,    8,    6,    9,    9,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    5,    6
    } ;

static yyconst short int yy_base[859] =
    {   0,
        0,    0,   55,    0,  110,  163,  134,  140,  145,  149,
      216,  271,  305, 4450,  124, 4450, 4450,  170,  148, 4450,
      174, 4450,  182,  180,  184,  219,  205,  235,  225,  242,
      274,  291,  304,  282,  324,  231,  284,  318,  330,  350,
      388,  359,  326,  356,  392,  399,  364,  419,  426,  354,
      254,  201, 4450,  277,  432,  385,  443,  430,  452,  452,
      497,  457,  460,  470,  462,  499,  491,  522,  532,  536,
      508,  541,  544,  549,  558,  546, 4450,  571,  579,  209,
     4450,  582, 4450,  584,  608,  610,  596,  613,  618,  621,
     4450,    0,  131, 4450,    0, 4450, 4450,    0, 4450, 4450,

     4450, 4450,  148, 4450, 4450,  154,  627,  214,  630,  652,
      224,  294,  632,  634,  659,  656,  655,  663,  677,  668,
      672,  682,  691,  694,  704,  712,  717,  721,  726,  729,
      738,  746,  740,  751,  758,  760,  763,  768,  771,  780,
      788,  791,  793,  797,  799,  801,  811,  818,  820,  822,
      824,  842,  830,  844,  847,  853,  855,  865,  877,  872,
      879,  885,  890,  896,  898,  904,  922,  909,  929,  936,
      941,  947,  958,  960,  966,  971,  969,  980,  988,  991,
      250,  993, 1010,  281,  292, 1013, 1015, 1017, 1019, 1023,
     1022, 1026, 1045, 1040, 1048, 1065, 1068, 1070, 1072, 1074,

     1076, 1082, 1095, 1099, 1104, 1107, 1109, 1117, 1126, 1131,
     1134, 1138, 1144, 1148, 1155, 1157, 1161, 1178, 1181, 1185,
     1188, 1191, 1195, 1199, 1205, 1219, 1222, 1224, 1226, 1228,
      287, 1230, 1248,  368,  289, 1251, 1255, 1279, 4450, 1278,
     1255, 1264,    0,  251,    0,    0, 4450, 1281,  395, 1308,
     1361, 1301, 1289, 1311, 1315, 1322, 1325, 1318, 1329, 1343,
     1364, 1355, 1366, 1332, 1378, 1387, 1391, 1395, 1397, 1401,
     1408, 1415, 1418, 1422, 1425, 1427, 1448, 1450, 1456, 1458,
     1460, 1467, 1469, 1478, 1480, 1487, 1489, 1497, 1506, 1508,
     1510, 1517, 1519, 1527, 1529, 1531, 1537, 1548, 1550, 1555,

     1558, 1560, 1562, 1569, 1579, 1586, 1588, 1593, 1596, 1600,
     1605, 1610, 1617, 1619, 1627, 1636, 1629, 1647, 1650, 1655,
     1659, 1664, 1667, 1672, 1681, 1684,  397, 1717, 1770, 1689,
     1707, 1686, 1695, 1728, 1698, 1725, 1731, 1773, 1736, 1739,
     1764, 1775, 1777, 1781, 1794, 1800, 1803, 1805, 1811, 1825,
     1829, 1831, 1833, 1835, 1838, 1842, 1855, 1863, 1865, 1867,
     1869, 1875, 1886, 1893, 1895, 1897, 1900,  425, 1941, 1994,
      272,  251,  449,  258,    0,  220, 1952, 2047,  128, 2100,
     1904, 1914, 1923, 1946, 1948, 1959, 1955, 1987, 1976, 1965,
     1999, 2016, 2013, 2011, 2025, 2030, 2043, 2056, 2067, 2064,

     2054, 2094, 2096, 2105, 2107, 2114, 2126, 2119, 2131, 2136,
     2138, 2145, 2155, 2157, 2159, 2165, 2163, 2167, 2185, 2187,
     2189, 2191, 2194, 2197, 2215, 2217, 2220, 2224, 2226, 2238,
     2243, 2247, 2250, 2252, 2255, 2260, 2264, 2272, 2274, 2278,
     2281, 2283, 2292, 2300, 2309, 2311, 2317,  466,  228,  192,
     2336, 2359,  217, 2412, 2322, 2329, 2340, 2342, 2353, 2365,
     2370, 2376, 2378, 2382, 2406, 2415, 2408, 2418, 2426, 2435,
     2384, 2437, 2443, 2446, 2448, 2454, 2465, 2468, 2472, 2477,
     2479, 2489, 2496, 2498, 2501, 2503, 2506, 2509, 2515, 2527,
     2529,  469,  209,  190, 2554, 2577,  239, 2630,  191,  188,

     2561,  646,    0, 2683, 2588,  167, 2736, 2561,  169, 2599,
     2551, 2585, 2555, 2595, 2603, 2608, 2612, 2633, 2635, 2637,
     2640, 2664, 2647, 2644, 2686, 2666, 2691, 2693, 2695, 2714,
     2717, 2739, 2741, 2743, 2745, 2750, 2762, 2767, 2769, 2771,
     2775, 2781, 2789, 2795, 2798, 2800, 2803, 2807, 2817, 2820,
     2827, 2829, 2834, 2831, 2848, 2853, 2856, 2859, 2861, 2870,
     2873, 2879, 2882, 2887, 2891, 2896, 2918, 1052, 2946, 2925,
      159, 2999, 2920,  161, 2957, 2919, 2927, 2951, 2953, 2958,
     2965, 2970, 2982, 2993, 2995, 3004, 3006, 3016, 3024, 3030,
     3018, 3036, 3041, 3044, 3053, 3055, 3058, 3063, 3066, 3072,

     3076, 3083, 3086, 3090, 3093, 3112, 1108, 3135, 3124,  104,
     3188, 3127,   97, 3149, 3160, 2224, 3141,    0, 3161, 3199,
     2354, 3117, 3166, 3193, 3195, 3157, 3202, 3206, 3214, 3219,
     3224, 3233, 3236, 3243, 3238, 3250, 3261, 3263, 3267, 3269,
     3272, 3280, 3286, 3289, 3292, 3294, 3297, 3300, 3306, 3317,
     3320, 3323, 3325, 3328, 3331, 3337, 3342, 3345, 3348, 3350,
     3354, 3359, 3381, 2543, 3381,    0, 3392, 3401, 2727, 3388,
     3397, 3402, 3407, 3411, 3416, 3419, 3430, 3433, 3437, 3440,
     3442, 3447, 3450, 3454, 3459, 3464, 3472, 3477, 3481, 3483,
     3491, 3494, 3519, 2778, 3499,    0, 3531, 3540, 3170, 3549,

     3558, 3521, 3551, 3555, 3557, 3559, 3561, 3564, 3568, 3581,
     3585, 3588, 3590, 3592, 3598, 3610, 3612, 3617, 3620, 3622,
     3629, 3634, 3639, 3642, 3648, 3651, 3673, 3680, 3661, 3669,
     3680, 3683, 3688, 3691, 3694, 3701, 3708, 3711, 3713, 3719,
     3721, 3725, 3730, 3732, 3739, 3743, 3749, 3768, 3777, 3770,
     3777, 3779, 3781, 3783, 3787, 3789, 3800, 3806, 3808, 3812,
     3814, 3819, 3825, 3831, 3836, 3843, 3848, 3855, 3857, 3860,
     3869, 3866, 3877, 3879, 3886, 3888, 3896, 3899, 3905, 3907,
     3909, 3913, 3918, 3930, 3935, 3937, 3939, 3941, 3944, 3947,
     3961, 3965, 3969, 3971, 3973, 3991, 3995, 3997, 3999, 4002,

     4009, 4016, 4021, 4026, 4029, 4033, 4038, 4040, 4043, 4046,
     4051, 4057, 4450, 4090, 4099, 4108, 4117, 4122, 4128, 4133,
     4139, 4144, 4150, 4159, 4168, 4176, 4181, 4185, 4189, 4194,
     4203, 4209, 4218, 4224, 4233, 4242, 4251, 4260, 4269, 4278,
     4287, 4296, 4305, 4314, 4323, 4332, 4341, 4350, 4359, 4368,
     4377, 4386, 4395, 4404, 4413, 4422, 4431, 4440
    } ;

static yyconst short int yy_def[859] =
    {   0,
      813,    1,  813,    3,  814,  814,  815,  815,  816,  816,
      817,  817,  813,  813,  813,  813,  813,  818,  819,  813,
      818,  813,  818,  818,  818,  818,  818,  813,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      820,  821,  813,  820,  820,  820,  820,  820,  813,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  813,  820,  822,  823,
      813,  822,  813,  822,  822,  822,  822,  822,  813,  822,
      813,  824,  813,  813,  825,  813,  813,  826,  813,  813,

      813,  813,  813,  813,  813,  813,  818,  819,  818,  827,
      819,  819,  818,  818,  818,  813,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  820,
      821,  820,  828,  821,  821,  820,  820,  820,  820,  813,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,

      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  822,
      823,  822,  829,  823,  823,  822,  822,  813,  813,  822,
      813,  822,  824,  813,  825,  826,  813,  818,  830,  831,
      831,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  820,  832,  833,  833,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  822,  834,  835,  835,
      813,  813,  830,  830,  836,  251,  837,  838,  251,  839,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  832,  832,  329,
      840,  841,  329,  842,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  834,  834,  370,  843,  844,  370,  845,  813,  813,

      837,  837,  846,  838,  847,  504,  848,  836,  251,  849,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  840,  840,  841,  850,
      569,  851,  836,  329,  852,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,

      820,  820,  820,  820,  820,  843,  843,  844,  853,  608,
      854,  836,  370,  855,  847,  847,  846,  504,  856,  849,
      849,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  850,  850,  846,  569,  857,  852,  852,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  853,  853,  846,  608,  858,  855,  855,  856,

      856,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  857,  857,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  858,  858,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  818,
      818,  818,  818,  818,  818,  818,  818,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  818,  818,  820,  820,

      820,  820,  820,  820,  820,  818,  820,  820,  820,  818,
      820,  820,    0,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813
    } ;

static yyconst short int yy_nxt[4506] =
    {   0,
       14,   15,   16,   14,   17,   15,   15,   18,   19,   20,
       20,   21,   22,   23,   24,   25,   26,   18,   18,   18,
       18,   20,   18,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   18,   36,   18,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   18,
       18,   22,   22,   18,   18,   14,   15,   16,   14,   17,
       15,   15,   51,   52,   53,   53,   54,   53,   55,   56,
       51,   51,   56,   56,   57,   51,   53,   51,   58,   59,
       60,   51,   61,   62,   63,   64,   65,   51,   66,   67,
       51,   68,   69,   51,   70,   71,   51,   72,   73,   74,

       75,   76,   51,   51,   51,   51,   77,   77,   78,   51,
       14,   15,   16,   14,   17,   15,   15,  494,   80,   81,
       81,   82,   83,   84,   85,  106,   86,   87,  695,  106,
      106,   81,  244,   88,   89,   93,   94,  244,   94,   94,
       93,   93,   94,   90,   94,   94,   93,   96,  376,   96,
       96,   96,  508,   96,   96,  106,  107,  247,  247,  106,
      106,   91,   91,   14,   15,   16,   14,   17,   15,   15,
      112,   80,   81,   81,   82,   83,   84,   85,  108,   86,
       87,  450,  108,  665,   81,  113,   88,   89,  108,  376,
      108,  617,  108,  109,  110,  114,   90,  109,  110,  247,

      247,  239,  239,  109,  110,  109,  110,  109,  110,  180,
      494,  492,  450,  108,   91,   91,   97,  230,   99,   97,
      100,   97,  107,  185,   97,  101,  102,  108,  109,  116,
      448,  235,  107,  108,  115,  115,  112,  450,  103,  108,
      376,  573,  109,  110,  109,  109,  112,  109,  109,  110,
      108,  117,  244,  118,  109,  110,  109,  244,  180,  494,
      373,  119,  181,  612,  500,  109,  110,  104,  105,  139,
       97,   97,  185,   99,   97,  100,   97,  182,  183,   97,
      101,  102,  108,  499,  120,  181,  109,  109,  186,  180,
      108,  234,  108,  103,  184,  230,  111,  109,  110,  108,

      182,  183,  121,  185,  813,  109,  110,  109,  110,  235,
      122,  123,  108,  124,  109,  110,  125,  140,  133,  134,
      126,  135,  104,  105,  136,   97,  108,  109,  110,  813,
      127,  813,  108,  813,  108,  813,  128,  813,  108,  813,
      813,  109,  110,  129,  813,  130,  131,  109,  110,  109,
      110,  137,  132,  109,  110,  143,  144,  141,  108,  145,
      813,  142,  108,  146,  108,  813,  138,  108,  813,  147,
      813,  162,  108,  109,  110,  148,  230,  109,  110,  109,
      110,  163,  109,  110,  157,  164,  813,  109,  110,  149,
      235,  178,  165,  181,  813,  150,  108,  813,  158,  179,

      108,  159,  173,  248,  160,  326,  161,  108,  182,  183,
      813,  109,  110,  813,  151,  109,  110,  374,  152,  449,
      813,  166,  109,  110,  167,  153,  154,  108,  155,  813,
      156,  168,  171,  367,  108,  813,  169,  170,  181,  813,
      181,  172,  109,  110,  174,  187,  813,  493,  175,  109,
      110,  181,  188,  182,  190,  182,  183,  248,  176,  177,
      181,  182,  182,  189,  182,  181,  182,  183,  181,  813,
      181,  374,  813,  182,  326,  182,  183,  367,  181,  813,
      182,  183,  813,  182,  183,  182,  183,  205,  449,  813,
      199,  493,  813,  182,  183,  191,  813,  813,  200,  181,

      813,  201,  813,  182,  182,  181,  813,  181,  202,  203,
      813,  813,  204,  813,  182,  183,  181,  211,  813,  813,
      182,  183,  182,  183,  813,  813,  192,  206,  813,  207,
      181,  182,  183,  193,  194,  813,  195,  208,  196,  197,
      181,  198,  209,  210,  181,  182,  183,  212,  813,  181,
      219,  213,  181,  813,  181,  182,  183,  181,  214,  182,
      183,  215,  217,  813,  182,  183,  181,  182,  183,  182,
      183,  228,  182,  183,  220,  216,  218,  221,  226,  181,
      813,  182,  183,  222,  223,  813,  813,  231,  224,  225,
      231,  229,  231,  236,  182,  183,  813,  237,  813,  813,

      813,  227,  232,  233,  231,  232,  233,  232,  233,  238,
      239,  238,  238,  238,  238,  813,  231,  813,  231,  232,
      233,  231,  813,  813,  813,  240,  240,  232,  232,  231,
      232,  232,  233,  232,  233,  108,  232,  241,  108,  232,
      108,  813,  108,  250,  232,  233,  375,  251,  111,  375,
      109,  110,  111,  109,  116,  109,  110,  109,  110,  242,
      249,  109,  109,  108,  109,  109,  109,  108,  109,  232,
      232,  108,  813,  109,  115,  115,  108,  109,  109,  110,
      108,  813,  109,  110,  813,  108,  109,  110,  813,  813,
      108,  109,  110,  813,  252,  109,  110,  256,  813,  108,

      109,  110,  108,  109,  109,  109,  110,  109,  109,  253,
      254,  257,  108,  255,  109,  110,  813,  109,  110,  258,
      108,  813,  813,  813,  813,  108,  813,  109,  110,  108,
      259,  260,  261,  263,  108,  109,  110,  108,  264,  262,
      109,  110,  813,  813,  109,  110,  108,  813,  108,  109,
      110,  813,  109,  110,  108,  265,  267,  813,  266,  108,
      813,  109,  110,  109,  110,  271,  108,  269,  108,  109,
      110,  108,  268,  270,  109,  110,  108,  813,  813,  108,
      813,  109,  110,  109,  110,  813,  109,  110,  108,  274,
      272,  109,  110,  275,  109,  110,  108,  813,  276,  108,

      273,  108,  813,  109,  110,  108,  813,  108,  813,  108,
      813,  109,  110,  278,  109,  110,  109,  110,  277,  108,
      109,  110,  109,  110,  109,  110,  108,  279,  108,  813,
      108,  813,  108,  813,  109,  110,  282,  280,  108,  284,
      281,  109,  110,  109,  110,  109,  110,  109,  110,  283,
      108,  813,  108,  109,  110,  108,  813,  813,  288,  287,
      285,  108,  286,  108,  813,  109,  110,  109,  110,  290,
      109,  110,  289,  108,  813,  813,  109,  110,  109,  110,
      108,  813,  292,  813,  813,  108,  813,  108,  109,  110,
      291,  813,  813,  108,  813,  109,  110,  293,  108,  294,

      109,  110,  109,  110,  108,  295,  108,  299,  109,  110,
      296,  813,  108,  109,  110,  298,  297,  108,  300,  109,
      110,  109,  110,  813,  302,  813,  813,  109,  110,  307,
      108,  813,  109,  110,  301,  813,  813,  108,  813,  303,
      308,  306,  304,  305,  108,  109,  110,  813,  309,  108,
      813,  311,  109,  110,  312,  108,  813,  813,  313,  109,
      110,  310,  314,  813,  109,  110,  108,  813,  108,  813,
      109,  110,  317,  315,  108,  813,  813,  108,  316,  108,
      813,  109,  110,  109,  110,  813,  813,  813,  108,  109,
      110,  318,  109,  110,  109,  110,  108,  813,  813,  181,

      321,  181,  319,  109,  110,  324,  813,  813,  320,  813,
      322,  109,  110,  323,  182,  183,  182,  190,  327,  182,
      182,  181,  182,  181,  328,  181,  325,  181,  329,  813,
      181,  182,  182,  182,  181,  182,  182,  183,  182,  183,
      182,  183,  182,  183,  182,  182,  183,  813,  181,  182,
      183,  813,  375,  181,  184,  375,  181,  813,  184,  813,
      813,  182,  182,  182,  183,  330,  332,  196,  182,  183,
      331,  182,  183,  181,  182,  182,  181,  813,  181,  813,
      181,  813,  181,  813,  181,  333,  334,  813,  182,  183,
      181,  182,  183,  182,  183,  182,  183,  182,  183,  182,

      183,  813,  338,  181,  335,  182,  183,  181,  375,  336,
      234,  375,  181,  813,  234,  181,  337,  181,  182,  183,
      343,  813,  182,  183,  344,  181,  339,  182,  183,  813,
      182,  183,  182,  183,  181,  813,  345,  340,  341,  181,
      182,  183,  181,  813,  346,  813,  181,  813,  342,  182,
      183,  813,  181,  813,  182,  183,  181,  182,  183,  813,
      347,  182,  183,  181,  813,  181,  813,  182,  183,  181,
      813,  182,  183,  348,  350,  813,  813,  813,  182,  183,
      182,  183,  349,  813,  182,  183,  181,  813,  353,  181,
      813,  355,  351,  181,  813,  354,  181,  813,  352,  181,

      813,  182,  183,  181,  182,  183,  813,  181,  182,  183,
      357,  182,  183,  181,  182,  183,  359,  813,  182,  183,
      358,  356,  182,  183,  361,  813,  813,  181,  182,  183,
      181,  363,  181,  360,  181,  813,  231,  813,  231,  813,
      813,  362,  182,  183,  813,  182,  183,  182,  183,  182,
      183,  232,  233,  232,  241,  365,  368,  232,  232,  231,
      232,  364,  369,  231,  232,  232,  366,  232,  370,  232,
      813,  813,  231,  813,  232,  233,  232,  813,  232,  233,
      238,  239,  238,  238,  238,  238,  231,  232,  233,  108,
      371,  813,  372,  240,  240,  813,  813,  108,  813,  232,

      232,  232,  233,  813,  109,  110,  232,  232,  375,  108,
      813,  375,  109,  110,  813,  813,  377,  375,  375,  108,
      375,  813,  382,  108,  109,  110,  108,  813,  378,  375,
      108,  379,  380,  108,  109,  110,  383,  108,  109,  110,
      108,  109,  110,  381,  813,  109,  110,  384,  109,  110,
      385,  108,  109,  110,  813,  109,  110,  813,  813,  375,
      375,  375,  813,  108,  375,  813,  109,  110,  386,  377,
      375,  375,  108,  375,  108,  813,  813,  394,  109,  110,
      387,  378,  375,  388,  379,  380,  108,  109,  110,  109,
      110,  389,  390,  392,  393,  108,  813,  813,  813,  108,

      813,  109,  110,  108,  813,  108,  813,  395,  391,  108,
      109,  110,  375,  375,  109,  110,  108,  813,  109,  110,
      109,  110,  813,  108,  109,  110,  108,  396,  813,  813,
      108,  109,  110,  108,  813,  108,  813,  398,  109,  110,
      813,  109,  110,  288,  397,  109,  110,  813,  109,  110,
      109,  110,  399,  813,  813,  400,  108,  813,  108,  813,
      813,  813,  813,  403,  108,  402,  108,  813,  108,  401,
      813,  109,  110,  109,  110,  108,  404,  108,  405,  109,
      110,  109,  110,  109,  110,  407,  108,  813,  108,  813,
      109,  110,  109,  110,  813,  108,  406,  108,  813,  409,

      813,  109,  110,  109,  110,  108,  408,  813,  813,  813,
      109,  110,  109,  110,  108,  413,  108,  813,  108,  813,
      109,  110,  411,  410,  412,  108,  813,  108,  813,  109,
      110,  109,  110,  109,  110,  108,  414,  108,  813,  108,
      109,  110,  109,  110,  813,  108,  813,  813,  416,  813,
      109,  110,  109,  110,  109,  110,  108,  419,  108,  418,
      109,  110,  417,  108,  415,  813,  108,  421,  108,  420,
      108,  109,  110,  109,  110,  813,  813,  108,  109,  110,
      422,  109,  110,  109,  110,  109,  110,  108,  813,  813,
      813,  424,  109,  110,  108,  813,  108,  813,  427,  423,

      813,  108,  109,  110,  108,  425,  813,  426,  108,  109,
      110,  109,  110,  108,  813,  813,  109,  110,  108,  109,
      110,  428,  430,  109,  110,  108,  813,  108,  109,  110,
      429,  813,  813,  109,  110,  108,  813,  108,  813,  813,
      109,  110,  109,  110,  108,  813,  813,  431,  813,  432,
      109,  110,  109,  110,  433,  108,  439,  434,  108,  109,
      110,  813,  435,  108,  436,  437,  813,  108,  813,  438,
      109,  110,  108,  109,  110,  108,  813,  440,  109,  110,
      108,  442,  109,  110,  813,  813,  813,  109,  110,  108,
      109,  110,  181,  441,  181,  109,  110,  181,  813,  445,

      444,  443,  813,  181,  109,  110,  181,  182,  183,  182,
      183,  813,  182,  183,  447,  181,  446,  375,  182,  183,
      375,  182,  183,  813,  813,  451,  375,  375,  455,  375,
      182,  183,  457,  181,  813,  813,  181,  452,  375,  181,
      453,  454,  813,  813,  181,  813,  813,  181,  182,  183,
      456,  182,  183,  813,  182,  183,  813,  813,  458,  182,
      183,  813,  182,  183,  813,  465,  813,  460,  375,  375,
      375,  459,  181,  375,  813,  461,  466,  813,  451,  375,
      375,  181,  375,  181,  813,  181,  813,  182,  183,  181,
      452,  375,  813,  453,  454,  813,  182,  183,  182,  183,

      182,  183,  181,  462,  182,  183,  813,  468,  181,  469,
      463,  181,  464,  181,  467,  813,  813,  182,  183,  181,
      813,  375,  375,  182,  183,  813,  182,  183,  182,  183,
      813,  470,  471,  181,  182,  183,  472,  181,  813,  181,
      474,  181,  813,  181,  813,  473,  181,  813,  182,  183,
      181,  813,  182,  183,  182,  183,  182,  183,  182,  183,
      813,  182,  183,  181,  479,  182,  183,  813,  476,  475,
      480,  181,  813,  181,  477,  181,  478,  181,  182,  183,
      813,  813,  481,  181,  813,  813,  182,  183,  182,  183,
      182,  183,  182,  183,  181,  813,  485,  483,  182,  183,

      486,  181,  813,  181,  813,  181,  813,  482,  231,  182,
      183,  484,  108,  487,  813,  813,  182,  183,  182,  183,
      182,  183,  108,  232,  233,  813,  813,  109,  110,  488,
      489,  108,  813,  490,  813,  813,  813,  109,  110,  813,
      491,  375,  813,  813,  375,  813,  109,  110,  511,  495,
      375,  375,  375,  375,  108,  375,  108,  512,  111,  813,
      376,  496,  375,  108,  497,  498,  513,  108,  813,  109,
      110,  109,  110,  108,  502,  813,  813,  813,  109,  110,
      517,  514,  109,  110,  108,  813,  813,  813,  109,  110,
      515,  813,  375,  375,  375,  108,  813,  375,  521,  109,

      110,  516,  495,  375,  375,  520,  375,  108,  813,  813,
      109,  110,  813,  813,  496,  375,  813,  497,  498,  108,
      518,  108,  109,  110,  108,  813,  519,  813,  522,  813,
      813,  813,  523,  108,  109,  110,  109,  110,  108,  109,
      110,  813,  526,  813,  813,  375,  375,  503,  109,  110,
      503,  108,  813,  109,  110,  505,  503,  503,  525,  503,
      524,  527,  108,  813,  108,  813,  109,  110,  503,  813,
      506,  507,  108,  813,  813,  108,  813,  109,  110,  109,
      110,  813,  813,  813,  813,  528,  813,  109,  110,  531,
      109,  110,  813,  813,  813,  813,  532,  813,  503,  503,

      375,  529,  108,  375,  108,  813,  813,  813,  510,  379,
      379,  530,  379,  108,  813,  108,  813,  109,  110,  109,
      110,  379,  108,  375,  375,  813,  533,  108,  109,  110,
      109,  110,  813,  813,  108,  813,  813,  109,  110,  108,
      813,  534,  109,  110,  108,  813,  108,  813,  535,  109,
      110,  379,  379,  108,  109,  110,  813,  813,  536,  109,
      110,  109,  110,  108,  537,  108,  813,  108,  109,  110,
      540,  108,  538,  108,  813,  108,  813,  539,  109,  110,
      109,  110,  109,  110,  541,  813,  109,  110,  109,  110,
      109,  110,  544,  108,  813,  108,  813,  108,  813,  108,

      813,  542,  108,  543,  813,  108,  813,  813,  109,  110,
      109,  110,  109,  110,  109,  110,  813,  109,  110,  547,
      109,  110,  546,  108,  503,  108,  111,  503,  108,  813,
      111,  545,  108,  813,  108,  813,  548,  813,  109,  110,
      109,  110,  549,  109,  110,  551,  108,  109,  110,  109,
      110,  108,  813,  553,  550,  108,  813,  552,  108,  813,
      108,  109,  110,  108,  813,  554,  109,  110,  108,  813,
      109,  110,  108,  109,  110,  109,  110,  813,  109,  110,
      108,  813,  108,  109,  110,  558,  108,  109,  110,  108,
      555,  108,  813,  556,  813,  109,  110,  109,  110,  557,

      108,  109,  110,  560,  109,  110,  109,  110,  108,  813,
      559,  813,  813,  813,  813,  109,  110,  108,  813,  108,
      813,  563,  562,  109,  110,  108,  813,  561,  813,  564,
      181,  813,  109,  110,  109,  110,  375,  181,  565,  375,
      109,  110,  184,  813,  450,  182,  183,  566,  181,  576,
      181,  813,  182,  183,  375,  813,  373,  375,  568,  503,
      373,  181,  503,  182,  183,  182,  183,  570,  503,  503,
      813,  503,  577,  181,  813,  579,  182,  183,  181,  813,
      503,  813,  571,  572,  181,  578,  181,  813,  182,  183,
      181,  813,  181,  182,  183,  813,  813,  580,  813,  182,

      183,  182,  183,  813,  813,  182,  183,  182,  183,  581,
      503,  503,  375,  348,  181,  375,  181,  813,  813,  582,
      575,  453,  453,  181,  453,  813,  181,  813,  589,  182,
      183,  182,  183,  453,  181,  375,  375,  585,  182,  183,
      584,  182,  183,  181,  583,  181,  813,  586,  813,  182,
      183,  181,  813,  813,  181,  813,  181,  813,  182,  183,
      182,  183,  181,  453,  453,  587,  182,  183,  591,  182,
      183,  182,  183,  181,  813,  588,  181,  182,  183,  813,
      181,  813,  590,  813,  813,  181,  813,  181,  182,  183,
      593,  182,  183,  813,  592,  182,  183,  181,  813,  594,

      182,  183,  182,  183,  181,  813,  181,  813,  596,  181,
      813,  181,  182,  183,  181,  813,  595,  181,  597,  182,
      183,  182,  183,  181,  182,  183,  182,  183,  604,  182,
      183,  813,  182,  183,  600,  181,  813,  181,  182,  183,
      598,  599,  602,  503,  813,  184,  503,  601,  603,  184,
      182,  183,  182,  183,  375,  813,  813,  375,  605,  108,
      234,  375,  494,  108,  375,  813,  813,  111,  813,  376,
      379,  379,  813,  379,  109,  110,  607,  503,  109,  110,
      503,  813,  379,  502,  624,  609,  503,  503,  503,  503,
      813,  503,  813,  108,  111,  813,  504,  813,  503,  375,

      610,  611,  375,  108,  813,  373,  813,  509,  109,  110,
      616,  108,  379,  379,  622,  813,  108,  813,  109,  110,
      108,  621,  813,  625,  623,  813,  109,  110,  503,  503,
      375,  109,  110,  375,  813,  109,  110,  813,  614,  497,
      497,  108,  497,  108,  813,  108,  813,  813,  108,  813,
      626,  497,  108,  375,  375,  108,  109,  110,  109,  110,
      109,  110,  629,  109,  110,  813,  813,  109,  110,  627,
      109,  110,  108,  628,  108,  813,  813,  813,  813,  813,
      813,  497,  497,  503,  630,  632,  503,  109,  110,  109,
      110,  505,  503,  503,  108,  503,  813,  813,  813,  108,

      813,  108,  813,  108,  503,  813,  506,  507,  813,  109,
      110,  813,  631,  633,  109,  110,  109,  110,  109,  110,
      634,  813,  108,  636,  813,  108,  635,  375,  813,  448,
      375,  813,  813,  448,  503,  503,  503,  109,  110,  503,
      109,  110,  813,  637,  619,  506,  506,  108,  506,  108,
      813,  108,  813,  108,  813,  813,  813,  506,  108,  503,
      503,  638,  109,  110,  109,  110,  109,  110,  109,  110,
      108,  640,  639,  109,  110,  108,  813,  108,  503,  108,
      234,  503,  813,  108,  234,  109,  110,  506,  506,  108,
      109,  110,  109,  110,  109,  110,  642,  108,  109,  110,

      813,  813,  813,  108,  109,  110,  108,  644,  108,  813,
      641,  108,  109,  110,  646,  108,  643,  645,  109,  110,
      813,  109,  110,  109,  110,  108,  109,  110,  108,  813,
      109,  110,  647,  648,  813,  108,  649,  108,  813,  108,
      109,  110,  108,  109,  110,  650,  651,  813,  813,  652,
      109,  110,  109,  110,  109,  110,  108,  109,  110,  813,
      813,  108,  813,  653,  108,  813,  655,  108,  813,  108,
      813,  109,  110,  654,  813,  656,  109,  110,  108,  109,
      110,  108,  109,  110,  109,  110,  813,  108,  813,  657,
      108,  813,  659,  109,  110,  108,  109,  110,  813,  108,

      813,  658,  109,  110,  108,  109,  110,  813,  813,  813,
      109,  110,  813,  813,  109,  110,  813,  813,  375,  109,
      110,  375,  660,  661,  184,  503,  450,  181,  503,  453,
      453,  184,  453,  569,  813,  181,  813,  813,  813,  813,
      568,  453,  182,  183,  813,  662,  503,  664,  813,  503,
      182,  183,  670,  813,  570,  503,  503,  375,  503,  181,
      375,  181,  813,  448,  813,  574,  181,  503,  813,  571,
      572,  453,  453,  181,  182,  183,  182,  183,  181,  669,
      813,  182,  183,  813,  672,  813,  813,  813,  182,  183,
      181,  813,  813,  182,  183,  671,  813,  503,  503,  503,

      673,  181,  503,  181,  813,  182,  183,  667,  571,  571,
      674,  571,  181,  813,  181,  813,  182,  183,  182,  183,
      571,  813,  503,  503,  181,  813,  181,  182,  183,  182,
      183,  813,  181,  676,  813,  813,  813,  675,  181,  182,
      183,  182,  183,  813,  181,  678,  677,  182,  183,  181,
      571,  571,  181,  182,  183,  679,  813,  680,  681,  182,
      183,  181,  682,  181,  182,  183,  181,  182,  183,  813,
      813,  181,  683,  813,  181,  813,  182,  183,  182,  183,
      181,  182,  183,  686,  181,  687,  182,  183,  684,  182,
      183,  181,  685,  813,  181,  182,  183,  688,  181,  182,

      183,  181,  813,  813,  813,  689,  182,  183,  690,  182,
      183,  813,  375,  182,  183,  375,  182,  183,  234,  813,
      494,  813,  692,  813,  503,  108,  813,  503,  691,  813,
      234,  813,  608,  813,  607,  503,  497,  497,  503,  497,
      109,  110,  813,  609,  503,  503,  694,  503,  497,  375,
      506,  506,  375,  506,  813,  492,  503,  613,  610,  611,
      503,  503,  506,  503,  503,  108,  111,  373,  504,  618,
      375,  699,  492,  375,  108,  813,  492,  813,  497,  497,
      109,  110,  616,  701,  813,  258,  503,  503,  503,  109,
      110,  503,  506,  506,  813,  813,  697,  610,  610,  375,

      610,  108,  375,  108,  813,  373,  813,  509,  702,  610,
      108,  503,  503,  813,  108,  813,  109,  110,  109,  110,
      813,  621,  108,  813,  813,  109,  110,  108,  813,  109,
      110,  705,  108,  813,  704,  706,  703,  109,  110,  610,
      610,  108,  109,  110,  108,  813,  108,  109,  110,  813,
      707,  108,  708,  813,  813,  813,  109,  110,  108,  109,
      110,  109,  110,  813,  813,  711,  109,  110,  709,  108,
      712,  108,  813,  109,  110,  108,  813,  108,  710,  714,
      108,  813,  713,  813,  109,  110,  109,  110,  108,  813,
      109,  110,  109,  110,  108,  109,  110,  108,  717,  715,

      108,  813,  108,  109,  110,  108,  813,  813,  108,  109,
      110,  716,  109,  110,  108,  109,  110,  109,  110,  813,
      109,  110,  718,  109,  110,  108,  813,  813,  108,  109,
      110,  108,  720,  108,  813,  721,  108,  813,  719,  108,
      109,  110,  722,  109,  110,  108,  109,  110,  109,  110,
      108,  109,  110,  108,  109,  110,  108,  723,  108,  813,
      109,  110,  108,  813,  813,  109,  110,  108,  109,  110,
      813,  109,  110,  109,  110,  813,  813,  109,  110,  726,
      813,  503,  109,  110,  503,  813,  724,  184,  813,  569,
      571,  571,  503,  571,  725,  503,  181,  813,  448,  813,

      666,  375,  571,  664,  375,  181,  813,  448,  813,  574,
      181,  182,  183,  729,  728,  181,  813,  813,  813,  181,
      182,  183,  730,  669,  181,  182,  183,  181,  813,  813,
      182,  183,  571,  571,  182,  183,  813,  813,  181,  182,
      183,  181,  182,  183,  733,  181,  813,  731,  181,  813,
      181,  813,  732,  182,  183,  181,  182,  183,  181,  813,
      182,  183,  181,  182,  183,  182,  183,  181,  734,  813,
      182,  183,  181,  182,  183,  737,  738,  182,  183,  739,
      181,  735,  182,  183,  736,  181,  813,  182,  183,  181,
      813,  181,  813,  741,  740,  182,  183,  813,  813,  181,

      182,  183,  181,  813,  182,  183,  182,  183,  610,  610,
      813,  610,  744,  743,  182,  183,  742,  182,  183,  503,
      610,  813,  503,  813,  813,  234,  745,  608,  813,  108,
      813,  503,  813,  747,  503,  746,  813,  492,  813,  696,
      375,  694,  813,  375,  109,  110,  492,  813,  613,  503,
      610,  610,  503,  749,  750,  373,  813,  618,  503,  108,
      373,  503,  699,  108,  373,  108,  813,  108,  813,  108,
      622,  701,  108,  813,  109,  110,  108,  813,  109,  110,
      109,  110,  109,  110,  109,  110,  813,  109,  110,  108,
      813,  109,  110,  108,  813,  813,  108,  753,  108,  752,

      108,  813,  751,  754,  109,  110,  108,  813,  109,  110,
      755,  109,  110,  109,  110,  109,  110,  813,  108,  757,
      108,  109,  110,  813,  813,  108,  813,  758,  108,  813,
      108,  813,  756,  109,  110,  109,  110,  108,  813,  759,
      109,  110,  108,  109,  110,  109,  110,  108,  813,  761,
      108,  762,  109,  110,  813,  813,  108,  109,  110,  108,
      813,  813,  109,  110,  813,  109,  110,  760,  813,  181,
      763,  109,  110,  503,  109,  110,  503,  181,  813,  448,
      503,  666,  448,  503,  182,  183,  448,  764,  181,  813,
      813,  181,  182,  183,  813,  728,  181,  813,  813,  181,

      813,  813,  181,  182,  183,  765,  182,  183,  813,  181,
      768,  182,  183,  766,  182,  183,  181,  182,  183,  181,
      813,  181,  767,  770,  182,  183,  769,  181,  813,  181,
      813,  182,  183,  181,  182,  183,  182,  183,  181,  773,
      181,  813,  182,  183,  182,  183,  772,  181,  182,  183,
      771,  181,  813,  182,  183,  182,  183,  181,  775,  774,
      813,  813,  182,  183,  813,  813,  182,  183,  503,  813,
      813,  503,  182,  183,  492,  813,  696,  503,  108,  492,
      503,  776,  777,  492,  813,  108,  778,  108,  779,  108,
      749,  108,  813,  109,  110,  108,  813,  108,  813,  780,

      109,  110,  109,  110,  109,  110,  109,  110,  108,  813,
      109,  110,  109,  110,  108,  781,  108,  813,  813,  813,
      108,  783,  108,  109,  110,  782,  813,  108,  813,  109,
      110,  109,  110,  108,  784,  109,  110,  109,  110,  108,
      813,  785,  109,  110,  181,  813,  813,  813,  109,  110,
      813,  181,  813,  813,  109,  110,  181,  813,  813,  182,
      183,  813,  786,  181,  813,  181,  182,  183,  181,  788,
      813,  182,  183,  790,  181,  787,  789,  181,  182,  183,
      182,  183,  813,  182,  183,  181,  344,  181,  605,  182,
      183,  813,  182,  183,  181,  813,  181,  605,  792,  791,

      182,  183,  182,  183,  181,  813,  793,  181,  813,  182,
      183,  182,  183,  181,  813,  108,  813,  108,  813,  182,
      183,  108,  182,  183,  794,  795,  108,  813,  182,  183,
      109,  110,  109,  110,  813,  813,  109,  110,  108,  813,
      796,  109,  110,  108,  813,  108,  813,  108,  813,  181,
      622,  813,  181,  109,  110,  181,  535,  813,  109,  110,
      109,  110,  109,  110,  182,  183,  797,  182,  183,  181,
      182,  183,  798,  181,  813,  813,  813,  181,  813,  181,
      813,  181,  813,  813,  182,  183,  813,  799,  182,  183,
      800,  801,  182,  183,  182,  183,  182,  183,  804,  181,

      802,  813,  605,  108,  813,  108,  813,  181,  813,  803,
      181,  813,  813,  813,  182,  183,  805,  181,  109,  110,
      109,  110,  182,  183,  181,  182,  183,  813,  807,  181,
      813,  808,  182,  183,  181,  813,  806,  181,  647,  182,
      183,  108,  809,  813,  182,  183,  181,  813,  181,  182,
      183,  181,  182,  183,  108,  813,  109,  110,  460,  181,
      813,  182,  183,  182,  183,  181,  182,  183,  813,  109,
      110,  810,  813,  813,  182,  183,  813,  813,  813,  813,
      182,  183,  811,  813,  813,  813,  813,  813,  813,  812,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   92,

       92,   92,   92,   92,   92,   92,   92,   92,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  107,  107,  813,  813,
      107,  111,  111,  111,  111,  111,  111,  180,  180,  813,
      813,  180,  184,  184,  184,  184,  184,  184,  230,  230,
      813,  813,  230,  234,  234,  234,  234,  234,  234,  243,
      813,  813,  813,  243,  243,  243,  243,  243,  245,  245,
      813,  245,  245,  245,  245,  245,  245,  246,  813,  246,
      246,  813,  813,  246,  246,  248,  248,  248,  248,  326,
      326,  326,  326,  367,  367,  367,  367,  373,  373,  373,

      373,  373,  373,  376,  813,  813,  813,  376,  376,  376,
      376,  376,  448,  448,  448,  448,  448,  448,  450,  813,
      813,  813,  450,  450,  450,  450,  450,  492,  492,  492,
      492,  492,  492,  494,  813,  813,  813,  494,  494,  494,
      494,  494,  375,  813,  813,  813,  375,  375,  375,  375,
      375,  501,  813,  813,  501,  501,  501,  501,  501,  501,
      504,  813,  813,  813,  504,  504,  504,  504,  504,  509,
      813,  813,  813,  509,  509,  509,  509,  509,  567,  813,
      813,  567,  567,  567,  567,  567,  567,  569,  813,  813,
      813,  569,  569,  569,  569,  569,  574,  813,  813,  813,

      574,  574,  574,  574,  574,  606,  813,  813,  606,  606,
      606,  606,  606,  606,  608,  813,  813,  813,  608,  608,
      608,  608,  608,  613,  813,  813,  813,  613,  613,  613,
      613,  613,  503,  813,  813,  813,  503,  503,  503,  503,
      503,  615,  813,  813,  615,  615,  615,  615,  615,  615,
      618,  813,  813,  813,  618,  618,  618,  618,  618,  620,
      813,  813,  620,  620,  620,  620,  620,  620,  663,  813,
      813,  663,  663,  663,  663,  663,  663,  666,  813,  813,
      813,  666,  666,  666,  666,  666,  668,  813,  813,  668,
      668,  668,  668,  668,  668,  693,  813,  813,  693,  693,

      693,  693,  693,  693,  696,  813,  813,  813,  696,  696,
      696,  696,  696,  698,  813,  813,  698,  698,  698,  698,
      698,  698,  700,  813,  813,  700,  700,  700,  700,  700,
      700,  727,  813,  813,  727,  727,  727,  727,  727,  727,
      748,  813,  813,  748,  748,  748,  748,  748,  748,   13,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,

      813,  813,  813,  813,  813
    } ;

static yyconst short int yy_chk[4506] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,  613,    5,    5,
        5,    5,    5,    5,    5,   15,    5,    5,  610,   15,
       15,    5,   93,    5,    5,    7,    7,   93,    7,    7,
        7,    8,    8,    5,    8,    8,    8,    9,  379,    9,
        9,   10,  379,   10,   10,  106,   19,  103,  103,  106,
      106,    5,    5,    6,    6,    6,    6,    6,    6,    6,
       19,    6,    6,    6,    6,    6,    6,    6,   18,    6,
        6,  574,   21,  571,    6,   21,    6,    6,   24,  509,
       23,  506,   25,   18,   18,   23,    6,   21,   21,  103,

      103,  500,  499,   24,   24,   23,   23,   25,   25,   52,
      494,  493,  450,   27,    6,    6,   11,   80,   11,   11,
       11,   11,  108,   52,   11,   11,   11,   26,   27,   27,
      449,   80,  111,   29,   26,   26,  108,  453,   11,   36,
      376,  453,   26,   26,   28,   28,  111,   28,   29,   29,
       30,   29,  244,   29,   36,   36,   28,  244,  181,  497,
      374,   29,   51,  497,  372,   30,   30,   11,   11,   36,
       11,   12,  181,   12,   12,   12,   12,   51,   51,   12,
       12,   12,   31,  371,   30,   54,   28,   28,   54,  184,
       34,  235,   37,   12,  185,  231,  112,   31,   31,   32,

       54,   54,   31,  184,   13,   34,   34,   37,   37,  231,
       31,   31,   33,   31,   32,   32,   31,   37,   34,   34,
       32,   34,   12,   12,   34,   12,   38,   33,   33,    0,
       32,    0,   35,    0,   43,    0,   32,    0,   39,    0,
        0,   38,   38,   33,    0,   33,   33,   35,   35,   43,
       43,   35,   33,   39,   39,   39,   39,   38,   40,   39,
        0,   38,   50,   39,   44,    0,   35,   42,    0,   39,
        0,   43,   47,   40,   40,   40,  234,   50,   50,   44,
       44,   44,   42,   42,   42,   44,    0,   47,   47,   40,
      234,   50,   44,   56,    0,   40,   41,    0,   42,   50,

       45,   42,   47,  249,   42,  327,   42,   46,   56,   56,
        0,   41,   41,    0,   41,   45,   45,  249,   41,  327,
        0,   45,   46,   46,   45,   41,   41,   48,   41,    0,
       41,   45,   46,  368,   49,    0,   45,   45,   58,    0,
       55,   46,   48,   48,   48,   55,    0,  368,   48,   49,
       49,   57,   55,   58,   58,   55,   55,  373,   49,   49,
       60,   59,   59,   57,   59,   62,   57,   57,   63,    0,
       65,  373,    0,   59,  448,   60,   60,  492,   64,    0,
       62,   62,    0,   63,   63,   65,   65,   65,  448,    0,
       62,  492,    0,   64,   64,   60,    0,    0,   63,   67,

        0,   63,    0,   59,   59,   61,    0,   66,   63,   64,
        0,    0,   64,    0,   67,   67,   71,   67,    0,    0,
       61,   61,   66,   66,    0,    0,   61,   66,    0,   66,
       68,   71,   71,   61,   61,    0,   61,   66,   61,   61,
       69,   61,   66,   66,   70,   68,   68,   68,    0,   72,
       71,   68,   73,    0,   76,   69,   69,   74,   69,   70,
       70,   69,   70,    0,   72,   72,   75,   73,   73,   76,
       76,   76,   74,   74,   72,   69,   70,   72,   74,   78,
        0,   75,   75,   73,   73,    0,    0,   79,   73,   73,
       82,   78,   84,   82,   78,   78,    0,   84,    0,    0,

        0,   75,   79,   79,   87,   82,   82,   84,   84,   85,
       85,   85,   85,   85,   85,    0,   85,    0,   86,   87,
       87,   88,    0,    0,    0,   86,   86,   89,   89,   90,
       89,   85,   85,   86,   86,  107,   88,   88,  109,   89,
      113,    0,  114,  113,   90,   90,  502,  114,  502,  502,
      107,  107,  502,  109,  109,  113,  113,  114,  114,   90,
      110,  110,  110,  117,  110,  116,  116,  115,  116,   89,
       89,  118,    0,  110,  115,  115,  120,  116,  117,  117,
      121,    0,  115,  115,    0,  119,  118,  118,    0,    0,
      122,  120,  120,    0,  117,  121,  121,  120,    0,  123,

      119,  119,  124,  110,  110,  122,  122,  116,  116,  118,
      119,  122,  125,  119,  123,  123,    0,  124,  124,  123,
      126,    0,    0,    0,    0,  127,    0,  125,  125,  128,
      124,  124,  124,  125,  129,  126,  126,  130,  126,  124,
      127,  127,    0,    0,  128,  128,  131,    0,  133,  129,
      129,    0,  130,  130,  132,  126,  129,    0,  128,  134,
        0,  131,  131,  133,  133,  133,  135,  131,  136,  132,
      132,  137,  130,  132,  134,  134,  138,    0,    0,  139,
        0,  135,  135,  136,  136,    0,  137,  137,  140,  136,
      134,  138,  138,  138,  139,  139,  141,    0,  139,  142,

      135,  143,    0,  140,  140,  144,    0,  145,    0,  146,
        0,  141,  141,  141,  142,  142,  143,  143,  140,  147,
      144,  144,  145,  145,  146,  146,  148,  141,  149,    0,
      150,    0,  151,    0,  147,  147,  145,  143,  153,  147,
      144,  148,  148,  149,  149,  150,  150,  151,  151,  146,
      152,    0,  154,  153,  153,  155,    0,    0,  151,  150,
      148,  156,  149,  157,    0,  152,  152,  154,  154,  153,
      155,  155,  152,  158,    0,    0,  156,  156,  157,  157,
      160,    0,  156,    0,    0,  159,    0,  161,  158,  158,
      155,    0,    0,  162,    0,  160,  160,  157,  163,  157,

      159,  159,  161,  161,  164,  158,  165,  161,  162,  162,
      159,    0,  166,  163,  163,  160,  159,  168,  162,  164,
      164,  165,  165,    0,  164,    0,    0,  166,  166,  166,
      167,    0,  168,  168,  163,    0,    0,  169,    0,  164,
      166,  165,  164,  164,  170,  167,  167,    0,  166,  171,
        0,  168,  169,  169,  169,  172,    0,    0,  169,  170,
      170,  167,  170,    0,  171,  171,  173,    0,  174,    0,
      172,  172,  172,  170,  175,    0,    0,  177,  171,  176,
        0,  173,  173,  174,  174,    0,    0,    0,  178,  175,
      175,  173,  177,  177,  176,  176,  179,    0,    0,  180,

      176,  182,  174,  178,  178,  178,    0,    0,  175,    0,
      176,  179,  179,  177,  180,  180,  182,  182,  183,  183,
      183,  186,  183,  187,  186,  188,  179,  189,  187,    0,
      191,  183,  190,  190,  192,  190,  186,  186,  187,  187,
      188,  188,  189,  189,  190,  191,  191,    0,  194,  192,
      192,    0,  568,  193,  568,  568,  195,    0,  568,    0,
        0,  183,  183,  194,  194,  191,  194,  192,  193,  193,
      193,  195,  195,  196,  190,  190,  197,    0,  198,    0,
      199,    0,  200,    0,  201,  195,  195,    0,  196,  196,
      202,  197,  197,  198,  198,  199,  199,  200,  200,  201,

      201,    0,  200,  203,  197,  202,  202,  204,  607,  198,
      607,  607,  205,    0,  607,  206,  199,  207,  203,  203,
      206,    0,  204,  204,  206,  208,  202,  205,  205,    0,
      206,  206,  207,  207,  209,    0,  206,  203,  204,  210,
      208,  208,  211,    0,  208,    0,  212,    0,  205,  209,
      209,    0,  213,    0,  210,  210,  214,  211,  211,    0,
      210,  212,  212,  215,    0,  216,    0,  213,  213,  217,
        0,  214,  214,  211,  213,    0,    0,    0,  215,  215,
      216,  216,  212,    0,  217,  217,  218,    0,  216,  219,
        0,  218,  215,  220,    0,  217,  221,    0,  215,  222,

        0,  218,  218,  223,  219,  219,    0,  224,  220,  220,
      219,  221,  221,  225,  222,  222,  220,    0,  223,  223,
      219,  218,  224,  224,  223,    0,    0,  226,  225,  225,
      227,  225,  228,  222,  229,    0,  230,    0,  232,    0,
        0,  224,  226,  226,    0,  227,  227,  228,  228,  229,
      229,  230,  230,  232,  232,  227,  233,  233,  233,  236,
      233,  226,  236,  237,  241,  241,  228,  241,  237,  233,
        0,    0,  242,    0,  236,  236,  241,    0,  237,  237,
      238,  238,  238,  238,  238,  238,  240,  242,  242,  248,
      238,    0,  238,  240,  240,    0,    0,  253,    0,  233,

      233,  240,  240,    0,  248,  248,  241,  241,  250,  252,
        0,  250,  253,  253,    0,    0,  250,  250,  250,  254,
      250,    0,  253,  255,  252,  252,  258,    0,  250,  250,
      256,  250,  250,  257,  254,  254,  254,  259,  255,  255,
      264,  258,  258,  252,    0,  256,  256,  256,  257,  257,
      257,  260,  259,  259,    0,  264,  264,    0,    0,  250,
      250,  251,    0,  262,  251,    0,  260,  260,  259,  251,
      251,  251,  261,  251,  263,    0,    0,  264,  262,  262,
      260,  251,  251,  260,  251,  251,  265,  261,  261,  263,
      263,  261,  261,  262,  263,  266,    0,    0,    0,  267,

        0,  265,  265,  268,    0,  269,    0,  265,  261,  270,
      266,  266,  251,  251,  267,  267,  271,    0,  268,  268,
      269,  269,    0,  272,  270,  270,  273,  266,    0,    0,
      274,  271,  271,  275,    0,  276,    0,  270,  272,  272,
        0,  273,  273,  272,  269,  274,  274,    0,  275,  275,
      276,  276,  271,    0,    0,  273,  277,    0,  278,    0,
        0,    0,    0,  276,  279,  275,  280,    0,  281,  274,
        0,  277,  277,  278,  278,  282,  277,  283,  278,  279,
      279,  280,  280,  281,  281,  280,  284,    0,  285,    0,
      282,  282,  283,  283,    0,  286,  279,  287,    0,  283,

        0,  284,  284,  285,  285,  288,  282,    0,    0,    0,
      286,  286,  287,  287,  289,  287,  290,    0,  291,    0,
      288,  288,  285,  284,  286,  292,    0,  293,    0,  289,
      289,  290,  290,  291,  291,  294,  290,  295,    0,  296,
      292,  292,  293,  293,    0,  297,    0,    0,  293,    0,
      294,  294,  295,  295,  296,  296,  298,  295,  299,  294,
      297,  297,  293,  300,  292,    0,  301,  297,  302,  296,
      303,  298,  298,  299,  299,    0,    0,  304,  300,  300,
      298,  301,  301,  302,  302,  303,  303,  305,    0,    0,
        0,  301,  304,  304,  306,    0,  307,    0,  304,  300,

        0,  308,  305,  305,  309,  302,    0,  303,  310,  306,
      306,  307,  307,  311,    0,    0,  308,  308,  312,  309,
      309,  305,  308,  310,  310,  313,    0,  314,  311,  311,
      307,    0,    0,  312,  312,  315,    0,  317,    0,    0,
      313,  313,  314,  314,  316,    0,    0,  310,    0,  311,
      315,  315,  317,  317,  312,  318,  317,  313,  319,  316,
      316,    0,  314,  320,  315,  316,    0,  321,    0,  316,
      318,  318,  322,  319,  319,  323,    0,  318,  320,  320,
      324,  320,  321,  321,    0,    0,    0,  322,  322,  325,
      323,  323,  326,  319,  332,  324,  324,  330,    0,  323,

      322,  321,    0,  333,  325,  325,  335,  326,  326,  332,
      332,    0,  330,  330,  325,  331,  324,  328,  333,  333,
      328,  335,  335,    0,    0,  328,  328,  328,  330,  328,
      331,  331,  333,  336,    0,    0,  334,  328,  328,  337,
      328,  328,    0,    0,  339,    0,    0,  340,  336,  336,
      331,  334,  334,    0,  337,  337,    0,    0,  334,  339,
      339,    0,  340,  340,    0,  339,    0,  336,  328,  328,
      329,  334,  341,  329,    0,  337,  340,    0,  329,  329,
      329,  338,  329,  342,    0,  343,    0,  341,  341,  344,
      329,  329,    0,  329,  329,    0,  338,  338,  342,  342,

      343,  343,  345,  338,  344,  344,    0,  342,  346,  343,
      338,  347,  338,  348,  341,    0,    0,  345,  345,  349,
        0,  329,  329,  346,  346,    0,  347,  347,  348,  348,
        0,  345,  345,  350,  349,  349,  346,  351,    0,  352,
      349,  353,    0,  354,    0,  347,  355,    0,  350,  350,
      356,    0,  351,  351,  352,  352,  353,  353,  354,  354,
        0,  355,  355,  357,  354,  356,  356,    0,  351,  350,
      355,  358,    0,  359,  352,  360,  353,  361,  357,  357,
        0,    0,  357,  362,    0,    0,  358,  358,  359,  359,
      360,  360,  361,  361,  363,    0,  361,  359,  362,  362,

      362,  364,    0,  365,    0,  366,    0,  358,  367,  363,
      363,  360,  381,  363,    0,    0,  364,  364,  365,  365,
      366,  366,  382,  367,  367,    0,    0,  381,  381,  363,
      364,  383,    0,  365,    0,    0,    0,  382,  382,    0,
      366,  369,    0,    0,  369,    0,  383,  383,  381,  369,
      369,  369,  377,  369,  384,  377,  385,  382,  377,    0,
      377,  369,  369,  387,  369,  369,  383,  386,    0,  384,
      384,  385,  385,  390,  377,    0,    0,    0,  387,  387,
      387,  384,  386,  386,  389,    0,    0,    0,  390,  390,
      385,    0,  369,  369,  370,  388,    0,  370,  390,  389,

      389,  386,  370,  370,  370,  389,  370,  391,    0,    0,
      388,  388,    0,    0,  370,  370,    0,  370,  370,  394,
      388,  393,  391,  391,  392,    0,  388,    0,  391,    0,
        0,    0,  391,  395,  394,  394,  393,  393,  396,  392,
      392,    0,  394,    0,    0,  370,  370,  378,  395,  395,
      378,  397,    0,  396,  396,  378,  378,  378,  393,  378,
      392,  395,  401,    0,  398,    0,  397,  397,  378,    0,
      378,  378,  400,    0,    0,  399,    0,  401,  401,  398,
      398,    0,    0,    0,    0,  397,    0,  400,  400,  400,
      399,  399,    0,    0,    0,    0,  401,    0,  378,  378,

      380,  398,  402,  380,  403,    0,    0,    0,  380,  380,
      380,  399,  380,  404,    0,  405,    0,  402,  402,  403,
      403,  380,  406,  380,  380,    0,  402,  408,  404,  404,
      405,  405,    0,    0,  407,    0,    0,  406,  406,  409,
        0,  403,  408,  408,  410,    0,  411,    0,  404,  407,
      407,  380,  380,  412,  409,  409,    0,    0,  407,  410,
      410,  411,  411,  413,  409,  414,    0,  415,  412,  412,
      412,  417,  410,  416,    0,  418,    0,  411,  413,  413,
      414,  414,  415,  415,  413,    0,  417,  417,  416,  416,
      418,  418,  417,  419,    0,  420,    0,  421,    0,  422,

        0,  415,  423,  416,    0,  424,    0,    0,  419,  419,
      420,  420,  421,  421,  422,  422,    0,  423,  423,  422,
      424,  424,  421,  425,  616,  426,  616,  616,  427,    0,
      616,  420,  428,    0,  429,    0,  424,    0,  425,  425,
      426,  426,  425,  427,  427,  427,  430,  428,  428,  429,
      429,  431,    0,  429,  426,  432,    0,  428,  433,    0,
      434,  430,  430,  435,    0,  430,  431,  431,  436,    0,
      432,  432,  437,  433,  433,  434,  434,    0,  435,  435,
      438,    0,  439,  436,  436,  436,  440,  437,  437,  441,
      432,  442,    0,  433,    0,  438,  438,  439,  439,  435,

      443,  440,  440,  439,  441,  441,  442,  442,  444,    0,
      438,    0,    0,    0,    0,  443,  443,  445,    0,  446,
        0,  443,  442,  444,  444,  447,    0,  440,    0,  444,
      455,    0,  445,  445,  446,  446,  451,  456,  446,  451,
      447,  447,  451,    0,  451,  455,  455,  447,  457,  455,
      458,    0,  456,  456,  621,    0,  621,  621,  451,  452,
      621,  459,  452,  457,  457,  458,  458,  452,  452,  452,
        0,  452,  456,  460,    0,  458,  459,  459,  461,    0,
      452,    0,  452,  452,  462,  457,  463,    0,  460,  460,
      464,    0,  471,  461,  461,    0,    0,  459,    0,  462,

      462,  463,  463,    0,    0,  464,  464,  471,  471,  461,
      452,  452,  454,  462,  465,  454,  467,    0,    0,  464,
      454,  454,  454,  466,  454,    0,  468,    0,  471,  465,
      465,  467,  467,  454,  469,  454,  454,  467,  466,  466,
      466,  468,  468,  470,  465,  472,    0,  468,    0,  469,
      469,  473,    0,    0,  474,    0,  475,    0,  470,  470,
      472,  472,  476,  454,  454,  469,  473,  473,  473,  474,
      474,  475,  475,  477,    0,  470,  478,  476,  476,    0,
      479,    0,  472,    0,    0,  480,    0,  481,  477,  477,
      477,  478,  478,    0,  474,  479,  479,  482,    0,  479,

      480,  480,  481,  481,  483,    0,  484,    0,  481,  485,
        0,  486,  482,  482,  487,    0,  480,  488,  482,  483,
      483,  484,  484,  489,  485,  485,  486,  486,  489,  487,
      487,    0,  488,  488,  485,  490,    0,  491,  489,  489,
      483,  484,  487,  664,    0,  664,  664,  486,  488,  664,
      490,  490,  491,  491,  495,    0,    0,  495,  490,  511,
      495,  501,  495,  513,  501,    0,    0,  501,    0,  501,
      508,  508,    0,  508,  511,  511,  495,  496,  513,  513,
      496,    0,  508,  501,  513,  496,  496,  496,  505,  496,
        0,  505,    0,  512,  505,    0,  505,    0,  496,  510,

      496,  496,  510,  514,    0,  510,    0,  510,  512,  512,
      505,  515,  508,  508,  512,    0,  516,    0,  514,  514,
      517,  510,    0,  514,  512,    0,  515,  515,  496,  496,
      498,  516,  516,  498,    0,  517,  517,    0,  498,  498,
      498,  518,  498,  519,    0,  520,    0,    0,  521,    0,
      517,  498,  524,  498,  498,  523,  518,  518,  519,  519,
      520,  520,  520,  521,  521,    0,    0,  524,  524,  518,
      523,  523,  522,  519,  526,    0,    0,    0,    0,    0,
        0,  498,  498,  504,  521,  523,  504,  522,  522,  526,
      526,  504,  504,  504,  525,  504,    0,    0,    0,  527,

        0,  528,    0,  529,  504,    0,  504,  504,    0,  525,
      525,    0,  522,  525,  527,  527,  528,  528,  529,  529,
      527,    0,  530,  529,    0,  531,  528,  669,    0,  669,
      669,    0,    0,  669,  504,  504,  507,  530,  530,  507,
      531,  531,    0,  530,  507,  507,  507,  532,  507,  533,
        0,  534,    0,  535,    0,    0,    0,  507,  536,  507,
      507,  531,  532,  532,  533,  533,  534,  534,  535,  535,
      537,  534,  532,  536,  536,  538,    0,  539,  694,  540,
      694,  694,    0,  541,  694,  537,  537,  507,  507,  542,
      538,  538,  539,  539,  540,  540,  538,  543,  541,  541,

        0,    0,    0,  544,  542,  542,  545,  540,  546,    0,
      537,  547,  543,  543,  542,  548,  539,  541,  544,  544,
        0,  545,  545,  546,  546,  549,  547,  547,  550,    0,
      548,  548,  543,  543,    0,  551,  546,  552,    0,  554,
      549,  549,  553,  550,  550,  548,  549,    0,    0,  550,
      551,  551,  552,  552,  554,  554,  555,  553,  553,    0,
        0,  556,    0,  551,  557,    0,  553,  558,    0,  559,
        0,  555,  555,  552,    0,  554,  556,  556,  560,  557,
      557,  561,  558,  558,  559,  559,    0,  562,    0,  557,
      563,    0,  559,  560,  560,  564,  561,  561,    0,  565,

        0,  558,  562,  562,  566,  563,  563,    0,    0,    0,
      564,  564,    0,    0,  565,  565,    0,    0,  567,  566,
      566,  567,  562,  565,  567,  570,  567,  576,  570,  573,
      573,  570,  573,  570,    0,  577,    0,    0,    0,    0,
      567,  573,  576,  576,    0,  566,  569,  570,    0,  569,
      577,  577,  576,    0,  569,  569,  569,  575,  569,  578,
      575,  579,    0,  575,    0,  575,  580,  569,    0,  569,
      569,  573,  573,  581,  578,  578,  579,  579,  582,  575,
        0,  580,  580,    0,  579,    0,    0,    0,  581,  581,
      583,    0,    0,  582,  582,  578,    0,  569,  569,  572,

      580,  584,  572,  585,    0,  583,  583,  572,  572,  572,
      583,  572,  586,    0,  587,    0,  584,  584,  585,  585,
      572,    0,  572,  572,  588,    0,  591,  586,  586,  587,
      587,    0,  589,  585,    0,    0,    0,  584,  590,  588,
      588,  591,  591,    0,  592,  587,  586,  589,  589,  593,
      572,  572,  594,  590,  590,  588,    0,  589,  590,  592,
      592,  595,  591,  596,  593,  593,  597,  594,  594,    0,
        0,  598,  593,    0,  599,    0,  595,  595,  596,  596,
      600,  597,  597,  596,  601,  597,  598,  598,  594,  599,
      599,  602,  595,    0,  603,  600,  600,  600,  604,  601,

      601,  605,    0,    0,    0,  601,  602,  602,  602,  603,
      603,    0,  606,  604,  604,  606,  605,  605,  606,    0,
      606,    0,  604,    0,  609,  622,    0,  609,  603,    0,
      609,    0,  609,    0,  606,  608,  612,  612,  608,  612,
      622,  622,    0,  608,  608,  608,  609,  608,  612,  614,
      617,  617,  614,  617,    0,  614,  608,  614,  608,  608,
      615,  619,  617,  615,  619,  626,  615,  619,  615,  619,
      699,  614,  699,  699,  623,    0,  699,    0,  612,  612,
      626,  626,  615,  619,    0,  626,  608,  608,  611,  623,
      623,  611,  617,  617,    0,    0,  611,  611,  611,  620,

      611,  624,  620,  625,    0,  620,    0,  620,  623,  611,
      627,  611,  611,    0,  628,    0,  624,  624,  625,  625,
        0,  620,  629,    0,    0,  627,  627,  630,    0,  628,
      628,  627,  631,    0,  625,  628,  624,  629,  629,  611,
      611,  632,  630,  630,  633,    0,  635,  631,  631,    0,
      629,  634,  630,    0,    0,    0,  632,  632,  636,  633,
      633,  635,  635,    0,    0,  633,  634,  634,  631,  637,
      634,  638,    0,  636,  636,  639,    0,  640,  632,  636,
      641,    0,  635,    0,  637,  637,  638,  638,  642,    0,
      639,  639,  640,  640,  643,  641,  641,  644,  640,  637,

      645,    0,  646,  642,  642,  647,    0,    0,  648,  643,
      643,  639,  644,  644,  649,  645,  645,  646,  646,    0,
      647,  647,  644,  648,  648,  650,    0,    0,  651,  649,
      649,  652,  648,  653,    0,  649,  654,    0,  646,  655,
      650,  650,  650,  651,  651,  656,  652,  652,  653,  653,
      657,  654,  654,  658,  655,  655,  659,  654,  660,    0,
      656,  656,  661,    0,    0,  657,  657,  662,  658,  658,
        0,  659,  659,  660,  660,    0,    0,  661,  661,  660,
        0,  663,  662,  662,  663,    0,  657,  663,    0,  663,
      665,  665,  667,  665,  658,  667,  670,    0,  667,    0,

      667,  668,  665,  663,  668,  671,    0,  668,    0,  668,
      672,  670,  670,  670,  667,  673,    0,    0,    0,  674,
      671,  671,  671,  668,  675,  672,  672,  676,    0,    0,
      673,  673,  665,  665,  674,  674,    0,    0,  677,  675,
      675,  678,  676,  676,  674,  679,    0,  672,  680,    0,
      681,    0,  673,  677,  677,  682,  678,  678,  683,    0,
      679,  679,  684,  680,  680,  681,  681,  685,  678,    0,
      682,  682,  686,  683,  683,  681,  682,  684,  684,  683,
      687,  679,  685,  685,  680,  688,    0,  686,  686,  689,
        0,  690,    0,  686,  685,  687,  687,    0,    0,  691,

      688,  688,  692,    0,  689,  689,  690,  690,  695,  695,
        0,  695,  689,  688,  691,  691,  687,  692,  692,  693,
      695,    0,  693,    0,    0,  693,  690,  693,    0,  702,
        0,  697,    0,  692,  697,  691,    0,  697,    0,  697,
      698,  693,    0,  698,  702,  702,  698,    0,  698,  700,
      695,  695,  700,  697,  702,  700,    0,  700,  701,  703,
      701,  701,  698,  704,  701,  705,    0,  706,    0,  707,
      702,  700,  708,    0,  703,  703,  709,    0,  704,  704,
      705,  705,  706,  706,  707,  707,    0,  708,  708,  710,
        0,  709,  709,  711,    0,    0,  712,  706,  713,  705,

      714,    0,  704,  708,  710,  710,  715,    0,  711,  711,
      710,  712,  712,  713,  713,  714,  714,    0,  716,  713,
      717,  715,  715,    0,    0,  718,    0,  715,  719,    0,
      720,    0,  712,  716,  716,  717,  717,  721,    0,  716,
      718,  718,  722,  719,  719,  720,  720,  723,    0,  719,
      724,  720,  721,  721,    0,    0,  725,  722,  722,  726,
        0,    0,  723,  723,    0,  724,  724,  718,    0,  729,
      722,  725,  725,  727,  726,  726,  727,  730,    0,  727,
      728,  727,  728,  728,  729,  729,  728,  724,  731,    0,
        0,  732,  730,  730,    0,  727,  733,    0,    0,  734,

        0,    0,  735,  731,  731,  729,  732,  732,    0,  736,
      732,  733,  733,  730,  734,  734,  737,  735,  735,  738,
        0,  739,  731,  735,  736,  736,  733,  740,    0,  741,
        0,  737,  737,  742,  738,  738,  739,  739,  743,  738,
      744,    0,  740,  740,  741,  741,  737,  745,  742,  742,
      736,  746,    0,  743,  743,  744,  744,  747,  742,  741,
        0,    0,  745,  745,    0,    0,  746,  746,  748,    0,
        0,  748,  747,  747,  748,    0,  748,  749,  750,  749,
      749,  744,  745,  749,    0,  751,  746,  752,  747,  753,
      748,  754,    0,  750,  750,  755,    0,  756,    0,  750,

      751,  751,  752,  752,  753,  753,  754,  754,  757,    0,
      755,  755,  756,  756,  758,  751,  759,    0,    0,    0,
      760,  754,  761,  757,  757,  753,    0,  762,    0,  758,
      758,  759,  759,  763,  758,  760,  760,  761,  761,  764,
        0,  760,  762,  762,  765,    0,    0,    0,  763,  763,
        0,  766,    0,    0,  764,  764,  767,    0,    0,  765,
      765,    0,  762,  768,    0,  769,  766,  766,  770,  765,
        0,  767,  767,  767,  772,  764,  766,  771,  768,  768,
      769,  769,    0,  770,  770,  773,  771,  774,  769,  772,
      772,    0,  771,  771,  775,    0,  776,  772,  770,  768,

      773,  773,  774,  774,  777,    0,  774,  778,    0,  775,
      775,  776,  776,  779,    0,  780,    0,  781,    0,  777,
      777,  782,  778,  778,  775,  777,  783,    0,  779,  779,
      780,  780,  781,  781,    0,    0,  782,  782,  784,    0,
      779,  783,  783,  785,    0,  786,    0,  787,    0,  788,
      780,    0,  789,  784,  784,  790,  782,    0,  785,  785,
      786,  786,  787,  787,  788,  788,  786,  789,  789,  791,
      790,  790,  787,  792,    0,    0,    0,  793,    0,  794,
        0,  795,    0,    0,  791,  791,    0,  788,  792,  792,
      789,  790,  793,  793,  794,  794,  795,  795,  793,  796,

      791,    0,  794,  797,    0,  798,    0,  799,    0,  792,
      800,    0,    0,    0,  796,  796,  795,  801,  797,  797,
      798,  798,  799,  799,  802,  800,  800,    0,  799,  803,
        0,  800,  801,  801,  804,    0,  798,  805,  797,  802,
      802,  806,  801,    0,  803,  803,  807,    0,  808,  804,
      804,  809,  805,  805,  810,    0,  806,  806,  802,  811,
        0,  807,  807,  808,  808,  812,  809,  809,    0,  810,
      810,  806,    0,    0,  811,  811,    0,    0,    0,    0,
      812,  812,  809,    0,    0,    0,    0,    0,    0,  811,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  815,

      815,  815,  815,  815,  815,  815,  815,  815,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  818,  818,    0,    0,
      818,  819,  819,  819,  819,  819,  819,  820,  820,    0,
        0,  820,  821,  821,  821,  821,  821,  821,  822,  822,
        0,    0,  822,  823,  823,  823,  823,  823,  823,  824,
        0,    0,    0,  824,  824,  824,  824,  824,  825,  825,
        0,  825,  825,  825,  825,  825,  825,  826,    0,  826,
      826,    0,    0,  826,  826,  827,  827,  827,  827,  828,
      828,  828,  828,  829,  829,  829,  829,  830,  830,  830,

      830,  830,  830,  831,    0,    0,    0,  831,  831,  831,
      831,  831,  832,  832,  832,  832,  832,  832,  833,    0,
        0,    0,  833,  833,  833,  833,  833,  834,  834,  834,
      834,  834,  834,  835,    0,    0,    0,  835,  835,  835,
      835,  835,  836,    0,    0,    0,  836,  836,  836,  836,
      836,  837,    0,    0,  837,  837,  837,  837,  837,  837,
      838,    0,    0,    0,  838,  838,  838,  838,  838,  839,
        0,    0,    0,  839,  839,  839,  839,  839,  840,    0,
        0,  840,  840,  840,  840,  840,  840,  841,    0,    0,
        0,  841,  841,  841,  841,  841,  842,    0,    0,    0,

      842,  842,  842,  842,  842,  843,    0,    0,  843,  843,
      843,  843,  843,  843,  844,    0,    0,    0,  844,  844,
      844,  844,  844,  845,    0,    0,    0,  845,  845,  845,
      845,  845,  846,    0,    0,    0,  846,  846,  846,  846,
      846,  847,    0,    0,  847,  847,  847,  847,  847,  847,
      848,    0,    0,    0,  848,  848,  848,  848,  848,  849,
        0,    0,  849,  849,  849,  849,  849,  849,  850,    0,
        0,  850,  850,  850,  850,  850,  850,  851,    0,    0,
        0,  851,  851,  851,  851,  851,  852,    0,    0,  852,
      852,  852,  852,  852,  852,  853,    0,    0,  853,  853,

      853,  853,  853,  853,  854,    0,    0,    0,  854,  854,
      854,  854,  854,  855,    0,    0,  855,  855,  855,  855,
      855,  855,  856,    0,    0,  856,  856,  856,  856,  856,
      856,  857,    0,    0,  857,  857,  857,  857,  857,  857,
      858,    0,    0,  858,  858,  858,  858,  858,  858,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,

      813,  813,  813,  813,  813
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.flex"
#define INITIAL 0
/*
//	Lexical analyser
*/
#line 5 "lexer.flex"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "main.hh"
#include "userLevelRewritingContext.hh"

//	bison generated token file
#include "parser.cc.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

int braceCount;
int parenCount;
string latexCode;
#define ID_MODE 1

#define CMD_MODE 2

#define FILE_NAME_MODE 3

#define STRING_MODE 4

#define LATEX_MODE 5

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 60 "lexer.flex"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 814 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4450 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 64 "lexer.flex"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 68 "lexer.flex"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 74 "lexer.flex"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.flex"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 79 "lexer.flex"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 83 "lexer.flex"
RETURN(KW_FMOD)  // needed for FileTable
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 84 "lexer.flex"
RETURN(KW_MOD)   // needed for FileTable
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 85 "lexer.flex"
RETURN(KW_OMOD)   // needed for FileTable
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 86 "lexer.flex"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 87 "lexer.flex"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 88 "lexer.flex"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 89 "lexer.flex"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 90 "lexer.flex"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 91 "lexer.flex"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 92 "lexer.flex"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 93 "lexer.flex"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 94 "lexer.flex"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 95 "lexer.flex"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 96 "lexer.flex"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 97 "lexer.flex"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 98 "lexer.flex"
return KW_REWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 99 "lexer.flex"
return KW_EREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 100 "lexer.flex"
return KW_FREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 101 "lexer.flex"
return KW_OREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 102 "lexer.flex"
return KW_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 103 "lexer.flex"
return KW_CONTINUE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 104 "lexer.flex"
return KW_NARROW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 105 "lexer.flex"
return KW_MATCH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 106 "lexer.flex"
return KW_XMATCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 107 "lexer.flex"
return KW_SEARCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 108 "lexer.flex"
return KW_UNIFY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 109 "lexer.flex"
return KW_XUNIFY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 110 "lexer.flex"
return KW_SET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 111 "lexer.flex"
return KW_SHOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 112 "lexer.flex"
return KW_ON;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 113 "lexer.flex"
return KW_OFF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 114 "lexer.flex"
return KW_TRACE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 115 "lexer.flex"
return KW_ADVISE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 116 "lexer.flex"
return KW_VERBOSE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 117 "lexer.flex"
return KW_DO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 118 "lexer.flex"
return KW_CLEAR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 119 "lexer.flex"
return KW_CONTEXT;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 120 "lexer.flex"
return KW_WHOLE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 121 "lexer.flex"
return KW_SELECT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 122 "lexer.flex"
return KW_DESELECT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 123 "lexer.flex"
return KW_CONCEAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 124 "lexer.flex"
return KW_REVEAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 125 "lexer.flex"
return KW_CONDITION;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 126 "lexer.flex"
return KW_SUBSTITUTION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 127 "lexer.flex"
return KW_PRINT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 128 "lexer.flex"
return KW_COLOR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 129 "lexer.flex"
return KW_GRAPH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 130 "lexer.flex"
return KW_MIXFIX;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 131 "lexer.flex"
return KW_FLAT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 132 "lexer.flex"
return KW_WITH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 133 "lexer.flex"
return KW_PARENS;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 134 "lexer.flex"
return KW_ALIASES;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 135 "lexer.flex"
return KW_GC;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 136 "lexer.flex"
return KW_TIME;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 137 "lexer.flex"
return KW_STATS;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 138 "lexer.flex"
return KW_TIMING;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 139 "lexer.flex"
return KW_CMD;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 140 "lexer.flex"
return KW_ALL;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 141 "lexer.flex"
return KW_MODULE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 142 "lexer.flex"
return KW_SORTS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 143 "lexer.flex"
return KW_OPS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 144 "lexer.flex"
return KW_VARS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 145 "lexer.flex"
return KW_MBS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 146 "lexer.flex"
return KW_EQS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 147 "lexer.flex"
return KW_RLS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 148 "lexer.flex"
return KW_SUMMARY;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 149 "lexer.flex"
return KW_KINDS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 150 "lexer.flex"
return KW_COMPILE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 151 "lexer.flex"
return KW_COUNT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 152 "lexer.flex"
return KW_INCLUDE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 153 "lexer.flex"
return KW_EXCLUDE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 154 "lexer.flex"
return KW_DEBUG;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 155 "lexer.flex"
return KW_RESUME;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 156 "lexer.flex"
return KW_ABORT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 157 "lexer.flex"
return KW_STEP;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 158 "lexer.flex"
return KW_WHERE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 159 "lexer.flex"
return KW_DUMP;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 160 "lexer.flex"
return KW_BREAK;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 161 "lexer.flex"
return KW_BREAKDOWN;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 162 "lexer.flex"
return KW_PATH;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 163 "lexer.flex"
return KW_PROFILE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 164 "lexer.flex"
return KW_NUMBER;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 165 "lexer.flex"
return KW_RAT;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 166 "lexer.flex"
return *yytext;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 167 "lexer.flex"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 172 "lexer.flex"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 92:
YY_RULE_SETUP
#line 186 "lexer.flex"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 190 "lexer.flex"
RETURN(*yytext)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 191 "lexer.flex"
RETURN(NUMERIC_ID)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 192 "lexer.flex"
FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 96:
YY_RULE_SETUP
#line 200 "lexer.flex"
RETURN(KW_ASSOC)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 201 "lexer.flex"
RETURN(KW_COMM)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 202 "lexer.flex"
RETURN(KW_ID)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 203 "lexer.flex"
RETURN(KW_IDEM)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 204 "lexer.flex"
RETURN(KW_ITER)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 205 "lexer.flex"
RETURN(KW_LEFT)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 206 "lexer.flex"
RETURN(KW_RIGHT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 207 "lexer.flex"
RETURN(KW_PREC)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 208 "lexer.flex"
RETURN(KW_GATHER)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 209 "lexer.flex"
RETURN(KW_STRAT)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 210 "lexer.flex"
RETURN(KW_FROZEN)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 211 "lexer.flex"
RETURN(KW_CTOR)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 212 "lexer.flex"
RETURN(KW_LATEX)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 213 "lexer.flex"
RETURN(KW_SPECIAL)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 214 "lexer.flex"
RETURN(KW_CONFIG)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 215 "lexer.flex"
RETURN(KW_OBJ)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 216 "lexer.flex"
RETURN(KW_MSG)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 217 "lexer.flex"
RETURN(KW_DITTO)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 218 "lexer.flex"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 219 "lexer.flex"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 220 "lexer.flex"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 221 "lexer.flex"
RETURN(KW_IS)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 222 "lexer.flex"
RETURN(KW_IF)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 223 "lexer.flex"
RETURN(KW_IMPORT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 224 "lexer.flex"
RETURN(KW_SORT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 225 "lexer.flex"
RETURN(KW_SUBSORT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 226 "lexer.flex"
RETURN(KW_CLASS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 227 "lexer.flex"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 228 "lexer.flex"
RETURN(KW_OP)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 229 "lexer.flex"
RETURN(KW_OPS)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 230 "lexer.flex"
RETURN(KW_MSGS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 231 "lexer.flex"
RETURN(KW_VAR)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 232 "lexer.flex"
RETURN(KW_MB)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 233 "lexer.flex"
RETURN(KW_CMB)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 234 "lexer.flex"
RETURN(KW_EQ)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 235 "lexer.flex"
RETURN(KW_CEQ)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 236 "lexer.flex"
RETURN(KW_RL)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 237 "lexer.flex"
RETURN(KW_CRL)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 238 "lexer.flex"
RETURN(KW_ENDFM)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 239 "lexer.flex"
RETURN(KW_ENDM)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 240 "lexer.flex"
RETURN(KW_ENDOM)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 241 "lexer.flex"
RETURN(KW_ARROW)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 242 "lexer.flex"
RETURN(KW_ARROW2)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 243 "lexer.flex"
RETURN(KW_PARTIAL)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 244 "lexer.flex"
RETURN(*yytext)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 245 "lexer.flex"
FIX_UP(IDENTIFIER)
	YY_BREAK


case 142:
YY_RULE_SETUP
#line 249 "lexer.flex"
// eat white space
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 250 "lexer.flex"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 144:
YY_RULE_SETUP
#line 258 "lexer.flex"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 263 "lexer.flex"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 146:
YY_RULE_SETUP
#line 272 "lexer.flex"
latexCode += yytext;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 273 "lexer.flex"
{
					  if (braceCount == 0)
					    ++parenCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 278 "lexer.flex"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = latexCode.c_str();
						  return LATEX_STRING;
						}
					    }
					  latexCode += yytext;
					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 292 "lexer.flex"
{
					  ++braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 296 "lexer.flex"
{
					  --braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 300 "lexer.flex"
{
			                  ++lineNumber;					
					  latexCode += yytext;
					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 304 "lexer.flex"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 307 "lexer.flex"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 313 "lexer.flex"
;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 314 "lexer.flex"
++lineNumber;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 315 "lexer.flex"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 320 "lexer.flex"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 814 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 814 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 813);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 320 "lexer.flex"


#include "lexerAux.cc"
